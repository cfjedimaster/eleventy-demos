<h1>Post</h1>

<p>I was recently tech editing a future article for CFDJ when I came across the following set of code (which has been turned into pseudo-code for brevity's sake):</p>
<p>if not defined(&quot;server.foo&quot;)<br>
  lock:exclusive<br>
    create server.foo<br>
  end the lock<br>
end if<br></p>
<p>The idea was - if server.foo doesn't exist, create it, but wrap the creation inside an exclusive lock. However, this code has one problem. Can you see it? Imagine two threads, A and B, come into this page at the same time. They both hit the if not defined line at the same time. It's true for both, so both threads go to the next line. Thread B is ahead, so it gets the lock. It then creates the object and unlocks the code. Thread A then enters the lock as well and ALSO creates the object.</p>
<p>So what happaned? At the time when the threads checked for the object existence, it did not exist, but before the second thread could create it, another thread was ahead of it and made the object. So how would you change it?</p>
<p>if not defined(&quot;server.foo&quot;)<br>
  lock:exclusive<br>
    if still not defined,<br>
    create server.foo<br>
  end the lock<br>
end if<br></p>
<p>Don't forget that most of the time, users define persistant variables that act as constants, i.e., application.dsn = &quot;foo&quot;. In these cases, under MX only, locking is not needed at all.</p>
}