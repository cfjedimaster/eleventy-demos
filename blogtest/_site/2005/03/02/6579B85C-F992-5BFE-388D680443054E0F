<h1>Post</h1>

<p>So, I ran into an interesting issue today. We had some UDFs written in cfscript that used try/catch. The object defined in the cfcatch block was var scoped since... well... we always var scope, right? Consider this code block:</p>
<div class="code"><FONT COLOR=MAROON>&lt;cfscript&gt;</FONT><br>
function foo() {<br>
&nbsp;&nbsp;&nbsp;var myerror = <FONT COLOR=BLUE>""</FONT>;<br>
&nbsp;&nbsp;&nbsp;x = <FONT COLOR=BLUE>"apple"</FONT>;<br>
&nbsp;&nbsp;&nbsp;try {<br>
&nbsp;&nbsp;&nbsp;if(x+9) x = 1;<br>
&nbsp;&nbsp;&nbsp;} catch(ANY myerror) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeOutput(myerror.message & <FONT COLOR=BLUE>"<FONT COLOR=NAVY>&lt;p&gt;</FONT>"</FONT>);<br>
&nbsp;&nbsp;&nbsp;}<br>
}<br>
<FONT COLOR=MAROON>&lt;/cfscript&gt;</FONT><br>
<br>
<FONT COLOR=MAROON>&lt;cfoutput&gt;</FONT><br>
#foo()#<br>
<FONT COLOR=MAROON>&lt;/cfoutput&gt;</FONT></div> 
<p>Everything looks hunkey-dorey, right? However, running this will give you:  You have attempted to dereference a scalar variable of type class java.lang.String as a structure with members.</p>
<p>Turns out - the var scope of myerror seems to prevent it from being used in the cfcatch block. If you remove the var scope, not only does the code work right, it won't overwrite a variable called myerrors that may exist in the Varibles scope.</p>
}