<h1>Post</h1>

<p>This good question came in today:</p>
<blockquote>
On this page (<a href="http://www.macromedia.com/support/documentation/en/coldfusion/mx7/releasenotes.html#changes">link</a>) are the release notes for ColdFusion MX 7.  In there, there is a statement that says "CFCs can now return arrays of CFC instances." under the section of 'ColdFusion Components (CFCs)'.  Now how do I accomplish this?  Yes, I know I can create return array that contains an instance of cfc's in each index, but we could do that with MX 6.  So what is different about this in MX 7 and how do we invoke this feature?  And, can you think of any good situations where this can be used?
</blockquote>
<p>The note is a bit unclear. You have always been able to return an array of components, however, your return type had to be set to array (or any of course). However - you can now be more precise and set a return type of:</p>
<p>cfctype[]</p>
<p>So consider this example:</p>
<code>
&lt;cfcomponent&gt;
<pre><code>&amp;lt;cffunction name=&quot;test&quot; access=&quot;remote&quot; returntype=&quot;apple&quot;&amp;gt;
	&amp;lt;cfreturn createObject(&quot;component&quot;, &quot;apple&quot;)&amp;gt;
&amp;lt;/cffunction&amp;gt;

&amp;lt;cffunction name=&quot;testarray&quot; access=&quot;remote&quot; returntype=&quot;apple[]&quot;&amp;gt;
	&amp;lt;cfset var result = arrayNew(1)&amp;gt;
	&amp;lt;cfset result[1] = createObject(&quot;component&quot;, &quot;apple&quot;)&amp;gt;
	&amp;lt;cfset result[2] = createObject(&quot;component&quot;, &quot;apple&quot;)&amp;gt;
	&amp;lt;cfreturn result&amp;gt;
&amp;lt;/cffunction&amp;gt;
</code></pre>
<p>&lt;/cfcomponent&gt;
</code></p>
<p>The first method returns just one apple. The second method returns an array of apples. Unfortunately, you can't do this will built-in types. In other words, the following is <b>not</b> supported: returnType=&quot;numeric[]&quot;.</p>
<p>So why would you use it? I don't know. It's entirely up to your business logic. If it makes sense to return an array of components, then use it. I'd recommend using foo[] over array since foo[] is more specific.</p>
}