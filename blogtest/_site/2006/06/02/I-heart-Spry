<h1>Post</h1>

<p>I'm a bit late to the party, but I finally took some time to check out the <a href="http://labs.adobe.com/technologies/spry/">Spry framework</a>, Adobe's answer to the AJAX craze. I haven't been that impressed with AJAX. I mean, it's useful, yes. Very useful. But it's also kind of old and so it isn't really new to me. I've been thinking about learning a bit of AJAX for use in the back end of BlogCFC. I took some time early this morning to look at Spry.</p>
<p>Wow.</p>
<p>I mean, seriously, Adobe, could you make this a bit simpler? I think it was harder to put my shoes on this morning. Consider the following simple example (and this is <b>not</b> 100% complete, but it gives you an idea of how short the code is):</p>
<pre><code class="language-html">&lt;script type=&quot;text/javascript&quot; src=&quot;includes/xpath.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;includes/SpryData.js&quot;&gt;&lt;/script&gt;
&lt;!-- load the xml, notice the xpath support --&gt;
&lt;script type=&quot;text/javascript&quot;&gt; 
var dsHatches = new Spry.Data.XMLDataSet(&quot;dharma.xml&quot;, &quot;hatches/hatch&quot;);
&lt;/script&gt;

&lt;!-- now bind it to an html table --&gt;
&lt;div id=&quot;Hatches_DIV&quot; spryregion=&quot;dsHatches&quot;&gt;
&lt;!-- Display the data in a table --&gt; 
&lt;table&gt;
	&lt;tr&gt; 
		&lt;th&gt;Hatch&lt;/th&gt;
		&lt;th&gt;Icon&lt;/th&gt;
		&lt;th&gt;Active&lt;/th&gt;
	&lt;/tr&gt; 
	&lt;tr spryrepeat=&quot;dsHatches&quot;&gt;
		&lt;td&gt;{hatch}&lt;/td&gt;
		&lt;td&gt;&lt;img src=&quot;/images/dharma/{icon}&quot;&gt;&lt;/td&gt;
		&lt;td&gt;{active}&lt;/td&gt;
	&lt;/tr&gt; 
&lt;/table&gt;
&lt;/div&gt;
</code></pre>
<p>So the first line loads the data set from XML. It uses XPath to translate this into a data set. I can then bind it to a table by using the spryregion and spryrepeat tags. Notice the use of bound variables inside.</p>
<strike>
For a more complete demo, check out the Spry front end version of BlogCFC. Make sure you view source on that.
</strike> Sorry - old demo removed.
<p>I did run into one interesting problem. I knew that I needed XML, so I knew I couldn't just use my blog's main CFC. I wrote a new CFC that would handle the few methods I needed and return them as XML. (This was rather boring, but I did make two cool little functions you may like, arrayToXML and queryToXML. Both of these already exist on CFLib I think, but I wrote my own for the heck of it.)</p>
<p>I thought that was all I needed, but it wasn't loading. Then I tried making the same request Spry was, and I found out what it was. ColdFusion was wrapping my response in WDDX. So what could I do? (I wish CFC's had an option to NOT wrap the result in WDDX and just return it &quot;bare&quot;.) I wrote another file, this time a CFM. It simply acted as a proxy to call my other proxy CFC. It then returned the XML correctly.</p>
<p>I think I spent more time in ColdFusion then I did in JavaScript. That to me is a good thing. It means Adobe really did a darn good job with this framework. This is exactly the kind of thing I can see using in real world applications.</p>
<p>I definitely recommend my readers to take a few minutes and download the framework. I think you will find it worth your while.</p>
}