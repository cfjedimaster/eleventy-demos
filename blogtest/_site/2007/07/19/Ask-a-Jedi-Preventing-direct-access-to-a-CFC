<h1>Post</h1>

<p>Chad asks:</p>
<blockquote>
I am using a CFC
for an AJAX-based shopping cart and it works great.  But along comes a customer
who is behind a proxy.  The proxy is trying to request the CFC through a GET
request (instead of a POST).  Of course, when you try to access a CFC directly,
it redirects the browser to the ColdFusion Component Browser.  I have tried
everything I know to keep the proxy from trying to access this page directly,
but nothing seems to work.  Any suggestions?
</blockquote>
<p>For folks who don't get what Chad is talking about, ColdFusion has a feature where if you access a CFC in your browser, you get a nicely formatted HTML page that describes the CFC and what it can do. (If you authenticate first.) You only get this if you don't specify a specific method. While this is nice and all, it may not be what you desire. You may - for example, want to share the documentation for a CFC and have it be something you wrote yourself. This way folks don't need your CF Admin password.</p>
<p>So what's cool about this question is that there is a really simple, very trivial solution. <a href="http://www.markdrew.co.uk/blog/">Mark Drew</a> used this for his SnipEx code and it's just brilliant. I mean it's obvious - but it never occurred to me! Consider the simple CFC below:</p>
<code>
&lt;cfcomponent output="false"&gt;
<p>&lt;cffunction name=&quot;sayHi&quot; access=&quot;remote&quot; returnType=&quot;string&quot; output=&quot;false&quot;&gt;
&lt;cfargument name=&quot;name&quot; type=&quot;string&quot; required=&quot;false&quot; default=&quot;Nameless&quot;&gt;</p>
<pre><code>&amp;lt;cfreturn &quot;Hello, #arguments.name#&quot;&amp;gt;
</code></pre>
<p>&lt;/cffunction&gt;</p>
<p>&lt;/cfcomponent&gt;
</code></p>
<p>If you view this CFC in your browser and do not pass a method in the query string, you will get prompted to authenticate to your CF Admin and then you will get the nice documentation. But now look at this version:</p>
<code>
&lt;cfcomponent output="false"&gt;
<p>&lt;cfif not structKeyExists(url, &quot;method&quot;)&gt;
&lt;cfset url.method = &quot;sayHi&quot;&gt;
&lt;/cfif&gt;</p>
<p>&lt;cffunction name=&quot;sayHi&quot; access=&quot;remote&quot; returnType=&quot;string&quot; output=&quot;false&quot;&gt;
&lt;cfargument name=&quot;name&quot; type=&quot;string&quot; required=&quot;false&quot; default=&quot;Nameless&quot;&gt;</p>
<pre><code>&amp;lt;cfreturn &quot;Hello, #arguments.name#&quot;&amp;gt;
</code></pre>
<p>&lt;/cffunction&gt;</p>
<p>&lt;/cfcomponent&gt;
</code></p>
<p>All I've done here is add code to notice the lack of a method in the query string. If it is missing, a default method is specified. Simple, right? Of course this disables the &quot;auto-documentation&quot;, but it may be exactly what you want to do.</p>
}