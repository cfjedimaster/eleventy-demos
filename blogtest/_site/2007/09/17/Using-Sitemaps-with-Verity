<h1>Post</h1>

<p>Not many people know that ColdFusion ships with a HTTP spider that integrates with Verity. Unfortunately, this spider will only work with localhost as a server. This means if you want to spider multiple sites, you can't. Well, not without playing with your host headers. (More information on the Verity Spider and ColdFusion may be found <a href="http://livedocs.adobe.com/coldfusion/8/htmldocs/help.html?content=vspider_01.html">here</a>.)</p>
<p>What I worked on today was a way to work around this limitation. It turns out - if you have a sitemap, you already have a &quot;spider&quot; of your site. BlogCFC supports sitemaps out of the box, and I've <a href="http://www.raymondcamden.com/index.cfm/2006/11/16/Sitemap-Generator">blogged</a> in the past a simple UDF to generate sitemaps. Let's look at how we can convert a sitemap into Verity data.</p>
<!--more-->
<p>To begin with - let's take a look at some very simple sitemap data.</p>
<code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&gt;
&lt;url&gt;
&lt;loc&gt;http://www.foo.com/index.cfm&lt;/loc&gt;
&lt;/url&gt;
&lt;url&gt;
&lt;loc&gt;http://www.foo.com/index2.cfm&lt;/loc&gt;
&lt;/url&gt;
&lt;url&gt;
&lt;loc&gt;http://www.foo.com/index3.cfm&lt;/loc&gt;
&lt;/url&gt;
&lt;/urlset&gt;
</code>
<p>This sample is missing many of the features that you can include with a sitemap, but it gives you an idea of the structure. As you could guess - a sitemap contains a collection of URLs. So let's look at how we can parse this XML. (Note - I'll be using ColdFusion 8 code throughout this demonstration, but you can easily downgrade this to CF7, 6, or even 5.)</p>
<code>
&lt;!--- read in xml ---&gt;
&lt;cfset myxml = fileRead(expandPath("./sitemap.xml"))&gt;
&lt;!--- convert to xml ---&gt;
&lt;cfset myxml = xmlParse(myxml)&gt;
</code>
<p>The first thing I do is read in my sitemap and convert it to XML.</p>
<code>
&lt;!--- place to store data ---&gt;
&lt;cfset request.data = structNew()&gt;
</code>
<p>I'm going to be using threading, so I create a Request variable to store my information.</p>
<code>
&lt;!--- now loop through.... ---&gt;
&lt;cfloop index="x" from="1" to="#min(20,arrayLen(myxml.urlset.url))#"&gt;
<pre><code>&amp;lt;cfset tname = &quot;thread#x#&quot;&amp;gt;
&amp;lt;cfthread name=&quot;#tname#&quot; url=&quot;#myxml.urlset.url[x].loc.xmltext#&quot;&amp;gt;
	&amp;lt;cfhttp url=&quot;#attributes.url#&quot; result=&quot;result&quot;&amp;gt;
	&amp;lt;cfset request.data[attributes.url] = structNew()&amp;gt;
	&amp;lt;cfset request.data[attributes.url].title = getHTMLTitle(result.filecontent)&amp;gt;
	&amp;lt;cfset request.data[attributes.url].body = getHTMLBody(result.filecontent)&amp;gt;
	&amp;lt;!--- remove all html from body ---&amp;gt;
	&amp;lt;cfset request.data[attributes.url].body = rereplace(request.data[attributes.url].body, &quot;&amp;lt;.*?&amp;gt;&quot;, &quot;&quot;, &quot;all&quot;)&amp;gt;
	&amp;lt;cfset headers = getMetaHeaders(result.filecontent)&amp;gt;
	&amp;lt;cfset request.data[attributes.url].keywords = &quot;&quot;&amp;gt;
	&amp;lt;cfset request.data[attributes.url].description = &quot;&quot;&amp;gt;

	&amp;lt;cfset request.data[attributes.url].x = headers&amp;gt;
	
	&amp;lt;!--- find description and keywords ---&amp;gt;
	&amp;lt;cfloop index=&quot;x&quot; from=&quot;1&quot; to=&quot;#arrayLen(headers)#&quot;&amp;gt;
		&amp;lt;cfif structKeyExists(headers[x], &quot;name&quot;)&amp;gt;
			&amp;lt;cfif headers[x].name is &quot;description&quot;&amp;gt;
				&amp;lt;cfset request.data[attributes.url].description = headers[x].content&amp;gt;
			&amp;lt;cfelseif headers[x].name is &quot;keywords&quot;&amp;gt;
				&amp;lt;cfset request.data[attributes.url].keywords = headers[x].content&amp;gt;
			&amp;lt;/cfif&amp;gt;	
		&amp;lt;/cfif&amp;gt;
	&amp;lt;/cfloop&amp;gt;
&amp;lt;/cfthread&amp;gt;
</code></pre>
<p>&lt;/cfloop&gt;
</code></p>
<p>Ok, I have a lot going on here, so let me take it bit by bit. First off - I'm looping over the XML packet by treating the URL tag as an array. Note the use of &quot;min&quot;. I did this to simply make my testing run quicker. My current blog's site map is over 2k URLs. (The cool thing is that it only took ColdFusion about 9 minutes to process all 2000 when I tried it.) For each URL, I suck down the content with CFHTTP.</p>
<p>Now for the interesting part. I could simply provide the HTML to Verity. While this &quot;works&quot;, it doesn't provide as much information to Verity as I would like. Also - Verity doesn't &quot;get&quot; that is indexing HTML data. It thinks it is just working with simple strings. So in order to make things a bit nicer, I do some cleaning.</p>
<p>First off I use a few UDFs: getHTMLTitle, getHTMLBody, getMetaHeaders. The first and last are from CFLib and the middle one is a modified version of getHTMLTitle. These simply parse the HTML string for the title, body, and the meta tags. (I provide the full code at the end.)</p>
<p>I remove all HTML from the body. I then look at the meta tags and specifically try to find a description and keywords meta tag. All of this gets stored into the Request scope Data structure I created.</p>
<p>Now I need to tell ColdFusion to wait for the threads to end:</p>
<code>
&lt;!--- join the threads ---&gt;
&lt;cfthread action="join" name="#structKeyList(cfthread)#" /&gt;
</code>
<p>I then convert my structure into a query:</p>
<code>
&lt;!--- make a query for the data ---&gt;
&lt;cfset info = queryNew("url,body,title,keywords,description")&gt;
&lt;cfloop item="c" collection="#request.data#"&gt;
	&lt;cfset queryAddRow(info)&gt;
	&lt;cfset querySetCell(info, "url", c)&gt;
	&lt;cfset querySetCell(info, "body", request.data[c].body)&gt;
	&lt;cfset querySetCell(info, "title", request.data[c].title)&gt;
	&lt;cfset querySetCell(info, "keywords", request.data[c].keywords)&gt;
	&lt;cfset querySetCell(info, "description", request.data[c].description)&gt;
&lt;/cfloop&gt;
</code>
<p>There isn't anything too fancy there - I'm just copying from the structure into a new query.</p>
<p>Next I insert into the Verity collection:</p>
<code>
&lt;!--- insert data ---&gt;
&lt;cfindex collection="sitemaptest" action="refresh" query="info" title="title" key="url" body="body" urlpath="url" custom1="keywords" custom2="description" status="status"&gt;
</code>
<p>Note how I tell Verity what column means what. I stored the description and keywords into the custom columns.</p>
<p>That's it! To make sure things worked, I dumped some information at the end:</p>
<code>
&lt;cfoutput&gt;
&lt;p&gt;
Done indexing. Did #info.recordCount# rows. Took #totaltime# ms.
&lt;/p&gt;
&lt;/cfoutput&gt;
<p>&lt;cfdump var=&quot;#status#&quot;&gt;
</code></p>
<p>All in all this worked ok - but it has a few problems/places for improvement:</p>
<ul>
<li>First off - you can really tell that Verity wasn't 100% sure what to do with my data. That's why I removed the HTML. I could have considered taking the data I sucked down, saving it to an HTML file, and then running a file based index. While this would be slower, it could have resulted in better indexing.
<li>Second - my code, ignoring the Mind(), will suck down every URL and index it. As I mentioned, sitemaps can store more than just URLs. They can also store the last time they were modified. If I were reading my XML data once a day, then it would make sense to only suck down URLs that were modified today. This would <b>greatly</b> improve the speed of the indexing.
</ul>
<p>Here is the complete index file:</p>
<code>
&lt;cfsetting requesttimeout="600"&gt;
<p>&lt;cfset thetime = getTickCount()&gt;</p>
<p>&lt;cfscript&gt;
/**</p>
<ul>
<li>Parses an HTML page and returns the title.</li>
<li></li>
<li>@param str 	 The HTML string to check.</li>
<li>@return Returns a string.</li>
<li>@author Raymond Camden (ray@camdenfamily.com)</li>
<li>@version 1, December 3, 2001
<em>/
function GetHTMLTitle(str) {
var matchStruct = reFindNoCase(&quot;&lt;[[:space:]]<em>title[[:space:]]</em>&gt;([^&lt;]</em>)&lt;[[:space:]]<em>/title[[:space:]]</em>&gt;&quot;,str,1,1);
if(arrayLen(matchStruct.len) lt 2) return &quot;&quot;;
return Mid(str,matchStruct.pos[2],matchStruct.len[2]);	
}</li>
</ul>
<p>function GetHTMLBody(str) {
var matchStruct = reFindNoCase(&quot;&lt;.<em>?body.</em>?&gt;(.<em>?)&lt;[[:space:]]</em>/body[[:space:]]*&gt;&quot;,str,1,1);
if(arrayLen(matchStruct.len) lt 2) return &quot;&quot;;
return Mid(str,matchStruct.pos[2],matchStruct.len[2]);	
}</p>
<p>function GetMetaHeaders(str) {
var matchStruct = structNew();
var name = &quot;&quot;;
var content = &quot;&quot;;
var results = arrayNew(1);
var pos = 1;
var regex = &quot;&lt;meta[[:space:]]<em>(name|http-equiv)[[:space:]]</em>=[[:space:]]<em>(&quot;&quot;|')([^&quot;&quot;]</em>)(&quot;&quot;|')[[:space:]]<em>content=(&quot;&quot;|')([^&quot;&quot;]</em>)(&quot;&quot;|')[[:space:]]*/{0,1}&gt;&quot;;</p>
<pre><code>matchStruct = REFindNoCase(regex,str,pos,1);
while(matchStruct.pos[1]) {
	results[arrayLen(results)+1] = structNew();
	results[arrayLen(results)][ Mid(str,matchStruct.pos[2],matchStruct.len[2])] = Mid(str,matchStruct.pos[4],matchStruct.len[4]);
	results[arrayLen(results)].content = Mid(str,matchStruct.pos[7],matchStruct.len[7]);
	pos = matchStruct.pos[6] + matchStruct.len[6] + 1;
	matchStruct = REFindNoCase(regex,str,pos,1);
}
return results;
</code></pre>
<p>}
&lt;/cfscript&gt;</p>
<p>&lt;!--- create collection if needed ---&gt;
&lt;cfcollection action=&quot;list&quot; name=&quot;mycollections&quot;&gt;</p>
<p>&lt;cfif not listFindNoCase(valueList(mycollections.name), &quot;sitemaptest&quot;)&gt;
&lt;cfoutput&gt;&lt;p&gt;Creating collection.&lt;p&gt;&lt;/cfoutput&gt;
&lt;cfcollection action=&quot;create&quot; collection=&quot;sitemaptest&quot; path=&quot;#server.coldfusion.rootdir#/collections&quot;&gt;
&lt;/cfif&gt;</p>
<p>&lt;!--- read in xml ---&gt;
&lt;cfset myxml = fileRead(expandPath(&quot;./sitemap.xml&quot;))&gt;
&lt;!--- convert to xml ---&gt;
&lt;cfset myxml = xmlParse(myxml)&gt;
&lt;!--- place to store data ---&gt;
&lt;cfset request.data = structNew()&gt;</p>
<p>&lt;!--- now loop through.... ---&gt;
&lt;cfloop index=&quot;x&quot; from=&quot;1&quot; to=&quot;#min(20,arrayLen(myxml.urlset.url))#&quot;&gt;</p>
<pre><code>&amp;lt;cfset tname = &quot;thread#x#&quot;&amp;gt;
&amp;lt;cfthread name=&quot;#tname#&quot; url=&quot;#myxml.urlset.url[x].loc.xmltext#&quot;&amp;gt;
	&amp;lt;cfhttp url=&quot;#attributes.url#&quot; result=&quot;result&quot;&amp;gt;
	&amp;lt;cfset request.data[attributes.url] = structNew()&amp;gt;
	&amp;lt;cfset request.data[attributes.url].title = getHTMLTitle(result.filecontent)&amp;gt;
	&amp;lt;cfset request.data[attributes.url].body = getHTMLBody(result.filecontent)&amp;gt;
	&amp;lt;!--- remove all html from body ---&amp;gt;
	&amp;lt;cfset request.data[attributes.url].body = rereplace(request.data[attributes.url].body, &quot;&amp;lt;.*?&amp;gt;&quot;, &quot;&quot;, &quot;all&quot;)&amp;gt;
	&amp;lt;cfset headers = getMetaHeaders(result.filecontent)&amp;gt;
	&amp;lt;cfset request.data[attributes.url].keywords = &quot;&quot;&amp;gt;
	&amp;lt;cfset request.data[attributes.url].description = &quot;&quot;&amp;gt;

	&amp;lt;cfset request.data[attributes.url].x = headers&amp;gt;
	
	&amp;lt;!--- find description and keywords ---&amp;gt;
	&amp;lt;cfloop index=&quot;x&quot; from=&quot;1&quot; to=&quot;#arrayLen(headers)#&quot;&amp;gt;
		&amp;lt;cfif structKeyExists(headers[x], &quot;name&quot;)&amp;gt;
			&amp;lt;cfif headers[x].name is &quot;description&quot;&amp;gt;
				&amp;lt;cfset request.data[attributes.url].description = headers[x].content&amp;gt;
			&amp;lt;cfelseif headers[x].name is &quot;keywords&quot;&amp;gt;
				&amp;lt;cfset request.data[attributes.url].keywords = headers[x].content&amp;gt;
			&amp;lt;/cfif&amp;gt;	
		&amp;lt;/cfif&amp;gt;
	&amp;lt;/cfloop&amp;gt;
&amp;lt;/cfthread&amp;gt;
</code></pre>
<p>&lt;/cfloop&gt;</p>
<p>&lt;!--- join the threads ---&gt;
&lt;cfthread action=&quot;join&quot; name=&quot;#structKeyList(cfthread)#&quot; /&gt;</p>
<p>&lt;!--- make a query for the data ---&gt;
&lt;cfset info = queryNew(&quot;url,body,title,keywords,description&quot;)&gt;
&lt;cfloop item=&quot;c&quot; collection=&quot;#request.data#&quot;&gt;
&lt;cfset queryAddRow(info)&gt;
&lt;cfset querySetCell(info, &quot;url&quot;, c)&gt;
&lt;cfset querySetCell(info, &quot;body&quot;, request.data[c].body)&gt;
&lt;cfset querySetCell(info, &quot;title&quot;, request.data[c].title)&gt;
&lt;cfset querySetCell(info, &quot;keywords&quot;, request.data[c].keywords)&gt;
&lt;cfset querySetCell(info, &quot;description&quot;, request.data[c].description)&gt;
&lt;/cfloop&gt;</p>
<p>&lt;!--- insert data ---&gt;
&lt;cfindex collection=&quot;sitemaptest&quot; action=&quot;refresh&quot; query=&quot;info&quot; title=&quot;title&quot; key=&quot;url&quot; body=&quot;body&quot; urlpath=&quot;url&quot; custom1=&quot;keywords&quot; custom2=&quot;description&quot; status=&quot;status&quot;&gt;</p>
<p>&lt;cfset totaltime = getTickCount() - thetime&gt;</p>
<p>&lt;cfoutput&gt;
&lt;p&gt;
Done indexing. Did #info.recordCount# rows. Took #totaltime# ms.
&lt;/p&gt;
&lt;/cfoutput&gt;</p>
<p>&lt;cfdump var=&quot;#status#&quot;&gt;
</code></p>
}