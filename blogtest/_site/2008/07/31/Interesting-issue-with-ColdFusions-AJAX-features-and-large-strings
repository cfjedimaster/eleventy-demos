<h1>Post</h1>

<p>I was speaking with <a href="http://www.alagad.com">Doug Hughes</a> earlier today about an interesting issue he ran into. He had a cfdiv bound to a CFC method like so:</p>
<!--more-->
<code>
&lt;cfdiv bind="cfc:test.getdata()" /&gt;
</code>
<p>Nothing too complex here, just a simple bind. His CFC though returned a large string that just so happened to look like a number as well. Here is an example:</p>
<code>
&lt;cffunction name="getdata" access="remote" returnType="string"&gt;
	&lt;cfreturn "12345678980123456789801234567898012345"&gt;
&lt;/cffunction&gt;
</code>
<p>So far so good. But when he viewed the page, this is what he saw:</p>
<blockquote>
<p>
1.2345678980123456e+37
</p>
</blockquote>
<p>Something in the process was treating the result as a real number and turning it into exponential form. We dug a big and discovered the following tidbits:</p>
<ol>
<li>If you open up Firebug you will clearly see that the conversion to number happens server side. It's the JSON conversion. You can see a simpler example of this with this code:</li>
</ol>
<code>
&lt;cfset s = "12345678980123456789801234567898012345"&gt;
&lt;cfset encoded = serializeJSON(s)&gt;
&lt;cfoutput&gt;#encoded#&lt;/cfoutput&gt;
</code>
<p>Although this returns a slightly different result:</p>
<blockquote>
<p>
1.2345678980123456E37
</p>
</blockquote>
<p>So the thinking is that since CF is typeless, it's going to translate to JSON as best as it can. I tried to JavaCast thinking maybe I could force the issue, but no go.</p>
<ol start="2">
<li>The solution I proposed was to simply use another bind type:</li>
</ol>
<code>
&lt;cfdiv bind="url:test.cfc?method=getdata&returnformat=plain" /&gt;
</code>
<p>Note the use of URL to point to the CFC. I have to provide more information (method and a return format), but for me, this worked perfectly.</p>
<ol start="3">
<li>Unfortunately while this worked great for me, it didn't work for Doug. But personally I blame Doug. He has those shifty eyes ya know.</li>
</ol>
<p>Seriously though - I think if you do run into this issue, using the URL format (with the returnFormat) should help. Basically if you see a result that doesn't make sense, you want to look and see if the JSON conversion is to blame.</p>
}