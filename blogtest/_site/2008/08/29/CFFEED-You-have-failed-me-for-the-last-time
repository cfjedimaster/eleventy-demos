<h1>Post</h1>

<img src="https://static.raymondcamden.com/images/cfjedi/fail.gif" align="left" alt="This is your CFML. This is your CFML with cffeed." style="margin-right:10px;margin-bottom:10px">
Ugh. I give up. Today a customer of ours at <a href="http://www.broadchoice.com">Broadchoice</a> ran into a bug with an RSS feed. The feed was being generated by cffeed of course. What was interesting is that this was a whole new bug for me. Yes, another one. I swear I love ColdFusion. Really, I do. I just don't know why this one darn tag seems to trouble me so much. I swear this tag has a personal vendetta against me. So what went wrong this time?
<br clear="left">
<!--more-->
The error was thrown by CFFEED. It wasn't an error on display, like what I describe <a href="http://www.raymondcamden.com/index.cfm/2007/8/13/Bug-to-watch-out-for-with-CFFEED">here</a>. I carefully read over the content that was being used for the feed data and then I saw it. The mysterious box of doom I like to call it. The character that obviously was pasted from some Word document, or other source, that got fubared when rendered. 
<p>It took me a while, but I was able to narrow down the character (19) and expose the error a bit. To see this in action, I modified the code from the <a href="http://www.coldfusionjedi.com/index.cfm/2007/8/13/Bug-to-watch-out-for-with-CFFEED">blog entry</a> mentioned above.</p>
<code>
<p>&lt;cfset getEntries = queryNew(&quot;publisheddate,content,title&quot;)&gt;</p>
<p>&lt;cfset queryAddRow(getEntries)&gt;
&lt;cfset querySetCell(getEntries,&quot;title&quot;, &quot;LAST ENTRY&quot;)&gt;
&lt;cfset querySetCell(getEntries,&quot;content&quot;, &quot;&lt;b&gt;Test&lt;/b&gt;&quot;)&gt;
&lt;cfset querySetCell(getEntries,&quot;publisheddate&quot;, now())&gt;</p>
<p>&lt;cfset queryAddRow(getEntries)&gt;
&lt;cfset querySetCell(getEntries,&quot;title&quot;, &quot;LAST ENTRY2&quot;)&gt;
&lt;cfset querySetCell(getEntries,&quot;content&quot;, &quot;#chr(8220)#Test#chr(8220)# #chr(19)#&quot;)&gt;
&lt;cfset querySetCell(getEntries,&quot;publisheddate&quot;, now())&gt;</p>
<p>&lt;cfset props = {version=&quot;rss_2.0&quot;,title=&quot;Test Feed&quot;,link=&quot;http://127.0.0.1&quot;,description=&quot;Test&quot;}&gt;</p>
<p>&lt;cffeed action=&quot;create&quot; properties=&quot;#props#&quot; query=&quot;#getEntries#&quot; xmlVar=&quot;result&quot;&gt;</p>
<p>&lt;cfcontent type=&quot;text/xml&quot; reset=&quot;true&quot;&gt;&lt;cfoutput&gt;#result#&lt;/cfoutput&gt;
</code></p>
<p>Note the data in the second query row. I added the chr(19) to the end. Now unlike the problem in the other blog entry (which resulted in Firefox not showing the complete feed), this one threw a real exception:</p>
<blockquote>
<p>
The input values might be invalid. The reason for exception is : <br> The data "Test X" is not legal for a JDOM character content: 0x13 is not a legal XML character.
</p>
</blockquote>
<p>As just an FYI, the &quot;X&quot; above was the literal bad character. I replied it so as to not cause any possible problems in my own RSS feed here.</p>
<p>Great. Not a legal XML character. Hey, I bet xmlFormat() will fix it, right? Of course not. As I said in the beginning. Ugh.</p>
<p>So to fix it, I modified the UDF mentioned in the earlier blog entry to just replace chr(19) with nothing.</p>
<p>You know - I get that different encodings can impact whats valid in XML. But would it be that hard to ask cffeed to sniff the current settings and just remove what isn't valid? Especially since it will be (most likely) crap characters like funky quotes or the like? Seriously - am I the only one having so much trouble with cffeed?</p>
}