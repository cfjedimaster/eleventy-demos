<h1>Post</h1>

<p>Not sure if anyone will find this helpful, but here goes. A user reported some dissatisfaction with the search engine at <a href="http://www.cflib.org">CFLib</a>. Specifically a search for FOO GOO would result in an exact phrase match on foo goo. It would not match a UDF named MyFooMilkshakeBetterThanGoo.</p>
<p>This was because my search did the rather simple %SEARCH% style match (ie, match the search term exactly, case insensntive). Here is the original Transfer code I used for the search:</p>
<!--more-->
<code>
&lt;cfsavecontent variable="sql"&gt;
from udf.udf
where (udf.udf.name like :search
or udf.udf.shortdescription like :search
or udf.udf.description like :search)
and udf.udf.released = :active
order by udf.udf.name asc
&lt;/cfsavecontent&gt;
<p>&lt;cfset q = variables.transfer.createQuery(sql)&gt;
&lt;cfset q.setParam(&quot;search&quot;, &quot;%&quot; &amp; arguments.search &amp; &quot;%&quot;, &quot;string&quot;)&gt;
&lt;cfset q.setParam(&quot;active&quot;, true, &quot;boolean&quot;)&gt;
&lt;cfset q.setCacheEvaluation(true)&gt;
</code></p>
<p>Even if you don't know Transfer, this should be readable to you. I do a match on either name, shortdescription, or description. If you search for FOO, then basically it ends up being a search on %FOO%. Again though this kind of breaks down when you search for multiple words.</p>
<p>I wanted to keep things simple, so I decided that any multiword search would be an AND style search (ie, all the words must match), and I'd split on an empty space. I rewrote the TQL like so:</p>
<code>
&lt;cfsavecontent variable="sql"&gt;
from udf.udf
where (
	&lt;cfloop index="idx" from="1" to="#arrayLen(words)#"&gt;
	&lt;cfoutput&gt;
	(udf.udf.name like :word#idx#
	or udf.udf.shortdescription like :word#idx#
	or udf.udf.description like :word#idx#
	) &lt;cfif idx lt arrayLen(words)&gt;and&lt;/cfif&gt;
	&lt;/cfoutput&gt;
	&lt;/cfloop&gt;
)
and udf.udf.released = :active
order by udf.udf.name asc
&lt;/cfsavecontent&gt;
<p>&lt;cfset q = variables.transfer.createQuery(sql)&gt;
&lt;cfloop index=&quot;idx&quot; from=&quot;1&quot; to=&quot;#arrayLen(words)#&quot;&gt;
&lt;cfset q.setParam(&quot;word#idx#&quot;, &quot;%&quot; &amp; words[idx] &amp; &quot;%&quot;, &quot;string&quot;)&gt;
&lt;/cfloop&gt;
&lt;cfset q.setParam(&quot;active&quot;, true, &quot;boolean&quot;)&gt;
&lt;cfset q.setCacheEvaluation(true)&gt;
</code></p>
<p>First off, the variables words comes from this change in the function header:</p>
<code>
&lt;cfset var words = listToArray(arguments.search," ")&gt;
</code>
<p>So a search for FOO GOO results in words being equal to [&quot;FOO&quot;,&quot;GOO&quot;]. Notice then my loop over the array. I didn't use the new array style cfloop as I wanted a counter variable I could check to see if I needed an AND at the end of each block.</p>
<p>The next change was to have a dynamic set of setParams. This will replace word1, word2, etc, with the proper value from the array.</p>
<p>A good test for this is a search for &quot;host url&quot;. Before the change it returned nothing. Now it matches getCurrentURL, getHostFromURL, and getHostFromURLJava.</p>
}