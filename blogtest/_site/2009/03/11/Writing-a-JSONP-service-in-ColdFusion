<h1>Post</h1>

<p>Earlier this week I blogged on JSONP (<a href="http://www.developria.com/2009/03/what-in-the-heck-is-jsonp-and.html">What in the heck is JSONP and why would you use it?</a>). If that terms means nothing to you, be sure to read that article first. I thought it might be useful to talk about how you could write a ColdFusion API to support JSONP (as a producer I mean, for other people to use your API).</p>
<!--more-->
<p>As we know (or hopefully now!), ColdFusion 8 made it very easy to serve JSON via Ajax. Consider the following method:</p>
<code>
&lt;cffunction name="getPerson" access="public" returnType="struct" output="false"&gt;
	&lt;cfset var s = {}&gt;
	&lt;cfset s.name = "Raymond"&gt;
	&lt;cfset s.age = "35"&gt;
	&lt;cfset s.suaveness = randRange(50,150)&gt;
	&lt;cfreturn s&gt;
&lt;/cffunction&gt;
</code>
<p>If I wanted to expose that structure in JSON, all I'd need to do is change access to remote and specify JSON in the URL. I'd request it like so:</p>
<p>http://www.visitthewishlist.com/foo.cfc?method=getPerson&amp;returnFormat=json</p>
<p>The returnFormat there simply asks ColdFusion to convert the structure to JSON before sending it back to the client.</p>
<p>Ok, so what about JSONP? JSONP stands for JSON with Padding and that presents a problem to us. We can't just return a JSON string, we have to return a JSON string plus the padding, which is a function call. ColdFusion does support a &quot;Don't do squat with my result, just return it&quot; version - you just change returnFormat to plain. So given that, here is how I'd build support for JSONP:</p>
<code>
&lt;cfcomponent output="false"&gt;
<p>&lt;cffunction name=&quot;getPerson&quot; access=&quot;public&quot; returnType=&quot;struct&quot; output=&quot;false&quot;&gt;
&lt;cfset var s = {}&gt;
&lt;cfset s.name = &quot;Raymond&quot;&gt;
&lt;cfset s.age = &quot;35&quot;&gt;
&lt;cfset s.suaveness = randRange(50,150)&gt;
&lt;cfreturn s&gt;
&lt;/cffunction&gt;</p>
<p>&lt;cffunction name=&quot;remoteGetPerson&quot; access=&quot;remote&quot; returnType=&quot;any&quot; returnFormat=&quot;plain&quot; output=&quot;false&quot;&gt;
&lt;cfargument name=&quot;callback&quot; type=&quot;string&quot; required=&quot;false&quot;&gt;
&lt;cfset var data = getPerson()&gt;</p>
<pre><code>&amp;lt;!--- serialize ---&amp;gt;
&amp;lt;cfset data = serializeJSON(data)&amp;gt;

&amp;lt;!--- wrap ---&amp;gt;
&amp;lt;cfif structKeyExists(arguments, &quot;callback&quot;)&amp;gt;
	&amp;lt;cfset data = arguments.callback &amp; &quot;(&quot; &amp; data &amp; &quot;)&quot;&amp;gt;
&amp;lt;/cfif&amp;gt;

&amp;lt;cfreturn data&amp;gt;
</code></pre>
<p>&lt;/cffunction&gt;</p>
<p>&lt;/cfcomponent&gt;
</code></p>
<p>I've added a new method here, remoteGetPerson. Normally this would call an application scoped CFC, but in this case my method resides in the same file. I serialize the data and then - optionally - wrap it with the callback. Arguments.callback is expected to be a function named defined in your client side code.</p>
<p>Notice that I hard coded the returnFormat. In the past I've recommended against that. I've said that the caller should request a format and the CFC method should be neutral - but in this case we are specifically building in support for JSON or JSONP. I made the padding optional - well - for no good reason I guess. I noticed Yahoo supports JSONP in their requests, but allows the callback function to be optional. Since JSON is just string data, it will work fine with returnFormat=plain.</p>
<p>So to test this, I wrote the following incredibly interesting demo:</p>
<code>
&lt;html&gt;
<p>&lt;head&gt;
&lt;script src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;</p>
<p>function runTest() {
var surl = 'http://www.raymondcamden.com/demos/jsonp/test.cfc?method=remoteGetPerson&amp;callback=?'
$.getJSON(surl, function(data) {
var res = 'Name: '+data.NAME+'&lt;br/&gt;'
res += 'Age: '+data.AGE+'&lt;br/&gt;'
res += 'Suaveness: '+data.SUAVENESS
if(data.SUAVENESS &gt; 100) res+=' (Rico-worthy)'
res+='&lt;br/&gt;'
$(&quot;#result&quot;).html(res)
})
}</p>
<p>$(document).ready(function() {
$(&quot;#testBtn&quot;).click(runTest)
});</p>
<p>&lt;/script&gt;
&lt;/head&gt;</p>
<p>&lt;body&gt;
&lt;input type=&quot;button&quot; value=&quot;Test&quot; id=&quot;testBtn&quot;&gt;
&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></p>
<p>This is a simpler version of what I wrote for InsideRIA. I've added a simple button that, when clicked, runs a call to my CFC method. Now obviously this is in the same domain so JSONP is overkill, but in theory, folks could download the code (fix the jQuery reference - yes - I know I need to switch to Google CDN!) and still be able to run it.</p>
<p>Two quick notes:</p>
<ol>
<li>
<p>I used jQuery in the example above, but you could use any other framework of your choosing. As long as you use jQuery. Kidding. (Not really.)</p>
</li>
<li>
<p>Using Firebug to test? (Of course you are!) I was surprised to find that these Ajax requests do not show up under XHR. I had forgotten that JSONP works by injecting script blocks into your page. Just switch to Net/All or Net/HTML and you can see the requests.</p>
</li>
</ol>
}