<h1>Post</h1>

<p>So this is something I've blogged about before, but as it recently burned a friend of mine, and got some pushback from folks on Twitter, I thought I'd raise the issue again.</p>
<p>When working with ColdFusion, any complex data type (structs, CFCs, queries, COM/JavaObjects, did I miss one?) will be passed by reference, not by value.</p>
<p>For those of you who took English Lit 1 instead of Comp Sci 101, all this means is that these variables are not copied when sent to a function. In other words, when I do:</p>
<code>
&lt;cfset newThing = changeIt(oldThing)&gt;
</code>
<p>Under normal circumstances, if changeIt manipulates values in oldThing and does a return on it, my newThing will have the manipulated values and oldThing will be just fine.</p>
<p>But with complex data, like structures, you are actually passing the exact same object (a reference). That means any changes inside the UDF will be reflected on the original object.</p>
<p>As an example:</p>
<code>
&lt;cfscript&gt;
function fubar(data) {
	arguments.data.name = "Britney";
	return arguments.data;
}
&lt;/cfscript&gt;
<p>&lt;cfset s = {}&gt;
&lt;cfset s.name = &quot;Paris&quot;&gt;
&lt;cfset s2 = fubar(s)&gt;
&lt;cfdump var=&quot;#s#&quot; label=&quot;S&quot;&gt;
&lt;cfdump var=&quot;#s2#&quot; label=&quot;S2&quot;&gt;
</code></p>
<p>I've created a simple structure with one key. I've created a UDF that changes the value and returns a 'new' struct (right?). But look at what the dumps show:</p>
<img src="https://static.raymondcamden.com/images//Picture 410.png">
<p>Fail! Luckily enough it is easy to fix:</p>
<code>
&lt;cfset s2 = fubar(duplicate(s))&gt;
</code>
<p>The duplicate function will create a deep copy of the structure before sending it to the UDF.</p>
<p>Now, here is where things get interesting. Did you notice I didn't mention arrays in my list of complex objects? Well, they are indeed copied by value, not by reference, but, if you include a structure as part of the array, the structure portion will be copied by reference. Check this out:</p>
<code>
&lt;cfscript&gt;
function fubar2(data) {
	arguments.data[1] = 9;
	arguments.data[2].gender = "female";
	arguments.data[3] = "Not so goofy";
	return arguments.data;
}
&lt;/cfscript&gt;
<p>&lt;cfset a = []&gt;
&lt;cfset a[1] = &quot;42&quot;&gt;
&lt;cfset a[2] = {}&gt;
&lt;cfset a[2].gender = &quot;male&quot;&gt;
&lt;cfset a[3] = &quot;Goofy&quot;&gt;
&lt;cfset b = fubar2(a)&gt;
&lt;cfdump var=&quot;#a#&quot; label=&quot;A&quot;&gt;
&lt;cfdump var=&quot;#b#&quot; label=&quot;B&quot;&gt;
</code></p>
<p>I've got an array with 3 values. Values 1 and 3 are strings, value 2 is a structure. My new UDF, fubar2, changes all 3 values. And the result?</p>
<img src="https://static.raymondcamden.com/images/cfjedi//Picture 53.png">
<p>As you can see, the simple values weren't changed in the original, but the embedded structure was. As before, using a duplicate around 'a' would solve the problem.</p>
<p>But is it a problem? Well certainly if you aren't expecting it, but the fact that structs and other complex objects pass by reference isn't &quot;wrong&quot; per se, and it can be useful as well. Just don't forget it.</p>
}