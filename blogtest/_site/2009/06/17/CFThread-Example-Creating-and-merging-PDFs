<h1>Post</h1>

<p>Josh K. sent in an interesting problem today. He was generating 10 PDFs in a request, all running via cfthread, and he was trying to create one main PDF by merging the 10 he created. This turned out to be a bit difficult at first, but here is the code I ended up with that worked. Let's break it down line by line.</p>
<!--more-->
<p>First, let's create a list to store the names of our threads. Because our final goal is to merge the PDFs, we know that at some point we have to <b>join</b> the threads. To join threads, you have to know their names. So our list variable will remember each thread name.</p>
<code>
&lt;cfset threadList = ""&gt;
</code>
<p>Now let's loop. I set my loop to 5 instead of 10 just to make things a bit quicker:</p>
<code>
&lt;!--- loop pages and create cfdocuments ---&gt;
&lt;cfloop index="x" from="1" to="5"&gt;
	&lt;cfset name = "thread_number_#x#"&gt;
	&lt;cfset threadList = listAppend(threadList,name)&gt;
</code>
<p>For each loop iteration, we create a name for the thread and append it to the list. Now for the actual thread.</p>
<code>
	&lt;cfthread name="#name#"&gt;
<pre><code>	&amp;lt;cfdocument name=&quot;thread.pdf&quot; format=&quot;pdf&quot;&amp;gt;
			
	&amp;lt;!--- output data ---&amp;gt;
	&amp;lt;cfoutput&amp;gt;#randRange(1,10000)#pdf data boo yah #thread.name#&amp;lt;/cfoutput&amp;gt;		
	
	&amp;lt;/cfdocument&amp;gt;

&amp;lt;/cfthread&amp;gt;
</code></pre>
</code>
<p>You can see our dynamic thread name being used there. The cfdocument tag creates the PDF and stores it in a variable called thread.pdf. Normally variables you create in a thread exist in a local scope not available outside the thread. The Thread scope doesn't have this problem. Later on when I join my threads I can reuse this data. By naming my PDF variable thread.pdf, I'm simply storing the data in the thread scope ColdFusion created for me.</p>
<p>Now for the next block:</p>
<code>
&lt;/cfloop&gt;
</code>
<p>Yeah, that ends the loop. Real complex block. ;)</p>
<p>Ok, so now that we've created our threads that generate PDFs, we have to wait for them to complete:</p>
<code>
&lt;cfthread action="join" name="#threadlist#" /&gt;
</code>
<p>That's it. Nice and simple. While my 5 threads operate in parallel, this tag will force ColdFusion to wait for them to finish. Now for the merge:</p>
<code>
&lt;cfpdf action="merge" name="final"&gt;
	&lt;cfloop list="#threadlist#" index="i"&gt;
		&lt;cfset tempCopy = cfthread[i].pdf&gt;
		&lt;cfpdfparam source="tempCopy"&gt;
	&lt;/cfloop&gt;
&lt;/cfpdf&gt;
&lt;cfheader name="Content-Disposition" value="inline; filename=test.pdf"&gt;		
&lt;cfcontent type="application/pdf" variable="#tobinary(final)#" reset="No" &gt;
</code>
<p>I begin with a cfpdf tag, merge action. This will perform the actual merge. The tag allows you to use the child tag, cfpdfparam, to specify PDFs to merge. You can use either a file path or the <i>name</i> of a PDF variable. I tried specifiying source=&quot;cfthread[i].pdf&quot;, but this confused the tag. It thought it was a file path. The tempCopy variable simply copies out the data and makes cfpdfparam nice and happy. (Let me state - I really dislike it when ColdFusion uses the names of variables as arguments. cfoutput query=&quot;name&quot; is a good example of this. I really wish it would allow for cfoutput query=&quot;#qry#&quot;. This is a perfect example. Adobe had to build code to say - is this string a path or a variable? It would have been far easier to say, if a string, assume a path, otherwise assume it's binary data.)</p>
<p>One done with the merge, a quick cfheader/cfcontent combo will actually serve the PDF up to the user.</p>
<p>As always, hope this is helpful! Complete source code is below.</p>
<code>
<p>&lt;cfset threadList = &quot;&quot;&gt;</p>
<p>&lt;!--- loop pages and create cfdocuments ---&gt;
&lt;cfloop index=&quot;x&quot; from=&quot;1&quot; to=&quot;5&quot;&gt;
&lt;cfset name = &quot;thread_number_#x#&quot;&gt;
&lt;cfset threadList = listAppend(threadList,name)&gt;
&lt;cfthread name=&quot;#name#&quot; &gt;</p>
<pre><code>	&amp;lt;cfdocument name=&quot;thread.pdf&quot; format=&quot;pdf&quot;&amp;gt;
			
	&amp;lt;!--- output data ---&amp;gt;
	&amp;lt;cfoutput&amp;gt;#randRange(1,10000)#pdf data boo yah #thread.name#&amp;lt;/cfoutput&amp;gt;		
	
	&amp;lt;/cfdocument&amp;gt;

&amp;lt;/cfthread&amp;gt;
</code></pre>
<p>&lt;/cfloop&gt;</p>
<p>&lt;cfthread action=&quot;join&quot; name=&quot;#threadlist#&quot; /&gt;</p>
<p>&lt;cfpdf action=&quot;merge&quot; name=&quot;final&quot;&gt;
&lt;cfloop list=&quot;#threadlist#&quot; index=&quot;i&quot;&gt;
&lt;cfset tempCopy = cfthread[i].pdf&gt;
&lt;cfpdfparam source=&quot;tempCopy&quot;&gt;
&lt;/cfloop&gt;
&lt;/cfpdf&gt;
&lt;cfheader name=&quot;Content-Disposition&quot; value=&quot;inline; filename=test.pdf&quot;&gt;		
&lt;cfcontent type=&quot;application/pdf&quot; variable=&quot;#tobinary(final)#&quot; reset=&quot;No&quot;&gt;
</code></p>
}