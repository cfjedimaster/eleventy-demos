<h1>Post</h1>

<p>Gary asked me an interesting question relating to AIR applications. He wanted to know if there was a way for an AIR application to know the username of the current user. I would have guessed that this would be part of the AIR API, but after a bit of searching and asking around, it turns out that this is not the case.</p>
<p>While there isn't a direct API, there is a nice workaround that I found on Stack Overflow (<a href="http://stackoverflow.com/questions/1376/get-the-current-logged-in-os-user-in-adobe-air">Get the current logged in OS user in Adobe Air</a>). The solution simply assumes that all users have a base directory that includes their username. On my Mac, it is &quot;/Users/ray&quot;. On my Windows box (yes, I'm ashamed, I still keep one around), the directory is &quot;c:\documents and settings\administrator&quot;. So this technique seems like a good one. You could certainly use it to <i>suggest</i> the current username. Here is a simple demo that Gary cooked up using this technique:</p>
<code>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" horizontalAlign="center" verticalAlign="middle"&gt;
<p>&lt;mx:Script&gt;
&lt;![CDATA[</p>
<p>public function currentOSUser():String {
var userDir:String = File.userDirectory.nativePath;
var userName:String = userDir.substr(userDir.lastIndexOf(File.separator) + 1);
return userName;
}</p>
<p>]]&gt;
&lt;/mx:Script&gt;</p>
<p>&lt;mx:Text text=&quot;{currentOSUser()}&quot; fontSize=&quot;75&quot; horizontalCenter=&quot;true&quot;/&gt;
&lt;mx:Text text=&quot;is a winner!&quot; fontSize=&quot;20&quot; /&gt;</p>
<p>&lt;/mx:WindowedApplication&gt;
</code></p>
<p>I modified it a bit just to simplify things. Running it on my Mac I see:
<img src="https://static.raymondcamden.com/images//Picture 167.png"></p>
<p>On my PC (oh, and I loved how the AIR installer noticed my PC was a bit behind on the AIR SDK and updated itself) it displayed:</p>
<img src="https://static.raymondcamden.com/images/cfjedi//Picture 243.png">
<p>Ok, one last tip. Gary was trying to use binding with this method and had trouble getting it working. Let's look at what he did.</p>
<code>
public function currentOSUser():String { 
var userDir:String = File.userDirectory.nativePath; 
var userName:String = userDir.substr(userDir.lastIndexOf(File.separator) + 1); 
return userName; 
}
<p>protected function list_creationCompleteHandler(event:FlexEvent):void {
getMyUnitResult.token = Widget.getMyUnit(&quot;{currentOSUser()}&quot;);
}
</code></p>
<p>This didn't work for him. Notice the binding inside the function? That's simply not a place where you can use binding. In this case the solution was simpler code:</p>
<code>
getMyUnitResult.token = Widget.gyMyUnit(currentOSUser())
</code>
<p>My understanding is that you can only use bindings in the attributes of components. However, don't take my word for it. I found a nice article at Adobe specifically on binding: <a href="http://www.adobe.com/devnet/flex/quickstart/using_data_binding/">Using data binding</a></p>
<p>Hope this helps!</p>
}