<h1>Post</h1>

<p>Yaron asks:</p>
<blockquote>
<p>
I'd like to know what your preference is for using cfajaxproxy.
In JavaScript, do you create one global proxy object and reuse it throughout your script? Or do you create a new proxy object within every function that generates a proxy call?
</p>
<p>
The reason I'm asking is I had multiple concurrent proxy calls that had their callback functions mixed up. Meaning, one functions makes 2 async calls with two separately defined callback functions. Unfortunately, one callback function received the input from another. Weird.
</p>
</blockquote>
<p>Ah, asynchronous network calls. Life would be a heck of a lot easier if everything was synchronous. Let's dig a bit into what Yaron found in case it doesn't make sense.</p>
<!--more-->
<p>First, consider the following CFC that we will use for our Ajax calls:</p>
<code>
&lt;cfcomponent output="false" extends="base"&gt;
<p>&lt;cffunction name=&quot;goSlow&quot; access=&quot;remote&quot; returnType=&quot;string&quot;&gt;
&lt;cfargument name=&quot;name&quot; type=&quot;string&quot; required=&quot;true&quot;&gt;
&lt;cfset sleep(300 * randRange(1,4))&gt;
&lt;cfif arguments.name is &quot;foo&quot;&gt;
&lt;cfset sleep(200 * randRange(1,4))&gt;
&lt;/cfif&gt;
&lt;cfreturn &quot;Returned from call #arguments.name#&quot;&gt;
&lt;/cffunction&gt;</p>
<p>&lt;/cfcomponent&gt;
</code></p>
<p>It has one method, goSlow, that runs a randomly slow sleep call, and makes it even longer if foo is passed as an argument. It then returns the argument passed to it.</p>
<p>The front end code for testing will be:</p>
<code>
&lt;cfajaxproxy cfc="test" jsclassname="testProxy"&gt;
&lt;script&gt;
var foo = new testProxy()
var goo = new testProxy()
<p>function handleResult(r) {
console.log(r)
}</p>
<p>foo.setCallbackHandler(handleResult)
goo.setCallbackHandler(handleResult)</p>
<p>function runTest() {
console.log(&quot;Running test....&quot;)
foo.goSlow('foo')
goo.goSlow('goo')
console.log('Done with tests')
}
&lt;/script&gt;</p>
<p>&lt;input type=&quot;button&quot; onClick=&quot;runTest()&quot; value=&quot;Test&quot;&gt;
</code></p>
<p>This page makes use of cfajaxproxy to create a proxy calls called testProxy. I created two instances of it and assigned the same callback handler. The callback handler gets the result, but really has <b>no idea who calls it</b>. This is critical. Unless you set up some mechanism to pass in a 'caller' value, then you can't tell what you are responding too. Not only can't we tell which instance of testProxy was used, we can't even tell what method was called.</p>
<p>So given that - what are some good ways to handle it? You could create a different call back handler for each instance. You can even do this inline:</p>
<code>
foo.setCallbackHandler(handleResult)
goo.setCallbackHandler(function(r) { console.log('special '+r)})
</code>
<p>This kinda surprised me. I mean I know that this type of function (an anonymous function) isn't jQuery only, but I didn't start using it till I got big into jQuery. Still though, if you want to run N different methods on the proxy CFC, do you really want N different instances?</p>
<p>My guess is probably yes. Given that you may have one main &quot;service&quot; CFC to handle your Ajax calls, you could create different instances for different areas of concern. So for example:</p>
<code>
var userProxy = new testProxy()
var pageProxy = new testProxy()
var cowbellProxy = new testProxy()
</code>
<p>Each proxy in the above code sample will worry about different aspects of remote CFC service.</p>
<p>Can anyone else offer some advice here?</p>
}