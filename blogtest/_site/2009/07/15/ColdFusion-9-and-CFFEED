<h1>Post</h1>

<p>I've complained (quite a bit) about some of the warts around the CFFEED tag. Looks like my complaining may have helped a bit. ColdFusion 9 adds a new feature to CFFEED that I think is pretty darn nice.</p>
<p>Previously, if you tried to create a feed and it contained &quot;bad&quot; characters (Microsoft Smart Quotes, etc), then you ended up with invalid XML. Here is a simple example.</p>
<!--more-->
<p>First, I'll create a feed with one entry. The entry content is contained in a file called bad.txt:</p>
<img src="https://static.raymondcamden.com/images//Picture 174.png">
<p>Here is the code I used to include and create a feed from the text file.</p>
<code>
<p>&lt;cfscript&gt;
// Create the feed data structure and add the metadata.
myStruct = {};
mystruct.link = &quot;http://www.coldfusionjedi.com&quot;;
myStruct.title = &quot;My Blog&quot;;
mystruct.description = &quot;It wears sunglasses at night&quot;;
mystruct.pubDate = Now();
mystruct.version = &quot;rss_2.0&quot;;</p>
<p>/* Add the feed items. A more sophisticated application would use dynamic variables
and support varying numbers of items. */
myStruct.item =[];
myStruct.item[1] = {};
myStruct.item[1].description = {};
myStruct.item[1].description.value = fileRead(expandPath(&quot;../bad.txt&quot;));
myStruct.item[1].link = &quot;http://www.cnn.com&quot;;</p>
<p>myStruct.item[1].pubDate = Now();
myStruct.item[1].title = &quot;Title&quot;;</p>
<p>&lt;/cfscript&gt;</p>
<p>&lt;cffeed action = &quot;create&quot;
name = &quot;#myStruct#&quot;
escapechars=&quot;false&quot;
xmlVar = &quot;myXML&quot;&gt;</p>
<p>&lt;cfoutput&gt;
#htmlCodeFormat(myXML)#
&lt;/cfoutput&gt;
</code></p>
<p>This is standard CFFEED stuff, so I won't describe each line. I don't normally make feeds this way though - normally I create it from a query. Note that I've included escapechars, and set it to false, which makes it match ColdFusion 8 behavior. The result is a bit funky:</p>
<img src="https://static.raymondcamden.com/images/cfjedi//Picture 247.png">
<p>Switching escapechars to true though results in:</p>
<img src="https://static.raymondcamden.com/images/cfjedi//Picture 332.png">
<p>Nice. There are other ways to handle this but this is certainly a bit simpler.</p>
<p>There is another new ColdFusion 9 that indirectly helps CFFEED as well. One of the things I do at <a href="http://www.coldfusionbloggers.org">ColdFusionBloggers</a> is called a <a href="http://www.coldfusionjedi.com/index.cfm/2007/10/15/Doing-HTTP-Conditional-Gets-in-ColdFusion">HTTP Conditional Get</a>. This is basically a 'smart' HTTP call in that I can say: &quot;Hey URL, I last hit you at 5PM, if you haven't updated, send me a nice short message, otherwise send me all your data.&quot; This helps streamline some of the network traffic I incur when fetching 500+ RSS feeds. However, there is a problem. If the data is new, and I get the RSS XML back, I have it in a variable. CFFEED only supports parsing URLs and files, it doesn't support parsing a string. This is a bit silly, but, it is what it is.</p>
<p>However - in ColdFusion 9 we now have a RAM based file system called the VFS (Virtual File System). I can use this as a temporary storage for the XML, and point CFFEED at it. Here is a trivial example:</p>
<code>
&lt;cfset source = "http://feedproxy.google.com/RaymondCamdensColdfusionBlog"&gt;
&lt;cfhttp url="#source#"&gt;
&lt;cfset randFileName = "ram:///#createUUID()#.txt"&gt;
&lt;cfset fileWrite(randFileName, cfhttp.filecontent)&gt;
<p>&lt;cffeed action=&quot;read&quot; source=&quot;#randFileName#&quot; query=&quot;feed&quot;&gt;
&lt;cfdump var=&quot;#feed#&quot; top=&quot;1&quot;&gt;</p>
<p>&lt;cfset fileDelete(randFileName)&gt;
</code></p>
<p>I begin by grabbing my RSS feed. I want to save it to the VFS and so I just pick a random file for the name. I then point CFFEED at it and convert the RSS into a query. At the end, I clean it up by deleting the file.</p>
}