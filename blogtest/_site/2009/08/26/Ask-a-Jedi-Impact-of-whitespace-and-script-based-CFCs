<h1>Post</h1>

<p>Henry asks:</p>
<blockquote>
Does CF9 script style CFC still needs to set attribute output=false for component and function?
</blockquote>
<p>In my - admittedly - very limited testing, the answer appears to be no. I created a component with a large amount of white space in both the function and around it as well:</p>
<!--more-->
<code>
component {
<p>public string function sayHello() {</p>
<pre><code>return &quot;Hello World!&quot;;
</code></pre>
<p>}</p>
<p>}
</code></p>
<p>I duplicated this component but added output=&quot;false&quot; to both the component and method:</p>
<code>
component output="false" {
<p>public string function sayHello() output=&quot;false&quot; {</p>
<pre><code>return &quot;Hello World!&quot;;
</code></pre>
<p>}</p>
<p>}
</code></p>
<p>To test then I created an instance of both and wrapped the sayHello call:</p>
<code>
&lt;cfset badWS = new testws()&gt;
&lt;cfset goodWS = new testws2()&gt;
<p>&lt;cfoutput&gt;
Testing bad: -#badWS.sayHello()#-&lt;br/&gt;
Testing good: -#goodWS.sayHello()#-&lt;br/&gt;
&lt;/cfoutput&gt;
</code></p>
<p>The result was the exact same. No additional white space from the creation of the CFC or the call either. I even tested making an instance of the first CFC with createObject, just to see if it made a difference, and it did not. Of course, it isn't like the output=&quot;false&quot; argument is ignored. If you write a CFC method that outputs <i>directly</i> to the screen, then it does matter. Consider:</p>
<code>
public function sayHello2() { writeOutput("hello2!"); }
</code>
<p>That function will work just fine, but if you modify it a bit...</p>
<code>
public function sayHello2() output="false" { writeOutput("hello2!"); }
</code>
<p>Now you have a useless function. The output=&quot;false&quot; will suppress the writeOutput&gt;</p>
}