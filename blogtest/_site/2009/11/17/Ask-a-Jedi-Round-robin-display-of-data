<h1>Post</h1>

<p>This came in via my <a href="http://www.raymondcamden.com/forums/messages.cfm?threadid=1EA81628-D633-6389-8B472523F011A2DD&page=1">forums</a> today and I thought it was too interesting to not blog about. If you read his post, you can see he needs to support rotating data such that A B C changes to B A C. However, he also has groupings within his data. So imagine now you have ABC in the first group and DE in the second. Your rotation now needs to be &quot;in&quot; group, so on your first iteration you have: A B C D E. On your second you rotate each group to end with: B C A E D. I whipped up the following solution and I'd love to see alternatives.</p>
<!--more-->
<p>I began by creating a data structure. SuperAlly mentioned a query but for now I assume the query data is converted into a 2D array.</p>
<code>
&lt;cfset data = [ 
	["a", "b", "c"],
	["d", "e"]
	]&gt;
</code>
<p>Next I whipped up a quick UDF that would display this data. It assumes you pass in a 2D array and simply loops through each element:</p>
<code>
&lt;cfscript&gt;
function render(arr) {
	for(var i=1; i&lt;=arrayLen(arr); i++) {
		for(var x=1; x&lt;=arrayLen(arr[i]); x++) {
			writeOutput(arr[i][x] & " ");
		}
	}
}
&lt;/cfscript&gt;
</code>
<p>I displayed this to ensure everything was kosher:</p>
<code>
&lt;cfoutput&gt;
#render(data)#
&lt;p/&gt;
&lt;/cfoutput&gt;
</code>
<p>This returned &quot;a b c d e&quot; as I expected. Ok, now for the fun part. In theory, all I have to do is remove the item from the beginning of each array and drop it on top.</p>
<code>
&lt;cfloop index="i" from="1" to="#arrayLen(data)#"&gt;
	&lt;cfset movingItem = data[i][1]&gt;
	&lt;cfset arrayDeleteAt(data[i],1)&gt;
	&lt;cfset arrayAppend(data[i], movingItem)&gt;
&lt;/cfloop&gt;
</code>
<p>As you can see, I loop over data, which is the core data holder. Each element of data is an array itself. I grab the first item, delete it, and then simply add it to the end of the array. Here is a complete script with a few sample runs:</p>
<code>
&lt;cfset data = [ 
	["a", "b", "c"],
	["d", "e"]
	]&gt;
<p>&lt;cfscript&gt;
function render(arr) {
for(var i=1; i&lt;=arrayLen(arr); i++) {
for(var x=1; x&lt;=arrayLen(arr[i]); x++) {
writeOutput(arr[i][x] &amp; &quot; &quot;);
}
}
}
&lt;/cfscript&gt;</p>
<p>&lt;cfoutput&gt;
#render(data)#
&lt;p/&gt;
&lt;/cfoutput&gt;</p>
<p>&lt;cfloop index=&quot;i&quot; from=&quot;1&quot; to=&quot;#arrayLen(data)#&quot;&gt;
&lt;cfset movingItem = data[i][1]&gt;
&lt;cfset arrayDeleteAt(data[i],1)&gt;
&lt;cfset arrayAppend(data[i], movingItem)&gt;
&lt;/cfloop&gt;</p>
<p>&lt;cfoutput&gt;
#render(data)#
&lt;p/&gt;
&lt;/cfoutput&gt;</p>
<p>&lt;cfloop index=&quot;i&quot; from=&quot;1&quot; to=&quot;#arrayLen(data)#&quot;&gt;
&lt;cfset movingItem = data[i][1]&gt;
&lt;cfset arrayDeleteAt(data[i],1)&gt;
&lt;cfset arrayAppend(data[i], movingItem)&gt;
&lt;/cfloop&gt;</p>
<p>&lt;cfoutput&gt;
#render(data)#
&lt;p/&gt;
&lt;/cfoutput&gt;
</code></p>
<p>And the output:</p>
<p>a b c d e</p>
<p>b c a e d</p>
<p>c a b d e</p>
<p>Notice how the second group, D E, correctly works even though it is smaller than the first group, A B C.</p>
}