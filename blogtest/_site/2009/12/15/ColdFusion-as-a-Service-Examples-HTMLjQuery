<h1>Post</h1>

<p>Last week I <a href="http://www.raymondcamden.com/index.cfm/2009/12/5/ColdFusion-as-a-Service-Examples--Images">blogged</a> my first set of examples from RIAUnleashed. Today I thought I'd share a few more. Specifically - these examples are both HTML/jQuery based and do not make use of Flex at all.</p>
<p>The first thing I thought I'd point out is that you don't need to use the CFaaS CFCs as webservices. The documentation seems to imply this. However, when I tested CFaaS with simple HTTP requests, everything worked fine. I guess I shouldn't be surprised but again, the docs had led me to believe otherwise. I worked up a few simple demos, but here is one that demonstrates one way you could use CFaaS in a non-Flex context.</p>
<code>
&lt;cfset u = "cfremoteuser1"&gt;
&lt;cfset p = "password"&gt;
<p>&lt;cfhttp method=&quot;post&quot; url=&quot;http://127.0.0.1/CFIDE/services/upload.cfc?returnformat=json&quot; result=&quot;result&quot;&gt;
&lt;cfhttpparam type=&quot;file&quot; name=&quot;upload&quot; file=&quot;/Users/ray/Documents/ColdFusion/ColdSpring_Reference.pdf&quot;&gt;
&lt;cfhttpparam type=&quot;formField&quot; name=&quot;serviceusername&quot; value=&quot;#u#&quot;&gt;
&lt;cfhttpparam type=&quot;formField&quot; name=&quot;servicepassword&quot; value=&quot;#p#&quot;&gt;
&lt;cfhttpparam type=&quot;formField&quot; name=&quot;method&quot; value=&quot;uploadForm&quot;&gt;
&lt;/cfhttp&gt;
&lt;cfset res = deserializeJSON(result.filecontent)&gt;
&lt;cfdump var=&quot;#res#&quot;&gt;</p>
<p>&lt;cfhttp method=&quot;post&quot; url=&quot;http://127.0.0.1/CFIDE/services/pdf.cfc?returnformat=json&quot; result=&quot;result&quot;&gt;
&lt;cfhttpparam type=&quot;formField&quot; name=&quot;serviceusername&quot; value=&quot;#u#&quot;&gt;
&lt;cfhttpparam type=&quot;formField&quot; name=&quot;servicepassword&quot; value=&quot;#p#&quot;&gt;
&lt;cfhttpparam type=&quot;formField&quot; name=&quot;method&quot; value=&quot;extractImage&quot;&gt;
&lt;cfhttpparam type=&quot;formField&quot; name=&quot;source&quot; value=&quot;#res[1].value#&quot;&gt;
&lt;/cfhttp&gt;
&lt;cfdump var=&quot;#deserializeJSON(result.filecontent)#&quot;&gt;
</code></p>
<p>This example begins by first uploading a PDF to the Upload CFC. This CFC provides support for uploading files to the CFaaS system. It stores it and returns a URL containing a dynamic link to your file. Here is the output of the first dump:</p>
<img src="https://static.raymondcamden.com/images/cfjedi/Picture 266.png" />
<p>Now that we have a pointer to the file we can use it with the PDF service. In this case I run the extractImage method. The result is a list of image URLs for each and every image from the PDF:</p>
<img src="https://static.raymondcamden.com/images/cfjedi/Picture 344.png" />
<p>Pretty simple, right? While I can't imagine why you would use ColdFusion to post to another ColdFusion server to use CFaaS, you could if you wanted to. Mainly I imagine this example being useful if translated to another language, like PHP. (Just take the number of lines of code above and multiple by 4.)</p>
<p>For my second example, I did something a bit fancier. I used Aptana Studio to create a new HTML-based AIR application. This example makes use of the Image service and converts an image (specified by a URL) to grayscale:</p>
<img src="https://static.raymondcamden.com/images/cfjedi/Picture 418.png" />
<p>Ok, not exactly rocket science, but not something you can easily do in HTML (as far as I know - I do know that CSS does some cool filtering so it may actually support this!). The code behind this is relatively simple:</p>
<code>
&lt;html&gt;
<p>&lt;head&gt;
&lt;script src=&quot;lib/jquery/jquery-1.3.2.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
$(document).ready(function() {</p>
<pre><code>$(&quot;#doit&quot;).click(function() {

	$(&quot;#result&quot;).html(&quot;Working...&quot;)
	var source = $(&quot;#imageurl&quot;).val()
	source = $.trim(source)
			
	$.getJSON(&quot;http://127.0.0.1/CFIDE/services/image.cfc?returnformat=json&quot;, 
		{method:&quot;grayscale&quot;,serviceusername:&quot;cfremoteuser1&quot;, 
		 servicepassword:&quot;password&quot;, source:source},function(data,status) { 
			$(&quot;#result&quot;).html(&quot;&amp;lt;img src='&quot;+data+&quot;'&amp;gt;&quot;)
		})	
	
})
</code></pre>
<p>})	
&lt;/script&gt;
&lt;style&gt;
body {
padding: 5px;
background-color: #33ff33;
font-family:&quot;MS Sans Serif&quot;, Geneva, sans-serif;
}
&lt;/style&gt;
&lt;/head&gt;	
&lt;body&gt;</p>
<p>&lt;h1&gt;jQuery CFaaS Demo&lt;/h1&gt;</p>
<p>&lt;p&gt;
Enter an Image URL: &lt;input type=&quot;text&quot; id=&quot;imageurl&quot;&gt; &lt;input type=&quot;button&quot; id=&quot;doit&quot; value=&quot;Make It Gray&quot; &gt;
&lt;/p&gt;</p>
<p>&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</p>
<p>&lt;/body&gt;
&lt;/html&gt;
</code></p>
<p>As you can see, I simply bind to the doit button. When run, I execute a getJSON against a ColdFusion server, passing in all the information the method needs to work.</p>
<p>All in all - pretty fun to write. I'm still not sure where I'd use CFaaS yet in production, but the more I dig into it, the more impressed I get.</p>
}