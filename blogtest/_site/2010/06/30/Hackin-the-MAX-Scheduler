<h1>Post</h1>

<p>Ok, &quot;hacking&quot; may be too strong a word, but I thought I'd share a fun little diversion I tried at lunch. I noticed that the <a href="http://max.adobe.com/schedule/by-session/">MAX 2010 Scheduler</a> oddly did not list session times. You could browse by day of course, but I prefer to browse by session title. I was also curious to see when my session was. Unfortunately, the date and times for each session were not available in that view.</p>
<p>
<!--more-->
I then decided to do what any self-respecting web developer would do. I opened up the Developer tools in Chrome (think Firebug) and became to monitor what was going on. I noticed that the data for the scheduler came from a few JSON requests. I took a look at them and found that the JSON data for sessions actually contained the date and times - the front end just wasn't using it. So I quickly decided to play with this data myself. I began by creating a simple ColdFusion file that would proxy the JSON requests for me. An AIR app wouldn't need this - but I wanted something done <i>super</i> quick. I came up with the following:
<p>
<code>
&lt;cfparam name="url.u" default=""&gt;
<p>&lt;cfset safeurls = &quot;http://max.adobe.com/v1/events/ebdabc28-aab4-479f-86f3-6bd9d97b4cc7/speakers.json,http://max.adobe.com/v1/events/ebdabc28-aab4-479f-86f3-6bd9d97b4cc7/sessions.json&quot;&gt;</p>
<p>&lt;cfif url.u is &quot;&quot; or not isValid(&quot;url&quot;, url.u) or not listFindNoCase(variables.safeurls, url.u)&gt;
&lt;cfabort/&gt;
&lt;/cfif&gt;</p>
<p>&lt;cfif isNull(cacheGet(&quot;urlcache_#url.u#&quot;))&gt;
&lt;cfhttp url=&quot;#url.u#&quot; timeout=&quot;20&quot;&gt;
&lt;cfset cachePut(&quot;urlcache_#url.u#&quot;, cfhttp.filecontent,1)&gt;
&lt;/cfif&gt;</p>
<p>&lt;cfset data = cacheGet(&quot;urlcache_#url.u#&quot;)&gt;
&lt;cfcontent type=&quot;application/json&quot; reset=&quot;true&quot;&gt;&lt;cfoutput&gt;#data#&lt;/cfoutput&gt;
</code></p>
<p>
<p>There isn't a lot here. Basically look for a URL to request in the URL scope (sorry if that sounds confusing) and validate the value against a list of URLs. Next - see if I have the request in the cache. If not, fetch it with cfhttp and store it for a day. Finally, get the data from the cache and output it to the screen. My front end was a bit more complex:</p>
<p>
<code>
&lt;html&gt; 
<p>&lt;head&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
var speakers = []
var sessions = []
var searchReady = false</p>
<p>function renderSession(session) {
var res = &quot;&quot;
res += &quot;&lt;div class='session'&gt;&quot;
res += &quot;&lt;h2&gt;&quot;+session.name+&quot;&lt;/h2&gt;&quot;
res += &quot;&lt;b&gt;Times:&lt;/b&gt; &quot;
if(session.instances.length == 0) res += &quot;None Scheduled&lt;br/&gt;&quot;
else {
for(var i=0; i&lt;session.instances.length;i++) {
res += session.instances[i].date + &quot; &quot; + session.instances[i].time
if(i+1 &lt; session.instances.length) res+= &quot; and &quot;
}
res += &quot;&lt;br/&gt;&quot;</p>
<pre><code>}
res += &quot;&amp;lt;b&amp;gt;Speakers:&amp;lt;/b&amp;gt; &quot;
if(session.speakers.length == 0) res += &quot;None Assigned&amp;lt;br/&amp;gt;&quot;
else {
	for(var i=0; i&amp;lt;session.speakers.length;i++) {
		res += speakers[session.speakers[i]].name
		if(i+1 &amp;lt; session.speakers.length) res+= &quot; and &quot;
	}
	res += &quot;&amp;lt;br/&amp;gt;&quot;
}
res += session.description

res += &quot;&amp;lt;/div&amp;gt;&quot;
return res
</code></pre>
<p>}</p>
<p>function renderSessions() {
var totalSessions = 0</p>
<pre><code>var filterTerm = $(&quot;#search&quot;).val()
filterTerm = $.trim(filterTerm.toLowerCase())
var s = &quot;&quot;
for(var i=0; i&amp;lt;sessions.length; i++) {
	if(filterTerm == '' || 
		(sessions[i].name.toLowerCase().indexOf(filterTerm) &amp;gt;= 0 || sessions[i].description.toLowerCase().indexOf(filterTerm) &amp;gt;= 0 )
	) {
		totalSessions++
		s += renderSession(sessions[i])
	}
}
s = &quot;&amp;lt;h2&amp;gt;Sessions (&quot;+totalSessions+&quot;)&amp;lt;/h2&amp;gt;&quot; + s
$(&quot;#sessions&quot;).html(s)
</code></pre>
<p>}</p>
<p>function loadSpeakers() {</p>
<pre><code>var speakerurl = &quot;http://max.adobe.com/v1/events/ebdabc28-aab4-479f-86f3-6bd9d97b4cc7/speakers.json&quot;
$.getJSON('load.cfm?u='+speakerurl, {}, function(res,code) {
	for(var i=0; i&amp;lt;res.length; i++) {
		var speaker = {&quot;name&quot;:res[i].lastname +&quot;, &quot;+res[i].firstname}
		speakers[res[i].id] = speaker
	}
	loadSessions()
})
</code></pre>
<p>}</p>
<p>function loadSessions() {</p>
<pre><code>var sessionurl = &quot;http://max.adobe.com/v1/events/ebdabc28-aab4-479f-86f3-6bd9d97b4cc7/sessions.json&quot;
$.getJSON('load.cfm?u='+sessionurl, {}, function(res,code) {
	sessions = res
	renderSessions()
	$(&quot;#status&quot;).text(&quot;&quot;)
	searchReady = true
})
</code></pre>
<p>}</p>
<p>$(document).ready(function() {
$(&quot;#status&quot;).text(&quot;Please stand by. I'm loading a lot of data and doing really important, technical 'computer' stuff.&quot;)
//begin by loading speakers
loadSpeakers()</p>
<pre><code>$(&quot;#search&quot;).keyup(function() {
	var val = $(this).val()
	renderSessions()
})
</code></pre>
<p>})</p>
<p>&lt;/script&gt;
&lt;style&gt;
#status {
font-style: italic;
}
.session {
width: 500px;
background-color: #ffff80;
padding-top: 0px;
padding-left: 5px;
padding-right: 5px;
margin-bottom: 10px;
}</p>
<p>#menu {
float: left;
width: 300px;
background-color: #c0c0c0;
border: 0.1em solid #000000;
padding: 0px;
margin-top: 18px;
margin-right: 5px;
}
#sessions {
overflow:auto;
}</p>
<p>&lt;/style&gt;</p>
<p>&lt;/head&gt;</p>
<p>&lt;body&gt;
&lt;span id=&quot;status&quot;&gt;&lt;/span&gt;</p>
<p>&lt;div id=&quot;menu&quot;&gt;
Search:&lt;br/&gt;
&lt;input type=&quot;text&quot; id=&quot;search&quot;&gt;&lt;br/&gt;
&lt;/div&gt;</p>
<p>&lt;div id=&quot;sessions&quot;&gt;
&lt;/div&gt;</p>
<p>&lt;/body&gt;
&lt;/html&gt;
</code></p>
<p>
<p>If you start looking in the document.ready block, you can see I begin by fetching my speakers. I store that result in a global variable. Once that's done, I then fetch my sessions. Once I have all my data, I can then render them. I wrote both a renderSessions() method and a renderSession() method. That may be overkill - but it worked out ok.</p>
<p>
<p>At that point - the only left was a simple search. I didn't bother with all the options the real system had. I just used a simple keyword search that matched against the title and the description. You can play with this here:</p>
<p>
<p><a href="http://www.raymondcamden.com/demos/maxfix/">http://www.coldfusionjedi.com/demos/maxfix/</a></p>
<p>
<p>Obviously this was just built for fun. I wouldn't count on it working forever, nor would I be surprised if Adobe fixes the missing times in their next push. I mainly just wanted to show an example of how you could repurpose someone else's AJAX data for your own benefit. (And yes, now I know when I'm speaking - 3:30 on October 27th.)</p>
}