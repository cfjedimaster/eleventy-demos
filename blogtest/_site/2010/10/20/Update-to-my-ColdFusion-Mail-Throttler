<h1>Post</h1>

<p>Last week I wrote a quick proof of concept that demonstrated a simple mail throttler for ColdFusion. The idea was that you may have some automatic mail process that you do not want to get overwhelmed with. Read the <a href="http://www.raymondcamden.com/index.cfm/2010/10/14/Proof-of-Concept--Throttling-automatic-emails-in-ColdFusion">previous blog entry</a> for full details and the original code. <a href="http://blog.pengoworks.com/">Dan Switzer</a> commented that my method for &quot;merging&quot; dynamic emails (with a regex) could be done much simpler if I allowed people to simply name the emails. So with that in mind I've added the support for a cachename value. This actually takes priority over regex as the more I think about it, the more I think folks will prefer it over the regex option. Here is the new component.</p>
<!--more-->
<code>
&lt;cfcomponent output="false"&gt;
<p>&lt;cfset variables.cache = {}&gt;</p>
<p>&lt;cffunction name=&quot;throttleSend&quot; access=&quot;public&quot; output=&quot;false&quot; returnType=&quot;boolean&quot;&gt;
&lt;cfargument name=&quot;mail&quot; type=&quot;struct&quot; required=&quot;true&quot; hint=&quot;Structure of args for the mail.&quot;&gt;
&lt;cfargument name=&quot;limit&quot; type=&quot;numeric&quot; required=&quot;true&quot; hint=&quot;Number of minutes to wait before sending again.&quot;&gt;
&lt;cfargument name=&quot;cachename&quot; type=&quot;string&quot; required=&quot;false&quot; hint=&quot;Used to name the email in terms of uniqueness. If used, the email contents won't be used to check for uniqueness.&quot;&gt;	
&lt;cfargument name=&quot;regex&quot; type=&quot;string&quot; required=&quot;false&quot; hint=&quot;This regex is performed on your mail body. Helps remove items that may be dynamic in the body but should not be considered for caching.&quot;&gt;</p>
<pre><code>&amp;lt;!--- used for required mail tags ---&amp;gt;
&amp;lt;cfset var reqlist = &quot;to,from,subject,body&quot;&amp;gt;
&amp;lt;cfset var l = &quot;&quot;&amp;gt;
&amp;lt;cfset var body = &quot;&quot;&amp;gt;
&amp;lt;cfset var cacheBody = &quot;&quot;&amp;gt;
&amp;lt;cfset var hashKey = &quot;&quot;&amp;gt;

&amp;lt;!--- quickly validate the mail object ---&amp;gt;
&amp;lt;cfloop index=&quot;l&quot; list=&quot;#reqlist#&quot;&amp;gt;
	&amp;lt;cfif not structKeyExists(arguments.mail, l)&amp;gt;
		&amp;lt;cfthrow message=&quot;mail object is missing required key #l#&quot;&amp;gt;
	&amp;lt;/cfif&amp;gt;
&amp;lt;/cfloop&amp;gt;

&amp;lt;!--- Ok, first, create the hash ---&amp;gt;
&amp;lt;cfset body = arguments.mail.body&amp;gt;
&amp;lt;cfif structKeyExists(arguments, &quot;cachename&quot;)&amp;gt;
	&amp;lt;cfset hashKey = arguments.cachename&amp;gt;
&amp;lt;cfelseif structKeyExists(arguments, &quot;regex&quot;)&amp;gt;
	&amp;lt;cfset cacheBody = rereplace(body,regex,&quot;&quot;,&quot;all&quot;)&amp;gt;
	&amp;lt;cfset hashKey = hash(arguments.mail.to &amp; &quot; &quot; &amp; arguments.mail.subject &amp; &quot; &quot; &amp; cacheBody)&amp;gt;
&amp;lt;cfelse&amp;gt;
	&amp;lt;cfset hashKey = hash(arguments.mail.to &amp; &quot; &quot; &amp; arguments.mail.subject &amp; &quot; &quot; &amp; body)&amp;gt;
&amp;lt;/cfif&amp;gt;


&amp;lt;!--- If we already sent it and it hasn't expired, don't do squat ---&amp;gt;
&amp;lt;cfif structKeyExists(variables.cache, hashKey) and dateCompare(now(), variables.cache[hashKey]) is -1&amp;gt;
	&amp;lt;cfreturn false&amp;gt;
&amp;lt;/cfif&amp;gt;

&amp;lt;!--- Ok, so we need to mail ---&amp;gt;
&amp;lt;cfmail attributecollection=&quot;#arguments.mail#&quot;&amp;gt;#body#&amp;lt;/cfmail&amp;gt;

&amp;lt;cfset variables.cache[hashKey] = dateAdd(&quot;n&quot;, arguments.limit, now())&amp;gt;
&amp;lt;cfreturn true&amp;gt;
</code></pre>
<p>&lt;/cffunction&gt;</p>
<p>&lt;/cfcomponent&gt;
</code></p>
<p/>
<p>And here is a new test script that shows all three options .</p>
<p/>
<code>
<p>&lt;cfapplication name=&quot;mtdemo&quot;&gt;</p>
<p>&lt;cfif not structKeyExists(application, &quot;throttler&quot;) or structKeyExists(url,&quot;init&quot;)&gt;
&lt;cfset application.throttler = new mailthrottle()&gt;
&lt;/cfif&gt;</p>
<p>&lt;cfset mailOb = {
to=&quot;ray@camdenfamily.com&quot;,
from=&quot;ray@camdenfamily.com&quot;,
subject=&quot;Error about X!&quot;,
body=&quot;This is the body of the email.&quot;
}&gt;</p>
<p>&lt;cfset res = application.throttler.throttleSend (mailOb,2)&gt;</p>
<p>&lt;cfoutput&gt;result was #res#&lt;/cfoutput&gt;
&lt;p/&gt;</p>
<p>&lt;cfset mailOb = {
to=&quot;ray@camdenfamily.com&quot;,
from=&quot;ray@camdenfamily.com&quot;,
subject=&quot;Error about X!&quot;,
body=&quot;This is the body of the email. Random: #randRange(1,100)#&quot;
}&gt;</p>
<p>&lt;cfset res = application.throttler.throttleSend (mail=mailOb,limit=2,regex=&quot;Random: [0-9]{1,3}&quot;)&gt;</p>
<p>&lt;cfoutput&gt;result was #res#&lt;/cfoutput&gt;</p>
<p>&lt;p/&gt;</p>
<p>&lt;cfset mailOb = {
to=&quot;ray@camdenfamily.com&quot;,
from=&quot;ray@camdenfamily.com&quot;,
subject=&quot;Error about Y!&quot;,
body=&quot;This is the body of the email. Random: #randRange(1,100)#&quot;
}&gt;</p>
<p>&lt;cfset res = application.throttler.throttleSend (mail=mailOb,limit=2,cacheName=&quot;Error Email Y&quot;)&gt;</p>
<p>&lt;cfoutput&gt;result was #res#&lt;/cfoutput&gt;
</code></p>
<p/>
<p>The final example shows the cacheName in action. Useful?</p>
}