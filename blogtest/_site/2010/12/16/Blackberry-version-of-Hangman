<h1>Post</h1>

<p>Many months ago, I wrote a simple version of <a href="http://insideria.com/2009/11/jquery-and-air---moving-from-w-2.html">Hangman</a> as a desktop Adobe AIR application. It was built using HTML and jQuery and supported a one thousand word database of word choices. This week I looked into porting the application to the Blackberry Playbook. This is what I came up with.</p>
<!--more-->
<p/>
<p>First - I had assumed the port would be simple. The game itself is trivial so I wasn't expecting much trouble. Then something occurred to me. My desktop application listened for key presses to handle letter guesses. As far as I know, that type of setup doesn't make sense on a mobile device. Sure you can get 'keyboard' input, but from what I know it can only be done by using a form field of some sort. To get around this I decided to simply use buttons. Here is an example:</p>
<p/>
<img src="https://static.raymondcamden.com/images/ScreenClipwon.png" />
<p/>
<p>As you can see, the buttons look rather nice. I don't have a physical Playbook yet (no one does outside of RIM I guess), but it looks like it would work well. I'm not happy with &quot;Z&quot; hanging there by itself and would <i>love</i> some suggestions on how it could be improved. I built out this &quot;keyboard&quot; by hand:</p>
<p/>
<code>
&lt;s:TileGroup id="tileLayoutView" requestedColumnCount="5" click="letterButtonClicked(event)"&gt;
	&lt;s:Button id="btnA" label="A" /&gt;
	&lt;s:Button id="btnB" label="B" /&gt;
	&lt;s:Button id="btnC" label="C" /&gt;
(I deleted some lines here.)
	&lt;s:Button id="btnX" label="X" /&gt;
	&lt;s:Button id="btnY" label="Y" /&gt;
	&lt;s:Button id="btnZ" label="Z" /&gt;
&lt;/s:TileGroup&gt;
</code>
<p/>
<p>After a suggestion by Joe Rinehart I tried using a Datagroup, but ran into issues updating the UI controls on the inside. (I'll happily go into details about the issues i ran into if anyone wants to hear more.)</p>
<p/>
<p>Outside of that the other big change was how the application was laid out. I don't have CSS, but frankly Flex's layout controls are a lot easier for me to work with. Not to offend anyone's delicate sensibilities but laying stuff out in a Flex application reminds me of tables. Using CSS reminds me more of visiting a sadistic dentist. Sorry. Anyway, let me share the code. Here is the initial view which simply sets up the database connection:</p>
<p/>
<code>
<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;s:MobileApplication xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
xmlns:s=&quot;library://ns.adobe.com/flex/spark&quot; firstView=&quot;views.HangmanHome&quot; initialize=&quot;init()&quot;&gt;
&lt;fx:Declarations&gt;
&lt;!-- Place non-visual elements (e.g., services, value objects) here --&gt;
&lt;/fx:Declarations&gt;</p>
<pre><code>&amp;lt;fx:Script&amp;gt;
&amp;lt;![CDATA[
protected var dbConnection:SQLConnection = new SQLConnection;
	
private function init():void {
	var dbFile:File = File.applicationDirectory.resolvePath(&quot;install/words.db&quot;);
	dbConnection.open(dbFile);		
	navigator.firstViewData = {dbCon:dbConnection};
}
		
]]&amp;gt;
&amp;lt;/fx:Script&amp;gt;
</code></pre>
<p>&lt;/s:MobileApplication&gt;
</code></p>
<p/>
<p>Here is the main view where of the logic occurs. Note that one feature I did not port was updating the game history. I figured that was pretty trivial and I'd add it later if I wanted.</p>
<p/>
<code>
<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;s:View xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
xmlns:s=&quot;library://ns.adobe.com/flex/spark&quot;
title=&quot;Hangman&quot; xmlns:mx=&quot;library://ns.adobe.com/flex/mx&quot; viewActivate=&quot;init(event)&quot;&gt;
&lt;fx:Declarations&gt;
&lt;!-- Place non-visual elements (e.g., services, value objects) here --&gt;
&lt;/fx:Declarations&gt;</p>
<pre><code>&amp;lt;fx:Style&amp;gt;
@namespace s &quot;library://ns.adobe.com/flex/spark&quot;;
@namespace mx &quot;library://ns.adobe.com/flex/mx&quot;;
	
#blankWord {
	font-size:70px;
	font-weight: bold;
}

#gameStatus {
	font-weight: bold;
}
&amp;lt;/fx:Style&amp;gt;

&amp;lt;fx:Script&amp;gt;
&amp;lt;![CDATA[
import model.Game;
	
import mx.collections.ArrayCollection;
import mx.core.IVisualElement;

import spark.components.BorderContainer;

private var game:Game;
	
[Embed (source=&quot;images/Hangman-1.png&quot; )]
public static const H1:Class;
[Embed (source=&quot;images/Hangman-2.png&quot; )]
public static const H2:Class;
[Embed (source=&quot;images/Hangman-3.png&quot; )]
public static const H3:Class;
[Embed (source=&quot;images/Hangman-4.png&quot; )]
public static const H4:Class;
[Embed (source=&quot;images/Hangman-5.png&quot; )]
public static const H5:Class;
[Embed (source=&quot;images/Hangman-6.png&quot; )]
public static const H6:Class;
[Embed (source=&quot;images/Hangman-7.png&quot; )]
public static const H7:Class;
[Embed (source=&quot;images/Hangman-8.png&quot; )]
public static const H8:Class;
[Embed (source=&quot;images/Hangman-9.png&quot; )]
public static const H9:Class;
[Embed (source=&quot;images/Hangman-10.png&quot; )]
public static const H10:Class;
			
private function init(event:Event):void {
	trace('init in view called');
	initGame();
}	

	
private function letterButtonClicked( event : Event ):void {
	if(!game.isGameOver()) {
		var button : Button = event.target as Button;
		if(button) {
			trace(&quot;clicked: &quot; + button.label);
			game.pickLetter(button.label);
			button.enabled = false;
			drawWord();
			drawHangman();
			if(game.isGameOver()) {
				handleGameOver();				
			}
		}
	}
}

private function initGame():void {

	gameStatus.text = &quot;&quot;;
	newGameButton.visible = false;
	for(var i:int=65; i&amp;lt;91; i++) {
		var s:String = String.fromCharCode(i);
		trace(s);
		this[&quot;btn&quot;+s].enabled=true;
	}
	
	game = new Game();
	
	//begin by picking a word
	game.setChosenWord(pickRandomWord());
	
	//draws the blank/letters
	drawWord();
	
	//draws the hangman 
	drawHangman();
}

private function drawHangman():void {
	var misses:int = game.getMisses();
	if(misses == 0) hangmanImage.source = null;
	else {
		hangmanImage.source = HangmanHome[&quot;H&quot;+(misses+1)];
	}
}

private function drawWord():void {
	blankWord.text = game.drawWord();
}

private function handleGameOver():void {
	if(game.playerWon()) {
		gameStatus.text = &quot;Congratulations, you won the game!&quot;;			
	} else {
		gameStatus.text = &quot;Sorry, but you lost the game!&quot;;
	}
	newGameButton.visible = true;
}

private function pickRandomWord():String {
	var sql:SQLStatement = new SQLStatement();
	sql.text = &quot;select word from words order by random() limit 1&quot;;
	sql.sqlConnection = data.dbCon;
	sql.execute();
	var sqlResult:SQLResult = sql.getResult();
	trace('random word is '+sqlResult.data[0].word);
	return sqlResult.data[0].word.toUpperCase();
	
}
]]&amp;gt;
&amp;lt;/fx:Script&amp;gt;
&amp;lt;s:actionContent&amp;gt;
	&amp;lt;s:Button height=&quot;100%&quot; label=&quot;Exit&quot; click=&quot;NativeApplication.nativeApplication.exit()&quot; /&amp;gt;
&amp;lt;/s:actionContent&amp;gt;

&amp;lt;s:layout&amp;gt;
	&amp;lt;s:HorizontalLayout paddingTop=&quot;10&quot; paddingLeft=&quot;10&quot; paddingRight=&quot;10&quot; gap=&quot;10&quot;/&amp;gt;
&amp;lt;/s:layout&amp;gt;
	
&amp;lt;s:TileGroup id=&quot;tileLayoutView&quot; requestedColumnCount=&quot;5&quot; click=&quot;letterButtonClicked(event)&quot;&amp;gt;
	&amp;lt;s:Button id=&quot;btnA&quot; label=&quot;A&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnB&quot; label=&quot;B&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnC&quot; label=&quot;C&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnD&quot; label=&quot;D&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnE&quot; label=&quot;E&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnF&quot; label=&quot;F&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnG&quot; label=&quot;G&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnH&quot; label=&quot;H&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnI&quot; label=&quot;I&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnJ&quot; label=&quot;J&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnK&quot; label=&quot;K&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnL&quot; label=&quot;L&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnM&quot; label=&quot;M&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnN&quot; label=&quot;N&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnO&quot; label=&quot;O&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnP&quot; label=&quot;P&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnQ&quot; label=&quot;Q&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnR&quot; label=&quot;R&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnS&quot; label=&quot;S&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnT&quot; label=&quot;T&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnU&quot; label=&quot;U&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnV&quot; label=&quot;V&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnW&quot; label=&quot;W&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnX&quot; label=&quot;X&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnY&quot; label=&quot;Y&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;btnZ&quot; label=&quot;Z&quot; /&amp;gt;
&amp;lt;/s:TileGroup&amp;gt;

&amp;lt;!-- block 2 is a v block, top row is pic + instruction block, row 2 is word --&amp;gt;
&amp;lt;s:VGroup width=&quot;67%&quot; height=&quot;100%&quot;&amp;gt;
	
	&amp;lt;s:HGroup width=&quot;100%&quot; height=&quot;80%&quot; horizontalAlign=&quot;center&quot;&amp;gt;

		&amp;lt;!-- hangman goes here --&amp;gt;
		&amp;lt;s:Image id=&quot;hangmanImage&quot;  width=&quot;50%&quot; /&amp;gt;
		
		&amp;lt;!-- nstructions, status,e tc --&amp;gt;
		&amp;lt;s:VGroup id=&quot;rightGroup&quot; width=&quot;50%&quot; paddingLeft=&quot;5&quot; paddingRight=&quot;5&quot; gap=&quot;10&quot;&amp;gt;
			
			&amp;lt;s:Label width=&quot;100%&quot; text=&quot;To begin, simply type the letter you would like to guess. Right answers will help reveal the mystery word. Wrong answers will lead to your untimely demise!&quot; /&amp;gt;
			&amp;lt;s:Label id=&quot;gameStatus&quot; width=&quot;100%&quot; /&amp;gt;
			&amp;lt;s:Button id=&quot;newGameButton&quot; label=&quot;New Game&quot; visible=&quot;false&quot; click=&quot;initGame()&quot; /&amp;gt;
		&amp;lt;/s:VGroup&amp;gt;

	&amp;lt;/s:HGroup&amp;gt;

	&amp;lt;s:Label id=&quot;blankWord&quot; width=&quot;100%&quot; /&amp;gt;	

&amp;lt;/s:VGroup&amp;gt;
</code></pre>
<p>&lt;/s:View&gt;
</code></p>
<p>
<p>And finally - the simple Game object I created.</p>
<p>
<code>
package model {
<pre><code>public class Game {

	private var _chosenWord:String;
	private var _usedLetters:Object = new Object();
	private var _misses:int = 0;
	
	public function Game() {
	}

	public function drawWord():String {
		var s:String = &quot;&quot;;
		for(var i:int=0; i&amp;lt;_chosenWord.length; i++) {
			var thisLetter:String = _chosenWord.substr(i, 1);
			if(_usedLetters[thisLetter]) s+= thisLetter;
			else s+= &quot;-&quot;;
		}
		return s;
	}
	
	public function getMisses():int {
		return _misses;
	}
	
	public function isGameOver():Boolean {
		if(_misses == 9 || drawWord() == _chosenWord) return true;
		return false;
	}

	public function pickLetter(s:String):void {
		_usedLetters[s] = 1;
		if(_chosenWord.indexOf(s) == -1) _misses++;
	}

	public function playerWon():Boolean {
		return (isGameOver() &amp;&amp; drawWord() == _chosenWord);
	}

	public function setChosenWord(s:String):void {
		_chosenWord = s;
	}

}
</code></pre>
<p>}
</code></p>
<p/>
<p>And a final screen shot so you can see the result you don't want to see:</p>
<p/>
<img src="https://static.raymondcamden.com/images/cfjedi/ScreenCliplost.png" />
<p>I've attached a zip of the project to the blogentry.<p><a href='enclosures/C%3A%5Chosts%5C2009%2Ecoldfusionjedi%2Ecom%5Cenclosures%2FHangman1%2Ezip'>Download attached file.</a></p></p>
}