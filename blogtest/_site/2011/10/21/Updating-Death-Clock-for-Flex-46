<h1>Post</h1>

<p>Adobe has been talking lately about the next update to Flex and Flash Builder, version 4.6. There's a lot of cool stuff planned, but some of the things that interest me most are the new UI components. You can read a good article on them here, <a href="http://www.adobe.com/devnet/flex/articles/whats-new-flex-flash-builder-46.html">What's new in Flex 4.6 SDK and Flash Builder 4.6</a>. I thought it might be interesting to update one of my own application, the Death Clock mobile app, to use some of these new components.</p>
<!--more-->
<p>
<p>When I built the <a href="https://market.android.com/details?id=air.DeathClock&feature=search_result#?t=W251bGwsMSwxLDEsImFpci5EZWF0aENsb2NrIl0.">Death Clock</a> application, one of the first things I ran into was handling the UI for picking gender and the month of your birth. Dropdowns just don't work well on a mobile device. I ended up using a hybrid approach that used states and groups of radio buttons. You can read more about this in my <a href="http://www.raymondcamden.com/index.cfm/2010/10/21/My-First-Android-Application">original blog post</a> from ... wow... exactly one year ago. Man - I'd love to say I planned that but it was completely random! Anyway - be sure to look at that post for an example of the UI.</p>
<p>
<p>For my new application, I decided to get rid of this work around and make use of the new ToggleSwitch and DateSpinner classes. I thought the ToggleSwitch would be a good replacement for the gender selection and the date spinner would - obviously - replace the date drop downs. Here's what the Flex code looks like for the original version, again, with the work around:</p>
<p>
<code>
<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;s:View xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
xmlns:s=&quot;library://ns.adobe.com/flex/spark&quot; title=&quot;Death Clock&quot; initialize=&quot;init()&quot; xmlns:mx=&quot;library://ns.adobe.com/flex/mx&quot; backgroundColor=&quot;0x000000&quot;&gt;
&lt;fx:Declarations&gt;
&lt;mx:NumberValidator id=&quot;dayValidator&quot; source=&quot;{dayBorn}&quot; property=&quot;text&quot; allowNegative=&quot;false&quot; minValue=&quot;1&quot; maxValue=&quot;31&quot;
invalidCharError=&quot;Day Born must be a number.&quot; integerError=&quot;Day Born must be a number.&quot; negativeError=&quot;Day Born must be a positive number.&quot;
lowerThanMinError=&quot;Day Born must be over 0.&quot; exceedsMaxError=&quot;Day Born must be lower than 31.&quot;/&gt;</p>
<pre><code>	&amp;lt;mx:NumberValidator id=&quot;yearValidator&quot; source=&quot;{yearBorn}&quot; property=&quot;text&quot; allowNegative=&quot;false&quot; minValue=&quot;1900&quot; maxValue=&quot;2020&quot; 
						invalidCharError=&quot;Year Born must be a number.&quot; integerError=&quot;Year Born must be a number.&quot; negativeError=&quot;Year Born must be a positive number.&quot; 
						lowerThanMinError=&quot;Year Born must be over 1900.&quot; exceedsMaxError=&quot;Year Born must be lower than 2020.&quot; /&amp;gt;
	
	&amp;lt;s:RadioButtonGroup id=&quot;monthRBG&quot; change=&quot;setMonthLabel()&quot;/&amp;gt;
	&amp;lt;s:RadioButtonGroup id=&quot;genderRBG&quot; change=&quot;setGenderLabel()&quot;/&amp;gt;
&amp;lt;/fx:Declarations&amp;gt;

&amp;lt;fx:Style&amp;gt;
	@namespace s &quot;library://ns.adobe.com/flex/spark&quot;;
	@namespace mx &quot;library://ns.adobe.com/flex/mx&quot;;
	
	#errorDiv {
		font-weight: bold;
		color: red;
	}
&amp;lt;/fx:Style&amp;gt;

&amp;lt;fx:Script&amp;gt;
	&amp;lt;![CDATA[
		import mx.collections.ArrayCollection;
		import mx.events.ValidationResultEvent;
		
		[Bindable] private var months:ArrayCollection;		
		[Bindable] private var days:ArrayCollection;
		[Bindable] private var years:ArrayCollection;
		
		private var selectedMonth:int;
		private var selectedGender:int;
		
		private function setGenderLabel():void {
			if(genderRBG.selection) { 
				genderButton.label = genderRBG.selection.label;
				selectedGender = int(genderRBG.selection.value);
			}
			toggleGenderState();
		}
		
		private function setMonthLabel():void {
			if(monthRBG.selection) { 
				monthButton.label = monthRBG.selection.label;
				selectedMonth = int(monthRBG.selection.value);
			}
			toggleMonthState();
		}
		
		private function toggleGenderState():void {
			if(this.currentState == 'normal') this.currentState='selectedGender';		
			else this.currentState='normal';
		}
		
		private function toggleMonthState():void {
			if(this.currentState == 'normal') this.currentState='selectedMonth';		
			else this.currentState='normal';
		}
		
		private function init():void {
			this.currentState = 'normal';
			
		}
		
		private function doClock():void {
			
			var validation:ValidationResultEvent;
			validation = dayValidator.validate();
			if(validation.type == &quot;invalid&quot;) {
				errorDiv.text = validation.message;
				return;			
			}
			validation = yearValidator.validate();
			if(validation.type == &quot;invalid&quot;) {
				errorDiv.text = validation.message;
				return;			
			}
			
			errorDiv.text = '';
			
			var bDay:Date = new Date();
			bDay.fullYear = int(yearBorn.text);
			
			bDay.month = selectedMonth;
			bDay.date = int(dayBorn.text);
			
			var now:Date = new Date();
			
			//Life expectancy will be 75.6 for men, 80.8 for women (http://en.wikipedia.org/wiki/List_of_countries_by_life_expectancy)
			//for the .6 and .8 we just guestimate based on 60 and 80% of 365
			//date math idea from: http://blog.flexexamples.com/2007/08/24/date-math-for-lazy-people/
			var deathDate:Date = new Date(bDay.time);
			if(selectedGender == 0) {
				deathDate[&quot;fullYear&quot;] += 72;
				deathDate[&quot;date&quot;] += 219;
			} else {
				deathDate[&quot;fullYear&quot;] += 78;
				deathDate[&quot;date&quot;] += 292;
			}
			
			//are you dead already?
			if(deathDate.getTime() &amp;lt; now.getTime()) {			
				errorDiv.text = 'Sorry, but you are already dead. Have a nice day.';
				return;
			}
			
			var timeLeft:Number = Math.round((deathDate.time - now.time)/1000);
			trace('death is '+deathDate.toString()+ ' v='+deathDate.time);
			trace('Now is ' +now.toString()+ ' v='+now.time);
			trace('diff is '+timeLeft);
			//trace(bDay.toString()+'\n'+deathDate.toString()+'\n'+timeLeft.toString());
			
			navigator.pushView(Counter,{deathDate:deathDate,timeLeft:timeLeft});
			
		}
	]]&amp;gt;
&amp;lt;/fx:Script&amp;gt;

&amp;lt;s:states&amp;gt;
	&amp;lt;s:State name=&quot;normal&quot;/&amp;gt;
	&amp;lt;s:State name=&quot;selectedMonth&quot;/&amp;gt;
	&amp;lt;s:State name=&quot;selectedGender&quot;/&amp;gt;
&amp;lt;/s:states&amp;gt;

&amp;lt;s:layout&amp;gt;
	&amp;lt;s:VerticalLayout paddingTop=&quot;10&quot; paddingLeft=&quot;5&quot; paddingRight=&quot;5&quot; /&amp;gt;
&amp;lt;/s:layout&amp;gt;

&amp;lt;!--
The idea of button groups to handle drop downs is from Dirk Eismann (DEismann@herrlich-ramuschkat.de)
--&amp;gt;
&amp;lt;s:HGroup width=&quot;100%&quot; height.selectedGender=&quot;100%&quot;&amp;gt;
	&amp;lt;s:Label text=&quot;Gender: &quot; width=&quot;50%&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;genderButton&quot; label=&quot;Male&quot; click=&quot;toggleGenderState()&quot; includeIn=&quot;normal,selectedMonth&quot; /&amp;gt;
	&amp;lt;s:Scroller includeIn=&quot;selectedGender&quot; height=&quot;100%&quot; width=&quot;100%&quot;&amp;gt;			
		&amp;lt;s:Group&amp;gt;			
			&amp;lt;s:layout&amp;gt;
				&amp;lt;s:VerticalLayout/&amp;gt;
			&amp;lt;/s:layout&amp;gt;
			&amp;lt;s:RadioButton label=&quot;Male&quot; value=&quot;0&quot; selected=&quot;true&quot; groupName=&quot;genderRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;Female&quot; value=&quot;1&quot; groupName=&quot;genderRBG&quot;/&amp;gt;
		&amp;lt;/s:Group&amp;gt;
	&amp;lt;/s:Scroller&amp;gt;
	
&amp;lt;/s:HGroup&amp;gt;

&amp;lt;s:HGroup width=&quot;100%&quot; height.selectedMonth=&quot;100%&quot;&amp;gt;
	&amp;lt;s:Label text=&quot;Month Born: &quot; width=&quot;50%&quot; /&amp;gt;
	&amp;lt;s:Button id=&quot;monthButton&quot; label=&quot;January&quot; click=&quot;toggleMonthState()&quot; includeIn=&quot;normal,selectedGender&quot; /&amp;gt;
	&amp;lt;s:Scroller includeIn=&quot;selectedMonth&quot; height=&quot;100%&quot; width=&quot;100%&quot;&amp;gt;			
		&amp;lt;s:Group &amp;gt;			
			&amp;lt;s:layout&amp;gt;
				&amp;lt;s:VerticalLayout/&amp;gt;
			&amp;lt;/s:layout&amp;gt;
			&amp;lt;s:RadioButton label=&quot;January&quot; value=&quot;0&quot; selected=&quot;true&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;February&quot; value=&quot;1&quot;  groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;March&quot; value=&quot;2&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;April&quot; value=&quot;3&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;May&quot; value=&quot;4&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;June&quot; value=&quot;5&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;July&quot; value=&quot;6&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;August&quot; value=&quot;7&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;September&quot; value=&quot;8&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;October&quot; value=&quot;9&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;November&quot; value=&quot;10&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
			&amp;lt;s:RadioButton label=&quot;December&quot; value=&quot;11&quot; groupName=&quot;monthRBG&quot;/&amp;gt;
		&amp;lt;/s:Group&amp;gt;
	&amp;lt;/s:Scroller&amp;gt;
	
&amp;lt;/s:HGroup&amp;gt;

&amp;lt;s:HGroup width=&quot;100%&quot;&amp;gt;
	&amp;lt;s:Label text=&quot;Day Born: &quot; width=&quot;50%&quot; /&amp;gt;
	&amp;lt;s:TextInput id=&quot;dayBorn&quot; width=&quot;50%&quot; text=&quot;1&quot; /&amp;gt;
&amp;lt;/s:HGroup&amp;gt;

&amp;lt;s:HGroup width=&quot;100%&quot;&amp;gt;
	&amp;lt;s:Label text=&quot;Year Born: &quot; width=&quot;50%&quot; /&amp;gt;
	&amp;lt;s:TextInput id=&quot;yearBorn&quot; width=&quot;50%&quot; text=&quot;1973&quot; /&amp;gt;
&amp;lt;/s:HGroup&amp;gt;

&amp;lt;s:Button id=&quot;runClockBtn&quot; label=&quot;Begin&quot; width=&quot;100%&quot; bottom=&quot;5&quot; click=&quot;doClock()&quot; /&amp;gt;

&amp;lt;s:Label id=&quot;errorDiv&quot; width=&quot;100%&quot; /&amp;gt;
</code></pre>
<p>&lt;/s:View&gt;
</code></p>
<p>
<p>That's right at 190 lines. Not bad for my first Flex mobile application. Now let's look at the new version.</p>
<p>
<code>
<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;s:View xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot;
xmlns:s=&quot;library://ns.adobe.com/flex/spark&quot; title=&quot;Death Clock&quot; backgroundColor=&quot;0x000000&quot; xmlns:mx=&quot;library://ns.adobe.com/flex/mx&quot;&gt;
&lt;fx:Declarations&gt;</p>
<pre><code>&amp;lt;/fx:Declarations&amp;gt;

&amp;lt;fx:Style&amp;gt;
@namespace s &quot;library://ns.adobe.com/flex/spark&quot;;
@namespace mx &quot;library://ns.adobe.com/flex/mx&quot;;

#errorDiv {
	font-weight: bold;
	color: red;
}
&amp;lt;/fx:Style&amp;gt;


&amp;lt;fx:Script&amp;gt;
&amp;lt;![CDATA[
	import mx.collections.ArrayCollection;
				
	private function doClock():void {
			
		var bDay:Date = dob.selectedDate;
		
		var now:Date = new Date();
			
		//Life expectancy will be 75.6 for men, 80.8 for women (http://en.wikipedia.org/wiki/List_of_countries_by_life_expectancy)
		//for the .6 and .8 we just guestimate based on 60 and 80% of 365
		//date math idea from: http://blog.flexexamples.com/2007/08/24/date-math-for-lazy-people/
		var deathDate:Date = new Date(bDay.time);
		if(!selectedGender.selected) {
			deathDate[&quot;fullYear&quot;] += 72;
			deathDate[&quot;date&quot;] += 219;
		} else {
			deathDate[&quot;fullYear&quot;] += 78;
			deathDate[&quot;date&quot;] += 292;
		}
		deathDate[&quot;fullYear&quot;] += 78;
		deathDate[&quot;date&quot;] += 292;

		//are you dead already?
		if(deathDate.getTime() &amp;lt; now.getTime()) {			
			errorDiv.text = 'Sorry, but you are already dead. Have a nice day.';
			return;
		}
			
		var timeLeft:Number = Math.round((deathDate.time - now.time)/1000);
		trace('death is '+deathDate.toString()+ ' v='+deathDate.time);
		trace('Now is ' +now.toString()+ ' v='+now.time);
		trace('diff is '+timeLeft);
		//trace(bDay.toString()+'\n'+deathDate.toString()+'\n'+timeLeft.toString());
		
		navigator.pushView(Counter,{deathDate:deathDate,timeLeft:timeLeft});
	}
]]&amp;gt;
&amp;lt;/fx:Script&amp;gt;

&amp;lt;s:layout&amp;gt;
	&amp;lt;s:VerticalLayout paddingTop=&quot;10&quot; paddingLeft=&quot;5&quot; paddingRight=&quot;5&quot; /&amp;gt;
&amp;lt;/s:layout&amp;gt;

&amp;lt;s:HGroup width=&quot;100%&quot;&amp;gt;
	&amp;lt;s:Label text=&quot;Gender: &quot; width=&quot;30%&quot; /&amp;gt;
	&amp;lt;s:ToggleSwitch id=&quot;selectedGender&quot; skinClass=&quot;skins.GenderToggleSkin&quot; width=&quot;70%&quot;  /&amp;gt;
&amp;lt;/s:HGroup&amp;gt;

&amp;lt;s:HGroup width=&quot;100%&quot;&amp;gt;
	&amp;lt;s:Label text=&quot;Birth Date:&quot; width=&quot;30%&quot;  /&amp;gt;
	&amp;lt;s:DateSpinner id=&quot;dob&quot; width=&quot;70%&quot; /&amp;gt;
&amp;lt;/s:HGroup&amp;gt;

&amp;lt;s:Button id=&quot;runClockBtn&quot; label=&quot;Begin&quot; width=&quot;100%&quot; bottom=&quot;5&quot; click=&quot;doClock()&quot; /&amp;gt;

&amp;lt;s:Label id=&quot;errorDiv&quot; width=&quot;100%&quot; /&amp;gt;
</code></pre>
<p>&lt;/s:View&gt;
</code></p>
<p>
<p>78 lines. Bit nicer, right? Here's a screen shot showing the new UI controls.</p>
<p>
<img src="https://static.raymondcamden.com/images/cfjedi/ScreenClip206.png" />
<p>
<p>I just need to change that &quot;Begin&quot; button to a skull or something and it will be perfect.</p>
}