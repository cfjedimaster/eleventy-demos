<h1>Post</h1>

<p>I'm not sure how useful this will be to others, but it was an interesting question from a reader so I thought I'd share the result. Michael works with a remote service that returns PDF data as base64 encoded text. He wanted to know if it was possible to add a watermark to the PDF before serving it to the user. Here's what I came up with.</p>
<!--more-->
<p>
<p>First, I create a simple service that would read in a PDF file and return it as base64. This would fake the remote service Michael was working with. Note - this code was written &quot;just to work&quot;, in a real application I'd add some caching to reduce the amount of file i/o.</p>
<p>
<code>
component {
<pre><code>remote string function getpdf() returnformat=&quot;plain&quot; { 
	var pdffile = &quot;c:\users\raymond\desktop\the test.pdf&quot;;
	var bits = fileReadBinary(pdffile);
	return toBase64(bits);
}
</code></pre>
<p>}
</code></p>
<p>
<p>Ok, so how do we use this as a consumer and work with the bits. First, we write code to get the data from the service.</p>
<p>
<code>
&lt;!--- get my pdf from the 'remote' server ---&gt;
&lt;cfhttp url="http://localhost/test.cfc?method=getpdf"&gt;
&lt;cfset pdfdata = cfhttp.filecontent&gt;
</code>
<p>
<p>Just to be super anal here and make sure it's clear - no - you would never cfhttp to a local server. Again - I'm just trying to replicate Michael's environment.</p>
<p>
<p>Once you have the bits, how do you work with it? ColdFusion let's you manipulate PDF data very easily, but, it must start from one of two sources - either a real file (which doesn't necessarily need to be a PDF, Office docs work too) or the result of a cfdocument call. We have the data, but ColdFusion isn't going to be able to use it as is. So - we must save the file.</p>
<p>
<code>
&lt;cfset binary = toBinary(pdfdata)&gt;
<p>&lt;cfset tmpFile = getTempFile(getTempDirectory(),&quot;pdf&quot;)&gt;
&lt;cfset fileWrite(tmpFile, binary)&gt;
</code></p>
<p>
<p>Now, at this point, if we don't care about keeping a clean original, we can just manipulate it as is.</p>
<p>
<code>
&lt;cfpdf source="#tmpFile#" action="addwatermark" text="Property of Raymond"&gt;
</code>
<p>
<p>And then finally, serve it to the user:</p>
<p>
<code>
&lt;cfheader name="Content-disposition"  value="attachment;filename=new.pdf" /&gt;
&lt;cfcontent type="application/pdf" file="#tmpFile#" deletefile="no"&gt;
</code>
<p>
<p>Note the use of filename in the cfheader tag. Even though my PDF had some temporary name, I can give it  a nicer name before sending it over.</p>
}