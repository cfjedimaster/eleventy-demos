<h1>Post</h1>

<p>Forgive the overly dramatic blog title - just having a bit of fun. A coworker asked me yesterday how one could take a flat XML file and serve it up as JSON. I told him I'd whip up a &quot;quick example&quot; for him and blog it to share with others. Smirking a bit to myself, I imagined I'd be done in 5 minutes and it would be a bit of a fluff piece. My ego ran head first into a brick wall rather quickly - which - I will admit - was kind of fun. Here's what I discovered.</p>
<p/>
<!--more-->
For the hell of it, I thought, why not simply read in the XML, parse it, and serialize it?
<p/>
<code>
&lt;cfset xmlFile = expandPath("./Applications.xml")&gt;
&lt;cfset xmlData = xmlParse(xmlFile)&gt;
<p>&lt;cfset jsonData = serializeJSON(xmlData)&gt;
&lt;cfoutput&gt;#jsonData#&lt;/cfoutput&gt;
</code></p>
<p/>
<p>Looks simple enough, right? However, it appears that serializeJSON takes the 'toString' version of xmlData. Even though it's a ColdFusion XML variable, it's first converted to a string and then passed to serializeJSON. So basically you get a large JSON encoded string. Or as I call it - a Chrome killer. (To be fair, Chrome was nice about shutting down a tab, and it was more the fact that I have a plugin that recognizes and auto formats JSON strings.) So that's not good. What about converting the XML into native ColdFusion structure?</p>
<p/>
<p>Turns out there is a UDF for that - <a href="http://www.cflib.org/udf/xmltojson">xmlToJson</a>. It makes use of a XSLT transformation to create JSON. Perfect! And appropriately geeky too, right? I mean, how often do you get a chance to tell folks you performed an XSLT transformation today? Try it at the bar next time. It's a sure win. Here's the template I created to test this (note, the UDF is rather large, so I cut out the innards):</p>
<p/>
<code>
<p>&lt;cfset xmlFile = expandPath(&quot;./Applications.xml&quot;)&gt;
&lt;cfset xmlData = xmlParse(xmlFile)&gt;</p>
<p>&lt;cffunction name=&quot;xmlToJson&quot; output=&quot;false&quot; returntype=&quot;any&quot; hint=&quot;convert xml to JSON&quot;&gt;</p>
<p>&lt;/cffunction&gt;</p>
<p>&lt;cfset json = xmlToJson(xmlData)&gt;
&lt;cfdump var=&quot;#deserializeJSON(json)#&quot;&gt;
</code></p>
<p/>
<p>This worked rather fast - shockingly fast actually - but it throws an error when deserializing. The transformation encountered this - Value=&quot;.0&quot;. This created a JSON string something like this - &quot;Value&quot;:.0. That's not valid JSON. In theory I could have done some string parsing, but that felt dirty, so I went to approach 3: manually creating a structure. I designed this UDF:</p>
<p/>
<code>
function xmlToStruct(xml x) {
	var s = {};
<pre><code>if(xmlGetNodeType(x) == &quot;DOCUMENT_NODE&quot;) {
	s[structKeyList(x)] = xmlToStruct(x[structKeyList(x)]);	
}

if(structKeyExists(x, &quot;xmlAttributes&quot;) &amp;&amp; !structIsEmpty(x.xmlAttributes)) { 
	s.attributes = {};
	for(var item in x.xmlAttributes) {
		s.attributes[item] = x.xmlAttributes[item];		
	}
}

if(structKeyExists(x, &quot;xmlChildren&quot;)) {
	for(var i=1; i&amp;lt;=arrayLen(x.xmlChildren); i++) {
		if(structKeyExists(s, x.xmlchildren[i].xmlname)) { 
			if(!isArray(s[x.xmlChildren[i].xmlname])) {
				var temp = s[x.xmlchildren[i].xmlname];
				s[x.xmlchildren[i].xmlname] = [temp];
			}
			arrayAppend(s[x.xmlchildren[i].xmlname], xmlToStruct(x.xmlChildren[i]));				
		 } else {
			s[x.xmlChildren[i].xmlName] = xmlToStruct(x.xmlChildren[i]);		 	 
		 }
	}
}

return s;
</code></pre>
<p>}
</code></p>
<p>
<p>It handles creating a substructure for xml attributes and handling a case where you have 2-N xml children of the same name. (That was the toughest part.) Here's the complete template:</p>
<p>
<code>
&lt;cfset xmlFile = expandPath("./Applications.xml")&gt;
&lt;cfset xmlData = xmlParse(xmlFile)&gt;
<p>&lt;cfscript&gt;
function xmlToStruct(xml x) {
var s = {};</p>
<pre><code>if(xmlGetNodeType(x) == &quot;DOCUMENT_NODE&quot;) {
	s[structKeyList(x)] = xmlToStruct(x[structKeyList(x)]);	
}

if(structKeyExists(x, &quot;xmlAttributes&quot;) &amp;&amp; !structIsEmpty(x.xmlAttributes)) { 
	s.attributes = {};
	for(var item in x.xmlAttributes) {
		s.attributes[item] = x.xmlAttributes[item];		
	}
}

if(structKeyExists(x, &quot;xmlChildren&quot;)) {
	for(var i=1; i&amp;lt;=arrayLen(x.xmlChildren); i++) {
		if(structKeyExists(s, x.xmlchildren[i].xmlname)) { 
			if(!isArray(s[x.xmlChildren[i].xmlname])) {
				var temp = s[x.xmlchildren[i].xmlname];
				s[x.xmlchildren[i].xmlname] = [temp];
			}
			arrayAppend(s[x.xmlchildren[i].xmlname], xmlToStruct(x.xmlChildren[i]));				
		 } else {
			s[x.xmlChildren[i].xmlName] = xmlToStruct(x.xmlChildren[i]);		 	 
		 }
	}
}

return s;
</code></pre>
<p>}</p>
<p>s = xmlToStruct(xmlData);</p>
<p>&lt;/cfscript&gt;</p>
<p>&lt;cfcontent reset=&quot;true&quot; type=&quot;application/json&quot;&gt;&lt;cfoutput&gt;#serializeJSON(s)#&lt;/cfoutput&gt;
</code></p>
<p>
<p>This worked rather fast (2-3 seconds for a 2 meg XML file), but we could make it even faster by cutting out the file read and parsing after we've done it one time:</p>
<p>
<code>
&lt;cfset cachedJSON = cacheGet("jsonstr")&gt;
&lt;cfif isNull(cachedJSON)&gt;
<pre><code>&amp;lt;cfset xmlFile = expandPath(&quot;./Applications.xml&quot;)&amp;gt;
&amp;lt;cfset xmlData = xmlParse(xmlFile)&amp;gt;

&amp;lt;cfscript&amp;gt;
function xmlToStruct(xml x) {
	var s = {};
	
	if(xmlGetNodeType(x) == &quot;DOCUMENT_NODE&quot;) {
		s[structKeyList(x)] = xmlToStruct(x[structKeyList(x)]);	
	}

	if(structKeyExists(x, &quot;xmlAttributes&quot;) &amp;&amp; !structIsEmpty(x.xmlAttributes)) { 
		s.attributes = {};
		for(var item in x.xmlAttributes) {
			s.attributes[item] = x.xmlAttributes[item];		
		}
	}
	
	if(structKeyExists(x, &quot;xmlChildren&quot;)) {
		for(var i=1; i&amp;lt;=arrayLen(x.xmlChildren); i++) {
			if(structKeyExists(s, x.xmlchildren[i].xmlname)) { 
				if(!isArray(s[x.xmlChildren[i].xmlname])) {
					var temp = s[x.xmlchildren[i].xmlname];
					s[x.xmlchildren[i].xmlname] = [temp];
				}
				arrayAppend(s[x.xmlchildren[i].xmlname], xmlToStruct(x.xmlChildren[i]));				
			 } else {
				s[x.xmlChildren[i].xmlName] = xmlToStruct(x.xmlChildren[i]);		 	 
			 }
		}
	}
	
	return s;
}

cachedJSON = serializeJSON(xmlToStruct(xmlData));

&amp;lt;/cfscript&amp;gt;

&amp;lt;cfset cachePut(&quot;jsonstr&quot;, cachedJSON)&amp;gt;
</code></pre>
<p>&lt;/cfif&gt;</p>
<p>&lt;cfcontent reset=&quot;true&quot; type=&quot;application/json&quot;&gt;&lt;cfoutput&gt;#cachedJSON#&lt;/cfoutput&gt;
</code></p>
<p>
<p>This version makes use of ColdFusion 9's built in caching to store the JSON string. On the first hit it takes about 3 seconds to render in the browser. After that it's almost immediate. The cache has no expiration, but it could be updated to timeout after a certain amount of time, or, you could note the date stamp on the file and store both that and the filename as a key to your cache.</p>
<p>}