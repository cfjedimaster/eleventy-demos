<h1>Post</h1>

<p>I've mentioned before that I follow a few Twitter accounts that are primarily picture driven. For example, <a href="https://twitter.com/classicairline">@classicairline</a> posts historical pictures of commercial aircraft. I even created my own account, <a href="https://twitter.com/randomcomicbook">@randomcomicbook</a>, which posts pictures of Marvel comics. (You can read how I created that here: <a href="http://www.raymondcamden.com/2016/02/22/building-a-twitter-bot-to-display-random-comic-book-covers/">Building a Twitter bot to display random comic book covers</a>)</p>
<!--more-->
<p>Twitter provides a way to look at the media for a given user, you just click the &quot;Photos &amp; videos&quot; link on their profile, but I thought it would be neat to build an application that shows <em>just</em> the images by themself. Let me show you what I built, then I'll talk about how I built it. You can find the demo here:</p>
<p><a href="http://twittersuckimage.mybluemix.net/">http://twittersuckimage.mybluemix.net/</a></p>
<p>On first hitting the site, you'll be prompted to authenticate with Twitter:</p>
<p><img src="https://static.raymondcamden.com/images/2016/03/t1.png" alt="Login"></p>
<p>After you've done that, you can then enter a username:</p>
<p><img src="https://static.raymondcamden.com/images/2016/03/t2.png" alt="Post Login"></p>
<p>After entering a name, it will then use the Twitter API to find tweets from that account that include pictures. It then renders them in a grid:</p>
<p><img src="https://static.raymondcamden.com/images/2016/03/t3.jpg" alt="Results"></p>
<p>Clicking on one result opens up the image full size:</p>
<p><img src="https://static.raymondcamden.com/images/2016/03/t4.jpg" alt="Result"></p>
<p>Ok, so how did I do it? Let's focus on the back end first.  Here's the first portion of my application:</p>
<pre><code class="language-javascript">
var express = require('express');
var app = express();

app.use(express.static('public'));

var credentials = require('./credentials.json');

var OAuth = require('oauth').OAuth;
var oa2;

app.set('port', process.env.PORT || 3000);

app.use(require('cookie-parser')(credentials.cookieSecret));
app.use(require('express-session')({
	resave:false,
	saveUninitialized:false,
	secret:credentials.cookieSecret
}));

app.get('/loginstatus', function(req, res) {
	console.log('ran loginstatus check');
	res.send(req.session.screen_name?'1':'0');
});
</code></pre>
<p>In order to use Twitter authentication, I used the <a href="https://www.npmjs.com/package/oauth">oauth</a> package from NPM. It works well, but I find it a bit awkward at times. I created a simple route, <code>loginstatus</code>, that is used to see if I've already authenticated. If you aren't authenticated, here is the route that will start that process.</p>
<pre><code class="language-javascript">
app.get('/auth/twitter', function(req, res){
	
	var callbackurl = 'http://' + req.headers.host + '/auth/twitter/callback';

	oa = new OAuth(
		'https://api.twitter.com/oauth/request_token',
		'https://api.twitter.com/oauth/access_token',
		credentials.twitter_consumer_key,
		credentials.twitter_secret,
		'1.0',
		callbackurl,
		'HMAC-SHA1'
	);
	
	oa.getOAuthRequestToken(function(error, oauth_token, oauth_token_secret, results){
		if (error) {
			console.log(error);
			res.send('yeah no. didnt work.');
		}
		else {
			req.session.oa = oa;
			req.session.oauth_token = oauth_token;
			req.session.oauth_token_secret = oauth_token_secret;
			res.redirect('https://twitter.com/oauth/authenticate?oauth_token='+oauth_token);
	}
	});
});
</code></pre>
<p>Upon returning from Twitter, you then end up here:</p>
<pre><code class="language-javascript">
app.get('/auth/twitter/callback', function(req, res, next) {

		var oa = new OAuth(req.session.oa._requestUrl,
	                  req.session.oa._accessUrl,
	                  req.session.oa._consumerKey,
	                  req.session.oa._consumerSecret,
	                  req.session.oa._version,
	                  req.session.oa._authorize_callback,
	                  req.session.oa._signatureMethod);
	
		oa.getOAuthAccessToken(req.session.oauth_token,
							   req.session.oauth_token_secret,
							   req.param('oauth_verifier'), 
		function(error, oauth_access_token, oauth_access_token_secret, results){
			if (error){
				console.log(error);
				res.send("yeah something broke.");
			} else {
				console.log('callback results');
				console.dir(results);
				req.session.oauth_access_token = oauth_access_token;
				req.session.oauth_access_token_secret = oauth_access_token_secret;
				req.session.screen_name = results.screen_name;
				res.redirect('/');
			}
		}
		);
});
</code></pre>
<p>I'm storing tokens for the auth in session - and to be honest - I may not be using the oauth code entirely correct here, but it seems to work. So how does search work? If you check the docs for the <a href="https://dev.twitter.com/rest/public/search">Search API</a>, you'll see you the two parameters we need: <code>from</code> will let you filter to one account and <code>filter:media</code> will let you get Tweets with media attachments. Here is the route that handles the search.</p>
<pre><code class="language-javascript">
app.get('/search/:account', function(req, res) {
	console.log('search for images in '+req.params.account);
	var account = req.params.account;
	
	var oa = new OAuth(req.session.oa._requestUrl,
	                  req.session.oa._accessUrl,
	                  req.session.oa._consumerKey,
	                  req.session.oa._consumerSecret,
	                  req.session.oa._version,
	                  req.session.oa._authorize_callback,
	                  req.session.oa._signatureMethod);
	
	oa.get('https://api.twitter.com/1.1/search/tweets.json?q=from%3A'+account+'+filter%3Amedia&count=100', req.session.oauth_access_token, req.session.oauth_access_token_secret,           
      function (e, retData, ores) {
		if (e) {
			console.log('Search: error result');
			console.dir(JSON.parse(e.data));
			
			var error = JSON.parse(e.data).errors;
			res.send({error:1, message:error[0].message});			
		} else {
			retData = JSON.parse(retData);
			console.log('got '+retData.statuses.length+ ' items');
			var results = [];
					
			retData.statuses.forEach(function(tweet) {
				if(tweet.entities && tweet.entities.media && tweet.entities.media.length &gt; 0) {
					tweet.entities.media.forEach(function(m) {
						results.push(m.media_url);	
					});
				}

			});
			res.send(results);

		}
      });
	
});
</code></pre>
<p>The end result of this is a simple array of URLs. What's cool is that one media URL can represent both a thumbnail and the original image. You'll see how when we get to the front end.</p>
<p>So let's talk about the front end. I tried to use a few different &quot;image layout&quot; plugins, but every one I tried didn't work well for me. I ended up just laying them out side by side and using a bit of CSS to add some padding. To create the detail view, I used <a href="http://www.jacklmoore.com/colorbox/">Colorbox</a>, a jQuery plugin.</p>
<p>Here's the entire front-end JavaScript code.</p>
<pre><code class="language-javascript">
$(document).ready(function() {
	
	$statusDiv = $('#statusArea');
	$twitterAccount = $('#twitterAccount');
	$searchButton = $('#searchButton');
	$results = $('#results');
	$searchForm = $('#searchForm');
	
	$.get('/loginstatus', {}, function(res) {
		if(res == 0) {
			console.log('we need to auth');
			$statusDiv.html('<p>To begin, you need to authenticate with Twitter: <a href="/auth/twitter">Sign in via Twitter</a></p>');
		} else {
			console.log('we are online');
			$searchForm.show();
		}
	});

	$searchButton.on('click', function() {
		var account = $.trim($twitterAccount.val());
		//remove @
		if(account.indexOf('@') === 0) account = account.substr(1);
		if(account === '') return;

		$results.html('<i>Searching...</i>').show();
		$searchButton.prop('disabled',true);
		console.log('begin looking for '+account);

		$.get('/search/'+account, function(result) {
			console.log('Back from search with '+result.length+' items');
			
			$searchButton.prop('disabled',false);
			
			if(result.length === 0) {
				$results.html('<i>Sorry, but no results were found.</i>').show();
				return;
			}
			
			s = '';

			result.forEach(function(u) {
				s += '&lt;a class="gallery" href="'+u+'"&gt;&lt;img src="' + u + ':thumb" data-highres="'+u+'"&gt;&lt;/a&gt;';
			});
			
			$results.html(s).show();
			$('.gallery').colorbox();
			
		});
	});
	
});
</code></pre>
<p>The first function simply handles seeing if we have an active login on the server side. Searching is just a quick call to the back-end and processing the array result.</p>
<p>You can find the complete code for this application up on GitHub: <a href="https://github.com/cfjedimaster/TwitterSuckImage">https://github.com/cfjedimaster/TwitterSuckImage</a>. Let me know what you think by leaving me a comment below!</p>
}