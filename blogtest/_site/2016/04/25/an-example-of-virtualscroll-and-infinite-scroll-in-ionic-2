<h1>Post</h1>

<p>Before I begin, a warning. At the time I wrote this blog post, Ionic 2 was still in beta. Also, I've barely begun to learn Ionic 2 myself. You should consider this code beta-level quality written by an inexperienced dev. On the other hand, if it still works perfectly, I'm going to pretend I was brilliant all along.</p>
<!--more-->
<p>A few days ago, the <a href="http://blog.ionic.io">Ionic blog</a> released a great entry on Ionic 2 and APIs: <a href="http://blog.ionic.io/10-minutes-with-ionic-2-calling-an-api/">10 Minutes with Ionic 2: Calling an API</a>. In this post, Andrew describes how you can use the Ionic CLI to generate both an application and a boilerplate HTTP service, or more accurately, a &quot;Provider&quot;.</p>
<p>If you walk through this his tutorial you'll end up with a simple application that drives a list of people via the <a href="https://randomuser.me/">Random User Generator</a>. I was thinking about how you would take this application and convert it to use an infinite (well, <em>near</em> infinite) list of people instead.</p>
<p>To begin, I used the Random User Generator to output a <em>huge</em> list of users. I didn't want to abuse their API so I did one big call, saved the JSON, and then imported that data into my LoopBack application running locally. (If anyone wants to see how that's done, just ask. I basically reused some of the logic from my blog post: <a href="https://www.raymondcamden.com/2016/01/06/seeding-data-for-a-strongloop-app/">Seeding data for a StrongLoop app</a>). The net result was that I had a lot of &quot;People&quot; data that I could use via a REST API - a bit over two thousand.</p>
<p>My first change was to people-service.ts. The original code would cache the result. My modified code removes this cache and supports a parameter telling it what index to begin fetching results. This is all part of the LoopBack API and I'll be talking about that in a blog post over on the <a href="https://strongloop.com/strongblog/">StrongLoop blog</a> later this week.</p>
<pre><code class="language-javascript">
import {Injectable} from 'angular2/core';
import {Http} from 'angular2/http';
import 'rxjs/add/operator/map';

/*
  Generated class for the PeopleService provider.

  See https://angular.io/docs/ts/latest/guide/dependency-injection.html
  for more info on providers and Angular 2 DI.
*/
@Injectable()
export class PeopleService {

  perpage:number = 50;
  
  constructor(public http: Http) {}

  load(start:number=0) {

    return new Promise(resolve =&gt; {
      
      this.http.get('http://localhost:3000/api/people?filter[limit]='+this.perpage+'&filter[skip]='+start)
        .map(res =&gt; res.json())
        .subscribe(data =&gt; {

          resolve(data);

        });
    });
  }
}
</code></pre>
<p>Note that I'm hard coding a <code>perpage</code> value. In theory the service could let me change that, but I wanted to keep things somewhat simple.</p>
<p>Now let's look at the Home page. First, let's consider the view.</p>
<pre><code class="language-markup">
&lt;ion-navbar *navbar&gt;
	&lt;ion-title&gt;
		Home
	&lt;&#x2F;ion-title&gt;
&lt;&#x2F;ion-navbar&gt;

&lt;ion-content class=&quot;home&quot;&gt;
	
	&lt;ion-list [virtualScroll]=&quot;people&quot; approxItemHeight=&quot;50px&quot;&gt;
		&lt;ion-item *virtualItem=&quot;#person&quot;&gt;
			&lt;ion-avatar item-left&gt;
				&lt;ion-img [src]=&quot;person.picture&quot; width=&quot;48&quot; height=&quot;48&quot;&gt;&lt;&#x2F;ion-img&gt;
			&lt;&#x2F;ion-avatar&gt;
			&lt;h2&gt;{{person.name}}&lt;&#x2F;h2&gt;
		&lt;&#x2F;ion-item&gt;
	&lt;&#x2F;ion-list&gt;

 &lt;ion-infinite-scroll (infinite)=&quot;doInfinite($event)&quot;&gt;
   &lt;ion-infinite-scroll-content&gt;&lt;&#x2F;ion-infinite-scroll-content&gt;
 &lt;&#x2F;ion-infinite-scroll&gt;
 	
&lt;&#x2F;ion-content&gt;
</code></pre>
<p>The changes here are two-fold. First, I changed the list to support <a href="http://ionicframework.com/docs/v2/api/components/virtual-scroll/VirtualScroll/">VirtualScroll</a>. This is the Ionic V2 version of collectionRepeat, basically a list optimized to handle a butt load of data.</p>
<p>Secondly - I added the <a href="http://ionicframework.com/docs/v2/api/components/infinite-scroll/InfiniteScroll/">InfiniteScroll</a> directive. This is pretty simple to use (you'll see the code in a moment), but don't forget this little gem in the docs: &quot;When this expression has finished its tasks, it should call the complete() method on the infinite scroll instance.&quot; Yeah, that's pretty important. But I'll pretend I didn't miss that. Ok, so let's look at the code behind the view.</p>
<pre><code class="language-javascript">
import {Page} from &#x27;ionic-angular&#x27;;
import {PeopleService} from &#x27;..&#x2F;..&#x2F;providers&#x2F;people-service&#x2F;people-service&#x27;;

@Page({
  templateUrl: &#x27;build&#x2F;pages&#x2F;home&#x2F;home.html&#x27;,
  providers:[PeopleService]
  
})
export class HomePage {
  public people:any = [];
  private start:number=0;
  
  constructor(public peopleService:PeopleService) {
    
    this.loadPeople();
  }
  
  loadPeople() {
    
    return new Promise(resolve =&gt; {
      
      this.peopleService.load(this.start)
      .then(data =&gt; {
        
        for(let person of data) {
          this.people.push(person);
        }
        
        resolve(true);
        
      });
            
    });

  }
  
  doInfinite(infiniteScroll:any) {
     console.log(&#x27;doInfinite, start is currently &#x27;+this.start);
     this.start+=50;
     
     this.loadPeople().then(()=&gt;{
       infiniteScroll.complete();
     });
     
  }

}
</code></pre>
<p>Ok, so there's a few important changes here. First, I made <code>loadPeople</code> return a promise. I needed this so I could listen for it to complete when running my &quot;get new stuff&quot; code. I'm keeping a variable, <code>start</code>, to know where I am in the list of data and you can see <code>doInfinite</code> as the handler for fetching more data. Pay special attention to the <code>infiniteScroll.complete()</code> call. As the docs say, you need to do this to let the InfiniteScroll control know stuff is done. Also note that <code>this.start+=50</code> is problematic since 50 has to match the <code>perpage</code> value in the service. I could make it detect how many items were added in the last call, but again, I wanted to keep it simple.</p>
<p>Here is a snazzy animated gif of it in action:</p>
<iframe src='https://gfycat.com/ifr/TediousThoroughGermanwirehairedpointer' frameborder='0' scrolling='no' width='640' height='969.6969696969696' allowfullscreen></iframe>
<p>Unfortunately, the code does not appear to work in iOS. I have no idea why (no error is thrown), but it works fine in Android and via <code>ionic serve</code>.</p>
<p>If you want the complete source code for this, I'm more than happy to share it, but bear in mind this is part of a larger LoopBack app. I'll share a link to the <em>entire</em> application, but the Ionic specific stuff may be found in the <code>app1</code> folder.</p>
<p><a href="https://github.com/cfjedimaster/StrongLoopDemos/tree/master/superlongscroll">https://github.com/cfjedimaster/StrongLoopDemos/tree/master/superlongscroll</a></p>
}