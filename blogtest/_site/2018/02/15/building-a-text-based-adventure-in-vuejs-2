<h1>Post</h1>

<p>Yesterday I <a href="https://www.raymondcamden.com/2018/02/14/building-a-text-based-adventure-in-vuejs/">posted</a> a proof of concept of a simple text-based adventure game built in Vue.js. While it was incredibly simple (and a bit broken, sorry), I made some progress in updating the engine today that I thought would be cool to share. Pretty much nothing visually changed, but I made some structural changes that I think will go a long way to improving the core game.</p>
<p>One of the first things I did was add support for command aliases. I already had this in terms of &quot;w&quot; being an alias for &quot;west&quot;, but I wanted a generic structure for this I could update more easily. With that in mind, I added a simple aliases.json file:</p>
<pre><code class="language-js">{
	&quot;north&quot;:&quot;n&quot;,
	&quot;west&quot;:&quot;w&quot;,
	&quot;east&quot;:&quot;e&quot;,
	&quot;south&quot;:&quot;s&quot;,
	&quot;look at|l at|l&quot;:&quot;look&quot;
}
</code></pre>
<p>Take a look at that last line. The use of pipe allows me to have multiple variations of an alias. I could have simply repeated them, but I liked this form. It felt more compact.</p>
<p>Next, I added a file called commands.json. It's only purpose was to serve as a definition of legal commands:</p>
<pre><code class="language-js">[
	&quot;w&quot;,
	&quot;e&quot;,
	&quot;n&quot;,
	&quot;s&quot;,
	&quot;look *&quot;
]
</code></pre>
<p>Again, the last line is important here. My game doesn't support &quot;looking&quot; yet, but I used the form <code>look *</code> as a way of supporting the ability to look at anything. Eventually my code will map &quot;look X&quot; to a result that says, &quot;She wants to do command <code>look</code> with an arg <code>X</code>.&quot;</p>
<p>I then combined my three data files into one JSON file called <code>data.json</code> and simply fetched that on start. I did this via a utility script I'm going to show in a bit. Here is the new startup routine:</p>
<pre><code class="language-js">mounted() {
	console.log('Loading room data...');
	fetch('data.json')
	.then(res =&gt; res.json())
	.then(res =&gt; {
		console.log('Loaded.');
		this.aliases = this.prepareAliases(res.aliases);
		this.commands = res.commands;
		this.rooms = res.rooms;
		this.room = this.rooms[this.initialRoom];
		this.loading = false;
		//nextTick required because line above changes the DOM
		this.$nextTick(() =&gt; {
			this.$refs.input.focus();
		});
	});
},
</code></pre>
<p>The <code>prepareAliases</code> method simply handles taking those pipes and 'exploding' them out:</p>
<pre><code class="language-js">prepareAliases(s) {
	/*
	To make it easier for the author, I allow for X|Y, which I'll expand out at X:alias and Y:alias
	*/
	let aliases = {};
	for(let key in s) {
		if(key.indexOf('|') === -1) {
			aliases[key] = s[key];
		} else {
			let parts = key.split('|');
			parts.forEach(p =&gt; {
				aliases[p] = s[key];
			});
		}
	}
	return aliases;
},
</code></pre>
<p>As the comment says, I want it to be easier for the author, or game developer. And that desire is what drove my final change. As I mentioned, I built a simple utility that would combine my JSON files into one. But I wanted to do something special for rooms. In the first version, rooms were defined in JSON. Here is an example:</p>
<pre><code class="language-js">&quot;initial&quot;:{
	&quot;description&quot;:&quot;This is a rather boring room, but despite that, you feel the pull of a new adventure!&quot;,
	&quot;exits&quot;:[
		{
			&quot;dir&quot;:&quot;w&quot;,
			&quot;room&quot;:&quot;westroom&quot;
		},
		{
			&quot;dir&quot;:&quot;e&quot;,
			&quot;room&quot;:&quot;eastroom&quot;
		}
	]
},
</code></pre>
<p>While that isn't bad, the description field doesn't really work well for long descriptions. I can't use line breaks or quotes without escaping and what I really want is the ability to just write. So I came up with a new format:</p>
<pre><code class="language-html">&lt;description&gt;
You are in a rather simple room. Plain white walls surround you and nothing really
stands out of the ordinary. Despite that, you feel the pull of a new adventure and
steel yourself for what waits ahead!
&lt;/description&gt;

&lt;exits&gt;
w|westroom
e|eastroom
&lt;/exits&gt;
</code></pre>
<p>I've got a simple <code>description</code> tag where I can put in anything I want. Exits are a line-delimited list of values where each line has a direction and destination. Finally, the name of the file is the &quot;key&quot; for the room. So this file would be <code>initial.room</code>.</p>
<p>With that in place, I built this utility:</p>
<pre><code class="language-js">/*
Simple Node script to read in a few JSON files (soon to be text too) 
and output a JSON output that can be saved into a file.
*/
const fs = require('fs');

//let rooms = fs.readFileSync('./rooms.json', 'UTF-8');
let aliases = fs.readFileSync('./aliases.json', 'UTF-8');
let commands = fs.readFileSync('./commands.json', 'UTF-8');

let data = {};
//data.rooms = JSON.parse(rooms);
data.aliases = JSON.parse(aliases);
data.commands = JSON.parse(commands);
data.rooms = {};

/*
now parse everything in rooms
*/
let rooms = fs.readdirSync('./rooms');
let descRe = /&lt;description&gt;([\s\S]+)&lt;\/description&gt;/m;
let exitRe = /&lt;exits&gt;([\s\S]+)&lt;\/exits&gt;/m;

rooms.forEach(room =&gt; {
	let r = {};
	let roomContent = fs.readFileSync('./rooms/'+room,'UTF-8');
	let desc = roomContent.match(descRe);
	r.description = desc[1].trim();

	let exitStr = (roomContent.match(exitRe))[1].trim();
	let exitArr = exitStr.split(/\r\n/);

	r.exits = [];
	exitArr.forEach(e =&gt; {
		let [dir,loc] = e.split('|');
		r.exits.push({&quot;dir&quot;:dir, &quot;room&quot;:loc});
	});

	let name = room.split('.')[0];
	data.rooms[name] = r;
});

console.log(JSON.stringify(data));
</code></pre>
<p>And then ran: <code>node util.js &gt; data.json</code>. And voila - done. You can view the code here (https://github.com/cfjedimaster/webdemos/tree/master/vuetextbasedgame) and actually play it here (https://cfjedimaster.github.io/webdemos/vuetextbasedgame/).</p>
<p><i>Header photo by <a href="https://unsplash.com/photos/4PwRZXbXKxY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Jeremy Bishop</a> on Unsplash</i></p>
}