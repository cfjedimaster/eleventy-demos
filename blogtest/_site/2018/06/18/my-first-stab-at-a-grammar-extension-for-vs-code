<h1>Post</h1>

<p>Let me start off by saying that this isn't necessarily the <em>best</em> Visual Studio Code extension out there and - frankly - it's probably near the bottom. But it's a beginning and probably the easiest experience I had building an extension yet. So what did I build?</p>
<p>I've been using spell checking extensions in VS Code for sometime. (My current favorite is <a href="https://marketplace.visualstudio.com/items?itemName=ban.spellright">Spell Right</a>). While the extension is good for catching spelling mistakes, it doesn't handle grammar. <a href="https://www.grammarly.com/">Grammarly</a> has a pretty cool tool for checking grammar but doesn't have an API. When I asked about this on Twitter, the folks at <a href="https://languagetool.org/">LanguageTool</a> chimed in to share that they <em>did</em> have an API and it was free to use. Their service is free (with a <a href="https://languagetool.org/#Price">premium upgrade</a> option) so I decided to give it a whirl.</p>
<p>The <a href="http://wiki.languagetool.org/public-http-api">public API</a> has a fairly simple endpoint. You pass in text, a language (or tell it to guess), and you get results. You can customize the results by turning on and off various rules though. Here's the entire extension, code-wise anyway:</p>
<pre><code class="language-js">'use strict';
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import * as rp from 'request-promise';
import * as showdown from 'showdown';

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {

    // The command has been defined in the package.json file
    // Now provide the implementation of the command with  registerCommand
    // The commandId parameter must match the command field in package.json
    let disposable = vscode.commands.registerCommand('extension.runLanguageTool', async () =&gt; {
        // The code you place here will be executed every time your command is executed

        // get current document text

        let editor = vscode.window.activeTextEditor;
        if(!editor) {
            vscode.window.showErrorMessage('No active editor to check.');
            return;
        }
        console.log('lang',editor.document.languageId);

        let text = editor.document.getText();
        let type = editor.document.languageId;

        // now lets try to remove common MD front matter stuff (and maybe do more later)
        text = prepareText(text, type);

        if(text.length === 0) {
            vscode.window.showErrorMessage('No text to check.');
            return;
        }

        let results = await checkText(text);

        console.log(results);

        // now id make some good html
        let html = generateHTML(results as Array&lt;any&gt;);

        // now render it
        const panel = vscode.window.createWebviewPanel(
            'languageToolResults', // Identifies the type of the webview. Used internally
            &quot;LanguageTool Results&quot;, // Title of the panel displayed to the user
            vscode.ViewColumn.Two, // Editor column to show the new webview panel in.
            { } // Webview options. More on these later.
        );
        panel.webview.html = html;

    });

    context.subscriptions.push(disposable);
}

// this method is called when your extension is deactivated
export function deactivate() {
}

function prepareText(s:string,type:string):string {
    /*
    lets first remove ---X---
    */
    s = s.replace(/---[\s\S]*---/m,'').trim();
    // todo - more ;)

    //if type is markdown, lets render it to html and then remove it
    if(type === 'markdown') {
        let converter = new showdown.Converter();
        s = converter.makeHtml(s);
        // remove code blocks
        s = s.replace(/&lt;pre&gt;&lt;code[\s\S]*?&lt;\/code&gt;&lt;\/pre&gt;/mg, '');
        // now remove html
        s = s.replace(/&lt;.*?&gt;/g, '');
    }
    return s;
}

async function checkText(s:string) {
    return new Promise((resolve, reject) =&gt; {
        rp({
            uri:'https://languagetool.org/api/v2/check',
            method:'POST',
            form:{
                text:s,
                language:'auto',
                disabledRules:'EN_QUOTES'
            }
        })
        .then(res =&gt; {
            resolve(JSON.parse(res).matches);
        })
        .catch(e =&gt; {
            console.log('error calling api', e);
            reject(e);
        });

    });

}

function generateHTML(data:Array&lt;any&gt;):string {

    /*
    So before release, I decided to simply render all the rules the same. I'm keeping some old bits in
    for review later though...

    let replacementRules = ['MORFOLOGIK_RULE_EN_US','COMMA_COMPOUND_SENTENCE','COMMA_PARENTHESIS_WHITESPACE'];
    */
    let results = '';
    let counter = 0;

    data.forEach(d =&gt; {
        counter++;
        let s = '&lt;p&gt;&lt;b&gt;'+counter+') '+d.message+'&lt;/b&gt;&lt;br/&gt;';
        //if(replacementRules.indexOf(d.rule.id) &gt;= 0) {

        // generate highlighted context
        let badword = d.context.text.substr(d.context.offset,d.context.length);
        let sentence = d.context.text.replace(badword, '&lt;b&gt;&lt;i&gt;'+badword+'&lt;/i&gt;&lt;/b&gt;');
        s += sentence+'&lt;br/&gt;';
        let replacements:string[] = [];
        d.replacements.forEach((r: any) =&gt; {
            replacements.push(r.value);
        });
        s += 'Suggestions: '+replacements.join(',');

        //}
        s += '&lt;/p&gt;';
        results += s;
    });

    let content = `
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;LanguageTool Results&lt;/h1&gt;
    &lt;p&gt;
    The following results are provided by &lt;a href=&quot;https://languagetool.org/&quot;&gt;LanguageTool&lt;/a&gt;.
    &lt;/p&gt;

    &lt;p&gt;
    There were ${data.length} result(s) found:
    &lt;/p&gt;

    ${results}

&lt;/body&gt;
&lt;/html&gt;   
`;

    return content;
}
</code></pre>
<p>From top to bottom:</p>
<ul>
<li>I register a command, <code>runLanguageTool</code>, that the end user will run via F1.</li>
<li>I attempt to get the text in the current document.</li>
<li>I then do a bit of manipulation on the text with the assumption that it's probably Markdown and has front matter. I also render it to HTML and then remove that HTML in an attempt to get to the &quot;pure&quot; text. This has the side effect of not being able to report an issue and line it up with a line number, but I think that is ok.</li>
<li>Finally, I render it using one of the newer VS Code extension APIs, the web view. This is a pretty powerful feature that supports communication back and forth, but for my usage I just render to HTML.</li>
<li>And yeah, it's not terribly pretty.</li>
</ul>
<p><img src="https://static.raymondcamden.com/images/2018/05/lt1.jpg" alt="Sample Output"></p>
<p>That's probably a bit hard to read, so here is a copy and paste:</p>
<blockquote>
<p>
1) Possible spelling mistake found<br/>
...y I discovered the awesomeness of Slash Webtasks, an incredibly easy way to build your o...<br/>
Suggestions: Web tasks
</p>
<p>
2) Possible spelling mistake found<br/>
...edibly easy way to build your own Slack integrations using Webtask. And while it truly is an...<br/>
Suggestions: integration,integration s<br/>
</p>
<p>
3) Possible spelling mistake found<br/>
...build your own Slack integrations using Webtask. And while it truly is an awesome tool,...<br/>
Suggestions: Web task<br/>
</p>
<p>
4) Possible spelling mistake found<br/>
...egration, especially when paired with a webtask, and I'd like to share a simple demo I ...<br/>
Suggestions: web task<br/>
</p>
<p>
5) Possible spelling mistake found<br/>
...ining in a channel. We can use Slack's APIs to accomplish this with the following s...<br/>
Suggestions: Axis,Apes,Apia,Avis,Apps,Apish,AIs,API,Pis,API s,ABIS,AFIS,AIS,AMIS,APII,APRS,APS,GPIS,PIS<br/>
</p>
<p>
6) Possible spelling mistake found<br/>
...llowing steps: Send every message to a serverless endpoint Take the text and analyze the ...<br/>
Suggestions: server less<br/>
</p>
</blockquote>
<p>It could definitely use some improvement so I'd love folks to take a look at it. You can find the repo here: <a href="https://github.com/cfjedimaster/vscode-languagetool">https://github.com/cfjedimaster/vscode-languagetool</a>. And you can install it here: <a href="https://marketplace.visualstudio.com/items?itemName=raymondcamden.languagetool">https://marketplace.visualstudio.com/items?itemName=raymondcamden.languagetool</a>. Let me know what you think. As I said, this was - generally - a good experience working on the extension. I have not had the best experience with VS Code extension development. There isn't anything necessarily wrong with it, I just don't find it quite as simple as <a href="http://brackets.io/">Brackets</a>.</p>
<p>Oh - and I'm still trying out the whole async/await thing and I still freaking love it.</p>
<p><i>Header photo by <a href="https://unsplash.com/photos/zssAC1KCzNs?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Markus Spiske</a> on Unsplash</i></p>
}