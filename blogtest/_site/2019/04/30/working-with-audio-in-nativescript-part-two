<h1>Post</h1>

<p>A few days ago I blogged about my experience working with audio and NativeScript (<a href="https://www.raymondcamden.com/2019/04/25/working-with-audio-in-nativescript-part-one">Working with Audio in NativeScript - Part One</a>). Over the weekend I got a chance to wrap up the demo application I was working on and thought I'd share the result. As always, my work ends up being a mix of stuff I think went well and stuff I think... could be done better. I'll do my best to call out the code I think could be improved and would love any suggestions or comments.</p>
<p>As a reminder, the end goal of this research was to create a custom sound board application. As a user, you would record a sound to play back later. Sound boards are a dime a dozen on app stores but I always thought it would be fun to have one I could setup myself. Normally I think this when one of my kids say something funny and then they never say it again. Because of course.</p>
<p>Here's how the application ended up looking. The UI/UX is rather simple and I didn't bother with nice colors or anything. Initially, the application lets you know you don't have any sounds ready:</p>
<img src="https://static.raymondcamden.com/images/2019/04/sb1.png" alt="Initial screen of the application showing no sounds are avilable" class="imgborder imgcenter">
<p>Clicking the &quot;Record New Sounds&quot; (really should be singular) button takes you to the next view:</p>
<img src="https://static.raymondcamden.com/images/2019/04/sb2.png" alt="Page where you record a new sound" class="imgborder imgcenter">
<p>In this view you name and record your sound. The play button lets you test to ensure you got it right.</p>
<p>Once you've recorded a few sounds, they show up in a simple list on the main page:</p>
<img src="https://static.raymondcamden.com/images/2019/04/sb3.png" alt="The list of recorded sounds" class="imgborder imgcenter">
<p>Finally, to delete a sound (and the UI should provide a hint for this), you &quot;long press&quot; on a sound:</p>
<img src="https://static.raymondcamden.com/images/2019/04/sb4.png" alt="Demonstration of the delete dialog" class="imgborder imgcenter">
<p>And that's it. So really the app came down to two core aspects:</p>
<p>First was recording audio to the file system and playing it later. This was really easy and covered in my <a href="https://www.raymondcamden.com/2019/04/25/working-with-audio-in-nativescript-part-one">last post</a> so I won't go deep into it here.</p>
<p>The next aspect was remembering your sounds. This one was a bit trickier. I wanted to let you assign names to each sound and hide the actual file names from the user. NativeScript supports some nice client-side storage methods (you can read my <a href="https://www.nativescript.org/blog/client-side-storage-in-nativescript-applications">article</a> on it!) so the only question was which would I use. In this case, I made a decision I think may not be best. I went with ApplicationSettings. In general my &quot;rule&quot; for picking between a simple key/value system and a &quot;proper&quot; storage system is - will my data grow based on the user's use of the application? What I mean is - a set of &quot;know&quot; values like, &quot;preferred theme&quot; or &quot;last product viewed&quot; is a particular set of data that doesn't grow over time. Data like notes, where the user can write a million a day or so, have no limit.</p>
<p>In my case, it is possible for the user to create a million sounds (ok, not a million) but I figured reasonably they wouldn't make more than thirty. I was only storing a name and a file path so I figure a JSON array of that size would be &quot;ok&quot;.</p>
<p>I reserve the right to call myself stupid for this decision later on. Ok, let's look at the code! You can find the complete repository at <a href="https://github.com/cfjedimaster/ns-soundboard">https://github.com/cfjedimaster/ns-soundboard</a>.</p>
<p>I'll start with the home view, trimmed a bit to remove unnecessary things:</p>
<pre><code class="language-html">&lt;template&gt;
    &lt;Page class=&quot;page&quot;&gt;
        &lt;ActionBar class=&quot;action-bar&quot;&gt;
            &lt;Label class=&quot;action-bar-title&quot; text=&quot;Custom Sound Board&quot;&gt;&lt;/Label&gt;
        &lt;/ActionBar&gt;

        &lt;StackLayout&gt;

            &lt;Label v-if=&quot;sounds.length === 0&quot; text=&quot;You haven't recorded any sounds yet.&quot; /&gt;

            &lt;ListView for=&quot;sound in sounds&quot; @itemTap=&quot;playSound&quot;&gt;
                &lt;v-template&gt;
                    &lt;Label :text=&quot;sound.name&quot; :filename=&quot;sound.fileName&quot; @longPress=&quot;deleteSound&quot; /&gt;
                &lt;/v-template&gt;
            &lt;/ListView&gt;
            &lt;Button text=&quot;Record New Sounds&quot; @tap=&quot;goToRecord&quot; /&gt;
        &lt;/StackLayout&gt;
    &lt;/Page&gt;
&lt;/template&gt;

&lt;script&gt;
const audio = require('nativescript-audio');
const fileSystemModule = require('tns-core-modules/file-system');

import soundsAPI from '../api/sounds';
import Record from './Record';

export default {
    data() {
        return {
            audioFolder:null,
            sounds:[]
        }
    },
    created() {
        this.sounds = soundsAPI.getSounds();
		this.audioFolder = fileSystemModule.knownFolders.currentApp().getFolder('recordings');
    },
    methods:{
        async deleteSound(event) {
            let filename = event.object.filename;
            let confirmOptions = {
                title: &quot;Delete Sound&quot;,
                message: &quot;Do you want to delete this sound?&quot;,
                okButtonText: &quot;Yes&quot;,
                cancelButtonText: &quot;No&quot;
            };
            confirm(confirmOptions).then(async result =&gt; {
                if(result) {
                    // first delete the file
                    let file = this.audioFolder.getFile(filename);
                    await file.remove();
                    soundsAPI.removeSound(filename);
                    this.sounds = soundsAPI.getSounds();
                }
            });
        },
        goToRecord() {
            this.$navigateTo(Record);
        },
        async playSound(event) {
            let player = new audio.TNSPlayer();

            await player.playFromFile({
                audioFile:this.audioFolder.path+'/'+event.item.fileName
            });

        }
    }
};
&lt;/script&gt;
</code></pre>
<p>The UI is pretty minimal so there isn't much to discuss there. I did, however, have some issues with the <code>longPress</code> event. It did <em>not</em> work well on the <code>ListView</code> directive. I had to move to the label. Another issue is that <code>longPress</code> also fires <code>itemTap</code>, which I think is a bug, but honestly felt ok about this for now. It's something I think I may want to address later. Code wise there's only a few methods and in general the only real complex one is the delete handler. You can see I set up a confirmation dialog. I then manually delete the file and ask my <code>soundsAPI</code> library (more on that in a minute) to remove the file. Those two lines feel wrong to me. Mainly the issue is that soundsAPI handles just remembering the data but doesn't handle any file IO.</p>
<p>As I said - it feels wrong and could do with a refactor, but for an initial release, I'm ok with it. ;) Let's switch gears and look at that sound library. You'll note I named it <code>soundsAPI</code> which feels like a bad name, but names are hard.</p>
<pre><code class="language-js">const appSettings = require(&quot;application-settings&quot;);

const sounds = {
	getSounds() {
		let json = appSettings.getString('sounds', '');
		if(json === '') return [];
		else return JSON.parse(json);
	},
	removeSound(fileName) {
		let sounds = this.getSounds();
		sounds = sounds.filter(s =&gt; {
			return s.fileName != fileName;
		});
		//serialize it
		let json = JSON.stringify(sounds);	
		appSettings.setString('sounds', json);
	},
	saveSound(name, fileName) {
		let sounds = this.getSounds();
		sounds.push({
			name:name,
			fileName:fileName
		});
		//serialize it
		let json = JSON.stringify(sounds);	
		appSettings.setString('sounds', json);
	}
}

module.exports = sounds;
</code></pre>
<p>In the end, this &quot;API&quot; is just a wrapper for one value in ApplicationSettings. What's nice though is that I can revisit the storage later and keep the API as is. Now let's look at the second view.</p>
<pre><code class="language-html">&lt;template&gt;
	&lt;Page class=&quot;page&quot;&gt;
		&lt;ActionBar class=&quot;action-bar&quot;&gt;
			&lt;Label class=&quot;action-bar-title&quot; text=&quot;Record&quot;&gt;&lt;/Label&gt;
		&lt;/ActionBar&gt;

		&lt;StackLayout&gt;
			&lt;TextField v-model=&quot;name&quot; hint=&quot;Name for new sound&quot; /&gt;
			&lt;GridLayout columns=&quot;*,*&quot; height=&quot;70&quot;&gt;
				&lt;Button text=&quot;Record&quot; col=&quot;0&quot; @tap=&quot;record&quot; v-if=&quot;!recording&quot; /&gt; 
				&lt;Button text=&quot;Stop Recording&quot; col=&quot;0&quot; @tap=&quot;endRecord&quot; v-if=&quot;recording&quot; /&gt; 
				&lt;!-- Note, I was not able to use null and falsy values --&gt;
				&lt;Button text=&quot;Play&quot; col=&quot;1&quot; @tap=&quot;play&quot; :isEnabled=&quot;playEnabled&quot; /&gt; 
			&lt;/GridLayout&gt;
			&lt;Button text=&quot;Save&quot; @tap=&quot;save&quot; :isEnabled=&quot;saveEnabled&quot; /&gt;
		&lt;/StackLayout&gt;
	&lt;/Page&gt;

&lt;/template&gt;

&lt;script&gt;
const audio = require('nativescript-audio');
const platform = require('tns-core-modules/platform');
const fileSystemModule = require('tns-core-modules/file-system');

import utils from '../api/utils';
import sounds from '../api/sounds';

import Home from './Home';

function randomName() {
	return `rnd${utils.generateUUIDv4()}.mp4`;
}

export default {
	created() {
		this.audioFolder = fileSystemModule.knownFolders.currentApp().getFolder('recordings');
	},
	computed:{
		playEnabled() {
			return this.lastName != '' &amp;&amp; !this.recording;
		},
		saveEnabled() {
			return this.playEnabled &amp;&amp; this.name !== '';
		}
	},
	data() {
		return {
			name:&quot;&quot;,
			audioFolder:null,
			recorder:null,
			recording:false,
			lastName:''
		}
	},
	methods: {
        async record() {
	
			// possible clean up
			if(this.lastName) {
				let file = this.audioFolder.getFile(this.lastName);
				await file.remove();
			}

            console.log('doRecord Called 1h');
            this.recorder = new audio.TNSRecorder();

			let newName = randomName();

            /*
            from the sample app
            */
            let androidFormat;
            let androidEncoder;
            if (platform.isAndroid) {
                // static constants are not available, using raw values here
                // androidFormat = android.media.MediaRecorder.OutputFormat.MPEG_4;
                androidFormat = 2;
                // androidEncoder = android.media.MediaRecorder.AudioEncoder.AAC;
                androidEncoder = 3;
            }

			let options = {
				filename:this.audioFolder.path+'/'+newName,
				format:androidFormat,
				encoder:androidEncoder,
				infoCallback:info =&gt; {
					//apparently I'm necessary even if blank
				},
				errorCallback:e =&gt; {
					console.log('error cb',e);
				}
			};

            await this.recorder.start(options);
			this.recording = true;

			//remember the filename for delete and playback purposes
			this.lastName = newName;

        },
		async endRecord() {
			await this.recorder.stop();
			this.recording = false;
			console.log('finished recording');
		},
		async play() {
			console.log('doPlay called');
            let player = new audio.TNSPlayer();

            await player.playFromFile({
                audioFile:this.audioFolder.path+'/'+this.lastName
            });

        },
		save() {
			sounds.saveSound(this.name, this.lastName);
            this.$navigateTo(Home);
		}

	}
}
&lt;/script&gt;
</code></pre>
<p>Alrighty, this one's a bit more intense. This view lets you record audio and has to use a bit of logic to handle a few cases:</p>
<ul>
<li>First, what do we name the file? For that I use a library to generate a UUID (<code>generateUUIDv4</code>).</li>
<li>If you record a sound - and then record it again - we delete the first one. So we have to remember we made a prior sound and clean it up. Note I do <em>not</em> support &quot;clean up&quot; if you use the back button. Oops.</li>
<li>You are only allowed to save the sound record if you name it and do a recording. So the button logic gets a bit complex. You can see that in the <code>computed</code> section. Outside of that though most of the code is related to the first blog entry on the topic.</li>
</ul>
<p>And that's it! What do you think? Leave me a comment with any suggestions or feel free to submit a pull request to the <a href="https://github.com/cfjedimaster/ns-soundboard">repository</a>.</p>
}