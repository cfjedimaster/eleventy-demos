<h1>Post</h1>

<p>This will be a quick one. I've been a <em>huge</em> fan of <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation">HTML-based form validation</a> for some time now. Even though it is far from perfect (and must always be coupled with server-side validation), I love the fact that it can catch errors early in the submission process and create a better experience for users. My first experience with server-side programming was writing Perl scripts to handle forms so anything that improves the process is pretty freaking important to me.</p>
<p>While thinking about <em>another</em> demo I wanted to write (and I sure as hell hope I wrote it down in Trello because I'm drawing a blank on it now) I realized that I'd need to validate some email addresses. While I was fine with a &quot;not perfect&quot; solution, I was curious if there was some way to tie into the browser's email validation when using:</p>
<pre><code class="language-html">&lt;input type=&quot;email&quot; name=&quot;forUsToSpamYou&quot; required /&gt;
</code></pre>
<p>Basically, I wanted the exact same validation as the field provides, but without using user input and a real form. Turns out you can, and it's rather easy, but you still have to use a form.</p>
<p>First, I added a field, and then hid it with CSS, because CSS is awesome like that:</p>
<pre><code class="language-html">&lt;input type=&quot;email&quot; id=&quot;testEmail&quot;&gt;

&lt;style&gt;
#testEmail {
  display: none;
}
&lt;/style&gt;
</code></pre>
<p>I then create a set of data. This is hard coded, but imagine it comes from some other process.</p>
<pre><code class="language-js">let tests = [
  &quot;foo@foo.com&quot;,
  &quot;foo&quot;,
  &quot;goo@goo.com&quot;,
  &quot;zoo&quot;
];
</code></pre>
<p>Then to test these values, I just got a reference to the field, set the value, and ran <code>checkValiditity</code> on it:</p>
<pre><code class="language-js">let emailField = document.querySelector(&quot;#testEmail&quot;);

tests.forEach(t =&gt; {
  emailField.value = t;
  console.log(t, emailField.checkValidity());
});
</code></pre>
<p>According to MDN, <code>checkValidity</code> does this: &quot;Returns true if the element's value has no validity problems; false otherwise. If the element is invalid, this method also causes an invalid event at the element.&quot;</p>
<p>And here is the result, modified to write out results to a div tag:</p>
<p class="codepen" data-height="265" data-theme-id="0" data-default-tab="js,result" data-user="cfjedimaster" data-slug-hash="ZNBjYJ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="js check field">
  <span>See the Pen <a href="https://codepen.io/cfjedimaster/pen/ZNBjYJ/">
  js check field</a> by Raymond Camden (<a href="https://codepen.io/cfjedimaster">@cfjedimaster</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>
<p>To be clear, this is <em>not</em> meant to be perfect email validation. Every time I blog about anything related to the topic, folks point out the 500 edge cases that break it. Again, I'm just looking for something to do more of a &quot;soft&quot; validation on the input. And as I said, I was curious if I could &quot;chain&quot; into the HTML logic without using a real (visible) form. Has anyone used anything like this in production? Let me know in a comment please!</p>
<h3>Round Two!</h3>
<p>I wrote this blog post last night, but didn't actually promote it online. I was planning on doing that today. But after I posted, all around smart guy <a href="https://twitter.com/simevidas">Šime Vidas</a> posted a great tip in the comments below. I keep forgetting you can create HTML elements in JavaScript. He modified my code such that there is <em>no</em> HTML form field and no CSS required and you simply create the field in JavaScript like so:</p>
<pre><code class="language-js">let emailField = document.createElement('input');
emailField.type = 'email';
</code></pre>
<p>Here's his CodePen:</p>
<p class="codepen" data-height="265" data-theme-id="0" data-default-tab="js,result" data-user="simevidas" data-slug-hash="JqWWzo" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="js check field">
  <span>See the Pen <a href="https://codepen.io/simevidas/pen/JqWWzo/">
  js check field</a> by Šime Vidas (<a href="https://codepen.io/simevidas">@simevidas</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>
<p>Thanks Šime!</p>
<p><i>Header photo by <a href="https://unsplash.com/photos/aGUndxz-VRw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Klaas</a> on Unsplash</i></p>
}