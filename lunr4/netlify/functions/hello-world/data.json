

[

	{
		"title": "Goodbye 2018, Hello 2019",
		"date":"Mon Dec 31 2018 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/01/01/goodbye-2018-hello-2019",
		"content":"<p>For years now I've done a few posts towards the end of the year as a way to recap. I'd typically cover my &quot;favorite media&quot; (books, movies, etc.) and then talk about myself and what I accomplished and hoped to accomplish for the next year.</p>\n<p>I'm bucking the trend this year because, well, things are radically different than they were last year at this time. If you have not already read my <a href=\"https://www.raymondcamden.com/2018/06/04/an-update\">news</a> or seen my <a href=\"https://www.raymondcamden.com/2018/08/29/an-update\">update</a>, I'll summarize by saying that over the past year I lost both a wife and a job. Stressful does not even begin to describe it.</p>\n<p>I'm starting 2019 in a better place, with &quot;better&quot; being extremely relative. The holidays are done (and frankly I'm happy for that). I've got a <a href=\"https://www.linkedin.com/in/raymondcamden/\">job</a>. I've got my health (approaching 30 pounds lost since August). I'm going to do my best to take care of myself and my kids while trying to enjoy life as much as possible.</p>\n<p>Typically I spend some time talking about my plans for the new year, focusing on professional stuff. Not this year. I absolutely have &quot;plans&quot; - try to kick butt at my new job, become better at Vue - but I've decided to set my &quot;resolutions&quot; to things that are 100% focused on my mental health and happiness.</p>\n<p>My blogging activity has steadily declined over the past few years (if you're truly curious, you can check the <a href=\"/stats\">stats</a>) but I've been writing elsewhere as well. That will probably continue for 2019. I love my readers, and as always, hope you will comment, make suggestions, etc., and thank you for the time you spent here last year.</p>\n<p>Onward and upward, right?</p>\n<p>p.s. Ok, so I can't leave without at least a <em>quick</em> media review. &quot;Solo&quot; was a really good Star Wars movie. Not great, but enjoyable as heck, ignore the reviews. &quot;Spider-Man&quot; for the PS4 was easily the best video game of the year, and &quot;Into the Spider-Verse&quot; was easily my favorite movie. Finally, if you like music (and of course you do), consider signing up for <a href=\"https://remotesynthesis.us6.list-manage.com/subscribe?u=231f8aff82a1f82e4d6ab23d8&amp;id=d00ad8719a\">CodaBreaker</a>, a bi-monthly-ish music newsletter set up by <a href=\"https://twitter.com/remotesynth\">Brian Rinaldi</a> and myself as a way to share cool/interesting/new music picks.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/twukN12EN7c?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Simon Matzinger</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "uncategorized"
            
		]

	},

	{
		"title": "Creating a Live Time Duration Component in Vue.js",
		"date":"Sun Jan 06 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/01/07/creating-a-live-time-duration-component-in-vuejs",
		"content":"<p>Pardon the somewhat awkward title of the post. Today's <a href=\"https://vuejs.org/\">Vue.js</a> demo is based on something I saw recently on the cnn.com site - a live update of how long the government shutdown has been going on. They don't have it online now, but it basically showed this...</p>\n<p>Partial government shutdown has gone on for 11d 15h 49m 7s</p>\n<p>The values were updated in real time. You could argue (and I'd agree) that it was a bit overly dramatic for a news site (and maybe that's why it isn't there now), but when I saw it, I thought it would be something fun to build in Vue. I ended up with not one, but two iterations of the idea and I'd like to share them below. As always, I welcome your comments about what could be improved. Let's get started.</p>\n<h2>Version One</h2>\n<p>The initial version began with a simple set of features. The component should accept a <code>date</code> value (either in the past or future) and then simply display the duration while updating it automatically. Here's an example of how it could be used:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  My birthday was &lt;time-since :date=&quot;birthday&quot;&gt;&lt;/time-since&gt; ago. \n\n&lt;/div&gt;\n</code></pre>\n<p>And here's the JavaScript code behind it. First, just the Vue app itself:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app', \n  data:{\n    birthday:new Date(2018, 3, 8)\n  }\n})\n</code></pre>\n<p>As you can see, all I bothered to add was a value for the date. The real meat is in the component:</p>\n<pre><code class=\"language-js\">Vue.component('time-since',{\n  template:`\n&lt;span&gt;{{days}} days {{hours}} hours {{minutes}} minutes {{seconds}} seconds&lt;/span&gt;\n`,\n  data() {\n    return {\n      interval:null,\n      days:0,\n      hours:0,\n      minutes:0,\n      seconds:0,\n      intervals:{\n        second: 1000,\n        minute: 1000 * 60,\n        hour: 1000 * 60 * 60,\n        day: 1000 * 60 * 60 * 24\n      }\n    }\n  },\n  props:{\n    date:{\n      required:true\n    }\n  },\n  mounted() {\n    this.interval = setInterval(() =&gt; {\n      this.updateDiffs();\n    },1000);\n    \n    this.updateDiffs();\n  },\n  destroyed() {\n    clearInterval(this.interval);    \n  },\n  methods:{\n    updateDiffs() {\n      //lets figure out our diffs\n      let diff = Math.abs(Date.now() - this.date.getTime());\n      this.days = Math.floor(diff / this.intervals.day);\n      diff -= this.days * this.intervals.day;\n      this.hours = Math.floor(diff / this.intervals.hour);\n      diff -= this.hours * this.intervals.hour;\n      this.minutes = Math.floor(diff / this.intervals.minute);\n      diff -= this.minutes * this.intervals.minute;\n      this.seconds = Math.floor(diff / this.intervals.second);\n    }\n  }\n});\n</code></pre>\n<p>Alright, so let's tackle it from the top to the bottom. The template is rather simple, and hard coded, to display the duration as:</p>\n<pre><code class=\"language-html\">&lt;span&gt;X days Y hours Z minutes A seconds&lt;/span&gt;\n</code></pre>\n<p>There's no options here to change that. The next block handles the data for the component with the only interesting part (in my opinion) being the math set up to remember various millisecond based intervals.</p>\n<p>Next look at <code>mounted</code> and <code>destroyed</code>. <code>mounted</code> is responsible for setting up a second based interval to update the display (and running it right away). <code>destroyed</code> handles removing the interval if the component is removed from the DOM completely.</p>\n<p>Finally, <code>updateDiffs</code> just handles doing the math. Something tells me this part could probably be written in less lines of code by people smarter than me, but it worked so I left it alone.</p>\n<p>You can view the complete code (and play with it) in this CodePen:</p>\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"BvYPPM\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-pen-title=\"time-since vue test\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/BvYPPM/\">time-since vue test</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Pretty cool, right? But let's look at how we can kick it up a notch.</p>\n<h2>Version the Second</h2>\n<p>So one of the issues with the first version is that it forces a particular kind of output. What if you wanted to customize the display a bit? That's where slots come in. Check out this version:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  My birthday was &lt;time-since :date=&quot;birthday&quot;&gt;\n  &lt;template slot-scope=&quot;int&quot;&gt;\n  {{int.days}}D {{int.hours}}H {{int.minutes}}M {{int.seconds}}S\n  &lt;/template&gt;\n  &lt;/time-since&gt; ago. \n\n&lt;/div&gt;\n</code></pre>\n<p>In this version, I'm using a slot and customizing the labels used for the intervals to make it a bit closer to the CNN version. If I wanted to, I could even get rid of the seconds value to make it a bit less distracting. Let's look at the updated component.</p>\n<pre><code class=\"language-js\">Vue.component('time-since',{\n  template:`\n&lt;span&gt;\n&lt;slot :days=&quot;days&quot; :hours=&quot;hours&quot; :minutes=&quot;minutes&quot; :seconds=&quot;seconds&quot;&gt;{{days}} days {{hours}} hours {{minutes}} minutes {{seconds}} seconds&lt;/slot&gt;\n&lt;/span&gt;\n`,\n //stuff deleted...\n});\n</code></pre>\n<p>The change was rather minor. Now the template supports default output (the same as the previous version) but also binds values for all four intervals that can be used in the markup. The text inside that slot will only be used if you don't pass a slot in. Now the component supports the same output as before but also complete customization.</p>\n<p>You can see the output here:</p>\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"xmjROa\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-pen-title=\"time-since vue test 2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/xmjROa/\">time-since vue test 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Ok, so what do you think?</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/ft0-Xu4nTvA?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Djim Loic</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Adding Serverless Functions to Your Netlify Static Site",
		"date":"Mon Jan 07 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/01/08/adding-serverless-functions-to-your-netlify-static-site",
		"content":"<p>Over the past week or so I've been playing around with the (kinda) new serverless feature at <a href=\"https://www.netlify.com/\">Netlify</a>, built-in <a href=\"https://www.netlify.com/docs/functions/\">Lambda Functions</a> support. One of the reasons I got into serverless was because of how well it works with static web sites, and I was pretty curious to see how Netlify's integration worked. It took me a while to get things going, but I have to say, this is yet another damn impressive addition to the Netlify portfolio. I've long said that they are the &quot;gold standard&quot; for static web site hosting and this just proves again that they are completely nailing it. I did struggle a bit getting things going so what follows is a simple introduction with a focus on the things that confused me.</p>\n<h2>Prerequisites</h2>\n<p>In terms of what you need to know before getting started, there really isn't much necessary. Yes, this feature is built on Amazon's Lambda Serverless platform, but you don't need to really know anything about that to build stuff. I've only barely touched Lambda because of how complex it is. It's on my list of things to pick up this year, but my lack of knowledge didn't hamper me from using it with Netlify.</p>\n<p>That being said, some previous serverless experience will be helpful, especially in terms of knowing what makes sense. What does make sense here? Given that you're using (or considering using) Netlify to host a static site, there may be cases where you still need something dynamic. In my case, I needed to make a call to an API that required a key I couldn't use in client-side JavaScript. My only functionality was to call that API, shape the result a bit, and return a set of data.</p>\n<p>I could have done that on <em>any</em> serverless platform, but having it in the same project as the rest of my static site was incredibly appealing. It just felt better to have everything in one place. I'm not saying that will always make sense, but it certainly did for my project.</p>\n<h2>Your First Function</h2>\n<p>To begin, you'll want a folder to store all of your code. As of right now, Netlify supports JavaScript and Go. You can name your folder anything you want and put it anywhere in your directory tree, but note that you files can not be put in subdirectories under the directory you select. So if you decide on <code>/funcs</code> as the location of your serverless functions, you <strong>can not</strong> create subdirectories for different groups of functions. (It's lame, but if you end up with a lot you could simply use file names, like dao.get.js and rss.generate.js.)</p>\n<p>Your JavaScript code must follow this format:</p>\n<pre><code class=\"language-js\">exports.handler = function(event, context, callback) {\n    // your server-side functionality\n}\n</code></pre>\n<p>The <code>event</code> object contains information about the request whereas <code>context</code> seems to be more related to Netlify specific information, like integration with their authentication support. I didn't use either in my testing so I can't really comment on it. The <code>callback</code> argument is how you return information to the caller and follows a pretty standard form of: <code>callback(error, result)</code>. The <code>result</code> value will be a simple JavaScript object like so:</p>\n<pre><code class=\"language-js\">{ \n\tstatusCode: 200,\n\tbody: 'I must be a string'\n}\n</code></pre>\n<p>A few things to note here. First, <code>statusCode</code> seems to be optional, <em>except</em> when testing locally (more on that coming soon). So I'd just include it.</p>\n<p>Next, <code>body</code> must be a string. From what I read on the Lambda docs, <code>body</code> can be anything that can be passed to <code>JSON.stringify</code>, which to me means it's automatically turning non-simple results into JSON. Maybe I'm wrong, but for Netlify you absolutely have to use JSON.stringify yourself. Here is a full example:</p>\n<pre><code class=\"language-js\">exports.handler = function(event, context, callback) {\n\t\n\tlet data = {\n\t\tname:'ray',\n\t\tfoo:[1,2,4,6],\n\t\ttime:Date.now()\n\t};\n\t\n\tconsole.log('data is '+JSON.stringify(data));\n\n\tcallback(null, {\n\t\tstatusCode:200,\n\t\tbody:JSON.stringify(data)\n\t});\n\n}\n</code></pre>\n<h3>Deploying and Testing</h3>\n<p>Now that you have your file, you deploy it to Netlify like any other static site. For me, I had a site tied to a GitHub repository so all I had to do was commit the code. In your Netlify settings, you want to go into your <strong>Site Settings</strong> and then select the &quot;Functions&quot; tab. Under &quot;Deploy settings&quot; you must set the functions directory. This tells Netlify where to find your functions.</p>\n<p>So far so good, but how do you actually <em>call</em> your functions? This is where I hit my first brick wall. This is documented, but it didn't feel very clear to me.</p>\n<p>No matter what you set for your functions folder, the URL will be: <code>yoursite/.netlify/functions/foo</code> where <code>foo</code> is the name of your JavaScript file minus the <code>.js</code> extension.</p>\n<p>Once you've done all this, if you hit the <strong>Functions</strong> tab for your site, you can see a list of all your deployed functions:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/01/nf1.jpg\" alt=\"List of Netlify Functions\" class=\"imgborder imgcenter\">\n<p>Clicking on one particular function gets you a real time log. It's usable but it would be nice to have a searchable filter.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/01/nf2.jpg\" alt=\"List of Netlify Functions\" class=\"imgborder imgcenter\">\n<p>And that's it... for simple stuff!</p>\n<h2>Testing Async Functions</h2>\n<p>This was another thing that I struggled with. I wish the main docs had clarified this or shown a quick example. It may be a &quot;known&quot; thing for Lambda, but as I said, a quick example would have saved me some time. In order to work with an async function, you are allowed to return Promises. So for example:</p>\n<pre><code class=\"language-js\">exports.handler = async (event, context, callback) =&gt; {\n\t\n\treturn new Promise((resolve, reject) =&gt; {\n\n\t\tsetTimeout(() =&gt; {\n\t\t\tresolve({\n\t\t\t\tstatusCode:200,\n\t\t\t\tbody:&quot;promises1111&quot;\n\t\t\t});\n\t\t}, 2000);\n\n\t});\n\n};\n</code></pre>\n<p>So that works fine, but the whole reason I wanted to do an async function was to build an API wrapper. For that I wanted to use <code>request-promise</code> from NPM or some other library, and that's where I ran into my most difficult time with the docs.</p>\n<h3>Using NPM Modules (and Local Testing)</h3>\n<p>Ok, so what follows is going to be a bit rough. I really couldn't figure out how to use NPM modules so I decided to try to test locally. Netlify has a CLI you can use (<code>netlify-lambda</code>) but it isn't documented well at all. Scratch that - it is - but - it needs something. :) If I worked there I'd rewrite that section to make it a bit more clear. It wasn't until I read this post by Travis Horn, <a href=\"https://travishorn.com/netlify-lambda-functions-from-scratch-1186f61c659e\">&quot;Netlify Lambda Functions from Scratch&quot;</a>, that I was able to figure out exactly how local testing (and by proxy, NPM) worked.</p>\n<p>Ok, so first off, you need to install the CLI <em>locally</em> into your folder. Yes, the docs say this, but I installed it globally.</p>\n<p>Secondly, you need <em>two</em> folders. The first folder is your source folder and can be the same you used previously. The second folder is for the &quot;built&quot; version of your functions. To test locally, you must use a <code>netlify.toml</code> file which is a way to specify settings in - a file (ok, dumb to state) versus specifying in the Netlify admin. Here's an example:</p>\n<pre><code class=\"language-text\">[build]\n\tFunctions = &quot;lambda&quot;\n</code></pre>\n<p>Note that I'm specifying the <em>build</em> folder, not the source folder. So how do you build? As I said, you need to install the <code>netlify-lambda</code> command locally. Then I followed Horn's advice and added two scripts to my <code>package.json</code> file:</p>\n<pre><code>  &quot;scripts&quot;: {\n    &quot;start:lambda&quot;: &quot;netlify-lambda serve func&quot;,\n    &quot;build:lambda&quot;: &quot;netlify-lambda build func&quot;\n  },\n</code></pre>\n<p>Then I updated <code>netlify.toml</code> to include the build command:</p>\n<pre><code class=\"language-text\">[build]\n\tFunctions = &quot;lambda&quot;\n\tCommand = &quot;npm run build:lambda&quot;\n</code></pre>\n<p>We're almost done. The Netlify docs say you can start your local server to test by using <code>netlify-lambda serve func</code> (or <code>npm run start:lambda</code>) where the last argument is the source directory. <strong>However</strong> this did not work for me until I ran the build command first. <strong>However</strong> (again) it seems like you only need to build one time. After that, running serve will setup the server and notice changes to file. <strong>However</strong> (last time, honest), I believe you need to run the build again if you make a <em>new</em> function. In theory that's pretty rare and you'll spend you time working on one function alone.</p>\n<p>I'm going to write this whole thing again just to be sure it's clear.</p>\n<ul>\n<li>You need to run the build command the prior to your initial test, and after you make any new files.</li>\n<li>After that, you run the serve command and you can test locally.</li>\n</ul>\n<p>Ok, so how do you then use a NPM module? You <code>npm install</code> and that's it. It's added to your local <code>package.json</code> for your site and - yeah it just worked. In theory you do not have to test locally. I think as long as you specify how to build your code, update your package.json with your depedencies, then you're ok committing to GitHub and testing on Netlify's servers, but local testing is rather quick.</p>\n<p>Hopefully this made sense - now let's consider a real example.</p>\n<h2>Building a MailChimp Wrapper</h2>\n<p>A few weeks ago my buddy Brian Rinaldi and I launched a music newsletter called <a href=\"https://twitter.com/codabreaker\">CodaBreaker</a>. This is run via MailChimp and turns out they have an API. Brian suggested using the API to build a custom list of previous issues so we can host a static page at a nicer URL than what we have now - <a href=\"https://us6.campaign-archive.com/home/?u=231f8aff82a1f82e4d6ab23d8&amp;id=d00ad8719a\">https://us6.campaign-archive.com/home/?u=231f8aff82a1f82e4d6ab23d8&amp;id=d00ad8719a</a>. The <a href=\"https://developer.mailchimp.com/\">MailChimp docs</a> are nicely done and their API, at least for reading data, was <em>incredibly</em> simple. Here is the API wrapper I built to get a list of past issues.</p>\n<pre><code class=\"language-js\">const axios = require('axios');\n\nconst apiRoot = 'https://us6.api.mailchimp.com/3.0/campaigns?list_id=d00ad8719a&amp;fields=campaigns.long_archive_url,campaigns.send_time,campaigns.settings.title&amp;status=sent';\n\nexports.handler = (event, context, callback) =&gt; {\n\taxios({\n\t\tmethod:'get', \n\t\turl:apiRoot,\n\t\tauth:{\n\t\t\t'username':'anythingreally',\n\t\t\t'password':process.env.MC_API\n\t\t}\n\t}).then(res =&gt; {\n\t\tcallback(null, {\n\t\t\tstatusCode: 200,\n\t\t\tbody: JSON.stringify(res.data)\n\t\t});\n\t})\n\t.catch(err =&gt; {\n\t\tcallback(err);\n\t});\n\n};\n</code></pre>\n<p>Basically I hit the <code>/campaigns</code> end point, filter to a particular list and filter the result keys down to the URL, date sent, and title. That's literally it. The only other interesting bit is the use of <code>process.env.MC_API</code> there. Netlify Functions have access to environment settings you specify in your site settings. I did that via the web site of course and not the <code>netlify.toml</code> file. I wish it were more complex. That's it though. You can run this yourself here: <a href=\"https://elated-mayer-56be7c.netlify.com/.netlify/functions/getIssues\">https://elated-mayer-56be7c.netlify.com/.netlify/functions/getIssues</a>.</p>\n<p>Now all I need to do is build a one page HTML front end, slap some Vue.js on it (everything is better with Vue), and the 'marketing site' for Coda Breaker will be done. As I said above, I love that my HTML and my serverless function will all be nice and contained within one GitHub repo and I can easily push up to Netlify when done. (I did get a domain for the new site but I haven't got around to deployint it yet.)</p>\n<h2>Final Thoughts</h2>\n<p>Minus some doc issues (and lack of understanding on my part), this is perfect. This is awesome. This is yet another reason to use Netlify for your static sites! As I explore more and think of more integrations (perhaps with something on my blog itself) I'll share. I'd love to hear from my readers though how they are using it. Drop me a comment below with some examples!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/jh2KTqHLMjE?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jeremy Thomas</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript"
            
		],
		"categories":[
            
                "serverless",
            
                "static sites"
            
		]

	},

	{
		"title": "Customized Form Handling on Netlify with Serverless Functions",
		"date":"Mon Jan 14 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/01/15/customized-form-handling-on-netlify-with-serverless-functions",
		"content":"<p>A couple days ago I wrote up a look at serverless functions at Netlify (<a href=\"https://www.raymondcamden.com/2019/01/08/adding-serverless-functions-to-your-netlify-static-site\">&quot;Adding Serverless Functions to Your Netlify Static Site&quot;</a>) and today I want to look at a particular aspect of that feature - connecting functions to <a href=\"https://www.netlify.com/docs/functions/#event-triggered-functions\">Netlify events</a>.</p>\n<p>Per the docs, you can write customized logic for the following Netlify events:</p>\n<ul>\n<li>When a deploy is begins to build, succeeds in building, fails to build, is locked, or unlocked</li>\n<li>When a split test is activated, deactivated, or modified</li>\n<li>When a user signs up or tries to log in</li>\n<li>And of course, when a Netlify-controlled form is submitted</li>\n</ul>\n<p>So to be clear, Netlify doesn't care about the forms on your site unless you specifically tell it to. This is covered in the <a href=\"https://www.netlify.com/docs/form-handling/\">form docs</a>, but basically, you either add <code>netlify</code> or <code>data-netlify=&quot;true&quot;</code> to your form tag as a way to signal to Netlify that you want them to handle the submission. Out of the box you get things like spam protection, captcha, and redirects on submission as well as the ability to integrate with third party utilities via Zapier. You should first play around to see if you even need customization via a serverless function as your needs may already be met.</p>\n<p>Given that your pretty sure you <em>do</em> want to write some customized logic, let's take a look at how that's done. First, here is a simple form I built for testing:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n\t&lt;meta charset=&quot;utf-8&quot;&gt;\n\t&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n\t&lt;title&gt;Contact Form&lt;/title&gt;\n\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n\t&lt;form action=&quot;/thankyou.html&quot; method=&quot;post&quot; name=&quot;Contact Form&quot; data-netlify=&quot;true&quot;&gt;\n\t&lt;p&gt;\n\t\t&lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt;\t\n\t\t&lt;input id=&quot;name&quot; name=&quot;name&quot; value=&quot;Raymond Testing&quot;&gt;\n\t&lt;/p&gt;\n\t&lt;p&gt;\n\t\t&lt;label for=&quot;email&quot;&gt;Email&lt;/label&gt;\n\t\t&lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;email&quot; value=&quot;raymondcamden@gmail.com&quot;&gt;\n\t&lt;/p&gt;\n\t&lt;p&gt;\n\t\t&lt;label for=&quot;comments&quot;&gt;Comments&lt;/label&gt;&lt;br/&gt;\n\t\t&lt;textarea id=&quot;comments&quot; name=&quot;comments&quot;&gt;Default value&lt;/textarea&gt;\n\t&lt;/p&gt;\n\t&lt;p&gt;\n\t\t&lt;input type=&quot;submit&quot; value=&quot;Send Comments&quot;&gt;\n\t&lt;/p&gt;\n\t&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>If you want, you can see this at <a href=\"https://codabreaker.netlify.com/contact.html\">https://codabreaker.netlify.com/contact.html</a>. I only supplied default values in order to make my testing a bit easier. It's nothing related to Netlify support or anything like that.</p>\n<p>Ok - so the first thing you need to is create a function with the name, <code>submission-created.js</code>. You can only have one handler per Netlify site and event, but as your function is passed information about the event, you could definitely add support for multiple sources. From what I see of the supported list of events, forms are probably the only time where you would probably care.</p>\n<p>Like other Netlify serverless functions, your basic function signature looks like this:</p>\n<pre><code class=\"language-js\">\nexports.handler = (event, context, callback) =&gt; {\n\t//logic\n};\n</code></pre>\n<p>Although you can skip the <code>callback</code> argument. In my testing, calling the callback, both with and without an error, had no impact on the form submission or anything else.</p>\n<p>Accessing the form data can be done via <code>event.body</code>, which is a JSON string, and within there you would access the <code>payload</code> value. So for example:</p>\n<pre><code class=\"language-js\">let payload = JSON.parse(event.body).payload;\n</code></pre>\n<p>What does payload look like? Here's an example:</p>\n<pre><code class=\"language-js\">{\n  &quot;number&quot;: 24,\n  &quot;title&quot;: &quot;Raymond Testing&quot;,\n  &quot;email&quot;: &quot;raymondcamden@gmail.com&quot;,\n  &quot;name&quot;: &quot;Raymond Testing&quot;,\n  &quot;first_name&quot;: &quot;Raymond&quot;,\n  &quot;last_name&quot;: &quot;Testing&quot;,\n  &quot;company&quot;: null,\n  &quot;summary&quot;: &quot;&lt;strong&gt;Raymond Testing&lt;/strong&gt; Default value&quot;,\n  &quot;body&quot;: &quot;Default value&quot;,\n  &quot;data&quot;: {\n    &quot;name&quot;: &quot;Raymond Testing&quot;,\n    &quot;email&quot;: &quot;raymondcamden@gmail.com&quot;,\n    &quot;comments&quot;: &quot;Default value&quot;,\n    &quot;ip&quot;: &quot;76.72.11.11&quot;\n  },\n  &quot;created_at&quot;: &quot;2019-01-15T22:00:51.691Z&quot;,\n  &quot;human_fields&quot;: {\n    &quot;Name&quot;: &quot;Raymond Testing&quot;,\n    &quot;Email&quot;: &quot;raymondcamden@gmail.com&quot;,\n    &quot;Comments&quot;: &quot;Default value&quot;\n  },\n  &quot;ordered_human_fields&quot;: [\n    { &quot;title&quot;: &quot;Name&quot;, &quot;name&quot;: &quot;name&quot;, &quot;value&quot;: &quot;Raymond Testing&quot; },\n    { &quot;title&quot;: &quot;Email&quot;, &quot;name&quot;: &quot;email&quot;, &quot;value&quot;: &quot;raymondcamden@gmail.com&quot; },\n    { &quot;title&quot;: &quot;Comments&quot;, &quot;name&quot;: &quot;comments&quot;, &quot;value&quot;: &quot;Default value&quot; }\n  ],\n  &quot;id&quot;: &quot;5c3e5813f203baba9782ba13&quot;,\n  &quot;form_id&quot;: &quot;5c3a051bdbfb660008114ddb&quot;,\n  &quot;site_url&quot;: &quot;http://codabreaker.netlify.com&quot;,\n  &quot;form_name&quot;: &quot;Contact Form&quot;\n}\n</code></pre>\n<p>Yes, that's a heck of a lot of data. You can see some interesting things going on here. First off, if all you care about is your form data, then you can find it within the <code>data</code> block. Notice that an <code>ip</code> value was added automatically.</p>\n<p>Secondly, it appears as if Netlify is trying to do some basic parsing of the form. Notice how it picked up a first and last name by simply splitting my input. It made note of the email address. It also provided &quot;human&quot; versions of the form fields which I'm guessing is probably going to do basic parsing as well. I renamed <code>email</code> to <code>email_address</code>, and Netlify still called the human form <code>email</code>. I guess if you have large, ugly forms with poor naming, this could be useful.</p>\n<p>Finally, note that it recognizes the name of the form, the site, and that this is the 24th submission. All things you could use in your logic.</p>\n<p>Here's a complete example that makes use of both SendGrid and code I had built for OpenWhisk in the past:</p>\n<pre><code class=\"language-js\">const SG_KEY = process.env.SENDGRID;\n\nconst helper = require('sendgrid').mail;\n\n\nexports.handler = (event, context, callback) =&gt; {\n\tconsole.log('submission created error testing');\n\t\n\tlet payload = JSON.parse(event.body).payload;\n\n\t// note - no validation - booooo\n\tlet from_email = new helper.Email(payload.data.email);\n\tlet to_email = new helper.Email('raymondcamden@gmail.com');\n\tlet subject = 'Contact Form Submission';\n\n\tlet date = new Date();\n\tlet content = `\nForm Submitted at ${date}\n--------------------------------\n`;\n\n\tfor(let key in payload.data) {\n\t\tcontent += `\n${key}:\t\t\t${payload.data[key]}\n`;\n\t}\n\n\tlet mailContent = new helper.Content('text/plain', content);\n\tlet mail = new helper.Mail(from_email, subject, to_email, mailContent);\n\tlet sg = require('sendgrid')(SG_KEY);\n\n\tlet request = sg.emptyRequest({\n\t\tmethod: 'POST',\n\t\tpath: '/v3/mail/send',\n\t\tbody: mail.toJSON()\n\t});\n\t\t\n\tsg.API(request, function(error, response) {\n\t\tif(error) {\n\t\t\tconsole.log(error.response.body);\n\t\t}\n\t});\n\n};\n</code></pre>\n<p>Note that I dynamically build the content based on the form submission which would work nice with Netlify and multiple forms, but you could also hard code a set of key-value pairs here.</p>\n<p>That's basically it. I've got an interesting idea for how to take this a bit further, but I'm waiting for IBM to unlock my dang developer account before I try it. If you've got any questions, let me know by leaving a comment below!</p>\n",
		"tags":[
	        
            "javascript"
            
		],
		"categories":[
            
                "serverless",
            
                "static sites"
            
		]

	},

	{
		"title": "Adding Emotional Tone Analysis to Your Contact Form",
		"date":"Thu Jan 17 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/01/18/adding-emotional-tone-analysis-to-your-contact-form",
		"content":"<p>A few days ago I <a href=\"https://www.raymondcamden.com/2019/01/15/customized-form-handling-on-netlify-with-serverless-functions\">blogged</a> about adding customized form handling to your static site at Netlify. This was done via a simple serverless function that listened for form submissions and used the <a href=\"https://sendgrid.com/\">SendGrid</a> API to send an email. While this works just fine, I actually had something more interesting in mind that I had to delay a bit. Imagine if instead of just getting emails about contact form submissions, you actually got something with a bit of a warning in terms of their content:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/01/tone1.jpg\" alt=\"Example of tone analysis in the subject of the email\" class=\"imgborder imgcenter\">\n<p>In the image above, you can see some basic information about the contents of the email based on their tone. This would be a great way to know what to prioritize in terms of reading and responding. To build this, I made use of the <a href=\"https://www.ibm.com/watson/services/tone-analyzer/\">IBM Watson Tone Analyzer</a> service. I've used this multiple times in the past with various serverless demos with OpenWhisk, but I thought I'd give it a shot with Netlify and Lambda. Here's the full script (and be sure to read the <a href=\"https://www.raymondcamden.com/2019/01/15/customized-form-handling-on-netlify-with-serverless-functions\">last entry</a> for context on how it works) with the new feature added:</p>\n<pre><code class=\"language-js\">const helper = require('sendgrid').mail;\nconst SG_KEY = process.env.SENDGRID;\n\nconst axios = require('axios');\n\nconst ToneAnalyzerV3 = require('watson-developer-cloud/tone-analyzer/v3')\nconst TA_KEY = process.env.TONEANALZYER;\n\nexports.handler = async (event, context, callback) =&gt; {\n\tconsole.log('submission created error testing');\n\t\n\tlet payload = JSON.parse(event.body).payload;\n\tlet analysis = '';\n\tlet toneString = '';\n\n\t//lets analyze the text\n\t\n\tif(payload.data.comments &amp;&amp; payload.data.comments.length) {\n\t\tanalysis = await analyze(payload.data.comments);\n\n\t\t/*\n\t\tif we get results, its an array of tones, ex:\n\n\t\t[ { score: 0.633327, tone_id: 'fear', tone_name: 'Fear' },\n\t\t{ score: 0.84639, tone_id: 'tentative', tone_name: 'Tentative' } ]\n\n\t\tSo what we will do is create an analysis string based on tone_names where score &gt; 0.5\n\t\t*/\n\t\tanalysis = analysis.filter(t =&gt; t.score &gt; 0.5);\n\t\t// and now we'll build an array of just tones\n\t\tlet tones = analysis.map(t =&gt; t.tone_name);\n\t\t// and then a string\n\t\ttoneString = tones.join(', ');\n\t} \n\n\t// note - no validation - booooo\n\tlet from_email = new helper.Email(payload.data.email);\n\tlet to_email = new helper.Email('raymondcamden@gmail.com');\n\tlet subject = 'Contact Form Submission';\n\n\tif(toneString.length &gt; 0) subject += ` [Tone: ${toneString}]`;\n\n\tlet date = new Date();\n\tlet content = `\nForm Submitted at ${date}\n--------------------------------\n`;\n\n\tfor(let key in payload.data) {\n\t\tcontent += `\n${key}:\t\t\t${payload.data[key]}\n`;\n\t}\n\n\tlet mailContent = new helper.Content('text/plain', content);\n\tlet mail = new helper.Mail(from_email, subject, to_email, mailContent);\n\tlet sg = require('sendgrid')(SG_KEY);\n\n\tlet request = sg.emptyRequest({\n\t\tmethod: 'POST',\n\t\tpath: '/v3/mail/send',\n\t\tbody: mail.toJSON()\n\t});\n\t\t\n\tawait sg.API(request, function(error, response) {\n\t\tif(error) {\n\t\t\tconsole.log(error.response.body);\n\t\t} else console.log(response);\n\t});\n\tconsole.log('And done...');\n};\n\nasync function analyze(str) {\n\tconsole.log('going to tone analzye '+str);\n\t\n\tlet toneAnalyzer = new ToneAnalyzerV3({\n\t\tusername: 'apikey',\n\t\tpassword: TA_KEY,\n\t\tversion: '2017-09-21',\n\t\turl: 'https://gateway.watsonplatform.net/tone-analyzer/api/'\n\t});\n\n\tconst result = await new Promise((resolve, reject) =&gt; {\n\t\ttoneAnalyzer.tone(\n\t\t\t{\n\t\t\t\ttone_input: str,\n\t\t\t\tcontent_type: 'text/plain'\n\t\t\t},\n\t\t\tfunction(err, tone) {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(tone.document_tone.tones);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t});\n\treturn result;\n\n}\n</code></pre>\n<p>Alright, let's break this down. First, I load in the <a href=\"https://www.npmjs.com/package/watson-developer-cloud\">Watson Node.js SDK</a>. While this isn't necessary, I had issues using the REST API for Tone Analysis directly and decided to simply take the easy route out and use their package.</p>\n<pre><code class=\"language-js\">const ToneAnalyzerV3 = require('watson-developer-cloud/tone-analyzer/v3')\nconst TA_KEY = process.env.TONEANALZYER;\n</code></pre>\n<p>Where does the <code>process.env.TONEANALZYER</code> key come from? Don't forget you can define custom environment variables for your Netlify sites.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/01/tone2.jpg\" alt=\"Example of Netlify's settings for build variables\" class=\"imgborder imgcenter\">\n<p>Next, let's see if we have data to check. In this case I'm assuming I've got a field called <code>comments</code> and it's a block of text. You can make this more generic, or even use hidden form fields as a way of saying what should be checked.</p>\n<pre><code class=\"language-js\">let analysis = '';\nlet toneString = '';\n\n//lets analyze the text\n\t\nif(payload.data.comments &amp;&amp; payload.data.comments.length) {\n\tanalysis = await analyze(payload.data.comments);\n</code></pre>\n<p>Note the fancy use of <code>await</code>. As a warning, please note I'm still fumbling my way around <code>async/await</code>. Let's look at <code>analyze</code>:</p>\n<pre><code class=\"language-js\">async function analyze(str) {\n\tconsole.log('going to tone analzye '+str);\n\t\n\tlet toneAnalyzer = new ToneAnalyzerV3({\n\t\tusername: 'apikey',\n\t\tpassword: TA_KEY,\n\t\tversion: '2017-09-21',\n\t\turl: 'https://gateway.watsonplatform.net/tone-analyzer/api/'\n\t});\n\n\tconst result = await new Promise((resolve, reject) =&gt; {\n\t\ttoneAnalyzer.tone(\n\t\t\t{\n\t\t\t\ttone_input: str,\n\t\t\t\tcontent_type: 'text/plain'\n\t\t\t},\n\t\t\tfunction(err, tone) {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(tone.document_tone.tones);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t});\n\treturn result;\n\n}\n</code></pre>\n<p>This basically just wraps the call to the Tone Analyzer API and returns the result data. I kept this mostly generic. Now back to the caller:</p>\n<pre><code class=\"language-js\">/*\nif we get results, its an array of tones, ex:\n\n[ { score: 0.633327, tone_id: 'fear', tone_name: 'Fear' },\n{ score: 0.84639, tone_id: 'tentative', tone_name: 'Tentative' } ]\n\nSo what we will do is create an analysis string based on tone_names where score &gt; 0.5\n*/\nanalysis = analysis.filter(t =&gt; t.score &gt; 0.5);\n// and now we'll build an array of just tones\nlet tones = analysis.map(t =&gt; t.tone_name);\n// and then a string\ntoneString = tones.join(', ');\n</code></pre>\n<p>As the comments say, you get an array of tones back and they do not appear to be sorted. I did a quick &quot;quality&quot; filter by removing tones with a score less than 0.5. That was arbitrary. I then map out just the name and finally make a string.</p>\n<p>By the way, I'm 99% sure those three things could be done in one fancy line of JavaScript by someone who can work at Google. I don't work at Google.</p>\n<p>The final bit is to simply add the tones if we got em:</p>\n<pre><code class=\"language-js\">if(toneString.length &gt; 0) subject += ` [Tone: ${toneString}]`;\n</code></pre>\n<p>And that's it! So let's have some fun with this. Warning, adult language incoming. If the adult language doesn't make sense to you, ask your kids.</p>\n<pre><code class=\"language-text\">I AM SO FUCKING MAD AT YOU I WISH YOU WOULD DIE I HATE YOUR SERVICE.\nI HATE EVERYTHING YOU DO.\nI HATE KITTENS.\ni HATE PUPPIES.\nI HATE BEER.\n\nOH MY GOD IM SO MAD AT EVERYTHING\n</code></pre>\n<p>This returned what you would expect: <code>Contact Form Submission [Tone: Anger]</code></p>\n<p>Now check this input:</p>\n<pre><code class=\"language-text\">i'm so happy with your service, but i'm nervous that if i commit to a monthly payment i'll not actually make use of it enough to get value. can you give me some more details on what i get with this service and help convince me it's worth it?\n</code></pre>\n<p>While I know Watson isn't perfect, but wow, check the result: <code>Contact Form Submission [Tone: Tentative]</code> I'd consider that near perfect.</p>\n<p>You could imagine connecting this with some rules in your mail server such that customer service folks with a history of handling angry customers automatically get those emails, and so on. Anyway, let me know what you think by leaving a comment below. As a reminder, this is all being done via a so-called &quot;static&quot; site. Pretty damn impressive, right?</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/lQ1hJaV0yLM?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Aliyah Jamous</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript",
            
            "watson"
            
		],
		"categories":[
            
                "serverless",
            
                "static sites"
            
		]

	},

	{
		"title": "Using Netlify's Build Process for Somewhat Static Data",
		"date":"Mon Jan 21 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/01/22/using-netlifys-build-process-for-somewhat-static-data",
		"content":"<p>A few days ago I blogged about how I was using serverless functions at Netlify to build an API proxy for MailChimp (<a href=\"https://www.raymondcamden.com/2019/01/08/adding-serverless-functions-to-your-netlify-static-site\">&quot;Adding Serverless Functions to Your Netlify Static Site&quot;</a>). This worked really well for me and I built a simple &quot;one pager&quot; for my web site making use of that function. But something really gnawed on me.</p>\n<p>Even though it worked really well and was pretty fast, it seemed like overkill to load data that changes only twice a month. I wasn't worried about being charged for it - I was easily within MailChimp's free limit and easily within Netlify's free tier - but it still seemed like too much. It's then that I remembered that Netlify let's you specify a script to run when your site is built.</p>\n<p>This is a feature I've used for a while now - but basically just to tell Jekyll to build my pages (and before that, Hugo, but let's not speak about Hugo). I didn't really think about the implications of how I could use this for more complex logic. Phil Hawksworth wrote up a good example of this (<a href=\"https://www.hawksworx.com/blog/keeping-a-jamstack-site-feeling-fresh-with-recent-tweets/\">&quot;Keeping a JAMStack Fresh with Recent Tweets&quot;</a>) where he describes how he uses a build script to update data files used by his static site generator.</p>\n<p>My one page site didn't need a static site generator, but I could still use a similar process. I began by creating a simple Node.js script that was nearly a copy of my serverless API wrapper:</p>\n<pre><code class=\"language-js\">console.log('Running build script');\n\nconst axios = require('axios');\nconst fs = require('fs');\n\nconst apiRoot = 'https://us6.api.mailchimp.com/3.0/campaigns?list_id=d00ad8719a&amp;fields=campaigns.long_archive_url,campaigns.send_time,campaigns.settings.title&amp;status=sent';\n\naxios({\n\tmethod:'get', \n\turl:apiRoot,\n\tauth:{\n\t\t'username':'anythingreally',\n\t\t'password':process.env.MC_API\n\t}\n}).then(res =&gt; {\n\tfs.writeFileSync('./static.json', JSON.stringify(res.data), 'UTF-8');\n\n})\n.catch(err =&gt; {\n\tconsole.log('Error getting stuff', err);\n});\n</code></pre>\n<p>There's a couple things I want to point out here. First, my <code>console.log</code> messages will show up in the Netlify build web page which makes it nice for debugging. Second, note how I use <code>process.env.MC_API</code>. This is the environment variable I built to store my MailChimp API. I built it for the serverless function but it's available here as well.</p>\n<p>Finally - I simply hit the remote API and write out the content to my site as static.json. The last bit was to update my Vue.js app to hit <code>/static.json</code> instead of the serverless API. You can see this in action in the completely amazing and awesome site I built for the music newsletter I'm running with Brian:</p>\n<p><a href=\"https://codabreaker.rocks\">https://codabreaker.rocks</a></p>\n<p>I was almost done. The next thing I did was update my build script command I've set in <code>netlify.toml</code>:</p>\n<pre><code class=\"language-text\">[build]\n\tFunctions = &quot;lambda&quot;\n\tCommand = &quot;npm run build&quot;\n</code></pre>\n<p>And this is the relevant line in my <code>package.json</code>:</p>\n<pre><code class=\"language-js\">&quot;scripts&quot;: {\n\t&quot;start:lambda&quot;: &quot;netlify-lambda serve functions&quot;,\n\t&quot;build:lambda&quot;: &quot;netlify-lambda build functions&quot;,\n\t&quot;build&quot;:&quot;netlify-lambda build functions; node build.js&quot;\n},\n</code></pre>\n<p>Yes, I'm still using serverless functions &quot;in general&quot; on the site, but mainly now as a testbed for experimentation. As the site is just a &quot;one pager&quot; I don't mind using it for other tricks as well.</p>\n<p>Ok, so I'm almost done. The very last step was to configure MailChimp to trigger a build on Netlify. In my &quot;Deploy Settings&quot; for my Netlify site, I went to &quot;Build hooks&quot; and created a new one. This creates a unique URL that can trigger a build on a POST call:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/01/nf22.jpg\" alt=\"Shot from Netlify Build Hook page\" class=\"imgborder imgcenter\">\n<p>Then I added it as a hook to MailChimp:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/01/nf23.jpg\" alt=\"Shot from MailChimp\" class=\"imgborder imgcenter\">\n<p>And that's it! Now when we post the next newsletter, MailChimp will POST to Netlify, Netlify will create a new build, run my simple script, update the JSON, and that's it.</p>\n<p>And yes... you can absolutely make the case that using Vue and Ajax for this is <em>also</em> overkill. Instead of writing out to <code>static.json</code>, I could read in <code>index.html</code>, look for some kind of token, and replace it with HTML. Then the page would be really, <em>really</em> static. As always, there's multiple ways to skin the cat here.</p>\n<p>Let me know what you think about this approach, and don't forget to check out my <a href=\"https://codabreaker.rocks\">awesome design skills</a>.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/ymf4_9Y9S_A?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Randy Fath</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Vue Components FTW - Toasted",
		"date":"Tue Feb 05 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/02/06/vue-components-ftw-toasted",
		"content":"<div style=\"background-color:#d0d0d0;padding:5px\">\n<p>\nBefore I begin this post, a quick bit of context. A few days ago I was reading an excellent post on Vue and Internationalization (<a href=\"https://medium.freecodecamp.org/how-to-add-internationalization-to-a-vue-application-d9cfdcabb03b\">How to add Internationalization to a Vue Application</a>), and while it is a great article in itself, towards the end the author mentions a small, random little component to make it easy to display country flags (<a href=\"https://www.npmjs.com/package/vue-flag-icon\">vue-flag-icon</a>). I was really intrigued by this and thought it would be interesting to start looking into the options available to us as Vue developers. \n</p>\n<p>\nWith that in mind, I hopped on Twitter and asked what folks would think about a regular series where I talk about components. The idea is to focus on small, easy to use components that integrate well into existing projects. \"Small\" is relative of course, but in my mind, things like <a href=\"https://vuetifyjs.com/en/\">Vuetify</a>) would not apply. (And to be clear, Vuetify is pretty awesome!)\n</p>\n<p>\nI also had one more \"rule\" that I reserve the right to ignore later. I wanted to focus on components that supported both npm installs as well as script tag use (i.e., add this script tag to your HTML) file. I think folks may disagree with me but I really think it's important for a Vue component to support both \"build process\" Vue apps (not a great phrase, sorry) as well as simple \"I'm dropping Vue into a regular HTML page\" use cases. \n</p>\n<p>\nFor now I'm going to try to make this a weekly series, but honestly I think it will be more like twice a month. And I'm going with <b>Vue Components FTW</b> as the tagline because this is my blog and I get to be as silly as I'd like!\n</p>\n</div>\n<p>Ok, sorry for the long preamble! For my first Vue component I'm reviewing <a href=\"https://github.com/shakee93/vue-toasted\">vue-toasted</a> which is a simple &quot;Toast&quot; library. Don't know what a &quot;toast&quot; is? Don't feel bad. In this content (the web, and not your kitchen), toast is simply a notification that appears and (typically) disappears automatically. Something like, &quot;You've got new mail!&quot;. Remember when getting email was cool?</p>\n<p>You can see an example of this below - just click the cat.</p>\n<p class=\"codepen\" data-height=\"600\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"LqOxdY\" style=\"height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Toasted Simple\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/LqOxdY/\">\n  Vue Toasted Simple</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>The component has an easy API but also supports quite a few options out of the box:</p>\n<ul>\n<li>The ability to automatically dismiss.</li>\n<li>The ability to theme the toast.</li>\n<li>The ability to add buttons with different actions to the toast.</li>\n<li>The ability to define 'global' toasts for easy reuse across an application. (And these even support dynamic options so you can create a global error handler, for example, but allow for specific error messages.)</li>\n<li>Integration with popular icon fonts.</li>\n</ul>\n<p>Installation is either via npm or by adding a script tag:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;https://unpkg.com/vue-toasted&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Once added, you then tell Vue about it:</p>\n<pre><code class=\"language-js\">Vue.use(Toasted)\n</code></pre>\n<p>So how easy is it to use? An eternal, never-ending immortal Vampire toast can be created like so:</p>\n<pre><code class=\"language-js\">Vue.toasted.show('meow!');\n</code></pre>\n<p>Note that the result of this call is a toast object which you could use to destroy it later. I'd call it <code>woodenStake</code> but that's me.</p>\n<p>Adding duration is as simple as passing an object with options:</p>\n<pre><code class=\"language-js\">Vue.toasted.show('life is short...', {\n\tduration: 2000\n});\n</code></pre>\n<p>And yeah, there's many different options. Here's an example of adding an action button to the toast:</p>\n<pre><code class=\"language-js\">Vue.toasted.show('Just Do It', {\n\taction: {\n\t\ttext:'Done',\n\t\tonClick:(e, toast) =&gt; {\n\t\t\ttoast.goAway(0);\n\t\t}\n\t}\n});\n</code></pre>\n<p>Defining global toasts is also pretty easy - and remember you can define these to take arguments for on the fly customization as well. (This example is taken pretty much as is from the docs.)</p>\n<pre><code class=\"language-js\">Vue.toasted.register('my_app_error', 'Oops.. Something Went Wrong..', {\n    type : 'error'\n});\n// later in your code...\nthis.$toasted.global.my_app_error();\n</code></pre>\n<p>And then finally, an example of using an icon pack. Note that you must include the icon pack before you do this. For my CodePen demo (you'll see it in a bit) I simply added the URL in the CSS panel.</p>\n<pre><code class=\"language-js\">Vue.toasted.show('I forgot to DVR &quot;Arrow&quot;!', {\n\tduration:2000,\n\ticon:'dvr',\n\ttype:'error'\n});\n</code></pre>\n<p>Here's a CodePen demonstrating everything above. It also demonstrates an interesting issue with the component. If you do a toast for &quot;Foo&quot;, the component will nicely size it to fit the content. If that toast is still visible and you then toast &quot;My Kingdom for a Beer&quot;, you'll notice the earlier toast resizes to match the same size as the new one. I guess that's not a bug but it surprised me a bit.</p>\n<p class=\"codepen\" data-height=\"410\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"OdgNrx\" style=\"height: 410px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Toasted\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/OdgNrx/\">\n  Vue Toasted</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Pretty simple, pretty useful, and should be easy to drop into your next Vue project. If you've used <a href=\"https://github.com/shakee93/vue-toasted\">vue-toasted</a> before, let me know in a comment below. And if you like this series (so far anyway) give me a comment as well!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/puO8UBJU1CM?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Mani Kim</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue components ftw"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Book Review: Learning GraphQL",
		"date":"Thu Feb 14 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/02/15/book-review-learning-graphql",
		"content":"<p>Over the past week or so I've been spending time learning what I can about GraphQL. I've already attended a few conference\nsessions on the topic and had a basic understanding of what it was, but I wanted to really begin cementing my knowledge\nof the topic in preparation for some things we're doing at work. Randomly I saw a mention of <a href=\"http://shop.oreilly.com/product/0636920137269.do\">&quot;Learning GraphQL&quot;</a> via Twitter so I decided to give it a read. The book, written by Alex Banks and Eve Porcello, is a bit below two hundred pages so it can be comfortably read rather quickly, but packs a lot of material. I'll go into detail below but the gist is that I definitely recommend it and I'll be purchasing a hard copy to keep at my desk for the next few months.</p>\n<p>As I said, the book clocks in at right below two hundred pages (198) and consists of the following sections:</p>\n<ul>\n<li>\n<p>&quot;Welcome to GraphQL&quot; provides a great introduction to the &quot;why&quot; of GraphQL. As I said, I already had a good understanding of the why but this section is really well done and could be a great way to convince management of why it should be adopted. Even if you've already sat in a few intro sessions, I'd suggest reading this piece just to cement in the principles.</p>\n</li>\n<li>\n<p>&quot;Graph Theory&quot; covers some of the academic aspects behind GraphQL and I have to be honest - I was going to skip this section. I'm really glad I didn't. It provided a great background to the concept of graphs and some fascinating historical background. I appreciated how many of the examples were tied to existing social networks and apps which really helped them make sense. I can't tell you how many times I've object orientation-related books use examples that have no correlation to practical development, so the use of existing samples in the wild really helped it sink in.</p>\n</li>\n<li>\n<p>&quot;The GraphQL Query Language&quot; goes really deep into the syntax of GraphQL and even though I've seen a lot of this before, I learned quite a bit and came out even more impressed about the power of GraphQL. As I said, I've sat in presentations on GraphQL before and I totally get that you can only cover so much, but I was really surprised by some of the more advanced aspects of the query language.</p>\n</li>\n<li>\n<p>&quot;Designing a Schema&quot; acts a good flip side to the previous section. It describes how you define the schema that will then work the query language. As with the previous section, I'd seen parts of this before, but seeing how deep you could go was eye opening. Basically this section and the previous one turned me from &quot;Yeah, GraphQL looks neat&quot; to a &quot;I never want to use REST again&quot; kool-aid drinker.</p>\n</li>\n<li>\n<p>&quot;Creating a GraphQL API&quot; walks you through building a real, if simple, application. In general, this section was really well done. I was able to follow along for about 75% of the chapter building the application along with the text. At some point though it became harder to do so. To be clear, there is a GitHub repo with the complete code for every section that you can grab at any time. Also, I don't know if the intent was for the reader to actually build the app while reading. But I'm a big believer in typing in code as a way to help me learn and it feels like the authors could have done just a bit more work to enable that. Despite my issues, I did like the fact that the chapter ended with how to add login and authorization to the app, something I had not seen with GraphQL before.</p>\n</li>\n<li>\n<p>&quot;GraphQL Clients&quot; goes into detail on integrating with GraphQL APIs. It covers everything from pure cUrl calls to good Node libraries and front-end utilities. The example here is React-based so I didn't try building it myself, but I plan on looking at Vue support soon.</p>\n</li>\n<li>\n<p>&quot;GraphQL in the Real World&quot; covers subscriptions - a way to use websockets to listen to data changes, and then goes into some great topics like file uploads, security, and performance. I had never seen these topics before (again, you only have so much time in a conference presentation) and the book did a great job of introducing them.</p>\n</li>\n</ul>\n<p>Overall, a very good book and one I recommend. As I said, I plan on buying a physical copy, something I only do rarely\nfor technical books. There's two issues I'd like to point out though.</p>\n<p>First, the book assumes familiarity with ES6 syntax. If you haven't yet gotten used to fat arrow functions, spread operators, and template strings, you may have some issues following the code. I do not point this out as a problem, just as a warning. If you need some help in this area, I'd check out the excellent tutorials at <a href=\"https://developer.mozilla.org/en-US/\">MDN</a>, or heck, as me in a comment and I'll do my best to answer.</p>\n<p>Secondly, and this complaint will only make sense if you know GraphQL, and I'm not even sure I'm right so I'm hoping someone can clarify for me. In the section where a database is connected in the resolvers, it isn't spelled out how filtering on fields is done. What I mean is - I ask for all my photos, but only fields A and B. Yet in the resolver it's hitting Mongo and just returning the complete array. My <em>guess</em> is that this is where the Apollo NPM package comes in and works it's magic. If so, that's really freaking awesome. The code you have to write is kept nice and simple. But I swear this wasn't actually spelled out to the reader so it wasn't clear. I'd love it if someone could confirm that for me!</p>\n<p>Alright - that's it. As I said, definitely pick up this book if you need to get up to speed on GraphQL and if you have read it, leave me a comment below telling me what you think. The link below is an affiliate link and if you purchase, I will get lots and lots of money and can have more time to write posts like this, so give it a click!</p>\n<iframe style=\"width:120px;height:240px;\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" src=\"//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=tf_til&ad_type=product_link&tracking_id=raymondcamd06-20&marketplace=amazon&region=US&placement=1492030716&asins=1492030716&linkId=e799f347c4259ef28a98ec299df032d5&show_border=true&link_opens_in_new_window=true&price_color=333333&title_color=0066c0&bg_color=ffffff\">\n    </iframe>\n",
		"tags":[
	        
            "graphql"
            
		],
		"categories":[
            
                "books",
            
                "development"
            
		]

	},

	{
		"title": "Vue Components FTW - vue-pure-lightbox",
		"date":"Tue Feb 19 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/02/20/vue-components-ftw-vue-pure-lightbox",
		"content":"<div style=\"background-color:#d0d0d0;padding:5px\">\nThis post is part of a series of articles looking at simple, easy to use components that\ncan be added to your Vue.js application. You can view the entire series <a href=\"/tags/vue+components+ftw\">here</a> and drop me a line with suggestions!\n</div>\n<p>Today's simple Vue component is <a href=\"https://github.com/DCzajkowski/vue-pure-lightbox\">vue-pure-light</a>, a <em>very</em> lightweight and simple &quot;lightbox&quot; component. If you don't know what a lightbox is, it's the UI/UX feature where a picture can take over the entire screen to let you focus on it. You've probably seen it on real estate listings or art sites. The component supports npm installation as well as directly dropping in a CSS and JS tag in your HTML:</p>\n<pre><code class=\"language-html\">&lt;!-- In &lt;head&gt; --&gt;\n&lt;meta rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/vue-pure-lightbox/dist/vue-pure-lightbox.css&quot;&gt;\n&lt;!-- In &lt;body&gt;, after Vue import --&gt;\n&lt;script src=&quot;https://unpkg.com/vue-pure-lightbox/dist/vue-pure-lightbox.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Once installed, you can then use the <code>&lt;lightbox&gt;</code> tag in your application. There's a grand total of three arguments - one for the thumbnail (the initial image), one for an array of image URLs, and an alternate text value.</p>\n<p>And that's it. You can also provide a custom loader but I found the one out of the box easy enough to use. So here's a CodePen example provided by the author:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"DCzajkowski\" data-slug-hash=\"rzOErW\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"vue-pure-lightbox demo\">\n  <span>See the Pen <a href=\"https://codepen.io/DCzajkowski/pen/rzOErW/\">\n  vue-pure-lightbox demo</a> by Dariusz Czajkowski (<a href=\"https://codepen.io/DCzajkowski\">@DCzajkowski</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Pay special attention to the CSS panel. While the docs mention there's custom styles in place it doesn't actually enumerate them. The CSS panel here is a handy reference as to what you can customize. Also, he used cats, so therefore I love him. Case closed.</p>\n<p>How about a slightly more advanced example? (And I really mean, &quot;slightly&quot;...) I began with the following markup:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;lightbox\n    thumbnail=&quot;https://www.placecage.com/200/200&quot;\n    :images=&quot;images&quot;\n  &gt;\n     &lt;lightbox-default-loader slot=&quot;loader&quot;&gt;&lt;/lightbox-default-loader&gt; \n  &lt;/lightbox&gt;\n\n&lt;/div&gt;\n</code></pre>\n<p>If you don't recognize the URL for the thumbnail, I'm using <a href=\"http://www.placecage.com/\">PlaceCage</a>, a placeholder image service comprised entirely of Nicolas Cage pictures. I've specified that my images are being sourced from data in the Vue instance, so let's take a look at that.</p>\n<pre><code class=\"language-js\">Vue.config.silent = true;\n\nVue.use(Lightbox);\n\nconst app = new Vue({\n  el:'#app',\n  data() {\n    return {\n      images:[]\n    }\n  },\n  mounted() {\n    for(let i=0;i&lt;10;i++) {\n      this.images.push(`https://www.placecage.com/c/${600 + (i*10)}/${600 + (i*10)}`);\n    }\n  }\n})\n</code></pre>\n<p>In this case I've just created 10 dynamically sized images from the service. You can run this example here:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"aXMwGG\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"vue-pure-lightbox\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/aXMwGG/\">\n  vue-pure-lightbox</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>So while writing up this blog post I discovered that my favorite placeholder service, <a href=\"https://placekitten.com/\">placekitten</a>, is back up and running! Screw Nicolas Cage! Here's a fork of the previous example with kittens. MUCH BETTER!</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"RvOeWo\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"vue-pure-lightbox (2)\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/RvOeWo/\">\n  vue-pure-lightbox (2)</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Isn't that nicer? As always - if you have any comments or suggestions about this series, drop me a comment below.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/J4hxSsDZ8Lc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Dane Kelly</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue components ftw"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "What is $nextTick in Vue and When You Need It",
		"date":"Thu Feb 21 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/02/22/what-is-nexttick-in-vue-and-when-you-need-it",
		"content":"<p>I've been using Vue heavily for a while now and this week I ran into an issue that I've never seen before. It's something documented and pretty well known (when I tweeted about it I got a reply in about 60 seconds) but I just had not hit it before. Before I get into $nextTick, let me explain what I was doing and what went wrong.</p>\n<p>I have a hidden form on a page that needs to have a dynamic action value. Consider this markup:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;form :action=&quot;myAction&quot; method=&quot;post&quot; ref=&quot;myForm&quot;&gt;\n    &lt;button @click.prevent=&quot;testAction&quot;&gt;Test&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<p>And this code:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    myAction:null\n  },\n  methods:{\n    testAction() {\n      this.myAction = 'http://www.raymondcamden.com';\n      this.$refs.myForm.submit();\n    }\n  }\n})\n</code></pre>\n<p>Looks simple enough, right? Probably the only interesting thing here is the use of <code>ref</code> and <code>this.$refs</code> to handle accessing the DOM directly with Vue. I call it fancy because it isn't something I usually need to do with Vue. So what happens when you test this? Try it yourself and see:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"omrPpP\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"what the tick?!?!\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/omrPpP/\">\n  what the tick?!?!</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Instead of POSTing to my server, it sends the POST directly to CodePen, and just today I discovered they support echoing back the data which is kind of cool! (Note, in the embedded CodePen above, the POST echo doesn't work. It may not be a feature of the embed.)</p>\n<p>Alright, so what the heck went wrong? Well, if you're like me, you may not have read the &quot;Internals&quot; section of the Vue.js documentation, specifically this part: <a href=\"https://vuejs.org/v2/guide/reactivity.html#Async-Update-Queue\">Async Update Queue</a>.</p>\n<blockquote>\nIn case you haven’t noticed yet, Vue performs DOM updates asynchronously.\n</blockquote>\n<p>Raise your hand if you hadn't noticed this yet.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/02/raisehand.jpg\" alt=\"Ray raising his hand\" class=\"imgborder imgcenter\">\n<p>Luckily there's a simple fix for this and if you actually read the title of this post, you have an idea of what it is: <code>this.$nextTick</code>. This function lets you provide a callback to execute when Vue is done propagating your changes to the DOM and it's safe to assume it reflects your new data. The fix is pretty simple:</p>\n<pre><code class=\"language-js\">this.$nextTick(() =&gt; this.$refs.myForm.submit());\n</code></pre>\n<p>And if fat arrow functions still confuse you a bit (nothing wrong with that!), here's a simpler version:</p>\n<pre><code class=\"language-js\">this.$nextTick(function() {\n\tthis.$refs.myForm.submit();\n});\n</code></pre>\n<p>You can see the corrected version in the CodePen below.</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"vbqzpb\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"what the tick?!?! (fixed)\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vbqzpb/\">\n  what the tick?!?! (fixed)</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>So to answer the question of &quot;when&quot; - I guess I'd say when you need to ensure the DOM 100% reflects your data and in this case it's kind of obvious - I needed my form POST to use the correct URL. Out of all the times I've used Vue this is the first time I needed this precise level of control but I'm sure I'll run into more examples. If you can, please share an example of when you've used it in the comments below!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/n-pqXQ9YsBg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Franck V</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Assets and Stuff from My Vue.js Presentations",
		"date":"Fri Mar 08 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/03/09/assets-and-stuff-from-my-vuejs-presentations",
		"content":"<p>This post is really just for those folks who attended my <a href=\"https://devnexus.com/\">DevNexus</a> presentations this past week, although anyone is welcome to grab the assets if you want. I've zipped\nup both slide decks and demos. I've gone back and forth between putting presentations up on GitHub and if I give these again they move there, but for now you can just grab the zips.</p>\n<p><a href=\"https://static.raymondcamden.com/enclosures/vuepreso.zip\">https://static.raymondcamden.com/enclosures/vuepreso.zip</a></p>\n<p><a href=\"https://static.raymondcamden.com/enclosures/nuxtpreso.zip\">https://static.raymondcamden.com/enclosures/nuxtpreso.zip</a></p>\n<p>In both sessions I mentioned the &quot;Awesome Vue&quot; resource, a list of, well awesome Vue.js related stuff. You can find that here: <a href=\"https://github.com/vuejs/awesome-vue\">https://github.com/vuejs/awesome-vue</a>.</p>\n<p>Thank you to everyone who showed up!</p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "An Example of Nuxt.js with a Custom Generator",
		"date":"Mon Mar 11 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/03/12/an-example-of-nuxtjs-with-a-custom-generator",
		"content":"<p>Last week I had the pleasure of speaking at <a href=\"https://devnexus.com/\">DevNexus</a> on multiple Vue.js topics, one of which was the <a href=\"https://nuxtjs.org/\">Nuxt.js framework</a>. I had previously looked at Nuxt many months ago and decided I didn't like it. The main issue I ran into were documentation issues and - well to be honest - just a gut feeling. When I was asked if I could give a Nuxt presentation to cover for a speaker who had to cancel, I was happy for the opportunity to give Nuxt another look. In the end, I came away with a much different opinion. I still think the docs need a bit of tweaking (I'll mention one issue in this post), but overall I'm pretty damn impressed. Nuxt adds multiple shortcuts which let you follow a convention to skip a lot of boilerplate code. It's really a nice framework that I'm hoping to use, and blog on, a bit more this year.</p>\n<p>Ok, so now that the intro is over, let me get into the meat of what I want to cover. Nuxt works best as a universal (server-side rendering) application, but it also supports static output. When creating static output, it can either create a &quot;traditional&quot; set of HTML files and the like, or a SPA (Single Page Application). So far so good.</p>\n<p>One of the feature of Nuxt that I really like is the easy way to create routes in your Vue application. Want <code>/cat</code> to work? Simply add <code>cat.vue</code> and you're good to go. Nuxt also easily supports dynamic routes. Given that <code>cat.vue</code> returned a list of cats, you can create a dynamic route by adding <code>cats/_id.vue</code>, where the underscore represents a dynamic value. (You can read more about this feature <a href=\"https://nuxtjs.org/guide/routing#dynamic-routes\">here</a>). Again, so far so good.</p>\n<p>But what happens when you generate a static version of your Nuxt app? The docs covering <a href=\"https://nuxtjs.org/guide/commands\">static generation</a> have this to say:</p>\n<blockquote>\nIf you have a project with dynamic routes, take a look at the generate configuration to tell Nuxt.js how to generate these dynamic routes.\n</blockquote>\n<p>This leads you to the <a href=\"https://nuxtjs.org/api/configuration-generate\">generate configuration</a> docs which then say:</p>\n<blockquote>\nDynamic routes are ignored by the generate command.\n</blockquote>\n<p>Bummer. However, Nuxt supports the ability to use a function to return routes in your generate configuration. This lets you add whatever logic you want. Let's consider an example of this. I built a simple Nuxt app with two routes. The home page retrieves a list of films from the Star Wars API:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;section class=&quot;container&quot;&gt;\n    &lt;div&gt;\n\n\t\t&lt;h1&gt;Films&lt;/h1&gt;\n\n\t\t&lt;b-list-group&gt;\n\t\t\t&lt;b-list-group-item v-for=&quot;film in films&quot; :key=&quot;film.episode_id&quot; \n\t\t\t:to=&quot;'film/'+film.properId&quot;&gt;{{film.title}}&lt;/b-list-group-item&gt;\n\t\t&lt;/b-list-group&gt;\n\n    &lt;/div&gt;\n  &lt;/section&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\nexport default {\n\tdata() {\n\t\treturn {\n\t\t}\n\t},\n\tmethods: {\n\t},\n\tasync asyncData(context) {\n\t\tlet { data } = await context.$axios.get('https://swapi.co/api/films/');\n\t\t// add a proper id\n\t\tdata.results.forEach(d =&gt; {\n\t\t\td.properId = d.url.substring(0,d.url.length-1).split('/').pop();\n\t\t});\n\t\treturn { films: data.results }\n\t}\n}\n&lt;/script&gt;\n</code></pre>\n<p>For the most part I assume this is rather self-explanatory (but as always, <em>please</em> ask if not!), with the only exception being the <code>forEach</code> where I grab the end of the URL value used for getting specific information about the film. (The Star Wars API &quot;list&quot; commands actually return full data so this isn't the best example, but let's ignore that for now.)</p>\n<p>I then created <code>film\\_id.vue</code> to handle displaying the detail:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n\t&lt;div&gt;\n\t\n\t\t&lt;h1&gt;{{film.title}}&lt;/h1&gt;\n\n\t\t&lt;p&gt;\n\t\t\t&lt;pre&gt;\n{{film.opening_crawl}}\n\t\t\t&lt;/pre&gt;\n\t\t&lt;/p&gt;\n\n\t\t&lt;p&gt;\n\t\t&lt;b-button to=&quot;/&quot; variant=&quot;success&quot;&gt;Home&lt;/b-button&gt;\n\t\t&lt;/p&gt;\n\n\t&lt;/div&gt;\n\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\n\tasync asyncData(context) {\n\t\tlet { data } = await context.$axios.get('https://swapi.co/api/films/'+context.route.params.id);\n\t\treturn { film: data }\n\t}\n\n}\n&lt;/script&gt;\n</code></pre>\n<p>Again, my assumption is that this is trivial enough to not need any additional context, but just let me know if not. Alright, so in theory, if we generate a static version of this Nuxt app, it will simply ignore the dynamic routes and just render the first page. Right?</p>\n<p>Wrong.</p>\n<p>Turns out, Nuxt seems to pick up on the dynamic route and use &quot;SPA&quot; mode when generating static output. Remember I said Nuxt could output static content in two forms, a more &quot;traditional&quot; page per route or a SPA. The docs here are a bit misleading (and I've filed a bug report on this) since it seems to work just fine. You can see this live here: <a href=\"https://deserted-squirrel.surge.sh/\">https://deserted-squirrel.surge.sh/</a></p>\n<p>Ok, but if I wanted the &quot;non&quot; SPA version and waned to test that custom generate support? Let's see how it looks! This is what I added to <code>nuxt.config.js</code>:</p>\n<pre><code class=\"language-js\">generate: {\n\troutes:function() {\n\t\tconsole.log('doing my generate like a pro');\n\t\treturn axios.get('https://swapi.co/api/films/')\n\t\t.then((res) =&gt; {\n\t\t\treturn res.data.results.map((film) =&gt; {\n\t\t\t\tlet properId = film.url.substring(0,film.url.length-1).split('/').pop();\n\t\t\t\treturn '/film/'+properId;\n\t\t\t})\n\t\t});\n\n\t}\n}\n</code></pre>\n<p>And yeah, that's it. Note that those <code>console.log</code> messages <em>do</em> work and will show up in your terminal which can be real helpful for debugging. This created a directory called <code>film</code> (it was smart enough to create it when it didn't exist) and then a folder for each id with an <code>index.html</code> file underneath it.</p>\n<p>Easy enough! You can actually get even more complex with this support and I encourage you to check out the <a href=\"https://nuxtjs.org/api/configuration-generate\">docs</a> for more information. Finally, you can check out this version here: <a href=\"http://typical-jump.surge.sh\">http://typical-jump.surge.sh</a></p>\n<p>Any questions? Leave me a comment below!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/G8hk3cl25ZA?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Matt Howard</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Getting Started with FusionReactor (for ColdFusion Devs)",
		"date":"Mon Mar 18 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/03/19/getting-started-with-fusionreactor-for-coldfusion-devs",
		"content":"<p>As a ColdFusion developer, you may know that it's running as a J2EE server but also may have zero to no idea what that means in a practical sense. ColdFusion has always been easy to use, especially for developers from a non-traditional background, and this sometimes means there's aspects of the platform that aren't quite as easy to understand as others. A great example of this are the things that are more Java-centric. FusionReactor integrates with your ColdFusion server from a Java-perspective, which means it may be use terms that may be unfamiliar to the developer who only knows CFML.</p>\n<p>And yes, you can, and should, consider learning more about Java, but at the same time, we don't always have the opportunity to pick up a new language! You may need to get things working <em>now</em> and what I'd like to do in this article is help you, the CFML developer, better understand how Fusion Reactor reports issues and get you to a point where you can quickly identify (and fix!) your problems.</p>\n<p>My assumption is that you've already installed FusionReactor. If not, head over to the <a href=\"https://www.fusion-reactor.com/download/\">downloads</a> and grab a copy. You can get your trial key there and use it to test and evaluate the product. As I'm writing this for CFML developers who aren't familiar with Java, I strongly urge you to use the &quot;Automated Installers&quot;. I'm testing on a Windows machine with <a href=\"https://lucee.org/\">Lucee</a> but obviously you can use Adobe's ColdFusion product as well.  I'm also assuming you've set up a FusionReactor instance pointing to your ColdFusion server so you can start monitoring and debugging. Once you have, you can open that instance.</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/instance_home.png\" alt=\"Instance Home page\"></p>\n<h3>Let's Break Something!</h3>\n<p>There's a heck of lot to FusionReactor but in this article I'm going to focus on just one particular aspect - errors. Luckily, I'm a born error creator. One of the best. I should probably get endorsed on LinkedIn for writing buggy code. Thankfully that's made me something of an expert in debugging a file and figuring out what went wrong. That's rather easy while I'm writing and testing code. It isn't necessarily helpful when the code is in production and being used by the public.</p>\n<p>Let's consider a simple template that seems to be bug free.</p>\n<pre><code class=\"language-markup\">&lt;h1&gt;Debug Testing&lt;/h1&gt;\n\n&lt;cfoutput&gt;\nurl.name = #url.name#&lt;br/&gt;\nlen is #len(url.name)#\n&lt;/cfoutput&gt;\n</code></pre>\n<p>This script simply outputs the value of a variable passed in the query string, <code>name</code>, and then reports the length of the value. Given that the file is named <code>ray.cfm</code>, you can test this like so:</p>\n<p>http://127.0.0.1:8888/ray.cfm?name=raymond</p>\n<p>Which gives you:</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/test1.png\" alt=\"Test result\"></p>\n<p>Ok, astute readers will recognize the issue with this code. What happens when you don't pass the <code>name</code> value in the query string?</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/raw_error.png\" alt=\"Error thrown in browser\"></p>\n<p>In this case it's probably obvious what you did wrong. This is easy enough to fix by either setting a default or adding logic to redirect when the value isn't defined, but what if you miss this and deploy the code to production?</p>\n<p>Assuming you've done that and got a report from your users (or even better, your manager at 2AM on Saturday), let's quickly see how FusionReactor can help you find this issue.</p>\n<h3>To the Requests, Batman!</h3>\n<p>Alright, so you've got a report about something going wrong. In a perfect world, that report includes the URL, query string, what the user was doing, the phase of the moon, and more. Also know that ColdFusion has excellent built-in error handling that can send you detailed reports... if you added that to your project.</p>\n<p>But let's pretend you have nothing, or something as useless as this:</p>\n<blockquote>\n\"Hey, the web site is broke.\"\n</blockquote>\n<p>Let's begin by looking at the history of requests in the FusionReactor instance. In the left hand menu, mouse over Requests and select History:</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/history.png\" alt=\"Request history\"></p>\n<p>There's a lot to this table, but let's focus on a few things in a somewhat descending order of importance:</p>\n<ul>\n<li>Status Code: When a request is made over the web, a server returns a code that represents how it was handled. <code>200</code> represents a good response. <code>500</code> is a bad response. (And note how FusionReactor is flagging that already!) There's a great many different status codes out there and you should <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">take a look</a> at them sometime.</li>\n<li>URL: This tells you the URL of the request and <em>normally</em>, but not always, will give you an idea of the file that was requested. Many people will use URL Rewriting to &quot;hide&quot; the fact that ColdFusion is running. In this case it's pretty obvious: <code>http://127.0.0.1:8888/ray.cfm</code>. Given that the URL path is <code>/ray.cfm</code> I can figure out that it's the <code>ray.cfm</code> in my web root. But you can't always count on it being that easy. Also note that the error in this view is Java-related: <code>lucee.runtime.exp.ExpressionException</code>. Don't worry - we're going to dig into this.</li>\n</ul>\n<p>That was the general request view, but most likely you want to focus in on just the errors. In that same left-hand nav, you can do so by selecting: Requests, Error History:</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/error_history.png\" alt=\"Error History\"></p>\n<p>This is showing the same information, just filtered to requests with errors.</p>\n<h3>Let's Get the Error</h3>\n<p>Alright, so you've found a request with an error, how do we diagnose it? On the right hand side is a &quot;book&quot; icon which will load details. Let's do that and see what we get.</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/error_details.png\" alt=\"Error Details\"></p>\n<p>Holy. Crap.</p>\n<p>Overwhelming, right? Everything there is useful, but there's a lot you don't need <em>right now</em> in order to get to the issue at hand. Begin by clicking &quot;Error Details&quot; under &quot;Transaction Details&quot;:</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/error_details2.png\" alt=\"Error Details - Tab Focused\"></p>\n<p>The first two blocks give you a good idea of what's going on. <code>key [NAME] doesn't exist</code> is a clue that your code tried to use a variable that didn't exist. If the <code>key</code> aspect doesn't make sense, it may be helpful to remember that ColdFusion variables are scopes, or structs, and when you access <code>url.something</code>, you're trying to use a particular key in that scope.</p>\n<p>Alright, so we're closer. Now our particular ColdFusion file is <em>very</em> short but imagine a much larger template, how would we find where the error was thrown?</p>\n<p>The bottom part of the template is the Java Stack Trace...</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/here_be_dragons.jpg\" alt=\"&quot;Here be dragons...&quot;\">\n<br/><i>Credit: <a href=\"https://www.flickr.com/photos/mdpettitt/19833960016\">https://www.flickr.com/photos/mdpettitt/19833960016</a></i></p>\n<p>The stack trace can be overwhelming. In this case, you can slowly read line by line looking for a line mentioning a CFM file:</p>\n<pre><code>ray_cfm$cf.call(/ray.cfm:5)\n</code></pre>\n<p>In this case, <code>ray.cfm</code> is the file name (pretty obvious) and <code>5</code> is the line number:</p>\n<pre><code>url.name = #url.name#&lt;br/&gt;\n</code></pre>\n<p>In theory, you're done, but FusionReactor can help you a bit more. In the left hand navigation, look for the Debug menu and select Sources.</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/sources.png\" alt=\"Debug Sources\"></p>\n<p>Out of the box, FusionReactor doesn't have any defined sources, so simply click the &quot;Add&quot; button and specify your web root. (Note that you can have more than one, and most likely you'll have one root directory per application.)</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/sources2.png\" alt=\"Debug Sources - Setting a Directory\"></p>\n<p>In the screenshot above I've simply specified my Lucee root.</p>\n<p>When you've done that go back to the Requests view, find that broken request, and get to the stack trace again.</p>\n<p>Now if you click on the method call, which is <code>ray_cfm$cf.call</code>, FusionReactor will actually be able to show you the file itself!</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/error_details3.png\" alt=\"Error Details in the File\"></p>\n<p>Notice how FusionReactor even highlights the line in the file!</p>\n<h3>But Wait - There's More!</h3>\n<p>FusionReactor contains a <em>huge</em> set of tools, but in this article we focused in specifically on helping diagnose an error in production. In the next one we'll start expanding our use of FusionReactor and look for more performance related issues.</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "coldfusion"
            
		]

	},

	{
		"title": "Finding (and Fixing) Your Slow ColdFusion Pages with FusionReactor",
		"date":"Sun Mar 24 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/03/25/finding-and-fixing-your-slow-coldfusion-pages-with-fusionreactor",
		"content":"<p>In my <a href=\"https://www.raymondcamden.com/2019/03/19/getting-started-with-fusionreactor-for-coldfusion-devs\">last article</a> I described how I wanted to help introduce <a href=\"https://www.fusion-reactor.com/\">FusionReactor</a> to ColdFusion developers with a special focus on helping solve practical problems and navigating terminology that may not be terrible familiar if you haven't used Java before. In that first article I focused on using the FusionReactor portal to find and diagnose pages that were throwing errors. In this follow up I'm going to highlight another great use of FusionReactor - finding slow pages.</p>\n<p>Slow pages can be difficult to find. A page that runs fast on your local server could run much slower in production. A page with a complex set of inputs, like an advanced search field with numerous filters, can only run slow when a particular unique set of choices are made. Sometimes your code can be absolutely perfect, but an external factor is the culprit. Perhaps you're integrating with a database that you have no control over, or maybe you're using a third party API that has performance issues of it's own.</p>\n<p>In this article I'm going to highlight multiple examples of slow pages and how FusionReactor can help you find, and hopefully fix, each of them! Ready?</p>\n<h2>Finding Your Slow Requests</h2>\n<p>Before we begin writing some horribly slow code (I'm a pro at this!), let's look at where FusionReactor displays these requests. In your left hand menu, under Requests, select Slow Requests:</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/slow1.png\" alt=\"Slow Request\"></p>\n<p>You'll notice the display is split between currently running slow requests and requests that have already finished but were considered slow. Which begs the question - what's &quot;slow&quot;?</p>\n<p>Under Requests, go to Settings, and then select WebRequest History. Here you will find multiple settings you can configure including what the threshold is for something being considered slow. In my FusionReactor 8 instance this was set to 8 seconds.</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/slow2.png\" alt=\"Slow Request settings\"></p>\n<p>To me this is a bit high and I'd consider switching it to a lower number. Performance is an <em>incredibly</em> important topic for web sites and while most of the discussion concerns what happens on the client side (rendering of JavaScript, styles, and so forth), the browser can't even render anything until you actually return the HTML. While there's a lot of resources out there on how fast a page should load, the general consensus should be two seconds. If your ColdFusion page is taking more than that to return a result to the browser, than you have already failed. (Because remember, the browser still has to <em>work</em> with your result to render it!)</p>\n<p>And just to be re-iterate, this is important even if your ColdFusion page isn't returning markup. If you are using ColdFusion to power a client-side application with JSON data, then you still need to ensure you're returning a speedy response.</p>\n<p>So yes, this is very, <em>very</em> important stuff. I'd go ahead and change that number from 8 down to 1 or 2. See what works best for you.</p>\n<p>Another view of your slow requests is the Longest Requests view, also found under the Requests menu:</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/slow1a.png\" alt=\"Longest Requests\"></p>\n<p>This is a sorted view of requests with the slowest being displayed first. This is <em>not</em> filtered by the Slow Request threshold but covers everything. Also note it includes non-ColdFusion files as well!</p>\n<h2>Bring the Slow</h2>\n<p>Let's start off by demonstrating two slow pages. One is always going to be slow and one uses an external resource that will <em>also</em> always slow. Here's the first one:</p>\n<pre><code class=\"language-markup\">&lt;h1&gt;Slow Testing&lt;/h1&gt;\n\nGo to sleep...&lt;br/&gt;\n&lt;cfflush&gt;\n&lt;cfset sleep(30000)&gt;\nAnd done.\n</code></pre>\n<p>It simply uses the <code>sleep</code> function to pause the execution for 30 seconds. If you've never seen <code>cfflush</code> before, it tells the ColdFusion server to send out existing output to the browser. As a user, you would see the initial HTML, the browser continue to load, and then the rest of the results.</p>\n<p>This will definitely cause a slow request to be logged. Unfortunately, unlike the error conditions we saw in the previous article, it's a bit more difficult to diagnose. Let's see why. First, here's the details page for this particular request.</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/slow3.png\" alt=\"Slow Request Detail\"></p>\n<p>There's a few things to note here. First, the slow time is nice, bold, and red. You can't miss that and that's a good thing. Now make note of JDBC. Don't know what that means? JDBC is the acronym for Java Database Connectivity. Basically this is how ColdFusion speaks to databases. I started ColdFusion development way back in 96 or so, before ColdFusion ran on Java, but even back then the biggest culprit for slow requests was issues at the database layer. We aren't doing any database requests on this page but nine times out of ten you want to turn your focus here. Every single one of those metrics is crucial and can be a flag for an underlying issue.</p>\n<p>As a real example of this, I was working with a client and discovered they had about 1000+ database queries being run in a request. How did this happen? They had queries in an Application.cfm file, queries in a header file, queries in a file loaded by a header file, and so on and so on. 90% of these queries were the exact same query run multiple times. They weren't stupid - they just didn't realize everything going on in one particular request. This can happen as a web application grows larger and more complex, and is yet another reason to consider a tool like FusionReactor!</p>\n<p>Alright, but this template isn't slow because of a query. What do you do next? Click on the Profiler tab next. (And note, back in the main list of slow requests, every slow request has a direct link to this particular view.)</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/slow4.png\" alt=\"Slow Request Detail - Profiler\"></p>\n<p>So in this case, you can't really get to a particular line of your template or ColdFusion method. But even if you've never used Java before, seeing 100% correlated to <code>java.lang.Thread.sleep</code> should give you a clue as to which particular tag was the issue.</p>\n<p>Let's consider another example, this time the ColdFusion template is using a third party API built on a serverless platform:</p>\n<pre><code class=\"language-markup\">&lt;h1&gt;Slow Testing 2&lt;/h1&gt;\n\nCall API...&lt;br/&gt;\n&lt;cfflush&gt;\n\n&lt;cfhttp url=&quot;https://wt-c2bde7d7dfc8623f121b0eb5a7102930-0.sandbox.auth0-extend.com/slow&quot;&gt;\n&lt;cfdump var=&quot;#cfhttp#&quot;&gt;\n</code></pre>\n<p>In this case, the serverless function I'm hitting is using <code>setTimeout</code> to delay the response for 3001 milliseconds. This page is going to be slow, but it's something out of ColdFusion's hands. (But to be clear, this is still something you could address. Can you cache the result? Can you fire it via a scheduled task and store the result locally? You've got options!) So how is this reported in the profile?</p>\n<p><img src=\"https://static.raymondcamden.com/images/2019/03/slow5.png\" alt=\"Slow Request Detail - Profiler and HTTP issue\"></p>\n<p>In this example, you can see two things that stand out - first <code>Http.java</code> and then <code>Dump.cfc</code>. The later clearly refers to the <code>cfdump</code> tag which typically wouldn't be run in production. But <code>Http.java</code> should definitely be enough of a clue to tell you where the issue is. Of course, you may run into an issue if you have multiple HTTP calls in your ColdFusion page. In that case you'll need to do further testing to see if you can determine the culprit. The important thing to note though is how FusionReactor got you nearly 100% of the way there!</p>\n<h3>What Next?</h3>\n<p>In this article I simply introduced the Slow Request views in FusionReactor and used it to find a few problem scripts that should be fixed. In my next article I'm going to turn my attention to database specific issues and show you how FusionReactor helps there. As always, leave me a comment below if you have any questions!</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "coldfusion"
            
		]

	},

	{
		"title": "Adding Visual Feedback to an Alexa Skill",
		"date":"Sun Mar 31 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/04/01/adding-visual-feedback-to-an-alexa-skill",
		"content":"<p>It's been a while since I've blogged about building Alexa skills, but this weekend I played around with something I've been meaning to take a look at for quite some time - visual results. In case you weren't aware, there are multiple ways of returning visual results with an Alexa skill response. There are multiple Alexa devices that have screens (I've got an Alexa Show and Spot) and whenever you use the Alexa app itself, visual results are displayed there. To be fair, I'd be willing to bet a lot of people aren't even aware of the Alexa app or that it can show previous uses. This is something I've meant to look at for sometime and dang if I wish I had looked at it earlier. You can add simple visual feedback in about five minutes of work!</p>\n<p>Note that Alexa devices support <em>two</em> kinds of visual feedback. The simplest one, the one I'm covering today, is called a Card. This is supported &quot;everywhere&quot; by which I mean it will always show up in the app even if you are speaking to a device without a display. There's a second method of support called &quot;display templates&quot; for devices that ship with a screen. I'm not covering this today but you can read more about it at the <a href=\"https://developer.amazon.com/docs/custom-skills/create-skills-for-alexa-enabled-devices-with-a-screen.html\">docs</a>.</p>\n<p>Ok, so let's demonstrate how to do this.</p>\n<h3>My Initial Skill</h3>\n<p>Before I continue on, note that <em>how</em> I built the skill is totally not relevant. I think it was kind of neat so I wanted to share, but you can definitely skip on to the next section where I discuss modifying it to add card support. I'll also note that I'm not submitting this one for release by Amazon so you can't test this yourself, but remember that Amazon makes it <em>super</em> easy to build and test these skills on your own devices which is awesome!</p>\n<p>My skill is called &quot;My Monster&quot; and it simply selects a random monster from Diablo 3. After giving myself a Nintendo Switch as an early birthday present, I've been playing the heck out of it and have really enjoyed the port. I played quite a bit on the PC and can say that the Switch does an incredible job with it. I don't miss a mouse at all.</p>\n<p>There's a great wiki for Diablo at, of course, <a href=\"https://diablo.fandom.com/wiki/Diablo_Wiki\">https://diablo.fandom.com/wiki/Diablo_Wiki</a>, and as every wiki has an API, I built some code to parse their data.</p>\n<p>The first thing I did was simply ask for all pages in the &quot;Animals&quot; category. I did this via a simple Postman test at this URL: <a href=\"https://diablo.fandom.com/api/v1/Articles/List?category=Animals&amp;limit=999999\">https://diablo.fandom.com/api/v1/Articles/List?category=Animals&amp;limit=999999</a>. This returns a list of pages. You can then get more information about a page by going to <a href=\"https://diablo.fandom.com/api/v1/Articles/AsSimpleJson?id=36097\">https://diablo.fandom.com/api/v1/Articles/AsSimpleJson?id=36097</a> where the ID value comes from the initial list in the previous URL. I wrote a quick Node script to get every page and save it to a local JSON file:</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\n/*\nThis array of animals came from hitting:\nhttps://diablo.fandom.com/api/v1/Articles/List?category=Animals&amp;limit=999999\nI manually removed &quot;Animals&quot;\nNo reason to run it again\n*/\nconst animals = require('./animals.json');\n//animals.items = animals.items.slice(0,10);\n\nconsole.log(`Parsing ${animals.items.length} different animals.`);\n\nlet data = [];\nlet calls = [];\n\nanimals.items.forEach(a =&gt; {\n\t// its async but it's ok (honest) cuz we add by unique id\n\tlet url = 'https://diablo.fandom.com/api/v1/Articles/AsSimpleJson?id='+a.id;\n\n\tlet call = new Promise((resolve, reject) =&gt; {\n\t\t\n\t\tfetch(url)\n\t\t.then(res =&gt; res.json())\n\t\t.then(res =&gt; {\n\t\t\t/*\n\t\t\tsample output:\n\n\t\t\t{\n\t\t&quot;sections&quot;: [\n\t\t\t{\n\t\t\t\t&quot;title&quot;: &quot;Agustin the Marked&quot;,\n\t\t\t\t&quot;level&quot;: 1,\n\t\t\t\t&quot;content&quot;: [\n\t\t\t\t\t{\n\t\t\t\t\t\t&quot;type&quot;: &quot;paragraph&quot;,\n\t\t\t\t\t\t&quot;text&quot;: &quot;Agustin the Marked, Carrion Scavenger, is a Unique Corvian Hunter found in the Shrouded Moors in Act II of Diablo III. It can be nominated a bounty.&quot;\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t&quot;type&quot;: &quot;paragraph&quot;,\n\t\t\t\t\t\t&quot;text&quot;: &quot;In combat, it has Electrified, Waller and Mortar affixes.&quot;\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t&quot;images&quot;: [\n\t\t\t\t\t{\n\t\t\t\t\t\t&quot;src&quot;: &quot;https://vignette.wikia.nocookie.net/diablo/images/6/66/Agustin.jpg/revision/latest/scale-to-width-down/180?cb=20170711163543&quot;,\n\t\t\t\t\t\t&quot;caption&quot;: &quot;&quot;\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t\t\trequire sections[0], title+level+content+images\n\t\t\t*/\n\t\t\tif(res.sections &amp;&amp; res.sections.length &gt;= 1 &amp;&amp; res.sections[0].title\n\t\t\t&amp;&amp; res.sections[0].level &amp;&amp; res.sections[0].content &amp;&amp; res.sections[0].images &amp;&amp; res.sections[0].images.length &gt;= 1\n\t\t\t&amp;&amp; res.sections[0].images[0].src) {\n\t\t\t\tlet result = res.sections[0];\n\t\t\t\tlet animal = {\n\t\t\t\t\ttitle:result.title,\n\t\t\t\t\tlevel:result.level\n\t\t\t\t}\n\n\t\t\t\tanimal.desc = result.content.reduce((prev, cur) =&gt; {\n\t\t\t\t\treturn prev + '&lt;p&gt;'+cur.text+'&lt;/p&gt;';\n\t\t\t\t}, '');\n\n\t\t\t\tanimal.image = result.images[0].src;\n\t\t\t\tdata.push(animal);\n\t\t\t\tresolve(true);\n\t\t\t} else {\n\t\t\t\t//console.log('skip for '+JSON.stringify(a));\n\t\t\t\tresolve(true);\n\t\t\t}\n\t\t});\n\t});\n\n\tcalls.push(call);\n});\n\nPromise.all(calls)\n.then(() =&gt; {\n\tconsole.log(data.length + ' animals written to monster.json');\n\tfs.writeFileSync('./monsters.json', JSON.stringify(data), 'UTF-8');\n});\n</code></pre>\n<p>Note the awesome use of Promises to run the HTTP calls in parallel and then my epic use of <code>reduce</code> to work with the text. Basically my idea was to end up with a set of JSON data I could use &quot;as is&quot; for my skill versus parsing data on the fly for each call. I missed one or two things and could have updated this but left it as is.</p>\n<p>The end result was a big array of monsters - here's part of it.</p>\n<pre><code class=\"language-js\">[\n\t{&quot;title&quot;:&quot;Alabaster Fury&quot;, \n\t&quot;level&quot;:1, \n\t&quot;desc&quot;:&quot;&lt;p&gt;Alabaster Furies are Unique Whitefur Howlers found in the Grace of Inarius Set Dungeon in Diablo III.&lt;/p&gt;&lt;p&gt;In combat, they have the Mortar and Missile Dampening affixes, the latter effectively forcing the player to fight them in melee. If allowed to charge, they can bash the player out of close combat, which also interferes with the primary task.&lt;/p&gt;&quot;, &quot;image&quot;:&quot;https://vignette.wikia.nocookie.net/diablo/images/2/2f/AlabasterF.jpg/revision/latest/scale-to-width-down/180?cb=20170715070656&quot;},\n\t{&quot;title&quot;:&quot;Agustin the Marked&quot;, \n\t&quot;level&quot;:1, \n\t&quot;desc&quot;:&quot;&lt;p&gt;Agustin the Marked, Carrion Scavenger, is a Unique Corvian Hunter found in the Shrouded Moors in Act II of Diablo III. It can be nominated a bounty.&lt;/p&gt;&lt;p&gt;In combat, it has Electrified, Waller and Mortar affixes.&lt;/p&gt;&quot;,&quot;image&quot;:&quot;https://vignette.wikia.nocookie.net/diablo/images/6/66/Agustin.jpg/revision/latest/scale-to-width-down/180?cb=20170711163543&quot;},\n\t{&quot;title&quot;:&quot;Almash the Grizzly&quot;, \n\t&quot;level&quot;:1, \n\t&quot;desc&quot;:&quot;&lt;p&gt;Almash the Grizzly, The Great Trapper, is a Unique Bogan Trapper found in the Paths of the Drowned in Act V of Diablo III.&lt;/p&gt;&lt;p&gt;In combat, he has Arcane Enchanted and Jailer affixes, and his ability to hurl traps has a greatly reduced cooldown.&lt;/p&gt;&quot;,&quot;image&quot;:&quot;https://vignette.wikia.nocookie.net/diablo/images/d/dc/5_Almash_the_Grizzly_c.jpg/revision/latest/scale-to-width-down/180?cb=20140820200154&quot;}\n]\n</code></pre>\n<p>Next I built a Webtask.io serverless task to select a random monster and return the result to the Alexa device. Here's the code, with again most of the monsters trimmed out for space.</p>\n<pre><code class=\"language-js\">const monsters = [{&quot;title&quot;:&quot;Alabaster Fury&quot;,&quot;level&quot;:1,&quot;desc&quot;:&quot;&lt;p&gt;Alabaster Furies are Unique Whitefur Howlers found in the Grace of Inarius Set Dungeon in Diablo III.&lt;/p&gt;&lt;p&gt;In combat, they have the Mortar and Missile Dampening affixes, the latter effectively forcing the player to fight them in melee. If allowed to charge, they can bash the player out of close combat, which also interferes with the primary task.&lt;/p&gt;&quot;,&quot;image&quot;:&quot;https://vignette.wikia.nocookie.net/diablo/images/2/2f/AlabasterF.jpg/revision/latest/scale-to-width-down/180?cb=20170715070656&quot;}];\n\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive)\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getMonster() {\n  return monsters[getRandomInt(0, monsters.length - 1)];\n}\n\n/**\n* @param context {WebtaskContext}\n*/\nmodule.exports = function(context, cb) {\n  \n  let req = context.body.request;\n\n  let monster = getMonster();\n  // make a new desc as Alexa won't grok the Ps (or other html)\n  // first attempt, set linebreaks for closing P\n  let desc = monster.desc.replace(/&lt;\\/p&gt;/g,' \\n ');\n  // now clean up rest\n  desc = desc.replace(/&lt;.*?&gt;/g,' ');\n\n  //used for text\n  let result = `Your random Diablo monster is ${monster.title}. The Diablo wiki describes it as so: \n${desc}`;\n   \n  var response = {\n    &quot;version&quot;: &quot;1.0&quot;,\n    &quot;response&quot; :{\n      &quot;shouldEndSession&quot;: true,\n      &quot;outputSpeech&quot;: {\n        &quot;type&quot;: &quot;PlainText&quot;,\n        &quot;text&quot;: result\n        }\n\t\t}\n  };\n    \n  cb(null, response);\n\n};\n</code></pre>\n<p>You can see I modify the text a bit. As I said earlier, the script I built to parse and save the data could have been updated so I'm not doing this on the fly. Or heck, I could write another Node script to read in the output and fix it. As I wasn't planning on releasing this skill I didn't worry about it. Here's a sample result via Alexa's testing console.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/alexa1.png\" alt=\"An example of the output from running the Alexa skill\" class=\"imgborder imgcenter\">\n<p>That one's a bit long for a response, but again, I'm just testing. Ok, so how do we add a card to the response?</p>\n<p>First - read the excellent docs! <a href=\"https://developer.amazon.com/docs/custom-skills/include-a-card-in-your-skills-response.html\">Include a Card in Your Skill's Response</a> There's multiple different types of cards but the easiest is a simple card. You can test it by simply adding the <code>card</code> object to your response:</p>\n<pre><code class=\"language-js\">let card = {\n\t&quot;type&quot;: &quot;Simple&quot;,\n\t&quot;title&quot;: monster.title,\n\t&quot;content&quot;: desc\n};\n\n//stuff...\n\nvar response = {\n\t&quot;version&quot;: &quot;1.0&quot;,\n\t&quot;response&quot; :{\n\t\t&quot;shouldEndSession&quot;: true,\n\t\t&quot;outputSpeech&quot;: {\n\t\t\t&quot;type&quot;: &quot;PlainText&quot;,\n\t\t\t&quot;text&quot;: result\n\t\t\t},\n\t\t\t&quot;card&quot;: card\n\t}\n};\n</code></pre>\n<p>In the example above I've added a simple card with a title and the same content as the audio response. This is the returned in the <code>card</code> key. Obviously you don't have to do that. You could use the text response as a way to include things that may not make sense over audio. So for example, I can imagine a case where acronyms are included in the text but not the audio:</p>\n<pre><code class=\"language-text\">Alexa says: &quot;I secretly record things for the National Security Agency&quot;\nAlexa prints: &quot;I secretly record things for the National Security Agency (NSA)&quot;\n</code></pre>\n<p>That's a pretty minor difference but you get the idea.</p>\n<p>Adding an image is pretty easy too. Switch the type to <code>Standard</code>, change <code>content</code> to <code>text</code> (which feels like a dumb change, mainly because I missed it), and then include an <code>image</code> object with up to two keys: <code>smallImageUrl</code> and <code>largeImageUrl</code>. I had the images for each monster already but didn't notice the wiki doing a server-side redirect to the proper image file. I modified my code to handle &quot;guessing&quot; the right URL so this isn't exactly perfect, but here's what I ended up with:</p>\n<pre><code class=\"language-js\">let card = {\n\t&quot;type&quot;: &quot;Standard&quot;,\n\t&quot;title&quot;: monster.title,\n\t&quot;text&quot;: desc,\n\t&quot;image&quot;:{\n\t\t&quot;largeImageUrl&quot;:image\n\t}\n};\n</code></pre>\n<p>And that's it! The result:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/alexa2.png\" alt=\"An example showing the text and image from the skill\" class=\"imgborder imgcenter\">\n<p>Here's a pic I took of it running on my Alexa Show. There's a bit of glare - sorry about that.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/alexa3.jpg\" alt=\"Example of the result on the Alexa Show\" class=\"imgborder imgcenter\">\n<p>So not exactly rocket science and in general Alexa development is pretty easy, but I was very impressed by how easy it was to add this feature to my skill. I kinda wished I had done this much earlier.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/9SewS6lowEU?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jack Hamilton</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "alexa"
            
		],
		"categories":[
            
                "javascript",
            
                "serverless"
            
		]

	},

	{
		"title": "Getting Location in NativeScript",
		"date":"Tue Apr 09 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/04/10/getting-location-in-nativescript",
		"content":"<p>As I prepare to get on an 8+ hour flight to Amsterdam for <a href=\"https://nativescriptdevday.org/\">NativeScript Developer Day</a>, I thought it would be nice to work on a quick little NativeScript demo. It occurred to me a few days ago that one of the things I did while learning Cordova and Ionic was to build a crap ton of simple demos that used various plugins as a way to learn the ecosystem. I've decided to try my best to repeat that process with NativeScript. What follows is the first of two articles I'm going to write on using geolocation with NativeScript. This is just a simple introduction while the next one will be a slightly more complex example.</p>\n<p>First, I want to start off with a little warning. When I Googled for geolocation and NativeScript, I ended up here: <a href=\"https://docs.nativescript.org/angular/ng-hardware-access/location\">Location</a>. The docs here have a few issues and in my opinion, you should avoid them. (I plan on filing a bug report on the issues when I get a chance from this trip!) Instead, I'd check the core docs for the plugin at <a href=\"https://github.com/NativeScript/nativescript-geolocation\">https://github.com/NativeScript/nativescript-geolocation</a>.</p>\n<p>Assuming you've got a NativeScript project created, you'll want to begin by adding the plugin:</p>\n<pre><code>tns plugin add nativescript-geolocation\n</code></pre>\n<p>Ok, so that's easy. Using the plugin is <em>mostly</em> easy, but you do have to handle permissions as well as handling errors from retrieving the data. In my opinion, the main readme doesn't do a great job of showing this in a complete example (although more on that in a bit), so I had to guess a bit to figure it out, but here's what I came up with as a general &quot;flow&quot;:</p>\n<pre><code class=\"language-js\">Geolocation.enableLocationRequest(true)\n.then(() =&gt; {\n\tGeolocation.isEnabled().then(isLocationEnabled =&gt; {\n\t\tif(!isLocationEnabled) {\n\t\t\t// potentially do more then just end here...\n\t\t\treturn;\n\t\t}\n\n\t\t// MUST pass empty object!!\n\t\tGeolocation.getCurrentLocation({})\n\t\t.then(result =&gt; {\n\t\t})\n\t\t.catch(e =&gt; {\n\t\t\tconsole.log('loc error', e);\n\t\t});\n\t});\n});\n}\n</code></pre>\n<p>The code begins by enabling location access in general. On my Android this resulted in a prompt the first time but not again. Then <code>isEnabled</code> call will return true or false and how your application handles that is up to, well, your application.</p>\n<p>Next, you'll actually get the location. <strong>It is very important that even if you are fine with the defaults, you must pass an empty object!</strong> If you pass nothing than the request is never made. That seems like a small bug to me, but it's easy enough to work around.</p>\n<p>Once done, your result variable includes latitude and longitude, altitude, and more. The docs do cover this very well.</p>\n<p>So how about a complete, if simple, demo of this? I'm using <a href=\"https://nativescript-vue.org/\">NativeScript-Vue</a> but obviously similar code would work in Angular, it just wouldn't be as cool. I built everything within one component:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n    &lt;Page class=&quot;page&quot;&gt;\n        &lt;ActionBar class=&quot;action-bar&quot;&gt;\n            &lt;Label class=&quot;action-bar-title&quot; text=&quot;Geolocation Demo&quot;&gt;&lt;/Label&gt;\n        &lt;/ActionBar&gt;\n\n        &lt;StackLayout&gt;\n            &lt;Label v-if=&quot;needLocation&quot; text=&quot;Looking up your location...&quot; /&gt;\n            &lt;Label v-if=&quot;locationFailure&quot; text=&quot;Sorry, I failed! :(&quot; /&gt;\n            &lt;Label v-if=&quot;location&quot; :text=&quot;locationDescription&quot; textWrap=&quot;true&quot; /&gt;\n        &lt;/StackLayout&gt;\n\n    &lt;/Page&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport * as Geolocation from 'nativescript-geolocation';\n\nexport default {\n    data() {\n        return {\n            needLocation:true,\n            locationFailure:false,\n            location:null\n        }\n    },\n    computed: {\n        locationDescription() {\n            return `You are at ${this.location.latitude}, ${this.location.longitude}. Your altitude is ${this.location.altitude}.`;\n        }\n    },\n    created() {\n\n        Geolocation.enableLocationRequest(true)\n        .then(() =&gt; {\n            Geolocation.isEnabled().then(isLocationEnabled =&gt; {\n                console.log('result is '+isLocationEnabled);\n                if(!isLocationEnabled) {\n                    this.needLocation = false;\n                    this.locationFailure = true;\n                    // potentially do more then just end here...\n                    return;\n                }\n\n                // MUST pass empty object!!\n                Geolocation.getCurrentLocation({})\n                .then(result =&gt; {\n                    console.log('loc result', result);\n                    this.needLocation = false;\n                    this.location = result;\n                })\n                .catch(e =&gt; {\n                    console.log('loc error', e);\n                });\n            });\n        });\n    }\n};\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n    // Start custom common variables\n    @import '../app-variables';\n    // End custom common variables\n&lt;/style&gt;\n</code></pre>\n<p>My application UI consists of three labels, each used to represent different states of the application. The initial label acts as a &quot;loading&quot; message of sorts and will go away once the location has been retrieved or an error has been thrown. The second label handles displaying an error and the the final label points to a computed property that will display our results.</p>\n<p>In my <code>created</code> event, I've got code based on the outline above. Ask for permissions, ensure I've got it, and then request my location. Once I get it I can simply store it and my Vue computed property will nicely render the result. Here's an example.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/geo1.png\" class=\"imgborder imgcenter\">\n<p>And that's it. In my next post I'm going to dig a bit deeper. The plugin has some useful methods you may be familiar with already from the web API, but it also has more including a super useful distance API built in. As always, let me know if you have any questions by leaving a comment below!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/D2K1UZr4vxk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"> Sylwia Bartyzel</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs",
            
            "nativescript"
            
		],
		"categories":[
            
                "javascript",
            
                "mobile"
            
		]

	},

	{
		"title": "Getting Location in NativeScript - Part 2",
		"date":"Sat Apr 13 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/04/14/getting-location-in-nativescript-part-2",
		"content":"<p>A few days ago I blogged about working with Geolocation in NativeScript (<a href=\"https://www.raymondcamden.com/2019/04/10/getting-location-in-nativescript\">&quot;Getting Location in NativeScript&quot;</a>). That post was a bit short as I was writing during a layover on my way to NativeScript Developer Day (which was pretty damn cool!) in Amsterdam. Now I'm on my way home, stuck in Atlanta due to storms causing chaos, and I thought I'd share a quick update to my previous post.</p>\n<p>While I mentioned that the <a href=\"https://github.com/NativeScript/nativescript-geolocation\">Geolocation plugin</a> worked very similarly to the web standards API, it did have one super useful addition that I wanted to highlight - the ability to return the distance between two points. Sure this is just math you can Google and copy and paste, but having it baked into the plugin is really darn useful.</p>\n<p>To demonstrate this, I modified my previous application to use a service that returns a list of locations, each with a longitude and latitude. It's static now but set up to be used asynchronously.</p>\n<pre><code class=\"language-js\">const api = {\n\n\tasync getLocations() {\n\n\t\treturn new Promise((resolve, reject) =&gt; {\n\t\t\t// fake data\n\t\t\tlet data = [\n\t\t\t\t{\n\t\t\t\t\tname:'New Orleans', \n\t\t\t\t\tlocation: { \n\t\t\t\t\t\tlat:29.95,\n\t\t\t\t\t\tlng:-90.07\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname:'New York City', \n\t\t\t\t\tlocation: { \n\t\t\t\t\t\tlat:40.73,\n\t\t\t\t\t\tlng:-73.93\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname:'San Francisco', \n\t\t\t\t\tlocation: { \n\t\t\t\t\t\tlat:37.77,\n\t\t\t\t\t\tlng:-122.43\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tresolve(data);\n\t\t});\n\t}\n\n}\n\nmodule.exports = api;\n</code></pre>\n<p>I placed this in an <code>api</code> folder. Next I updated my Home component to support:</p>\n<ul>\n<li>Getting the list</li>\n<li>Getting your location</li>\n<li>Updating the list with the distance between you and the location</li>\n</ul>\n<p>Here's the complete component:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n    &lt;Page class=&quot;page&quot;&gt;\n        &lt;ActionBar class=&quot;action-bar&quot;&gt;\n            &lt;Label class=&quot;action-bar-title&quot; text=&quot;Geolocation Demo&quot;&gt;&lt;/Label&gt;\n        &lt;/ActionBar&gt;\n\n        &lt;GridLayout rows=&quot;40,auto&quot;&gt;\n            &lt;StackLayout row=&quot;0&quot;&gt;\n                &lt;Label v-if=&quot;needLocation&quot; text=&quot;Looking up your location...&quot; /&gt;\n                &lt;Label v-if=&quot;locationFailure&quot; text=&quot;Sorry, I failed! :(&quot; /&gt;\n                &lt;Label v-if=&quot;location&quot; :text=&quot;locationDescription&quot; textWrap=&quot;true&quot; /&gt;\n            &lt;/StackLayout&gt;\n           &lt;ListView for=&quot;loc in locations&quot; row=&quot;1&quot; height=&quot;100%&quot;&gt;\n                &lt;v-template&gt;\n                    &lt;Label :text=&quot;loc.label&quot; /&gt;\n                &lt;/v-template&gt;\n            &lt;/ListView&gt;\n        &lt;/GridLayout&gt;\n\n    &lt;/Page&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport * as Geolocation from 'nativescript-geolocation';\nimport LocationService from '../api/LocationService';\n\nexport default {\n    data() {\n        return {\n            needLocation:true,\n            locationFailure:false,\n            location:null,\n            locations:[]\n        }\n    },\n    computed: {\n        locationDescription() {\n            return `You are at ${this.location.latitude}, ${this.location.longitude}. Your altitude is ${this.location.altitude}.`;\n        }\n    },\n    async created() {\n\n        let locs = await LocationService.getLocations();\n\n        Geolocation.enableLocationRequest(true)\n        .then(() =&gt; {\n            Geolocation.isEnabled().then(isLocationEnabled =&gt; {\n                if(!isLocationEnabled) {\n                    this.needLocation = false;\n                    this.locationFailure = true;\n                    // potentially do more then just end here...\n                    return;\n                }\n\n                // MUST pass empty object!!\n                Geolocation.getCurrentLocation({})\n                .then(result =&gt; {\n                    this.needLocation = false;\n                    this.location = result;\n\n                    let myLocation = new Geolocation.Location();\n                    myLocation.longitude = result.longitude;\n                    myLocation.latitude = result.latitude;\n\n                    //Now that we know our location, update distance\n                    locs.forEach(l =&gt; {\n                        let thisLocation = new Geolocation.Location();\n                        thisLocation.longitude = l.location.lng;\n                        thisLocation.latitude = l.location.lat;\n                        let dist = Math.floor(Geolocation.distance(myLocation, thisLocation));\n                        l.label = `${l.name} is ${dist} meters away.`;\n                    });\n                    this.locations = locs;\n\n                })\n                .catch(e =&gt; {\n                    console.log('loc error', e);\n                });\n            });\n        });\n        \n    }\n};\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n    // Start custom common variables\n    @import '../app-variables';\n    // End custom common variables\n&lt;/style&gt;\n</code></pre>\n<p>Here's a few things I want to call out. First, inside my <code>ListView</code>, I'm outputting the <code>label</code> value of my location. That doesn't actually exist, but is instead added to the result in my Vue code. There's multiple other ways of doing this, but this seemed simple enough for now.</p>\n<p>Next, notice that my <code>created</code> method now has the <code>async</code> keyword. This lets me do things like the <code>await</code> call inside. I could probably refactor the code that gets your location as well, and I thought about it, but decided to keep my changes more simpler for now. Also, I've been busy the last few days.</p>\n<p>In order to work with distances, you created <code>Location</code> objects. You assign the longitude and latitude. And then you can get the distance between any two like so: <code>Geolocation.distance(firstLocation, secondLocation)</code></p>\n<p>And that's pretty much it. Here's how it renders in the Android simulator.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/geo2.png\" class=\"imgborder imgcenter\">\n<p>Not terribly exciting, but you get the idea. Note that the plugin also supports a <code>watchLocation</code> method that will continuously check your device location. You could use that to keep the list updated as the user moved.</p>\n<p>That's it! I plan on doing more posts on simple NativeScript examples, so as always, if you have questions, or feedback, just leave me a comment below!</p>\n",
		"tags":[
	        
            "vuejs",
            
            "nativescript"
            
		],
		"categories":[
            
                "javascript",
            
                "mobile"
            
		]

	},

	{
		"title": "Blocking Web Sites from Prompting for Notifications",
		"date":"Tue Apr 16 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/04/17/blocking-web-sites-from-prompting-for-notifications",
		"content":"<p>In general, I'm a fan of new capabilities that come to the web platform. Unfortunately, sometimes a new feature is released that is abused as hell by web sites making you wish the feature had never even been considered. In this case, I don't necessarily blame web developers, as I think they already know that a particular feature is being abused, but rather managers who insist that they know what they're doing and &quot;users really want this&quot;.</p>\n<p>And hell, I'm old and cranky so maybe I'm just in the minority. If you are too, then this post is for you.</p>\n<p>Have you noticed that nearly every damn site you go to prompts you to enable notifications?</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/webpush.png\" class=\"imgborder imgcenter\">\n<p style=\"text-align:center;font-size:12px\"><i>Image from <a href=\"https://support.mozilla.org/en-US/kb/push-notifications-firefox\">Mozilla.org</a></i></p>\n<p>This is part of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Push_API\">Push API</a> which in itself is a good idea, but apparently 90% of the internet decided that on your very first visit to their web page they were going to prompt you to enable notifications.</p>\n<p>This is basically the same as meeting someone for the first time and them asking if they can bring a few things over to put in your bathroom for when they spend the night.</p>\n<p>I wouldn't mind this so much if it wasn't so obtrusive. You could wait till the person has visited a few times, or include UI in the header/footer some place where the user could click to initiate the process. That's never going to happen. Luckily you can disable it.</p>\n<p>Thanks go to <a href=\"https://dancallahan.info/\">Dan Callahan</a> of the Mozilla organization for sharing the following two links.</p>\n<p>First, here is how you disable it in Firefox: <a href=\"https://support.mozilla.org/en-US/kb/push-notifications-firefox#w_how-do-i-stop-firefox-asking-me-to-allow-notifications\">https://support.mozilla.org/en-US/kb/push-notifications-firefox#w_how-do-i-stop-firefox-asking-me-to-allow-notifications</a></p>\n<p>While you should follow that link in case it changes, the gist is:</p>\n<ul>\n<li>Click <code>Options</code> from the menu button.</li>\n<li>Select <code>Privacy &amp; Security</code> and scroll to permissions.</li>\n<li>Click <code>Settings</code> next to Notifications</li>\n<li>Click the checkbox on <code>Block new requests to allow notifications</code></li>\n</ul>\n<p>This is the <em>global</em> block and Firefox does allow site by site settings.</p>\n<p>As an aside, Firefox considers this notification spam an issue too and is taking steps to reduce it: <a href=\"https://blog.nightly.mozilla.org/2019/04/01/reducing-notification-permission-prompt-spam-in-firefox/\">Reducing Notification Permission Prompt Spam in Firefox</a></p>\n<p>And here is how you do it in Chrome: <a href=\"https://www.ghacks.net/2016/02/19/disable-show-notifications-prompts-in-google-chrome/\">https://www.ghacks.net/2016/02/19/disable-show-notifications-prompts-in-google-chrome/</a></p>\n<p>As I said with the Firefox link, you should hit the above URL in case it changes, but the process is:</p>\n<ul>\n<li>Go to <code>chrome://settings/content</code>.</li>\n<li>Click <code>Notifications</code></li>\n<li>And then toggle the top setting from <code>Ask before sending</code> to <code>Blocked</code>. Chrome wants you to think <code>Ask</code> is recommended. Screw that.</li>\n</ul>\n<p>And finally, believe it or not Safari also supports Web Push. While I couldn't find a URL to share, you can go to <code>Preferences</code>, then <code>Websites</code>, and click on <code>Notifications</code>. They also allow a global &quot;Leave me the frack alone&quot; setting:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/safari.png\" class=\"imgborder imgcenter\">\n<p>That's it. I hope this helps!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/ASKeuOZqhYU?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jason Rosewell</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Vue Components FTW - VGauge (and a love letter to CodeSandbox)",
		"date":"Thu Apr 18 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/04/19/vue-components-ftw-vgauge-and-a-love-letter-to-codesandbox",
		"content":"<p>When I <a href=\"https://www.raymondcamden.com/2019/02/06/vue-components-ftw-toasted\">began this series</a> I had a few things in mind - highlighting Vue components that were cool and easy to use. As part of my arbitrary guideline for &quot;simple&quot; I only wanted to use components that included support for script tag installation. In other words, you didn't have to use a full Vue application but could simply add a script tag to your page. This made it especially easy to use with CodePen which I've been a huge fan of lately. It's not that I'm opposed to components that don't support this or think it's a terrible thing to not support script tag usage, I just want to show my appreciation for a component supporting both use cases.</p>\n<p>Today I'm making an exception. While browsing the <a href=\"https://github.com/vuejs/awesome-vue\">Awesome Vue</a> list to pick my next component to review, I discovered <a href=\"https://github.com/amroessam/vgauge\">VGauge</a>, a super simple component that required npm installation. On a whim, and after <a href=\"https://www.jenlooper.com/\">Jen Looper</a> recommended it, I took a look at <a href=\"https://codesandbox.io/\">CodeSandbox</a>.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/gauge1.png\" class=\"imgborder imgcenter\">\n<p>CodeSandbox is (yet another) online editor, but right away I was blown away by how performant it was. It supports templates for numerous different types of projects including numerous different frontend and backend frameworks. I was able to get a full Vue application up and running in less than a second. The online editor works well and the automatic preview is snappy as hell. You can even pop it out into a new tab and it will automatically update as you work.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/gauge2.png\" class=\"imgborder imgcenter\">\n<p>It's got great npm support, great GitHub integration, and just a shit ton of really freaking good features. I'm planning on using it extensively from now on to give it a good shakedown and I absolutely recommend folks take a look at it as well.</p>\n<p>Alright, so with that out of the way, as I said the component I picked today was <a href=\"https://github.com/amroessam/vgauge\">VGauge</a>. This is a Vue wrapped for <a href=\"http://bernii.github.io/gauge.js/\">gauge.js</a>. If you don't know what a gauge is, here's a simple example:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/gauge3.png\" class=\"imgborder imgcenter\">\n<p>The component includes numerous style changes and also has a nice animation style when changing values. That makes it especially useful for a value that may update over time.</p>\n<p>As I said above, this particular component requires npm installation which means you'll be using it for a Vue application only, not a simple script. At your terminal you can simply do <code>npm i vgauge --save</code>. In CodeSandbox, this is done via the <code>Add Dependency</code> button:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/gauge4.png\" class=\"imgborder imgcenter\">\n<p>It doesn't come across in a screenshot, but when I typed &quot;vgauge&quot; to search the responses were <em>incredibly</em> quick. I don't know what the developers did behind the scenes but this is easily one of the snappiest web applications I've ever seen.</p>\n<p>Once installed, usage is really simple. Here's an example modified from the project's readme:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n&lt;v-gauge :value=&quot;value&quot;/&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport VGauge from 'vgauge'\n\nexport default {\n  components: {\n    VGauge\n  },\n  data() {\n    return {\n      value: 42\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>As I said, you've got multiple options for the look and feel of the gauge, as well the ability to set what the min and max values are so the needle is properly positioned. I create a quick demo that I thought showed off the animation really well. Here's the code.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;v-gauge :value=&quot;score&quot;/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport VGauge from &quot;vgauge&quot;;\n\nexport default {\n  components: {\n    VGauge\n  },\n  name: &quot;HelloWorld&quot;,\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      score: 40\n    };\n  },\n  created() {\n    setInterval(() =&gt; {\n      this.score += getRandomInt(-10, 10);\n      if (this.score &lt; 0) this.score = 0;\n      else if (this.score &gt; 100) this.score = 100;\n    }, 2000);\n  }\n};\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n&lt;/script&gt;\n</code></pre>\n<p>I begin with an initial value of 40. I then use a two second interval to move the gauge up or down from one to ten points. Want to see it in action? CodeSandbox has one click deployment to Zeit's Now service and Netlify as well (although support is in beta). I'm testing Netlify deployment while I write this blog post. This is a screen shot of it in progress:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/gauge5.png\" class=\"imgborder imgcenter\">\n<p>The entire process took about 2 minutes and you can see the result here: <a href=\"https://csb-042l64jx5l.netlify.com/\">https://csb-042l64jx5l.netlify.com/</a></p>\n<p>And for completeness sake, here's an example of how CodeSandbox does embeds:</p>\n<iframe src=\"https://codesandbox.io/embed/042l64jx5l?fontsize=14\" title=\"VGuage\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>You can also share a QR code which would be freaking cool at a conference I think. Anyway, as always, let me know what you think by leaving a comment below.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/I1C6CrPNyo8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Wassim Chouak</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue components ftw"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Working with Audio in NativeScript - Part One",
		"date":"Wed Apr 24 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/04/25/working-with-audio-in-nativescript-part-one",
		"content":"<p>This post was originally meant to be more of a demo application, but I decided to &quot;pause&quot; while working on the app I had planned and share some things I've learned about working with audio in NativeScript. The end goal is a recreation of a demo I did a while ago with Ionic and Cordova - a <a href=\"https://www.raymondcamden.com/2015/07/30/cordovaionic-sample-app-my-sound-board\">custom sound board</a>.</p>\n<p>This application was rather simple. You recorded a sound, gave it a name, and could play it back later. If you don't want to read the article about it, here's how it turned out:</p>\n<img src=\"https://static.raymondcamden.com/images/wp-content/uploads/2015/07/shot44.png\" alt=\"\" class=\"imgborder imgcenter\">\n<p>In general it was easy, once I struggled to get <a href=\"https://www.raymondcamden.com/2015/07/27/recording-and-saving-audio-in-cordova-applications\">persistent recordings</a> saved to the device. File IO with Cordova was <em>never</em> really a pleasant experience and as long as I'm sharing old images, I might as well bring this one back:</p>\n<img src=\"https://static.raymondcamden.com/images/wp-content/uploads/2015/07/onesimply.jpg\" alt=\"\" class=\"imgborder imgcenter\">\n<p>Ok, so that's Cordova - how difficult was it to record, save, and play audio in NativeScript?</p>\n<p>I began by searching for &quot;audio&quot; on the <a href=\"https://market.nativescript.org/\">marketplace</a> and came across <a href=\"https://github.com/bradmartin/nativescript-audio\">nativescript-audio</a>. It supports recording and playing audio so in theory it has everything I need. Unfortunately the docs were a bit slim on the recording side so I had to guess a bit. The plugin does have a sample app written in Angular and I swear, I can barely grok Angular now. (Mainly it's trying to find out which file actually has the logic. That's not a fault of Angular just an issue with me now being incredibly rusty with it!)</p>\n<p>Looking at this plugin also forced me to be exposed to file system access in NativeScript. You could say I approached this with a bit of trepidation. NativeScript has a built-in <a href=\"https://docs.nativescript.org/ns-framework-modules/file-system\">File System</a> module. Right away I saw this and was happy: &quot;All file system operations have synchronous and asynchronous forms.&quot; One of the hardest issues with the FileSystem API in Cordova was managing all the multiple deep async calls. I'm not saying async is bad of course or poorly engineering, I'm just saying I hated to work with it. I also saw a lot of things built in that (I don't believe) existed in the Cordova plugin, like being able to clear the contents of a folder and path normalization.</p>\n<p>Also, like Cordova, they make it easy to get to folders you would use more often. So for example, let's say I want to use a folder in my app to store recordings, here's basic pseudo-code to handle this:</p>\n<pre><code class=\"language-js\">const fileSystemModule = require('tns-core-modules/file-system');\nconst audioFolder = fileSystemModule.knownFolders.currentApp().getFolder('recordings');\n</code></pre>\n<p>So <code>knownFolders</code> is your shortcut to important folder aliases, <code>currentApp()</code> is the app, and <code>getFolder</code> will return a Folder object that will also handle creating if it doesn't exist. I love how simple that was!</p>\n<p>When actually writing, the folder object has a <code>.path</code> property, so I could construct a filename like so: <code>audioFolder.path+'/recording.mp4'</code>.</p>\n<p>All I can say is that after being burned so many times trying to work with the file system in Cordova, this actually made me start thinking about other ways I could use it (as opposed to avoiding it).</p>\n<p>So with that knowledge in place, the first version of my demo simply has two buttons. One to record, and one to play. I always record to the same file name (an issue I'll fix in the next blog post) and always plays the same file. Here's the complete code.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n    &lt;Page class=&quot;page&quot;&gt;\n        &lt;ActionBar class=&quot;action-bar&quot;&gt;\n            &lt;Label class=&quot;action-bar-title&quot; text=&quot;Home&quot;&gt;&lt;/Label&gt;\n        &lt;/ActionBar&gt;\n\n        &lt;StackLayout&gt;\n            &lt;Button text=&quot;Record&quot; @tap=&quot;doRecord&quot; /&gt;\n            &lt;Button text=&quot;Test Play&quot; @tap=&quot;doPlay&quot; /&gt;\n        &lt;/StackLayout&gt;\n    &lt;/Page&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nconst audio = require('nativescript-audio');\nconst fileSystemModule = require('tns-core-modules/file-system');\nconst audioFolder = fileSystemModule.knownFolders.currentApp().getFolder('recordings');\nconst platform = require('tns-core-modules/platform');\n\nexport default {\n    methods:{\n        async doRecord() {\n            console.log('doRecord Called 1e');\n            let recorder = new audio.TNSRecorder();\n\n            /*\n            from the sample app\n            */\n            let androidFormat;\n            let androidEncoder;\n            if (platform.isAndroid) {\n                // static constants are not available, using raw values here\n                // androidFormat = android.media.MediaRecorder.OutputFormat.MPEG_4;\n                androidFormat = 2;\n                // androidEncoder = android.media.MediaRecorder.AudioEncoder.AAC;\n                androidEncoder = 3;\n            }\n\n            let options = {\n                filename:audioFolder.path+'/recording.mp4',\n                format:androidFormat,\n                encoder:androidEncoder,\n                infoCallback:info =&gt; {\n                    //apparently I'm necessary even if blank\n                },\n                errorCallback:e =&gt; {\n                    console.log('error cb',e);\n                }\n            };\n\n            await recorder.start(options);\n            console.log('in theory recording');\n            setTimeout(() =&gt; {\n                console.log('calling stop');\n                recorder.stop()\n                .then(() =&gt; {\n                    console.log('really done');\n                })\n                .catch(e =&gt; {\n                    console.log('error stopping', e);\n                });\n            }, 3000);\n        },\n\n        doPlay() {\n\n            let player = new audio.TNSPlayer();\n            player.playFromFile({\n                audioFile:audioFolder.path+'/recording.mp4'\n            })\n            .then(() =&gt; {\n                console.log('in then');\n            })\n            .catch(e =&gt; {\n                console.log('in error', e);\n            });\n        }\n    }\n};\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n&lt;/style&gt;\n</code></pre>\n<p>Ok, let's talk about this top to bottom! The top portion handles the UI which in this case is just two buttons. Recording is handled in the <code>doRecord</code> method. For the most part I just copied and pasted from the official docs. I added an &quot;auto stop&quot; feature with a <code>setTimeout</code> so I wouldn't have to add in UI for it. My real app will support that of course. Also I want to apologize for all the <code>console.log</code> statements. Normally I clean those up before publication, but as I struggled a bit with this app I kept them as evidence of how I work. :)</p>\n<p><code>doPlay</code> handles actually playing the file. You can get information about the file, like duration, but for my purposes I just wanted to play and not worry about it. In my real app I'm going to need a way to stop the playback if another sound file is played (maybe - it could be fun to play multiple at once).</p>\n<p>And that's it. Oh and I kinda skipped this above but I did <em>add</em> the plugin as well to get this working. So as always, ask me any questions you have and in the next part I'll (hopefully!) have a fully working custom sound board in NativeScript!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/fvLNFnnLPIk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jonas Zürcher</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs",
            
            "nativescript"
            
		],
		"categories":[
            
                "javascript",
            
                "mobile"
            
		]

	},

	{
		"title": "Working with Audio in NativeScript - Part Two",
		"date":"Mon Apr 29 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/04/30/working-with-audio-in-nativescript-part-two",
		"content":"<p>A few days ago I blogged about my experience working with audio and NativeScript (<a href=\"https://www.raymondcamden.com/2019/04/25/working-with-audio-in-nativescript-part-one\">Working with Audio in NativeScript - Part One</a>). Over the weekend I got a chance to wrap up the demo application I was working on and thought I'd share the result. As always, my work ends up being a mix of stuff I think went well and stuff I think... could be done better. I'll do my best to call out the code I think could be improved and would love any suggestions or comments.</p>\n<p>As a reminder, the end goal of this research was to create a custom sound board application. As a user, you would record a sound to play back later. Sound boards are a dime a dozen on app stores but I always thought it would be fun to have one I could setup myself. Normally I think this when one of my kids say something funny and then they never say it again. Because of course.</p>\n<p>Here's how the application ended up looking. The UI/UX is rather simple and I didn't bother with nice colors or anything. Initially, the application lets you know you don't have any sounds ready:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/sb1.png\" alt=\"Initial screen of the application showing no sounds are avilable\" class=\"imgborder imgcenter\">\n<p>Clicking the &quot;Record New Sounds&quot; (really should be singular) button takes you to the next view:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/sb2.png\" alt=\"Page where you record a new sound\" class=\"imgborder imgcenter\">\n<p>In this view you name and record your sound. The play button lets you test to ensure you got it right.</p>\n<p>Once you've recorded a few sounds, they show up in a simple list on the main page:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/sb3.png\" alt=\"The list of recorded sounds\" class=\"imgborder imgcenter\">\n<p>Finally, to delete a sound (and the UI should provide a hint for this), you &quot;long press&quot; on a sound:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/04/sb4.png\" alt=\"Demonstration of the delete dialog\" class=\"imgborder imgcenter\">\n<p>And that's it. So really the app came down to two core aspects:</p>\n<p>First was recording audio to the file system and playing it later. This was really easy and covered in my <a href=\"https://www.raymondcamden.com/2019/04/25/working-with-audio-in-nativescript-part-one\">last post</a> so I won't go deep into it here.</p>\n<p>The next aspect was remembering your sounds. This one was a bit trickier. I wanted to let you assign names to each sound and hide the actual file names from the user. NativeScript supports some nice client-side storage methods (you can read my <a href=\"https://www.nativescript.org/blog/client-side-storage-in-nativescript-applications\">article</a> on it!) so the only question was which would I use. In this case, I made a decision I think may not be best. I went with ApplicationSettings. In general my &quot;rule&quot; for picking between a simple key/value system and a &quot;proper&quot; storage system is - will my data grow based on the user's use of the application? What I mean is - a set of &quot;know&quot; values like, &quot;preferred theme&quot; or &quot;last product viewed&quot; is a particular set of data that doesn't grow over time. Data like notes, where the user can write a million a day or so, have no limit.</p>\n<p>In my case, it is possible for the user to create a million sounds (ok, not a million) but I figured reasonably they wouldn't make more than thirty. I was only storing a name and a file path so I figure a JSON array of that size would be &quot;ok&quot;.</p>\n<p>I reserve the right to call myself stupid for this decision later on. Ok, let's look at the code! You can find the complete repository at <a href=\"https://github.com/cfjedimaster/ns-soundboard\">https://github.com/cfjedimaster/ns-soundboard</a>.</p>\n<p>I'll start with the home view, trimmed a bit to remove unnecessary things:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n    &lt;Page class=&quot;page&quot;&gt;\n        &lt;ActionBar class=&quot;action-bar&quot;&gt;\n            &lt;Label class=&quot;action-bar-title&quot; text=&quot;Custom Sound Board&quot;&gt;&lt;/Label&gt;\n        &lt;/ActionBar&gt;\n\n        &lt;StackLayout&gt;\n\n            &lt;Label v-if=&quot;sounds.length === 0&quot; text=&quot;You haven't recorded any sounds yet.&quot; /&gt;\n\n            &lt;ListView for=&quot;sound in sounds&quot; @itemTap=&quot;playSound&quot;&gt;\n                &lt;v-template&gt;\n                    &lt;Label :text=&quot;sound.name&quot; :filename=&quot;sound.fileName&quot; @longPress=&quot;deleteSound&quot; /&gt;\n                &lt;/v-template&gt;\n            &lt;/ListView&gt;\n            &lt;Button text=&quot;Record New Sounds&quot; @tap=&quot;goToRecord&quot; /&gt;\n        &lt;/StackLayout&gt;\n    &lt;/Page&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nconst audio = require('nativescript-audio');\nconst fileSystemModule = require('tns-core-modules/file-system');\n\nimport soundsAPI from '../api/sounds';\nimport Record from './Record';\n\nexport default {\n    data() {\n        return {\n            audioFolder:null,\n            sounds:[]\n        }\n    },\n    created() {\n        this.sounds = soundsAPI.getSounds();\n\t\tthis.audioFolder = fileSystemModule.knownFolders.currentApp().getFolder('recordings');\n    },\n    methods:{\n        async deleteSound(event) {\n            let filename = event.object.filename;\n            let confirmOptions = {\n                title: &quot;Delete Sound&quot;,\n                message: &quot;Do you want to delete this sound?&quot;,\n                okButtonText: &quot;Yes&quot;,\n                cancelButtonText: &quot;No&quot;\n            };\n            confirm(confirmOptions).then(async result =&gt; {\n                if(result) {\n                    // first delete the file\n                    let file = this.audioFolder.getFile(filename);\n                    await file.remove();\n                    soundsAPI.removeSound(filename);\n                    this.sounds = soundsAPI.getSounds();\n                }\n            });\n        },\n        goToRecord() {\n            this.$navigateTo(Record);\n        },\n        async playSound(event) {\n            let player = new audio.TNSPlayer();\n\n            await player.playFromFile({\n                audioFile:this.audioFolder.path+'/'+event.item.fileName\n            });\n\n        }\n    }\n};\n&lt;/script&gt;\n</code></pre>\n<p>The UI is pretty minimal so there isn't much to discuss there. I did, however, have some issues with the <code>longPress</code> event. It did <em>not</em> work well on the <code>ListView</code> directive. I had to move to the label. Another issue is that <code>longPress</code> also fires <code>itemTap</code>, which I think is a bug, but honestly felt ok about this for now. It's something I think I may want to address later. Code wise there's only a few methods and in general the only real complex one is the delete handler. You can see I set up a confirmation dialog. I then manually delete the file and ask my <code>soundsAPI</code> library (more on that in a minute) to remove the file. Those two lines feel wrong to me. Mainly the issue is that soundsAPI handles just remembering the data but doesn't handle any file IO.</p>\n<p>As I said - it feels wrong and could do with a refactor, but for an initial release, I'm ok with it. ;) Let's switch gears and look at that sound library. You'll note I named it <code>soundsAPI</code> which feels like a bad name, but names are hard.</p>\n<pre><code class=\"language-js\">const appSettings = require(&quot;application-settings&quot;);\n\nconst sounds = {\n\tgetSounds() {\n\t\tlet json = appSettings.getString('sounds', '');\n\t\tif(json === '') return [];\n\t\telse return JSON.parse(json);\n\t},\n\tremoveSound(fileName) {\n\t\tlet sounds = this.getSounds();\n\t\tsounds = sounds.filter(s =&gt; {\n\t\t\treturn s.fileName != fileName;\n\t\t});\n\t\t//serialize it\n\t\tlet json = JSON.stringify(sounds);\t\n\t\tappSettings.setString('sounds', json);\n\t},\n\tsaveSound(name, fileName) {\n\t\tlet sounds = this.getSounds();\n\t\tsounds.push({\n\t\t\tname:name,\n\t\t\tfileName:fileName\n\t\t});\n\t\t//serialize it\n\t\tlet json = JSON.stringify(sounds);\t\n\t\tappSettings.setString('sounds', json);\n\t}\n}\n\nmodule.exports = sounds;\n</code></pre>\n<p>In the end, this &quot;API&quot; is just a wrapper for one value in ApplicationSettings. What's nice though is that I can revisit the storage later and keep the API as is. Now let's look at the second view.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n\t&lt;Page class=&quot;page&quot;&gt;\n\t\t&lt;ActionBar class=&quot;action-bar&quot;&gt;\n\t\t\t&lt;Label class=&quot;action-bar-title&quot; text=&quot;Record&quot;&gt;&lt;/Label&gt;\n\t\t&lt;/ActionBar&gt;\n\n\t\t&lt;StackLayout&gt;\n\t\t\t&lt;TextField v-model=&quot;name&quot; hint=&quot;Name for new sound&quot; /&gt;\n\t\t\t&lt;GridLayout columns=&quot;*,*&quot; height=&quot;70&quot;&gt;\n\t\t\t\t&lt;Button text=&quot;Record&quot; col=&quot;0&quot; @tap=&quot;record&quot; v-if=&quot;!recording&quot; /&gt; \n\t\t\t\t&lt;Button text=&quot;Stop Recording&quot; col=&quot;0&quot; @tap=&quot;endRecord&quot; v-if=&quot;recording&quot; /&gt; \n\t\t\t\t&lt;!-- Note, I was not able to use null and falsy values --&gt;\n\t\t\t\t&lt;Button text=&quot;Play&quot; col=&quot;1&quot; @tap=&quot;play&quot; :isEnabled=&quot;playEnabled&quot; /&gt; \n\t\t\t&lt;/GridLayout&gt;\n\t\t\t&lt;Button text=&quot;Save&quot; @tap=&quot;save&quot; :isEnabled=&quot;saveEnabled&quot; /&gt;\n\t\t&lt;/StackLayout&gt;\n\t&lt;/Page&gt;\n\n&lt;/template&gt;\n\n&lt;script&gt;\nconst audio = require('nativescript-audio');\nconst platform = require('tns-core-modules/platform');\nconst fileSystemModule = require('tns-core-modules/file-system');\n\nimport utils from '../api/utils';\nimport sounds from '../api/sounds';\n\nimport Home from './Home';\n\nfunction randomName() {\n\treturn `rnd${utils.generateUUIDv4()}.mp4`;\n}\n\nexport default {\n\tcreated() {\n\t\tthis.audioFolder = fileSystemModule.knownFolders.currentApp().getFolder('recordings');\n\t},\n\tcomputed:{\n\t\tplayEnabled() {\n\t\t\treturn this.lastName != '' &amp;&amp; !this.recording;\n\t\t},\n\t\tsaveEnabled() {\n\t\t\treturn this.playEnabled &amp;&amp; this.name !== '';\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tname:&quot;&quot;,\n\t\t\taudioFolder:null,\n\t\t\trecorder:null,\n\t\t\trecording:false,\n\t\t\tlastName:''\n\t\t}\n\t},\n\tmethods: {\n        async record() {\n\t\n\t\t\t// possible clean up\n\t\t\tif(this.lastName) {\n\t\t\t\tlet file = this.audioFolder.getFile(this.lastName);\n\t\t\t\tawait file.remove();\n\t\t\t}\n\n            console.log('doRecord Called 1h');\n            this.recorder = new audio.TNSRecorder();\n\n\t\t\tlet newName = randomName();\n\n            /*\n            from the sample app\n            */\n            let androidFormat;\n            let androidEncoder;\n            if (platform.isAndroid) {\n                // static constants are not available, using raw values here\n                // androidFormat = android.media.MediaRecorder.OutputFormat.MPEG_4;\n                androidFormat = 2;\n                // androidEncoder = android.media.MediaRecorder.AudioEncoder.AAC;\n                androidEncoder = 3;\n            }\n\n\t\t\tlet options = {\n\t\t\t\tfilename:this.audioFolder.path+'/'+newName,\n\t\t\t\tformat:androidFormat,\n\t\t\t\tencoder:androidEncoder,\n\t\t\t\tinfoCallback:info =&gt; {\n\t\t\t\t\t//apparently I'm necessary even if blank\n\t\t\t\t},\n\t\t\t\terrorCallback:e =&gt; {\n\t\t\t\t\tconsole.log('error cb',e);\n\t\t\t\t}\n\t\t\t};\n\n            await this.recorder.start(options);\n\t\t\tthis.recording = true;\n\n\t\t\t//remember the filename for delete and playback purposes\n\t\t\tthis.lastName = newName;\n\n        },\n\t\tasync endRecord() {\n\t\t\tawait this.recorder.stop();\n\t\t\tthis.recording = false;\n\t\t\tconsole.log('finished recording');\n\t\t},\n\t\tasync play() {\n\t\t\tconsole.log('doPlay called');\n            let player = new audio.TNSPlayer();\n\n            await player.playFromFile({\n                audioFile:this.audioFolder.path+'/'+this.lastName\n            });\n\n        },\n\t\tsave() {\n\t\t\tsounds.saveSound(this.name, this.lastName);\n            this.$navigateTo(Home);\n\t\t}\n\n\t}\n}\n&lt;/script&gt;\n</code></pre>\n<p>Alrighty, this one's a bit more intense. This view lets you record audio and has to use a bit of logic to handle a few cases:</p>\n<ul>\n<li>First, what do we name the file? For that I use a library to generate a UUID (<code>generateUUIDv4</code>).</li>\n<li>If you record a sound - and then record it again - we delete the first one. So we have to remember we made a prior sound and clean it up. Note I do <em>not</em> support &quot;clean up&quot; if you use the back button. Oops.</li>\n<li>You are only allowed to save the sound record if you name it and do a recording. So the button logic gets a bit complex. You can see that in the <code>computed</code> section. Outside of that though most of the code is related to the first blog entry on the topic.</li>\n</ul>\n<p>And that's it! What do you think? Leave me a comment with any suggestions or feel free to submit a pull request to the <a href=\"https://github.com/cfjedimaster/ns-soundboard\">repository</a>.</p>\n",
		"tags":[
	        
            "vuejs",
            
            "nativescript"
            
		],
		"categories":[
            
                "javascript",
            
                "mobile"
            
		]

	},

	{
		"title": "Handling Errors in Vue.js",
		"date":"Tue Apr 30 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/05/01/handling-errors-in-vuejs",
		"content":"<p>I've been spending the last year working with, writing about, and presenting on my favorite framework, Vue.js, and realized that I had yet to look into error handling with Vue. I'd like to say that's because I write perfect code, but I think we all know the truth of that. I spent some time the last few days playing around with various error handling techniques provided by Vue and thought I'd share my findings. Obviously this won't cover every scenario out there, but I hope it helps!</p>\n<h2>The Errors!</h2>\n<p>In order to test out the various error handling techniques, I decided to use three different kinds of errors (initially anyway). The first was simply referring to a variable that doesn't exist:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  Hello, {{name}}\n&lt;/div&gt;\n</code></pre>\n<p>This example will not display an error to the user but will have a <code>[Vue warn]</code> message in the console.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/ve1a.png\" alt=\"Error messages\" class=\"imgborder imgcenter\">\n<p>You can view this example here:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"qweOKB\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Error1A\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/qweOKB/\">\n  Error1A</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>For a second example, I tried a variable bound to a computed property that would throw an error:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  Hello, {{name2}}\n&lt;/div&gt;\n\n&lt;script&gt;\nconst app = new Vue({\n  el:'#app',\n  computed:{\n    name2() {\n      return x;\n    }\n  }\n})\n&lt;/script&gt;\n</code></pre>\n<p>This throws both a <code>[Vue warn]</code> and a regular error in the console and doesn't show anything to the user.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/ve1.png\" alt=\"Error messages\" class=\"imgborder imgcenter\">\n<p>Here's an embed for this.</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"BEXoOw\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Error1B\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/BEXoOw/\">\n  Error1B</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>For my third error, I used a method that would throw an error when executed.</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n\t&lt;button @click=&quot;doIt&quot;&gt;Do It&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\nconst app = new Vue({\n  el:'#app',\n  methods:{\n\t  doIt() {\n\t\t  return x;\n\t  }\n  }\n})\n&lt;/script&gt;\n</code></pre>\n<p>Like the last one, this error will be thrown twice in the console, one warning and one proper error. Unlike last time, the error is only thrown when you actually click the button.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/ve2.png\" alt=\"Error with the click handler\" class=\"imgborder imgcenter\">\n<p>And here's the embed for this one:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"oOKjJb\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Error1C\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/oOKjJb/\">\n  Error1C</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Ok, before we go on, I just want to be clear that this isn't representative of every type of error you can create, it's just a baseline of a few that I think would be common in Vue.js applications.</p>\n<p>Ok, so how <em>do</em> you handle errors in Vue applications? I have to say I was a bit surprised that the main <a href=\"https://vuejs.org/v2/guide/\">Vue Guide</a> did not have a clearly defined section on error handling.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/ve3.png\" alt=\"Results for Error\" class=\"imgborder imgcenter\">\n<p>Yes, there is one in the guide, but the text is short enough to fit in a quote:</p>\n<blockquote>\nIf a runtime error occurs during a component's render, it will be passed to the global Vue.config.errorHandler config function if it has been set. It might be a good idea to leverage this hook together with an error-tracking service like Sentry, which provides an official integration for Vue.\n</blockquote>\n<p>In my opinion, this topic should really be called out a bit more in the docs. (And frankly that's on me to see if I can help the docs!) In general, error handling in Vue comes down to these techniques:</p>\n<ul>\n<li>errorHandler</li>\n<li>warnHandler</li>\n<li>renderError</li>\n<li>errorCaptured</li>\n<li>window.onerror (not a Vue-specific technique)</li>\n</ul>\n<p>Let's dig in.</p>\n<h2>Error Handling Technique One: errorHandler</h2>\n<p>The first technique we'll look at is <a href=\"https://vuejs.org/v2/api/#errorHandler\">errorHandler</a>. As you can probably guess, this is a generic error handler for Vue.js applications. You assign it like so:</p>\n<pre><code class=\"language-js\">Vue.config.errorHandler = function(err, vm, info) {\n\n}\n</code></pre>\n<p>In the function declaration above, <code>err</code> is the actual error object, <code>info</code> is a Vue specific error string, and <code>vm</code> is the actual Vue application. Remember that you can have multiple Vue applications running on one web page at a time. This error handler would apply to all of them. Consider this simple example:</p>\n<pre><code class=\"language-js\">Vue.config.errorHandler = function(err, vm, info) {\n  console.log(`Error: ${err.toString()}\\nInfo: ${info}`);\n}\n</code></pre>\n<p>For the first error, this does nothing. If you remember, it generating a <em>warning</em>, not an error.</p>\n<p>For the second error, it handles the error and reports:</p>\n<pre><code>Error: ReferenceError: x is not defined\nInfo: render\n</code></pre>\n<p>Finally, the third example gives this result:</p>\n<pre><code>Error: ReferenceError: x is not defined\nInfo: v-on handler\n</code></pre>\n<p>Note how the info in the two previous examples is pretty helpful. Now let's check the next technique.</p>\n<h2>Error Handling Technique Two: warnHandler</h2>\n<p>The <a href=\"https://vuejs.org/v2/api/#warnHandler\">warnHandler</a> handles - wait for it - Vue warnings. Do note though that this handler is ignored during production. The method handler is slightly different as well:</p>\n<pre><code class=\"language-js\">Vue.config.warnHandler = function(msg, vm, trace) {\n\n}\n</code></pre>\n<p>Both <code>msg</code> and <code>vm</code> should be self-explanatory, but <code>trace</code> would be the component tree. Consider this example:</p>\n<pre><code class=\"language-js\">Vue.config.warnHandler = function(msg, vm, trace) {\n  console.log(`Warn: ${msg}\\nTrace: ${trace}`);\n}\n</code></pre>\n<p>The first error example now has a handler for it's warning and returns:</p>\n<pre><code>Warn: Property or method 'name' is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.\nTrace: \n\n(found in &lt;Root&gt;)\n</code></pre>\n<p>The second and third examples do not change. You can view embeds for all three below:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"oOKxEa\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Error1A with Handler\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/oOKxEa/\">\n  Error1A with Handler</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p/>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"PgMNao\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Error1B with Handler\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/PgMNao/\">\n  Error1B with Handler</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p/>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"wZVGEK\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Error1C with Handler\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/wZVGEK/\">\n  Error1C with Handler</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2>Error Handling Technique Three: renderError</h2>\n<p>The third method I'll demonstrate is <a href=\"https://vuejs.org/v2/api/#renderError\">renderError</a>. Unlike the previous two, this technique is component specific and not global. Also, like <code>warnHandler</code>, this is disabled in production.</p>\n<p>To use, you add it to your component/app. This example is modified from a sample in the docs.</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  renderError (h, err) {\n    return h('pre', { style: { color: 'red' }}, err.stack)\n  }\n})\n</code></pre>\n<p>If used in the first error example, it does nothing, which if you think about it <em>kinda</em> makes sense as the first one is throwing a warning, not an error. If you test it in the second one where the computed property throws an error, it is rendered. You can see it in the embed below.</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"NmQrwa\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Error1B with renderError\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/NmQrwa/\">\n  Error1B with renderError</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>To be honest, I'm not sure why I'd use this when the console would be more appropriate, but if your QA team or other testers aren't familiar with the browser console, having a simpler error message on screen may help.</p>\n<h2>Error Handling Technique Four: errorCaptured</h2>\n<p>For the final (Vue-specific) technique, we have <a href=\"https://vuejs.org/v2/api/#errorCaptured\">errorCaptured</a>, AKA the technique that confused the heck out of me and frankly still confuses me a bit. The docs have this to say:</p>\n<blockquote>\nCalled when an error from any descendent component is captured. The hook receives three arguments: the error, the component instance that triggered the error, and a string containing information on where the error was captured. The hook can return false to stop the error from propagating further.\n</blockquote>\n<p>Based on my research (and again, I'm definitely shaky on this), this error handler is only to be used by a &quot;parent&quot; component handling an error from a &quot;child&quot; component. It can't, as far as I know, be used in a main Vue instance, but only in a component with children.</p>\n<p>In order to test this I created a parent/child set of components like so:</p>\n<pre><code class=\"language-js\">Vue.component('cat', {\n  template:`\n&lt;div&gt;&lt;h1&gt;Cat: &lt;/h1&gt;\n  &lt;slot&gt;&lt;/slot&gt;\n&lt;/div&gt;`,\n  props:{\n    name:{\n      required:true,\n      type:String\n    }\n  },\n   errorCaptured(err,vm,info) {\n    console.log(`cat EC: ${err.toString()}\\ninfo: ${info}`); \n     return false;\n  }\n\n});\n\nVue.component('kitten', {\n  template:'&lt;div&gt;&lt;h1&gt;Kitten: {{ dontexist() }}&lt;/h1&gt;&lt;/div&gt;',\n  props:{\n    name:{\n      required:true,\n      type:String\n    }\n  }\n});\n</code></pre>\n<p>Notice how the <code>kitten</code> component has an error in it. Now if I try to use it like so:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;cat name=&quot;my cat&quot;&gt;\n      &lt;kitten&gt;&lt;/kitten&gt;\n  &lt;/cat&gt;\n&lt;/div&gt;\n</code></pre>\n<p>I'll get a message from the handler:</p>\n<pre><code>cat EC: TypeError: dontexist is not a function\ninfo: render\n</code></pre>\n<p>You can view this in the embed below.</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"MRMbYJ\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Error1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/MRMbYJ/\">\n  Error1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>So yeah... interesting feature. I'm guessing it would mostly be used by people building component libraries with parent/child type relationships. More a &quot;library developer&quot; feature than a &quot;regular developer&quot; feature if that makes sense. But again - that's just my initial impression of the feature.</p>\n<h2>The One Technique to Rule Them All: window.onerror</h2>\n<img src=\"https://static.raymondcamden.com/images/2019/05/ring.png\" alt=\"Obligatory LOTR reference ring\" class=\"imgcenter\">\n<p>The final (and most powerful) option is to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror\">window.onerror</a>, a global error handler for <em>anything</em> that can possibly go wrong with your JavaScript. The handler takes the form of:</p>\n<pre><code class=\"language-js\">window.onerror = function(message, source, line, column, error) {\n\n}\n</code></pre>\n<p>Probably the only thing you can't guess above would be <code>source</code> which is the URL of the script.</p>\n<p>Here's where things get interesting though. If you define this, and do <em>not</em> use <code>Vue.config.errorHandler</code>, then this will not help. Vue expects you to define the darn thing and if you don't, will not propagate the error outside itself. I ... guess that makes sense? I don't know - to me that doesn't necessarily make sense. Even odder, let's say your Vue error handler has an error itself. That won't propagate to window.onerror either.</p>\n<p>Here's an example CodePen. I've commented out the error in the <code>errorHandler</code>, but if you remove the comment, you'll see the global error handler isn't run. The only you can see the global handler run is if you click the second button.</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"WWVowN\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;\" data-pen-title=\"Error1C with Handler (window)\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/WWVowN/\">\n  Error1C with Handler (window)</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2>Wrap Up</h2>\n<p>I hope this made sense. As I said in the beginning, this was my first foray into the topic so I'm definitely looking for comments, suggestions, and corrections. I'd love to hear how people are using these techniques in their own apps!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/G85VuTpw6jg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">David Kovalenko</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building a Plex Server Duration Search with Vue.js",
		"date":"Mon May 13 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/05/14/building-a-plex-server-duration-search-with-vuejs",
		"content":"<p>A few days ago a good friend asked me a question about <a href=\"https://www.plex.tv/\">Plex</a>. If you've never heard of it, Plex is an <em>awesome</em> media server that creates an easy to use UI for media (videos, music files, pictures, etc.). It's very popular and you can use it via the web, mobile devices, and smart TVs. It's relatively easy to use and you can share your (legally acquired of course) content with friends. My friend mentioned that it would be cool if Plex had a way to find a movie of a particular length. In this case, dinner was in an hour or so and it would be neat to find something of that particular length. Plex lets you sort by duration but you can't filter to a particular length (or range of lengths).</p>\n<p>So of course I took this simple request and spent numerous hours building a demo that was <em>way</em> overengineered but fun to build. It also gave me an opportunity to play with a &quot;proper&quot; Vue.js application. If you've read this blog you'll note that 99% of what I build with Vue.js is on the simpler side, just a script tag and some basic code. I rarely actually play with full Vue.js apps and I really wanted the chance to. I also wanted to use <a href=\"https://codesandbox.io/\">CodeSandbox</a> more, and that worked <em>incredibly</em> well for this project. When I finished, I clicked a button, and my site was published to <a href=\"https://www.netlify.com/\">Netlify</a> in about two minutes.</p>\n<p>Let me begin by showing the final result. I don't plan on sharing the URL, but you can view the repository here: <a href=\"https://github.com/cfjedimaster/plex-movie-duration-search/\">https://github.com/cfjedimaster/plex-movie-duration-search/</a></p>\n<p>The application begins with a simple signin form:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/plex1.png\" class=\"imgborder imgcenter\" alt=\"Login screen for application\">\n<p>After a successful login, you then enter your server address.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/plex2.png\" class=\"imgborder imgcenter\" alt=\"Entering server information.\">\n<p>At this point, the application will hit your server, load information on <em>all</em> your movies, and present them with a UI control on top to allow filtering to a range of movies.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/plex3.png\" class=\"imgborder imgcenter\" alt=\"Initial list of movies\">\n<p>It isn't terribly obvious because the movie posters are big, but that's a scrollable list of all the movies available on the server. If you filter, the list automatically updates.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/plex4.png\" class=\"imgborder imgcenter\" alt=\"Movies shown are now filtered to a specific duration.\">\n<p>Alright, so let's talk about how I built this.</p>\n<h3>The Plex &quot;API&quot;</h3>\n<p>So this was a bit interesting. Plex does have an API documented here: <a href=\"https://support.plex.tv/articles/201638786-plex-media-server-url-commands/\">Plex Media Server URL Commands</a>. Notice they call this &quot;URL Commands&quot; and not an API. It begins by documenting how to get an authentication token. This is a simple POST hit to the main Plex server that returns a large set of user data where the only thing you'll need to care about is the <code>authentication_token</code>.</p>\n<p>After that, the remaining API calls go against your own server. API calls allow for getting your libraries, listing library content, and getting specifics for an item. You can also request Plex to scan and refresh a library.</p>\n<p>But wait - there's more. You can find a <a href=\"https://github.com/Arcanemagus/plex-api/wiki\">wiki page</a> documenting even more api &quot;stuff&quot; you can do, including asking for JSON data, that doesn't seem to have ever been officially documented by the Plex folks. For me all I cared about was getting JSON, but you'll want to check that link as well for more information.</p>\n<p>My needs ended up boiling down to two needs:</p>\n<ul>\n<li>Login</li>\n<li>Get all libraries, and filter by those that are movie related.</li>\n<li>For each movie library, ask for all the movies.</li>\n</ul>\n<p>This isn't too difficult honestly. Let's look at the API wrapper I built for my Plex calls. Note that Plex does <em>not</em> support CORS. I could have built a serverless proxy for it, but decided to just use <a href=\"http://cors-anywhere.herokuapp.com/\">http://cors-anywhere.herokuapp.com/</a>. This is <em>not</em> something I'd recommend in production but it worked for the demo. In the code below, you'll notice two methods hit URLs prefixed with the wrapper.</p>\n<pre><code class=\"language-js\">const plex = {\n  async login(username, password) {\n    console.log(&quot;try to login with &quot; + username + &quot; &quot; + password);\n    let form = new FormData();\n    form.append(&quot;user[login]&quot;, username);\n    form.append(&quot;user[password]&quot;, password);\n    return fetch(&quot;https://plex.tv/users/sign_in.json&quot;, {\n      method: &quot;post&quot;,\n      headers: {\n        &quot;X-Plex-Client-Identifier&quot;: &quot;PlexWrapper&quot;,\n        &quot;X-Plex-Product&quot;: &quot;PlxWrapper&quot;,\n        &quot;X-Plex-Version&quot;: 1\n      },\n      body: form\n    })\n      .then(res =&gt; res.json())\n      .then(res =&gt; {\n        console.log(res);\n        return res;\n      });\n  },\n\n  async getMovies(user, server) {\n    let movies = [];\n    console.log(\n      &quot;try to get movies for &quot; + server + &quot; &quot; + user.authentication_token\n    );\n    return new Promise(async (resolve, reject) =&gt; {\n      let response = await fetch(\n        `https://cors-anywhere.herokuapp.com/http://${server}:32400/library/sections?X-Plex-Token=${user.authentication_token}`,\n        {\n          headers: {\n            Accept: &quot;application/json&quot;,\n            &quot;x-requested-with&quot;: &quot;javascript&quot;\n          }\n        }\n      );\n\n      let librariesRaw = await response.json();\n      let libraries = librariesRaw.MediaContainer.Directory;\n      //console.log(libraries);\n      let movieLibs = libraries.filter(l =&gt; {\n        return l.type === &quot;movie&quot;;\n      });\n\n      //iterate over all movieLibs\n      movieLibs.forEach(async m =&gt; {\n        let movieRequest = `https://cors-anywhere.herokuapp.com/http://${server}:32400/library/sections/${m.key}/all?X-Plex-Token=${user.authentication_token}`;\n        \n        let response = await fetch(movieRequest, {\n          headers: {\n            Accept: &quot;application/json&quot;,\n            &quot;x-requested-with&quot;: &quot;javascript&quot;\n            }\n          }\n        );\n        \n        \n        let movieRaw = await response.json();\n        movieRaw.MediaContainer.Metadata.forEach(m =&gt; {\n          m.poster = `http://${server}:32400${m.thumb}?X-Plex-Token=${user.authentication_token}`;\n          m.duration = m.Media[0].duration;\n        });\n        movies.push(...movieRaw.MediaContainer.Metadata)\n        \n      });\n      resolve(movies);\n    });\n  }\n};\n\nexport default plex;\n</code></pre>\n<p>The <code>login</code> call isn't too complex, just a post, but do note that they are strict on the header requirements. They don't seem to care what you pass, but you must pass something there.</p>\n<p>For <code>getMovies</code>, I first ask for all the libraries. I filter them by <code>type</code> being equal to <code>movie</code>. Once I have that, I can then make a request to each library for the assets and copy them all to an array. Note that in the loop I set two values to make things easier in the rest of my Vue code, <code>poster</code> and <code>duration</code>. This is just a shortcut for - as I said - simplification.</p>\n<p>I'm still &quot;guessing&quot; my way through <code>async</code> and <code>await</code> but my God do I love them.</p>\n<h3>The Vue.js Application</h3>\n<p>I've already shared screenshots above, but how does the Vue application break down into parts? I've got:</p>\n<ul>\n<li>A login screen</li>\n<li>A &quot;set server&quot; screen</li>\n<li>And a &quot;show an filter movies&quot; screen.</li>\n</ul>\n<p>Let's tackle these one by one. Note that I'm making use of <a href=\"https://vuetifyjs.com/en/\">Vuetify</a> for my UI layer. I like it, but sometimes the &quot;layout&quot; parts confuse me. UI widgets for the most part are easy to understand, but the grid/layout system still boggles me a bit. Anyway, the login screen:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;v-flex&gt;\n      &lt;v-card class=&quot;elevation-12&quot;&gt;\n        &lt;v-toolbar dark color=&quot;primary&quot;&gt;\n          &lt;v-toolbar-title&gt;Login Form (Use Plex credentials)&lt;/v-toolbar-title&gt;\n        &lt;/v-toolbar&gt;\n        &lt;v-card-text&gt;\n          &lt;v-form&gt;\n            &lt;v-text-field\n              prepend-icon=&quot;person&quot;\n              name=&quot;login&quot;\n              label=&quot;Login&quot;\n              type=&quot;text&quot;\n              v-model=&quot;username&quot;\n            &gt;&lt;/v-text-field&gt;\n            &lt;v-text-field\n              prepend-icon=&quot;lock&quot;\n              name=&quot;password&quot;\n              label=&quot;Password&quot;\n              id=&quot;password&quot;\n              type=&quot;password&quot;\n              v-model=&quot;password&quot;\n            &gt;&lt;/v-text-field&gt;\n          &lt;/v-form&gt;\n        &lt;/v-card-text&gt;\n        &lt;v-card-actions&gt;\n          &lt;v-spacer&gt;&lt;/v-spacer&gt;\n          &lt;v-btn color=&quot;primary&quot; @click=&quot;login&quot;&gt;Login&lt;/v-btn&gt;\n        &lt;/v-card-actions&gt;\n      &lt;/v-card&gt;\n\n      &lt;v-alert :value=&quot;loginError&quot; type=&quot;error&quot;&gt;Invalid login credentials.&lt;/v-alert&gt;\n    &lt;/v-flex&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport plex from &quot;../api/plex&quot;;\n\nexport default {\n  name: &quot;Login&quot;,\n  data() {\n    return {\n      username: &quot;&quot;,\n      password: &quot;&quot;,\n      loginError: false\n    };\n  },\n  methods: {\n    async login() {\n      this.loginError = false;\n      let result = await plex.login(this.username, this.password);\n      if (result.error) {\n        this.loginError = true;\n      } else {\n        // store the user\n        this.$store.commit(&quot;setUser&quot;, result.user);\n        // now move on\n        this.$router.replace(&quot;/selectserver&quot;);\n      }\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>The layout consists of a login form with an alert dialog that shows up on error. The one method, <code>login</code>, does exactly that. Note I'm using an incredibly simple Vuex store to remember values. Now let's move on the set server screen:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Select Server&lt;/h1&gt;\n    &lt;p&gt;\n      Enter the IP address of your server:\n    &lt;/p&gt;\n    &lt;v-text-field v-model=&quot;server&quot;\n            label=&quot;ip address&quot;\n            required\n    &gt;&lt;/v-text-field&gt;\n    &lt;v-btn color=&quot;info&quot; @click=&quot;setServer&quot;&gt;Set Server&lt;/v-btn&gt;\n\n    &lt;v-alert :value=&quot;serverError&quot; type=&quot;error&quot;&gt;\n      Please specify a server.\n    &lt;/v-alert&gt;\n\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &quot;SelectServer&quot;,\n  data() {\n    return {\n      server: &quot;&quot;,\n      serverError: false\n    };\n  },\n  methods: {\n    setServer() {\n      this.serverError = false;\n      if (this.server === &quot;&quot;) {\n        this.serverError = true;\n      } else {\n        this.$store.commit(&quot;setServer&quot;, this.server);\n        this.$router.replace(&quot;/main&quot;);\n      }\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>This is virtually a repeat of the previous screen except this time I'm just asking for one prompt, the server. There isn't any validation on this, just a commit to the store. Finally, here's the movie display.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Movies&lt;/h1&gt;\n\n    &lt;v-subheader&gt;Min and max duration in minutes:&lt;/v-subheader&gt;\n    &lt;v-layout row&gt;\n      &lt;v-flex shrink style=&quot;width: 60px&quot;&gt;\n        &lt;v-text-field v-model=&quot;duration[0]&quot; class=&quot;mt-0&quot; hide-details single-line type=&quot;number&quot;&gt;&lt;/v-text-field&gt;\n      &lt;/v-flex&gt;\n\n      &lt;v-flex class=&quot;px-3&quot;&gt;\n        &lt;v-range-slider v-model=&quot;duration&quot; :max=&quot;500&quot; :min=&quot;30&quot; :step=&quot;10&quot;&gt;&lt;/v-range-slider&gt;\n      &lt;/v-flex&gt;\n\n      &lt;v-flex shrink style=&quot;width: 60px&quot;&gt;\n        &lt;v-text-field v-model=&quot;duration[1]&quot; class=&quot;mt-0&quot; hide-details single-line type=&quot;number&quot;&gt;&lt;/v-text-field&gt;\n      &lt;/v-flex&gt;\n    &lt;/v-layout&gt;\n\n    &lt;v-container grid-list-md&gt;\n      &lt;v-layout row wrap&gt;\n        &lt;v-flex xs4 d-flex v-for=&quot;movie in filteredMovies&quot; :key=&quot;movie.key&quot;&gt;\n          &lt;v-card&gt;\n            &lt;v-img :src=&quot;movie.poster&quot;/&gt;\n            &lt;v-card-title primary-title&gt;\n              &lt;div&gt;\n                &lt;h3 class=&quot;headline mb-0&quot;&gt;&lt;/h3&gt;\n                &lt;div&gt;&lt;/div&gt;\n                &lt;div&gt;&lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/v-card-title&gt;\n          &lt;/v-card&gt;\n        &lt;/v-flex&gt;\n      &lt;/v-layout&gt;\n    &lt;/v-container&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport plex from &quot;../api/plex&quot;;\n\nexport default {\n  name: &quot;Main&quot;,\n  data() {\n    return {\n      duration: [30, 500],\n      movies: []\n    };\n  },\n  computed: {\n    filteredMovies() {\n      return this.movies.filter(m =&gt; {\n        let minS = this.duration[0] * 60 * 1000;\n        let maxS = this.duration[1] * 60 * 1000;\n        return m.duration &gt; minS &amp;&amp; m.duration &lt; maxS;\n      });\n    }\n  },\n  async mounted() {\n    let user = this.$store.state.user;\n    let server = this.$store.state.server;\n    this.movies = await plex.getMovies(user, server);\n  }\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\nimg {\n  max-width: 250px;\n  max-height: 250px;\n}\n&lt;/style&gt;\n</code></pre>\n<p>Ok, so I figure the part where I get the movies is simple enough, but take note of <code>filteredMovies</code>, this is how I handle restricting movies. I do this based on the <code>duration</code> value, which is an array, which may seem weird, but that's how the Vuetify &quot;double handed&quot; range control needed to work. (Note, &quot;double handed&quot; is my own term and is probably wrong.)</p>\n<p>That's pretty much it. As I said, most of this was just to play around a bit more on CodeSandbox and to get more experience with a &quot;full&quot; Vue application. Don't forget I've got a GitHub <a href=\"https://github.com/cfjedimaster/plex-movie-duration-search/\">repo</a> available and if you want to see it on CodeSandbox as well, check it out below:</p>\n<iframe src=\"https://codesandbox.io/embed/744k1l0j9j?fontsize=14\" title=\"plex-movie-duration-search\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/GF8VvBgcJ4o?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Erik Witsoe</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Using HTML Form Validation without a Form (Kinda)",
		"date":"Tue May 14 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/05/15/using-html-form-validation-without-a-form-kinda",
		"content":"<p>This will be a quick one. I've been a <em>huge</em> fan of <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\">HTML-based form validation</a> for some time now. Even though it is far from perfect (and must always be coupled with server-side validation), I love the fact that it can catch errors early in the submission process and create a better experience for users. My first experience with server-side programming was writing Perl scripts to handle forms so anything that improves the process is pretty freaking important to me.</p>\n<p>While thinking about <em>another</em> demo I wanted to write (and I sure as hell hope I wrote it down in Trello because I'm drawing a blank on it now) I realized that I'd need to validate some email addresses. While I was fine with a &quot;not perfect&quot; solution, I was curious if there was some way to tie into the browser's email validation when using:</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;email&quot; name=&quot;forUsToSpamYou&quot; required /&gt;\n</code></pre>\n<p>Basically, I wanted the exact same validation as the field provides, but without using user input and a real form. Turns out you can, and it's rather easy, but you still have to use a form.</p>\n<p>First, I added a field, and then hid it with CSS, because CSS is awesome like that:</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;email&quot; id=&quot;testEmail&quot;&gt;\n\n&lt;style&gt;\n#testEmail {\n  display: none;\n}\n&lt;/style&gt;\n</code></pre>\n<p>I then create a set of data. This is hard coded, but imagine it comes from some other process.</p>\n<pre><code class=\"language-js\">let tests = [\n  &quot;foo@foo.com&quot;,\n  &quot;foo&quot;,\n  &quot;goo@goo.com&quot;,\n  &quot;zoo&quot;\n];\n</code></pre>\n<p>Then to test these values, I just got a reference to the field, set the value, and ran <code>checkValiditity</code> on it:</p>\n<pre><code class=\"language-js\">let emailField = document.querySelector(&quot;#testEmail&quot;);\n\ntests.forEach(t =&gt; {\n  emailField.value = t;\n  console.log(t, emailField.checkValidity());\n});\n</code></pre>\n<p>According to MDN, <code>checkValidity</code> does this: &quot;Returns true if the element's value has no validity problems; false otherwise. If the element is invalid, this method also causes an invalid event at the element.&quot;</p>\n<p>And here is the result, modified to write out results to a div tag:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"ZNBjYJ\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"js check field\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/ZNBjYJ/\">\n  js check field</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>To be clear, this is <em>not</em> meant to be perfect email validation. Every time I blog about anything related to the topic, folks point out the 500 edge cases that break it. Again, I'm just looking for something to do more of a &quot;soft&quot; validation on the input. And as I said, I was curious if I could &quot;chain&quot; into the HTML logic without using a real (visible) form. Has anyone used anything like this in production? Let me know in a comment please!</p>\n<h3>Round Two!</h3>\n<p>I wrote this blog post last night, but didn't actually promote it online. I was planning on doing that today. But after I posted, all around smart guy <a href=\"https://twitter.com/simevidas\">Šime Vidas</a> posted a great tip in the comments below. I keep forgetting you can create HTML elements in JavaScript. He modified my code such that there is <em>no</em> HTML form field and no CSS required and you simply create the field in JavaScript like so:</p>\n<pre><code class=\"language-js\">let emailField = document.createElement('input');\nemailField.type = 'email';\n</code></pre>\n<p>Here's his CodePen:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"simevidas\" data-slug-hash=\"JqWWzo\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"js check field\">\n  <span>See the Pen <a href=\"https://codepen.io/simevidas/pen/JqWWzo/\">\n  js check field</a> by Šime Vidas (<a href=\"https://codepen.io/simevidas\">@simevidas</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Thanks Šime!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/aGUndxz-VRw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Klaas</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "html5",
            
                "javascript"
            
		]

	},

	{
		"title": "Reading Client-Side Files for Validation with Vue.js",
		"date":"Mon May 20 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/05/21/reading-client-side-files-for-validation-with-vuejs",
		"content":"<p>Folks new to web development may not know that form inputs using the <code>file</code> type are read only. For good reason of course. You wouldn't want nefarious (I've been waiting a while to use that word) JavaScript programs setting the value of the field and doing uploads behind the scenes - it would be a great way to steal information off your computer. However, just because the field is read only doesn't mean we can't do cool stuff with it. In fact, once a user has select a file (or files, remember the <code>multiple</code> attribute!), you can not only see the file type, name, and size, you can read it as well. This offers you some interesting possibilities.</p>\n<p>Let's pretend you've got a form for a mailing service. You want to seed a list of recipients with a set of email addresses. You could allow the user to select a text file from their machine and upload it. Before they do so, however, you could pre-emptively check the file and display the names to the end user.</p>\n<p>Another option would be a form that allows for uploads of JSON-formatted data. Before that file is sent to the server, you could read it, check for valid JSON data, and then potentially render out the information. You could also do other checks, so for example, maybe you require your JSON data to be an array of objects with keys <code>name</code> and <code>gender</code> being required while <code>age</code> is optional.</p>\n<p>As always, you need to have server side validation for anything your users send, but being able to pre-emptively check files and provide feedback to the user could save them a lot of time. I thought I'd share a few examples of this using Vue.js, but of course, you could this with any (or no) framework at all.</p>\n<h3>Reading a File</h3>\n<p>For the first example, let's just consider a super simple example where we -</p>\n<ul>\n<li>note when a file is selected in the input field</li>\n<li>check to see if it's a text file</li>\n<li>read in the contents and display it</li>\n</ul>\n<p>For my HTML, I keep it nice and simple:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;input type=&quot;file&quot; ref=&quot;myFile&quot; @change=&quot;selectedFile&quot;&gt;&lt;br/&gt;\n  &lt;textarea v-model=&quot;text&quot;&gt;&lt;/textarea&gt;\n\n&lt;/div&gt;\n</code></pre>\n<p>This is pretty standard Vue stuff, but note the <code>ref</code> usage. This is how we'll read the value later.</p>\n<p>Now the JavaScript:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    text:''\n  },\n  methods:{\n    selectedFile() {\n      console.log('selected a file');\n      console.log(this.$refs.myFile.files[0]);\n      \n      let file = this.$refs.myFile.files[0];\n      if(!file || file.type !== 'text/plain') return;\n      \n      // Credit: https://stackoverflow.com/a/754398/52160\n      let reader = new FileReader();\n      reader.readAsText(file, &quot;UTF-8&quot;);\n      reader.onload =  evt =&gt; {\n        this.text = evt.target.result;\n      }\n      reader.onerror = evt =&gt; {\n        console.error(evt);\n      }\n      \n    }\n  }\n})\n</code></pre>\n<p>So the main action here is the <code>selectedFile</code> method. This is run whenever the input field fires a <code>change</code> event. I use <code>this.$refs.myFile</code> to refer to the original DOM element I had used and to read the value. Notice that this is an array so I grab the first value only to keep things simple. In theory the end user could use dev tools to add <code>multiple</code> and then select multiple files, but I won't have to worry about that.</p>\n<p>Next, I use the <code>FileReader</code> API to read in the file. This is asynchronous and you can see two handlers to respond to the <code>onload</code> and <code>onerror</code> events. For <code>onload</code>, I simply pass the value to <code>this.text</code> which will render in the textarea. You can see this in action in the CodePen below.</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"qGPrJY\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"vue file 1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/qGPrJY/\">\n  vue file 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h3>A List of Names</h3>\n<p>Imagine you've been wronged. Badly wronged. And you've got a list of names. People who have it coming to them. Just as an example, let's call you Arya.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/arya.jpg\" alt=\"Arya Stark, don't get on her bad side\" class=\"imgborder imgcenter\">\n<p>To help process this list of names, let's build some code that will read in a text file of names, report on the total length, and show the top ten. The list may be incredibly huge but by showing a small subset, the user can quickly determine if the file was correctly setup, or lord forbid, they selected the wrong file. Here's a simple example of this in action.</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;h2&gt;Upload List of Names&lt;/h2&gt;\n  &lt;input type=&quot;file&quot; ref=&quot;myFile&quot; @change=&quot;selectedFile&quot;&gt; \n  &lt;input type=&quot;submit&quot; value=&quot;Upload File&quot; /&gt;\n  &lt;div v-if=&quot;allNames.length&quot;&gt;\n    &lt;p&gt;Your file contains {{allNames.length}} names. Here's the first ten names.&lt;/p&gt;\n    &lt;ul&gt;\n\t  &lt;li v-for=&quot;name in names&quot;&gt;{{name}}&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  \n&lt;/div&gt;\n</code></pre>\n<p>The top portion prompts for the file and uses similar attributes to the first example. Next I've got the display. I print out how many names were in the file and then iterate over a <code>names</code> value. This is going to be a virtual property of just the first ten values. (By the way, I don't like using <code>allNames.length</code>. While I appreciate Vue lets me do a bit of logic in my HTML, I would have preferred to use a simple boolean instead for the <code>v-if</code> and another value for the length.)</p>\n<p>Alright, so here's the JavaScript:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    allNames:[]\n  },\n  computed:{\n    names() {\n      return this.allNames.slice(0,10);\n    }\n  },\n  methods:{\n    selectedFile() {\n      console.log('selected a file');\n      console.log(this.$refs.myFile.files[0]);\n      \n      let file = this.$refs.myFile.files[0];\n      if(!file || file.type !== 'text/plain') return;\n      \n      // Credit: https://stackoverflow.com/a/754398/52160\n      let reader = new FileReader();\n      reader.readAsText(file, &quot;UTF-8&quot;);\n      \n      reader.onload = evt =&gt; {\n        let text = evt.target.result;\n        this.allNames = text.split(/\\r?\\n/);\n        //empty string at end?\n        if(this.allNames[this.allNames.length-1] === '') this.allNames.pop();\n      }\n      \n      reader.onerror = evt =&gt; {\n        console.error(evt);\n      }\n      \n    }\n  }\n})\n</code></pre>\n<p>In general, the only interesting bits are in the <code>reader.onload</code> event. I'm still checking the file type, but now when I read it in split it on newlines and remove the file value is blank. This will set the <code>allNames</code> value. The <code>names</code> value is in the <code>computed</code> block and only consists of the first ten values. You can play with this below - just make your own list of names. Please do not include my name on it.</p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"dEVvgq\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"vue file 2\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/dEVvgq/\">\n  vue file 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h3>The Cat File</h3>\n<img src=\"https://static.raymondcamden.com/images/2019/05/catfile.gif\" alt=\"A cat filing its nails\" class=\"imgborder imgcenter\">\n<p>Look, it's a cat file. Get it? Sorry, I've been waiting a long time to use that gif. So in this scenario I'm going to demonstrate an example that parses a JSON file. It will first check to see if the file contains JSON text, and then if so render the results. Unlike the previous example I'm just going to render every row of data. The data will be an array of cat. Did you know a group of cats is called an Awesome? It is - I read it on wikipedia.</p>\n<p>Here's the layout:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;h2&gt;Upload Cat Data&lt;/h2&gt;\n  &lt;input type=&quot;file&quot; ref=&quot;myFile&quot; @change=&quot;selectedFile&quot;&gt; \n  &lt;input type=&quot;submit&quot; value=&quot;Upload File&quot; /&gt;\n  &lt;div v-if=&quot;cats&quot;&gt;\n    &lt;h3&gt;Data Preview&lt;/h3&gt;\n    &lt;table border=&quot;1&quot;&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Age&lt;/th&gt;\n          &lt;th&gt;Gender&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr v-for=&quot;cat in cats&quot;&gt;\n          &lt;td&gt;{{cat.name}}&lt;/td&gt;\n          &lt;td&gt;{{cat.age}}&lt;/td&gt;\n          &lt;td&gt;{{cat.gender}}&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n  \n&lt;/div&gt;\n</code></pre>\n<p>I'm using a table to render the cats and yeah that's it. Here's the JavaScript:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    cats:null\n  },\n  methods:{\n    selectedFile() {\n      console.log('selected a file');\n      console.log(this.$refs.myFile.files[0]);\n      \n      let file = this.$refs.myFile.files[0];\n      if(!file || file.type !== 'application/json') return;\n      \n      // Credit: https://stackoverflow.com/a/754398/52160\n      let reader = new FileReader();\n      reader.readAsText(file, &quot;UTF-8&quot;);\n      \n      reader.onload =  evt =&gt; {\n        let text = evt.target.result;\n        try {\n          this.cats = JSON.parse(text);\n        } catch(e) {\n          alert(&quot;Sorry, your file doesn't appear to be valid JSON data.&quot;);\n        }\n      }\n      \n      reader.onerror = evt =&gt; {\n        console.error(evt);\n      }\n      \n    }\n  }\n})\n</code></pre>\n<p>The important bits here are how I test for valid JSON, a simple <code>try/catch</code> around <code>JSON.parse</code>. And that's it. You could definitely do more checks here:</p>\n<ul>\n<li>Is the valid JSON data an array?</li>\n<li>Is it at least one row?</li>\n<li>Do we have required columns?</li>\n<li>If we have extra data, like a &quot;isFeisty&quot; boolean, do we consider that an error?</li>\n</ul>\n<p>And so forth. Feel free to fork the CodePen below and go cat crazy!</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"JqrJeR\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"vue file 3\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/JqrJeR/\">\n  vue file 3</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>So as always, I'd love to hear if people are using these techniques. Drop me a comment below and share what you've done!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/2Nca6Aum17o?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Manki Kim</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "FusionReactor and Your ColdFusion Queries",
		"date":"Fri May 24 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/05/25/fusionreactor-and-your-coldfusion-queries",
		"content":"<p>In my last article on FusionReactor, I talked about <a href=\"https://www.raymondcamden.com/2019/03/25/finding-and-fixing-your-slow-coldfusion-pages-with-fusionreactor\">slow pages</a> and how the tool helps you find them. In that article I specifically avoided talking about one of the biggest culprits of slow pages - database queries. My history with ColdFusion goes back to about version 2 and even back then database queries were the primary culprit in poorly performing applications.</p>\n<p>There's multiple reasons why database queries can be a choke point for your application:</p>\n<ul>\n<li>A poor connection to the database.</li>\n<li>A poorly configurated database.</li>\n<li>A poorly configurated table.</li>\n<li>A poorly written query.</li>\n<li>And so forth.</li>\n</ul>\n<p>In an ideal world, your organization has a DBA (database administrator) who tunes the database and tables and then crafts a beautiful SQL (or stored procedure) you can simply drop into your application. Unfortunately very few of us live in that ideal world. It's also very easy to simply ignore the problem. SQL, like any language, let's you get stuff done quickly and it can be easy to not consider the performance aspects of your query. Like any poorly written piece of code, a &quot;slightly bad&quot; query in a request can then be joined by another slightly bad one and slowly compound into a poorly performing page.</p>\n<p>Being that database activity is such an important part of performance, it's no surprise FusionReactor has specific reporting tools focused on just that area. In this post I'm going to share what that looks like and share some examples of the kind of reports you can find.</p>\n<h3>JDBC Reports</h3>\n<p>In my last post, I explained that JDBC stands for Java Database Connectivity. Any time you use a <code>cfquery</code> tag (or <code>queryExecute</code> function), you're making use of JDBC to allow your ColdFusion templates to speak to a database. Within FusionReactor, you'll want to start with the JDBC icon on the left:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr1.png\" alt=\"JDBC icon\" class=\"imgborder imgcenter\">\n<p>Under here you've got a variety of options:</p>\n<ul>\n<li>JDBC Activity - i.e. what's going on <em>right</em> now.</li>\n<li>JDBC History - historical activity.</li>\n<li>JDBC Error History - past query errors.</li>\n<li>Activity Graph and Time Graph - a &quot;live&quot; graphical report of JDBC activity.</li>\n<li>Longest Transactions and Slowest Transaction - to be honest this was a bit confusing. Wouldn't the longest transaction also be the slowest transaction. The &quot;Longest&quot; report will show the transactions that have taken the longest to execute, no matter how long. The &quot;Slowest&quot; report is a report of all transactions over a particular threshold. So it may be possible that you have nothing there as your queries are performant, but the &quot;Longest&quot; report will still rank them for you.</li>\n<li>Trans. By Mem - reports on queries with high memory usage.</li>\n<li>Stack Trace Filter - it's possible that multiple different things are making use of your database. The stack trace filter lets you reduce the amount of &quot;noise&quot; you may get from other applications. By default there's filters set up for <code>.cfm</code>, <code>.cfc</code>, and <code>.jsp</code>.</li>\n<li>Databases - this gives a really cool report on how you're using your databases. I'll be sharing an example of this later.</li>\n<li>Settings - this is where you can configure how FusionReactor logs and monitors your database transactions</li>\n</ul>\n<h3>Examining Database Requests</h3>\n<p>Let's take a look at how FusionReactor reports your database requests. First we'll open the &quot;JDBC History&quot; page. Remember that the first option shows a &quot;live&quot; version and unless your site is actively getting hits, you won't see anything.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr2.png\" alt=\"JDBC History page\" class=\"imgborder imgcenter\">\n<p>As with the previous examples I've shown from FusionReactor, take note of the controls on the top right allow for filtering, reloading, and so forth. What isn't obvious from the screen shot is that the &quot;All SubFlavors&quot; button actually lets you filter by the type of query, select, insert, and so forth. That's pretty neat.</p>\n<p>The main table of data reports on the app that was being used (I'm just working in my default Lucee home directory) and the SQL that was used. You can see the file name as well as timing information. Note the <code>Time</code> column which shows you how long the particular query took.</p>\n<p>Notice how the SQL is reported as well. One of the features of FusionReactor is to automatically replace queryparam values with their 'real' values when reporting on the query. You can enable or disable this feature under the &quot;JDBC/Settings&quot; page. While this is a cool feature, it means it's difficult to see where you've forgotten to use queryparams. I've reported to the FusionReactor folks that it would be nice if it was obvious when such a replacement has happened, maybe by using bold tags or some such. That way if you a query is <em>not</em> using queryparams it will be easier to find and correct.</p>\n<p>The detail view is very deep. Here's the main tab of information:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr3.png\" alt=\"Details of a JDBC request\" class=\"imgborder imgcenter\">\n<p>There is almost an overwhelming amount of information here, but I'd probably focus mostly on the execution time values under JDBC and the memory section. Here's the JDBC tab:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr4.png\" alt=\"More information about the JDBC request\" class=\"imgborder imgcenter\">\n<p>As before, there's a lot of information, but I'd focus in on the row count. If you've ever seen someone select everything from a table and then use ColdFusion conditionals to restrict what is shown, then you know why this is a problem. The query is returning a mind boggling twenty-seven thousand rows. There's no way that was intentional. (Ok, for my test it was, but you get my point.)</p>\n<p>The final tab, Relations, gives you a good look at the query within the page it was working. For example, this page had multiple queries and you can see how they impacted to the overall total page performance.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr5.png\" alt=\"Relations view of the request showing other queries in the page\" class=\"imgborder imgcenter\">\n<h3>Finding Query Errors</h3>\n<p>Let's now take a look at how FusionReactor reports errors. To test, I ran two requests with simple SQL errors, one trying to get a field that didn't exist and one against a table that didn't exist. Here's how the main error history page shows the results.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr6.png\" alt=\"Error list\" class=\"imgborder imgcenter\">\n<p>For the most part this is fairly similar to the history report, except now you can get a short report of the error. As a test, I shut down my MySQL server and ran my request again. As expected, I got an error. However, that error does <em>not</em> show up in this report. It does show up under &quot;Request/Error History&quot; though. My guess is that since Lucee couldn't ever speak to MySQL, a JDBC transaction was not made. That makes sense to me, but just keep in mind that you may want to check both error reports when hunting down issues.</p>\n<p>The detail view is the same as before but with a new tab called &quot;Error Details&quot;:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr7.png\" alt=\"\" class=\"imgborder imgcenter\">\n<p>As always, I find the stack trace a bit hard to parse, but the error details on top seem nice and clear to me. Notice the debug button on the right. This allows you to add a breakpoint for future errors like this. I'm going to talk about FusionReactor's debugging features later.</p>\n<h3>JDBC Graphs</h3>\n<p>FusionReactor offers two reports of JDBC activities. The first is just raw activity (Activity Graph) while the second (Time Graph) reports on how long queries are taken. Both default to a &quot;live&quot; view but also let you look at specific time ranges. Here's an example of both, but note the graphs are a bit boring for me as this is just my local laptop.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr8.png\" alt=\"JDBC Activity Graph\" class=\"imgborder imgcenter\">\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr9.png\" alt=\"JDBC Time Graph\" class=\"imgborder imgcenter\">\n<h3>Finding Those Bad Queries</h3>\n<p>As I explained above, FusionReactor provides two reports to help you find slow queries. &quot;Longest Transactions&quot; will simply list out all your recorded transactions sorted by time. &quot;Slowest Transactions&quot; focuses on queries that are slower than a defined threshold. You can set that threshold in the settings panel, under &quot;History&quot;. The default value is 3 seconds. There's quite a few interesting things you can tweak in the settings panel so I recommend taking a look at it. For my laptop, with again a simple test and not &quot;real&quot; data, here's the &quot;Longest Transactions&quot; view:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr10.png\" alt=\"Report on Longest Transactions\" class=\"imgborder imgcenter\">\n<h3>Your Database Use</h3>\n<p>The final thing I want to show is probably the coolest. The &quot;Databases&quot; report gives you a report on how you are using each of the datasources on your server. It breaks it down by type of operations as well as table usage. It also reports on the queries sent to the datasource.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/05/fr11.png\" alt=\"Report on database usage\" class=\"imgborder imgcenter\">\n<p>This is just freaking cool as heck to me. While I think most of us will deal with one database per server, larger more complex applications could be dealing with numerous databases. A report like this could help you figure out if one, or more, are perhaps being used rarely enough to be decommissioned or transitioned to one main database. The table report could be really useful too. I've dealt with projects hitting a database with a huge amount of tables. This can give you an idea of what's actually being used.</p>\n<h3>Summary</h3>\n<p>As I said in the beginning, database issues tend to be the number one culprit when it comes to poorly performing ColdFusion sites. I think the JDBC set of features in FusionReactor will probably be your top tool for helping improve your applications. I know this is where I'd start looking!</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "coldfusion"
            
		]

	},

	{
		"title": "Using the MailChimp API with Netlify Serverless Functions",
		"date":"Tue May 28 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/05/29/using-the-mailchimp-api-with-netlify-serverless-functions",
		"content":"<p>I first wrote about Netlify's new Functions feature way back in January of this year (<a href=\"https://www.raymondcamden.com/2019/01/08/adding-serverless-functions-to-your-netlify-static-site\">&quot;Adding Serverless Functions to Your Netlify Static Site:</a>). Since that time, Netlify has had multiple updates to their platform with the most important (imo) being <a href=\"https://www.netlify.com/products/dev/\">Netlify Dev</a>. I'm probably being a bit dramatic, but Netlify Dev is an absolute game changer for me when it comes to their platform. I'll explain how but first let me start off by describing what I wanted to build.</p>\n<p>In that earlier blog post, I described how I used a serverless function to get a list of issues for the <a href=\"https://codabreaker.rocks\">CodaBreaker</a> newsletter I run with my buddy Brian. I actually ended up removing that function and using a build script instead, but I was able to reuse 99% of my code so it was still a good learning experience.</p>\n<p>I wanted to add a new serverless function that would handle adding subscribers to the newsletter and keep them on the site. MailChimp's signup form wasn't bad, but if I could do it all on my side, why not? MailChimp's APIs support this quite easily, and not only that, support adding an email address and not caring if they already existed or not. You just do a <code>PUT</code> request to <code>https://us6.api.mailchimp.com/3.0/lists/LISTID/members/</code> where <code>LISTID</code> is the ID of your list.</p>\n<p>One of the frustrations I had with the first function I created was the build process. I would write my code, commit to GitHub, quickly ask Netlify to rebuild (it would automatically, but I was impatient), test, curse, and repeat the process.</p>\n<p>Netlify Dev changes all of that. It allows you to run the Netlify platform, completely, on your local machine. On the simpler side, it lets you do things like test the redirects feature locally. I use that heavily as I've got a crap ton of content and have migrated my blog multiple times. On the more complex side, it makes testing functions a heck of a lot easier.</p>\n<p>I began by using the CLI to scaffold the function:</p>\n<pre><code>netlify functions:create\n</code></pre>\n<p>This prompts you to select from one of like 100 or so functions (ok, not 100, it is a lot and I think they may want to trim it a bit) but I just chose a simple hello-world template. Once done, I started coding, and damnit, it just plain worked. If you follow me on Twitter you know I ran into some hiccups, but they were all my fault. The only issue I came across that I couldn't correct was that the environment variable I had set in the Netlify dashboard for the site wasn't transferred down to the code. (You can track this issue at my <a href=\"https://community.netlify.com/t/should-netlify-dev-functions-have-access-to-env-variables/1171\">forum post</a>). I whipped up the following bit of code. It isn't the best code, but it's mine and I love it.</p>\n<pre><code class=\"language-js\">const axios = require('axios');\nvar crypto = require('crypto');\n\nconst apiRoot = 'https://us6.api.mailchimp.com/3.0/lists/d00ad8719a/members/';\n\n\nexports.handler = async (event, context) =&gt; {\n  try {\n    const email = event.queryStringParameters.email;\n    if(!email) {\n      return { \n        statusCode: 500, \n        body: 'email query paramter required' \n      };\n    }\n\n    // https://gist.github.com/kitek/1579117\n    let emailhash = crypto.createHash('md5').update(email).digest(&quot;hex&quot;);\n\n    return axios({\n      method: 'put',\n      url: apiRoot + emailhash,\n      data:{\n        email_address:email,\n        status:'subscribed'\n      },\n      auth: {\n        'username': 'anythingreally',\n        'password': process.env.MC_API\n      }\n    }).then(res =&gt; {\n      return {\n        statusCode:200, \n        body: JSON.stringify(res.data)\n      }\n    })\n    .catch(err =&gt; {\n      console.log('returning from here', err.response.data.detail);\n      return { statusCode: 500, body: JSON.stringify(err.response.data) };\n    });\n\n  } catch (err) {\n    return { statusCode: 500, body: err.toString() };\n  }\n\n};\n</code></pre>\n<p>I then wrote up some simple Vue code to hit against my function (the endpoint is at <code>/.netlify/functions/newsletter-signup</code>) and that was it, you can see it live on the site now: <a href=\"https://codabreaker.rocks/\">https://codabreaker.rocks/</a></p>\n<p>So when I started this blog post, I imagined it being a bit more detailed. To be honest, it just worked. It was simple. (Again, ignoring issues that were mostly my own fault.) I'm truly shocked and how well this platform is working!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/photos/D-vDQMTfAAU?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Charles PH</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript"
            
		],
		"categories":[
            
                "serverless",
            
                "static sites"
            
		]

	},

	{
		"title": "Using NativeScript and Vue.js to Turn Your Friends into Cats",
		"date":"Mon Jun 10 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/06/11/using-nativescript-and-vuejs-to-turn-your-friends-into-cats",
		"content":"<p>An incredibly long time ago, OK, way back in 2016, I wrote up an experiment concerning Ionic and the Contacts API wrapper (<a href=\"https://www.raymondcamden.com/2016/12/12/working-with-ionic-native-contact-fixer\">&quot;Working with Ionic Native - Contact Fixer&quot;</a>). The idea was simple. Given that you have a large set of contacts on your device, what if there was a simple way to add pictures to those contacts without one? And if we're going to add pictures to contacts, surely the best picture possible would be of a cat, right?</p>\n<figure>\n<img src=\"https://static.raymondcamden.com/images/2019/06/cat1.jpg\" alt=\"This is your new boss, right?\" class=\"imgborder imgcenter\">\n<figcaption>Wouldn't you love to get a call from this guy?</figcaption>\n</figure>\n<p>As an excuse to work with NativeScript more, I thought it would be fun to rebuild this and of course, take the opportunity to use <a href=\"https://nativescript-vue.org/\">NativeScript Vue</a>. The end application is incredibly simple so it isn't that exciting, but the end results are kind of neat. There is, of course, a plugin for working with contacts and NativeScript, <a href=\"https://www.npmjs.com/package/nativescript-contacts\">NativeScript Contacts</a>. The plugin worked well for me in general, but there is an <a href=\"https://github.com/firescript/nativescript-contacts/issues/30\">open issue</a> with updating existing contacts. My code seemed to work despite this issue, but you'll notice a try/catch around the operation. I also made use of <a href=\"https://www.npmjs.com/package/nativescript-permissions\">nativescript-permissions</a> to handle Android specific permission stuff. This was easy too, but I almost wish it was baked into NativeScript as it feels like something you'll <em>always</em> need.</p>\n<p>Let's begin by taking a look at the code. It's a &quot;one view&quot; app so I've only got one component to share, and as I said, it's almost stupid simple so I'm not sure how useful it is. I'll start with the layout first.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n    &lt;Page class=&quot;page&quot;&gt;\n        &lt;ActionBar class=&quot;action-bar&quot;&gt;\n            &lt;Label class=&quot;action-bar-title&quot; text=&quot;Home&quot;&gt;&lt;/Label&gt;\n        &lt;/ActionBar&gt;\n\t\t&lt;StackLayout&gt;\n\t\t\t&lt;Label textWrap=&quot;true&quot; :text=&quot;status&quot; height=&quot;40&quot; /&gt;\n\n\t\t\t&lt;Button v-if=&quot;readyToFix&quot; text=&quot;Fix Contacts!&quot; @tap=&quot;fixContacts&quot;&gt;&lt;/Button&gt;\n\t\t\t&lt;ScrollView orientation=&quot;vertical&quot; height=&quot;100%&quot;&gt;\n\t\t\t\t&lt;ListView for=&quot;contact in contacts&quot;&gt;\n\t\t\t\t\t&lt;v-template&gt;\n\t\t\t\t\t\t&lt;GridLayout columns=&quot;*,40&quot; padding=&quot;20&quot;&gt;\n\t\t\t\t\t\t&lt;Label row=&quot;0&quot; col=&quot;0&quot; :text=&quot;contact | name&quot;/&gt;\n\t\t\t\t\t\t&lt;Image row=&quot;0&quot; col=&quot;1&quot; :src=&quot;contact.photo&quot; /&gt;\n\t\t\t\t\t\t&lt;/GridLayout&gt;\n\t\t\t\t\t&lt;/v-template&gt;\n\t\t\t\t&lt;/ListView&gt;\n\t\t\t&lt;/ScrollView&gt;\n\n\t\t&lt;/StackLayout&gt;\n    &lt;/Page&gt;\n&lt;/template&gt;\n</code></pre>\n<p>At the top, you can see a label bound to a <code>status</code> value that I'll be using to report on, well, status of the application. Loading contacts on my device took about 4 or so seconds so I needed a message to let the user know what was going on.</p>\n<p>Beneath that I've got a button and a list of contacts. The button is what you will use to &quot;fix&quot; your contacts and notice it only shows up when we're ready to update them. The contacts are displayed in a <code>ListView</code> using a <code>GridLayout</code> to show their names and pictures (which will be blank at first).</p>\n<p>Now let's look at the code.</p>\n<pre><code class=\"language-js\">const permissions = require('nativescript-permissions');\nconst contacts = require('nativescript-contacts');\nconst imageSource = require('image-source');\n\nfunction getRandomInt (min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomCatURL() {\n    let w = getRandomInt(200,500);\n    let h = getRandomInt(200,500);\n    return `https://placekitten.com/${w}/${h}`;\n}\n\nexport default {\n    data() {\n        return {\n            status:'',\n            contacts:[],\n            readyToFix:false\n        }\n    },\n    created() {\n        this.status = 'Loading up your contacts to find those missing a picture - please stand by!';\n\n        permissions.requestPermissions([android.Manifest.permission.READ_CONTACTS, android.Manifest.permission.WRITE_CONTACTS], 'I need these permissions to work with your contact.')\n            .then(() =&gt; {\n\n                var contactFields = ['name','nickname','photo'];\n                contacts.getAllContacts(contactFields).then(\n                    args =&gt; {\n\n\n                        //get contacts w/o a picture AND with a name\n                        let fixableContacts = args.data.filter(c =&gt; {\n                            if(c.photo) return false;\n                            if(!c.nickname &amp;&amp; !c.name.family) return false;\n                            return true;\n                        });\n    \n                        this.status = `You have ${fixableContacts.length} named contacts without pictures...`;\n                        this.contacts = fixableContacts;\n                        this.readyToFix = true;\n\n                    },\n                    err =&gt; {\n                        console.log(&quot;Error: &quot; + err);\n                    }\n                );\n\n            })\n            .catch(e =&gt; {\n                console.log('error in perms thing',e);\n            });\n    },\n    methods:{\n        fixContacts() {\n            let fixes = [];\n            for(let i=0; i&lt;this.contacts.length; i++) {\n                fixes.push(imageSource.fromUrl(getRandomCatURL()));\n            }\n            Promise.all(fixes).then(sources =&gt; {\n                console.log('in the promise all and ive got '+sources.length + ' sources');\n                // should be a 1 to 1 map to contacts, but doesn't matter since random :&gt;\n                for(let i=0; i&lt;sources.length; i++) {\n                    this.contacts[i].photo = sources[i];\n                    // wrap in try/catch: https://github.com/firescript/nativescript-contacts/issues/30\n                    try {\n                        this.contacts[i].save();\n                    } catch(e) {\n                        // ignore\n                    }\n                }\n            });\n        }\n\n    }\n};\n</code></pre>\n<p>Up top we've got the required libraries being loaded in and beneath that, two helper functions. <code>getRandomInt</code> does exactly that, a random number between two values, and <code>getRandomCatURL</code> is how I handle generating a new cat photo for contacts. It uses the (newly resurrected) <a href=\"https://placekitten.com\">placekitten.com</a> image placeholder service. In this case we're simply generating random dimensions between 200 and 500 pixels wide.</p>\n<p>Beneath that comes the Vue specific code. My <code>created</code> method handles loading all contacts, but note that we filter both by contacts with pictures already and those that don't have a name of some sort. The end result is an array of contacts that could be fixed. They are saved to the <code>contacts</code> value and then rendered out in the <code>ListView</code>.</p>\n<p>Finally, you can see the <code>fixContacts</code> method that handles getting those random cat pictures. I make use of <code>imageSource.fromUrl</code> to load in an image from a URL. This returns a promise so I use <code>Promise.all</code> to then assign those results to my contacts. (In case you're curious, you <em>can</em> use Async/Await in NativeScript, Alex Ziskind has an article <a href=\"https://nativescripting.com/posts/async-await-in-nativescript\">here</a> discussing it, but as it involves a small workaround, I decided to avoid it for today.)</p>\n<p>And that's it. Let's look at the result! First, here are the contacts on my virtual Android device before running the app. Notice the boring icons by their names:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/06/cat2.png\" alt=\"List of contacts without nice pictures\" class=\"imgborder imgcenter\">\n<p>When I run the app, it will load all of my contacts as none of them have a photo. Notice the bug in the last row:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/06/cat3.png\" alt=\"App running, list of contacts\" class=\"imgborder imgcenter\">\n<p>This comes from the Vue filter I used to display names. The basic idea was, look for a nickname, and if it isn't there, use first and last name:</p>\n<pre><code class=\"language-js\">// Used to find a good name for a contact\nVue.filter('name', contact =&gt; {\n    if (contact.nickname) return nickname;\n    else if (contact.name.family) return contact.name.given + ' ' + contact.name.family;\n    return '';\n});\n</code></pre>\n<p>Unfortunately, the <code>Discord</code> contact didn't have a first name. Discord is just Discord.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/06/discord.jpg\" alt=\"You don't mess with Discord\" class=\"imgborder imgcenter\">\n<p>However, I thought &quot;null Discord&quot; sounded like a cool name anyway so I kept the bug in. Or I'm lazy. You pick.</p>\n<p>After clicking the button, each contact was assigned a random cat URL which was automatically updated in the <code>ListView</code>:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/06/cat4.png\" alt=\"Contacts with cats!\" class=\"imgborder imgcenter\">\n<p>And what's cool is you see this right away. I went back to my Contacts app on the virtual device and saw great results. First the list of all contacts:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/06/cat5.png\" alt=\"Fixed contacts\" class=\"imgborder imgcenter\">\n<p>And here's two examples:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/06/cat6.png\" alt=\"First example\" class=\"imgborder imgcenter\">\n<img src=\"https://static.raymondcamden.com/images/2019/06/cat7.png\" alt=\"Second example\" class=\"imgborder imgcenter\">\n<p>And that's it. Stupid fun, but nice to build. If anyone wants the complete source code, just ask!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@mewmewmew?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Q'AILA</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs",
            
            "nativescript"
            
		],
		"categories":[
            
                "javascript",
            
                "mobile"
            
		]

	},

	{
		"title": "Reading Image Sizes and Dimensions with Vue.js",
		"date":"Wed Jun 12 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/06/13/reading-image-sizes-and-dimensions-with-vuejs",
		"content":"<p>A few weeks back, I wrote up (<a href=\"https://www.raymondcamden.com/2019/05/21/reading-client-side-files-for-validation-with-vuejs\">&quot;Reading Client-Side Files for Validation with Vue.js&quot;</a>) an example of using JavaScript to check files selected in an input field to perform basic validation. It uses the fact that once a user has selected a file, your code has read access to the file itself. I was thinking about this more earlier this week and thought of another useful example of this - validating a selected image both for file size as well as dimensions (height and width).</p>\n<p>The code in this entry is heavily based on my <a href=\"https://www.raymondcamden.com/2019/05/21/reading-client-side-files-for-validation-with-vuejs\">previous example</a> so be sure to read that blog entry first.</p>\n<p>Let's begin by addressing the two main requirements - getting the size of the file and image dimensions.</p>\n<p>File size is easy. Once you've selected a file, it's available in the <code>size</code> property of the file object. There's other properties available as well, like the last time it was modified, and you check the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\">File</a> docs at MDN for more information.</p>\n<p>Getting dimensions is also pretty easy, as long as your careful. You can use JavaScript to make a new image object and assign the source:</p>\n<pre><code class=\"language-js\">let img = new Image();\nimg.src = someUrl;\n</code></pre>\n<p>At that point you can immediately check <code>img.height</code> and <code>img.width</code>, but you will find that you sometimes get <code>0</code> for both results. Why? The image hasn't loaded yet! Luckily this is easily fixable:</p>\n<pre><code class=\"language-js\">let img = new Image();\n\nimg.onload = () =&gt; {\n\tconsole.log(`the image dimensions are ${img.width}x${img.height}`);\n}\n\nimg.src = someUrl;\n</code></pre>\n<p>Ok, so given that, let's begin with a simple example that just displays the information. First, the layout:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;input type=&quot;file&quot; ref=&quot;myFile&quot; @change=&quot;selectedFile&quot; accept=&quot;image/*&quot;&gt;&lt;br/&gt;\n\n  &lt;div v-if=&quot;imageLoaded&quot;&gt;\n    Image size is {{image.size}}&lt;br/&gt;\n    Image width and height is {{image.width}} / {{image.height}}\n  &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n<p>The second <code>div</code> tag shows up conditionally and you can see I'm displaying all three properties we care about. Note I've added an <code>accept=&quot;image/*&quot;</code> to the <code>input</code> field. This will help direct the users towards images.</p>\n<p>Here's the code and note I'm going to focus on what's different from the previous example.</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    image:{\n      size:'',\n      height:'',\n      width:''\n    },\n    imageLoaded:false\n  },\n  methods:{\n    selectedFile() {\n      this.imageLoaded = false;\n      \n      let file = this.$refs.myFile.files[0];\n      if(!file || file.type.indexOf('image/') !== 0) return;\n      \n      this.image.size = file.size;\n      \n      let reader = new FileReader();\n      \n      reader.readAsDataURL(file);\n      reader.onload = evt =&gt; {\n        let img = new Image();\n        img.onload = () =&gt; {\n          this.image.width = img.width;\n          this.image.height = img.height;\n          this.imageLoaded = true;\n        }\n        img.src = evt.target.result;\n      }\n\n      reader.onerror = evt =&gt; {\n        console.error(evt);\n      }\n      \n    }\n  }\n})\n</code></pre>\n<p>First off, the size value is trivial - we just copy it from the file object.  We read the file using <code>readAsDataURL</code>, which is different from the previous example. This will return a URL encoded with a base64 version of the image data. Once we have that, we can assign it to a new <code>Image</code>, wait for <code>onload</code>, and then get the dimensions. You can see this yourself below:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"QXwEyq\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"vue file image thing\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/QXwEyq/\">\n  vue file image thing</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Now that you've seen the basics, let's consider an example using validation. We'll specify a max size in bytes, a max width, and a max height. Here's the updated HTML:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;input type=&quot;file&quot; ref=&quot;myFile&quot; @change=&quot;selectedFile&quot; accept=&quot;image/*&quot;&gt;&lt;br/&gt;\n\n  &lt;div v-if=&quot;imageError&quot; class=&quot;imageError&quot;&gt;\n    {{imageError}}\n  &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n<p>The only real change here is an optional <code>div</code> shown when an error is thrown. Now let's look at the JavaScript.</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\n// max size, 100KB, width and height\nconst MAX_SIZE = 100000;\nconst MAX_WIDTH = 500;\nconst MAX_HEIGHT = 300;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    image:{\n      size:'',\n      height:'',\n      width:''\n    },\n    imageError:''\n  },\n  methods:{\n    selectedFile() {\n      this.imageError = '';\n      \n      let file = this.$refs.myFile.files[0];\n      \n      if(!file || file.type.indexOf('image/') !== 0) return;\n      this.image.size = file.size;\n      if(this.image.size &gt; MAX_SIZE) {\n        this.imageError = `The image size (${this.image.size}) is too much (max is ${MAX_SIZE}).`;\n        return;\n      }\n      \n      let reader = new FileReader();\n      \n      reader.readAsDataURL(file);\n      reader.onload = evt =&gt; {\n        let img = new Image();\n        img.onload = () =&gt; {\n          this.image.width = img.width;\n          this.image.height = img.height;\n          console.log(this.image);\n          if(this.image.width &gt; MAX_WIDTH) {\n            this.imageError = `The image width (${this.image.width}) is too much (max is ${MAX_WIDTH}).`;\n            return;\n          }\n          if(this.image.height &gt; MAX_HEIGHT) {\n            this.imageError = `The image height (${this.image.height}) is too much (max is ${MAX_HEIGHT}).`;\n            return;\n          }\n          \n          \n        }\n        img.src = evt.target.result;\n      }\n\n      reader.onerror = evt =&gt; {\n        console.error(evt);\n      }\n      \n    }\n  }\n})\n</code></pre>\n<p>For the most part this is pretty similar to the last example, except now we've got checks for the size, width, and height. Note that my code will <em>only</em> throw one error, so for example if both the width and height are too big, you'll only see the first error, but that can be changed rather easily too. Here's the code in action:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"ewmzjX\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"vue file image thing (2)\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/ewmzjX/\">\n  vue file image thing (2)</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p><i>Header photo by <a href=\"https://unsplash.com/@clemono2?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Clem Onojeghuo</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Two Tips for NativeScript and Vue Development on the Playground",
		"date":"Tue Jun 18 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/06/19/two-tips-for-nativescript-and-vue-development-on-the-playground",
		"content":"<p>Alright folks, as the title says, here's two tips to keep in mind when using the <a href=\"https://play.nativescript.org\">NativeScript Playground</a>. One will be kind of ranty/angry (sorry!) and one will, I hope, really save you sometime in the future. Let's get the angry one out of the way at first!</p>\n<h3>Save, then Save, then Save Again</h3>\n<p>One of the things I quickly discovered about the Playground is that it's possible to &quot;lose&quot; your projects if you don't save correctly. I filed an <a href=\"https://github.com/NativeScript/playground-feedback/issues/133\">issue</a> on this back in March when I first encountered it. Recently though I ran into a new version of this that really, really ticked me off. The bug works like this:</p>\n<ul>\n<li>Work on a project while <em>not</em> logged in</li>\n<li>Save the project</li>\n<li>Realize you didn't log in first (oops!) and log in</li>\n<li>Notice that the Save UI is disabled because you just saved it.</li>\n<li>Close tab</li>\n</ul>\n<p>Guess what? The project <em>was</em> saved, but it wasn't associated with your user. You just lost your project. The simplest solution is to just ensure you always login first. If you forget though, be sure to change <em>something</em> about the project to re-enable the Save UI and then save it again. I'd recommend going into the code and adding this:</p>\n<pre><code class=\"language-js\">// Hey Progress, fix this damn issue!\n</code></pre>\n<p>Heh, I did say I was a bit angry, right? To be clear, this doesn't stop me from loving the Playground. I used it for an article I just wrapped up and it was perfect for it. I just hope they (Progress) can address the issue soon.</p>\n<h3>Errors and Damn Errors</h3>\n<p>This one really drove me batty for a while and I can't blame anyone but myself. The article I mentioned above concerns Vue, NativeScript, and navigation. I think you're going to love it when it comes out. Truly, it will change your life. But while working on it I ran into a weird issue. My demo had two pages. The first page linked to the second via the <a href=\"https://nativescript-vue.org/en/docs/routing/manual-routing\">manual routing</a> API.</p>\n<p>The API is super simple to use. But when I'd click to start the navigation, nothing would happen. I didn't get an error anywhere it just didn't... well navigate.</p>\n<p>I was basically stuck when I noticed this in the logs:</p>\n<pre><code>NativeScript-Vue has &quot;Vue.config.silent&quot; set to true, to see output logs set it to false.\n</code></pre>\n<p>My first thought was that changing this wouldn't help. I didn't have an error it just didn't do squat. But I figured it couldn't hurt so I went ahead and uncommented this line:</p>\n<pre><code class=\"language-js\">// Vue.config.silent = false;\n</code></pre>\n<p>And... voila:</p>\n<pre><code>[Pixel 3 XL]: [Vue warn]: Unknown custom element: &lt;StackView&gt; - did you register the component correctly? For recursive components, make sure to provide the &quot;name&quot; option.\n</code></pre>\n<p><code>StackView</code>? What the hell is <code>StackView</code>? Oh yeah, it was this:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n    &lt;Page class=&quot;page&quot;&gt;\n\t\t&lt;ActionBar :title=&quot;film.title&quot; class=&quot;action-bar&quot; /&gt;\n\t\t&lt;StackView height=&quot;100%&quot;&gt;\n\t\t &lt;!-- stuff here --&gt;\n        &lt;/StackView&gt;\n    &lt;/Page&gt;\n&lt;/template&gt;\n</code></pre>\n<p>And guess what? That's supposed to be <code>StackLayout</code>. So why didn't I get an error? Honestly I don't know. As the message above states, it would be possible for me to define my own component called <code>StackView</code> and that would be valid. However the fact that navigation failed seems like more than a warning to me.</p>\n<p>That being said, I'm going to (hopefully) remember to try changing the logging value in the future if I encounter weird errors like that. My &quot;regular&quot; errors show up just fine so I won't change it by default, but I'm definitely going try this first next time.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@aaronburden?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Aaron Burden</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs",
            
            "nativescript"
            
		],
		"categories":[
            
                "javascript",
            
                "mobile"
            
		]

	},

	{
		"title": "Vue Components FTW - vue-country-flag",
		"date":"Thu Jun 20 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/06/21/vue-components-ftw-vue-country-flag",
		"content":"<p>Sorry folks - it's been too long since I did one of these &quot;Vue Component&quot; reviews. What can I say, life happens! That being said, I hope these entries are interesting to folks. You can browse the older ones on the <a href=\"https://www.raymondcamden.com/tags/vue+components+ftw/\">tag</a> page and send me suggestions for ones you would like me to review. Today's example is so simple I almost passed on reviewing it, but I ran into an interesting issue that made me think it was worth my (and your) time.</p>\n<p>First off, the component in question in today's entry is <a href=\"https://github.com/P3trur0/vue-country-flag\">vue-country-flag</a>.</p>\n<img src=\"https://raw.githubusercontent.com/P3trur0/vue-country-flag/master/assets/logo.png\" alt=\"Official component logo\" class=\"imgcenter\">\n<p>As you can imagine, this component will render the flag for a country. Like so:</p>\n<pre><code class=\"language-html\">&lt;vue-country-flag country=&quot;cn&quot; /&gt;\n</code></pre>\n<p>And that's it. Oh, it does support sizes too, from <code>small</code> to <code>normal</code> to <code>big</code>. But yeah, pretty simple. However, while working on a demo in Code Sandbox I ran into an interesting issue. While the component loaded fine and no errors were reported in the console, the flag icon simply didn't render.</p>\n<p>On a whim, I exported the project. Code Sandbox makes this easy and sends you a zip. Don't forget to run <code>npm i</code> after you've extracted the folder. Only an idiot would do that. I did that.  Anyway, as soon as I ran the demo on my local machine, the component worked fine.</p>\n<p>My guess is that it's something wrong with Code Sandbox, but as it may be an issue with the component, I <a href=\"https://github.com/P3trur0/vue-country-flag/issues/11\">filed an issue</a> just to be safe.</p>\n<p>That being said my take away is ... as cool as Code Sandbox is if you run into an odd issue like this, simply try running it locally to see if it helps.</p>\n<p>Ok, so how do the flags look? I started with this demo:</p>\n<pre><code class=\"language-html\">&lt;vue-country-flag country='us' size='small'/&gt;  \n&lt;vue-country-flag country='us' size='normal'/&gt;  \n&lt;vue-country-flag country='us' size='big'/&gt;  \n</code></pre>\n<p>And here's how it rendered:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/06/flags.png\" alt=\"Three American Flags\" class=\"imgborder imgcenter\">\n<p>Ok, not terribly exciting. In order to make it a bit more real world, I whipped up some JSON data representing a list of cats:</p>\n<pre><code class=\"language-js\">[\n  {\n    &quot;name&quot;: &quot;Frodo&quot;,\n    &quot;picture&quot;: &quot;https://placekitten.com/75/75&quot;,\n    &quot;country&quot;: &quot;US&quot;\n  },\n  {\n    &quot;name&quot;: &quot;Galaga&quot;,\n    &quot;picture&quot;: &quot;https://placekitten.com/75/125&quot;,\n    &quot;country&quot;: &quot;FR&quot;\n  },\n  {\n    &quot;name&quot;: &quot;Hatchie&quot;,\n    &quot;picture&quot;: &quot;https://placekitten.com/120/120&quot;,\n    &quot;country&quot;: &quot;DE&quot;\n  },\n  {\n    &quot;name&quot;: &quot;Lola&quot;,\n    &quot;picture&quot;: &quot;https://placekitten.com/100/100&quot;,\n    &quot;country&quot;: &quot;CN&quot;\n  },\n  {\n    &quot;name&quot;: &quot;Jacob&quot;,\n    &quot;picture&quot;: &quot;https://placekitten.com/90/190&quot;,\n    &quot;country&quot;: &quot;KR&quot;\n  }\n]\n</code></pre>\n<p>I hosted this up on <a href=\"https://jsonbin.io\">jsonbin.io</a>, a free service for hosting JSON data. It's a cool service, but note that if you write some code and decide to log in after you've written your first thing, you'll lose that data after logging in. Oops. Anyway, here is an updated component showing hitting the API and rendering the results:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Picture&lt;/th&gt;\n          &lt;th&gt;Country of Origin&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr v-for=&quot;cat in cats&quot; :key=&quot;cat.picture&quot;&gt;\n          &lt;td&gt;&lt;/td&gt;\n          &lt;td&gt;&lt;img :src=&quot;cat.picture&quot;&gt;&lt;/td&gt;\n          &lt;td&gt;\n            &lt;vue-country-flag :country=&quot;cat.country&quot; size=&quot;big&quot; /&gt;\n          &lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &quot;HelloWorld&quot;,\n  data() {\n    return {\n      cats:[]\n    }\n  },\n  created() {\n    fetch('https://api.jsonbin.io/b/5d0cf06ca664f3148ebc78ff/2')\n    .then(res =&gt; res.json())\n    .then(res =&gt; {\n      this.cats = res;\n    });\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>Basically - loop over each cat and render the values, but pass the <code>country</code> value to the component. And the result:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/06/flags2.png\" alt=\"Demo results, showing a table of cats with associated flags\" class=\"imgborder imgcenter\">\n<p>And that's all. Again, let me know if you find these useful, if you have suggestions, or any other feedback!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@liamdesic?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Liam Desic</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue components ftw"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "My Podcast on Views with Vue",
		"date":"Thu Jun 27 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/06/28/my-podcast-on-views-with-vue",
		"content":"<p>Pardon what will be an <em>incredibly</em> short blog post, but as I don't want to assume all of my readers use Twitter and may have missed it, I recently did a podcast with the <a href=\"https://devchat.tv/views-on-vue\">Views on Vue</a> folks. You can find my episode here:</p>\n<p><a href=\"https://devchat.tv/views-on-vue/vov-066-nativescript-with-raymond-camden/\">https://devchat.tv/views-on-vue/vov-066-nativescript-with-raymond-camden/</a></p>\n<p>As a reminder, I'm happy to speak on any podcast out there - just send me an invite anytime!</p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Random Pictures of Beauty with Azure Functions and the NPS",
		"date":"Sun Jun 30 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/07/01/random-pictures-of-beauty",
		"content":"<p>I'm a sucker for randomness, especially when it leads to something interesting or a new discovery. For example, the Twitter account <a href=\"https://twitter.com/OnePerfectShot\">OnePerfectShot</a> shares stills from movies throughout all of cinematic history.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">BATMAN (1989)<br><br>Cinematography by Roger Pratt<br>Directed by Tim Burton<br>Here&#39;s a list of weird facts about this movie: <a href=\"https://t.co/xA3EHdSC5r\">https://t.co/xA3EHdSC5r</a> <a href=\"https://t.co/tAjzRHBlLK\">pic.twitter.com/tAjzRHBlLK</a></p>&mdash; One Perfect Shot (@OnePerfectShot) <a href=\"https://twitter.com/OnePerfectShot/status/1145735849138708480?ref_src=twsrc%5Etfw\">July 1, 2019</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Another example is <a href=\"https://twitter.com/dragonhoards\">Dragon Hoards</a>. This is a bot that posts random microstories. It doesn't always work, but when it does, damn is it fascinating.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">A yellow dragon lives on the shore of an ocean. She inventories her hoard, which consists of a good amount of moons, boxes full of unicorn hair, and way too many pies. She is paranoid.</p>&mdash; Dragon Hoards (@dragonhoards) <a href=\"https://twitter.com/dragonhoards/status/1145582902463389698?ref_src=twsrc%5Etfw\">July 1, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>And then finally, one of my own creation is <a href=\"https://twitter.com/randomcomicbook\">RandomComicBook</a>. I <a href=\"https://www.raymondcamden.com/2016/02/22/building-a-twitter-bot-to-display-random-comic-book-covers\">blogged</a> about this over three years ago and is still one of my favorite things I've created. Here's an example:</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">&quot;The Amazing Spider-Man (1963) #12&quot; published May 1964<a href=\"https://t.co/18BRdt7UkS\">https://t.co/18BRdt7UkS</a> <a href=\"https://t.co/gkJ0d4ygZH\">pic.twitter.com/gkJ0d4ygZH</a></p>&mdash; Random Comic Book (@randomcomicbook) <a href=\"https://twitter.com/randomcomicbook/status/1145663388867059713?ref_src=twsrc%5Etfw\">July 1, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>So with that in mind, last week I had an inspiration. I discovered that the National Parks System has an <a href=\"https://www.nps.gov/subjects/digital/nps-data-api.htm\">API</a>. A whole set of APIs actually but one in particular stood out, the Parks API. According to the docs, this provides:</p>\n<blockquote>\nPark basics data includes location, contact, operating hours, and entrance fee/pass information for each national park At least five photos of each park are also available.\n</blockquote>\n<p>Specifically the fact that it provides photos for each park. I thought it would be kind of neat to create a bot that picked a random park and a random photo and shared it via Twitter. My logic ended up pretty simple:</p>\n<ol>\n<li>The API lets you search by state, or states, so step one is simply picking a random state.</li>\n<li>The API lets you get a list of parks with a limit, but in my testing even California had less than 50, so I figured just asking for 100 should cover my basis.</li>\n<li>From that list, filter to those with images. Yes the docs said they all do, but I figured it couldn't hurt.</li>\n<li>Pick one from that list and select a random image.</li>\n<li>Tweet.</li>\n</ol>\n<p>And that's it. I decided on <a href=\"https://azure.microsoft.com/en-us/services/functions/\">Azure Functions</a> as I still feel like I need to dig a lot more into it. <a href=\"https://netlify.com\">Netlify</a> does serverless too, but as I didn't plan on having <em>any</em> HTML content for this project, I figured it wasn't a good fit. I used <a href=\"https://code.visualstudio.com/tutorials/functions-extension/getting-started\">Visual Studio Code extension</a> which worked perfectly fine except for a few hiccups that were (mostly) my fault. Finally, I also tied my deployment to a GitHub repo. This is <a href=\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-continuous-deployment\">documented well</a> except for one small bug that took me a while to fix. And by &quot;took me a while&quot; I mean begging <a href=\"https://twitter.com/burkeholland\">Burke Holland</a> for help until he caved in and found my issue. (It's a critical detail missing from the doc. I filed an issue for it so it may be fixed by now. If not, you can see my comment at the bottom with the correction.)</p>\n<p>The function is all of about 120 lines. I'll share it first than go over the bits.</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\nconst Twit = require('twit')\n\nconst T = new Twit({\n    consumer_key: process.env.TWITTER_CONSUMER_KEY,\n    consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n    access_token: process.env.TWITTER_ACCESS_TOKEN,\n    access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET,\n    timeout_ms: 60 * 1000,  // optional HTTP request timeout to apply to all requests.\n    strictSSL: true,     // optional - requires SSL certificates to be valid.\n});\n\nconst states = {\n    &quot;AL&quot;: &quot;Alabama&quot;,\n    &quot;AK&quot;: &quot;Alaska&quot;,\n// deleted a bunch\n    &quot;WI&quot;: &quot;Wisconsin&quot;,\n    &quot;WY&quot;: &quot;Wyoming&quot;\n}\n\nconst NPS_KEY = process.env.NPS_KEY;\n\n// Credit: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\nfunction getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min; \n}\n\nmodule.exports = async function (context, req) {\n\n    let stateAbbrs = Object.keys(states);\n    let chosenState = stateAbbrs[getRandomIntInclusive(0, stateAbbrs.length)];\n\n    context.log(`I chose ${chosenState}`);\n\n    let httpResult = await fetch(`https://developer.nps.gov/api/v1/parks?stateCode=${chosenState}&amp;limit=100&amp;fields=images&amp;api_key=${NPS_KEY}`);\n    let results = await httpResult.json();\n    data = results.data.filter(r =&gt; r.images.length);\n\n    // now select a random park\n    let selectedPark = data[getRandomIntInclusive(0, data.length - 1)];\n    // now select a random image\n    let selectedImage = selectedPark.images[getRandomIntInclusive(0, selectedPark.images.length - 1)];\n\n    context.log(JSON.stringify(selectedPark));\n\n    let imageRequest = await fetch(selectedImage.url, { headers: { 'user-agent': 'Chrome' } });\n    let image = await imageRequest.buffer();\n    image = image.toString('base64');\n\n    let mediaResult = await new Promise((resolve, reject) =&gt; {\n\n        T.post('media/upload', { media_data: image }, (err, data, response) =&gt; {\n            if(err) {\n                console.log(err);\n                reject(err);\n            }\n            resolve(data.media_id_string);\n        });\n\n    });\n    \n    context.log('mediaResult', mediaResult);\n    let text = `Picture from ${selectedPark.fullName}. More information at ${selectedPark.url}`;\n\n    let params = { status: text, media_ids: [mediaResult] }\n\n    let tweetResult = await new Promise((resolve, reject) =&gt; {\n        T.post('statuses/update', params, function (err, data, response) {\n            resolve(data);\n        })\n    });\n\n    context.res = {\n        body: `Tweet ID: ${tweetResult.id}`\n    };\n    context.done();\n\n};\n</code></pre>\n<p>Alright, so what's going on? The first real bits involve me loading the <a href=\"https://www.npmjs.com/package/twit\">Twit</a> library, my preferred way of working with the Twitter API. Skipped over the 50 states in JSON (I should convert that to one long line), the main function starts off by selecting the state. My data includes the abbreviation and full name because I thought I might end up using both, but that didn't pan out. I could optimize that later.</p>\n<p>I then hit the API with my state, filter the results to those with images, and select one by random. With that park, I then select my image. Posting media to Twitter requires you to upload it first which is a bit of a hassle, but async/await makes everything a bit nicer. Twit uses a callback style API so I wrap it in a promise so I can await it. Once I have my media uploaded I can then reference it in a tweet. The text I use is a bit minimal and could be improved a bit I think. I'm open to any suggestions. And that's it. You can see the results at <a href=\"https://twitter.com/npsbot\">https://twitter.com/npsbot</a>. Here's a few examples.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Picture from Augusta Canal National Heritage Area. More information at <a href=\"https://t.co/8jO0mzgyBT\">https://t.co/8jO0mzgyBT</a> <a href=\"https://t.co/AJiEee2gvc\">pic.twitter.com/AJiEee2gvc</a></p>&mdash; npsbot (@npsbot) <a href=\"https://twitter.com/npsbot/status/1145753982054219776?ref_src=twsrc%5Etfw\">July 1, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Picture from Weir Farm National Historic Site. More information at <a href=\"https://t.co/GI1GilXcO3\">https://t.co/GI1GilXcO3</a> <a href=\"https://t.co/PlmQfsiNsO\">pic.twitter.com/PlmQfsiNsO</a></p>&mdash; npsbot (@npsbot) <a href=\"https://twitter.com/npsbot/status/1145482203503054849?ref_src=twsrc%5Etfw\">July 1, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>If you want, you can view the entire code base here: <a href=\"https://github.com/cfjedimaster/npsbot\">https://github.com/cfjedimaster/npsbot</a>. I will keep the bot running for as long as Azure doesn't charge me. :)</p>\n<p>Edit - one quick note I forgot to mention. The last thing I had to do was switch the function from a HTTP driven one to a scheduled one. I thought that would be simple. The file, <code>function.json</code>, determines the types of connections your functions can use (along with other settings), but the docs for scheduled tasks always showed a subset of the function.json file, not the whole thing. My first attempt to add the right values broke the function because I discovered you can't have a HTTP driven function <em>and</em> one that uses a schedule. That seems silly, but you can work around it by adding a second function that just calls the first. Since I only needed HTTP support for testing, I just removed it. My <code>function.json</code> is in the GitHub repo so if you are curious, you can take a look.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@divewithchuck?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Charles Black</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "azure"
            
		],
		"categories":[
            
                "serverless",
            
                "javascript"
            
		]

	},

	{
		"title": "Replacing a Dynamic Regex Match with the Same Number of Spaces",
		"date":"Thu Jul 04 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/07/05/replacing-a-dynamic-regex-match-with-the-same-number-of-spaces",
		"content":"<p>This post is 100% thanks to my friend <a href=\"https://twitter.com/peterc\">Peter Cooper</a>. I couldn't find any solutions online (or I may have Googled poorly) so I wanted to write this up in case other folks have the same problem. Imagine you have a string of HTML and you want to remove the tags. An easy solution would be something like this:</p>\n<pre><code class=\"language-js\">let s = `\n&lt;p&gt;\nThis is Ray and I'm &lt;i&gt;very&lt;/i&gt; cool. I sometimes am &lt;b&gt;&lt;i&gt;super&lt;/i&gt;&lt;/b&gt; cool!\n&lt;/p&gt;\n&lt;code&gt;\nthis is bad code!\nand lots and lots\n&lt;/code&gt;\n&lt;ul&gt;\n&lt;li&gt;more&lt;/li&gt;\n&lt;li&gt;more&lt;/li&gt;\n&lt;/ul&gt;\n`.trim();\n\n// replace all html\ns = s.replace(/&lt;.*?&gt;/g,'');\nconsole.log(s);\n</code></pre>\n<p>This works perfectly well, but my situation was a bit different. I needed to pass the result of this to a tool that reported on misspellings. When it did, it would report on line numbers and columns. With my initial solution, the string no longer had text in the same spaces as it did before. It was close, but in a large file the differences became worse towards the end.</p>\n<p>So my question how - given a regex that is dynamic in size (<code>&lt;.*?&gt;</code>), was there a way to replace with space characters of the same length?</p>\n<p>When I searched for a solution, my focus was on a regex expression of some sort that could help. Turned out the answer was simple. As Peter pointed out, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter\">replace</a> function lets you specify a substring for the replacement or a function. This function is passed the matched string (along with other arguments) so you can easily check the length and return the right number of spaces. Here's an example:</p>\n<pre><code class=\"language-js\">s = s.replace(/&lt;.*?&gt;/g,function(match) {\n  return &quot; &quot;.repeat(match.length);\n});\n</code></pre>\n<p>Peter's solution was actually a bit more concise. I love arrow functions, but when teaching, I still like to show the &quot;old&quot; way first. I still remember when arrow function syntax confused the heck out of me:</p>\n<pre><code class=\"language-js\">s = s.replace(/&lt;.*?&gt;/g, _=&gt; ' '.repeat(_.length) );\n</code></pre>\n<p>You can test this in the CodePen below.</p>\n<p class=\"codepen\" data-height=\"355\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"mZGEVo\" style=\"height: 350px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"replace code and html (1)\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/mZGEVo/\">\n  replace code and html (1)</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Anyway, that's it, and I hope this helps! Also take this as my one millionth time reminding my readers that the <a href=\"https://developer.mozilla.org/en-US/\">MDN Web Docs</a> are the best damn resource on the Internet.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@rxspawn?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Florian Olivo</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Netlify Analytics - An Initial Look",
		"date":"Thu Jul 11 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/07/12/netlify-analytics-an-initial-look",
		"content":"<p>A few days ago (wow, just two, really?) Netlify announced a brand new feature for their platform, <a href=\"https://www.netlify.com/products/analytics/\">Analytics</a>. As you can imagine, this is a feature focused on giving you analytics about your site with the main benefit of being able to skip using a client-side library like Google Analytics.</p>\n<p>I've been a Google Analytics user for over ten years now, and while I like the product, it isn't always the easiest to use. I put that blame on me not taking the time to learn the product more, but I always wished it had a more... friendly or simper interface. In fact, I've done <em>multiple</em> blog posts here on extracting data from GA and rendering simpler views.</p>\n<p>So when I heard the announcement I was incredibly excited. I've liked pretty much every Netlify feature I've used so far and assumed this would rock as well. Unfortunately, this is not a free service. Now, I say &quot;unfortunately&quot; but to be fair, Netlify gives you a <em>crap</em> ton of really good free features. I deployed a serverless function to a test site last week. For free. And I'll take free tier serverless over analytics any day. That being said, I do still wish they had a free tier. I'd love to use this feature to track smaller &quot;toy&quot; sites, and I just don't see me doing that for sites that may get less than a few hundred page views, if that.</p>\n<p>The price is definitely reasonable - nine dollars. That price is for sites with less than 250K page views per month so it should cover most folks. For sites with more than that it's... well I don't know. The <a href=\"https://www.netlify.com/pricing/#analytics\">pricing page</a> says &quot;custom&quot; so it's probably determined on a case by case basis.</p>\n<p>This is rather important to me as Google Analytics reported that my average page views per month was less than 100K per month. I used to hover around 130K but my traffic has been slowly trending down the last year or so.</p>\n<p>So imagine my surprise when I enabled Analytics (more on that in a second) and saw numbers <em>significantly</em> higher than that. In fact, right now I apparently have right under 300K page views per month! I expected that my traffic was a bit higher than GA reported due to folks blocking GA and other reasons but holy crap!</p>\n<p>That being said, while I absolutely love the Analytics feature and had planned on disabling GA and gladly paying nine dollars for it, I've got an email out to support now to see if my price will remain the same despite being a bit over the first tier limit.</p>\n<p>Alright, so what do you get?</p>\n<p>When you enable Analytics (which for me required enter my credit card), you immediately get stats. Every stat is marked with a message saying it is incomplete, and as you reload you can see the data get more and more complete. I would estimate that it took about thirty minutes for that process to complete.</p>\n<p>Right now the data is only for one month. I'm not sure what will happen a few months down the line. I'd like the ability to specify a custom date range, or see &quot;last month&quot; versus &quot;last year&quot;, but for now it's the past thirty days and that's it. The stats are absolutely near real time. I'm writing this blog post at 2:28PM CST and I have data for 1 PM. So not up to the minute, but I'm fine with that. The &quot;real time&quot; GA report is pretty neat, especially when you're getting slammed because of something cool you've written, but I've had that happen maybe three times over the lifetime of my blog. (For example, my <a href=\"https://www.raymondcamden.com/2008/07/11/So-far-iPhone-20-is-DOA\">blog entry</a> on an iOS update back in 2008 got 971 comments.)</p>\n<p>Right now you get seven reports. The first is a top level summary:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/07/anal1.png\" alt=\"Top level stats for my site\" class=\"imgborder imgcenter\">\n<p>Next up is a line graph of pageviews:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/07/anal2.png\" alt=\"Line graph showing pageviews per hour\" class=\"imgborder imgcenter\">\n<p>And then an hourly chart of unique visitors:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/07/anal3.png\" alt=\"Line graph of unique visitors\" class=\"imgborder imgcenter\">\n<p>Next up is a list of your top pages. This was <em>very</em> interesting to me. One of the things I had noticed was the my current content wasn't nearly as popular (stat wise) as my older content. I was happy to see three entries in my top ten from this year. I'd still like to my more of my recent content, but it's better than I thought.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/07/anal4.png\" alt=\"Top ten requested pages.\" class=\"imgborder imgcenter\">\n<p>Note that my top four entries are related to Vue.js. (Woot woot!) Next up is the 404 report:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/07/anal5.png\" alt=\"Missing pages report.\" class=\"imgborder imgcenter\">\n<p>I've already corrected a few of these. Then there's a source report. I was really surprised by the amount from dzone.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/07/anal6.png\" alt=\"Source report\" class=\"imgborder imgcenter\">\n<p>And then finally, a bandwidth report:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/07/anal7.png\" alt=\"\" class=\"imgborder imgcenter\">\n<p>You'll notice the lines seem a bit off on that. It goes from 750MB to 1GB to 2GB and the scale seems wrong. That's a minor issue I suppose.</p>\n<p>Anyway, that's it for now. As I said, I think this is a damn good service and makes my stats much easier to deal with than Google Analytics. The price is... fair. Absolutely fair. But I won't be using it on toy/demo sites unless they had a free tier. (I may consider creating a &quot;demo&quot; site with multiple demos under it though.) Obviously this is all brand new and it's only been two days, but I'm sold enough to kill off Google Analytics once I confirm my bill.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@srd844?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Stephen Dawson</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Quick Netlify Dev Tip for Complex Static Sites",
		"date":"Sun Jul 14 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/07/15/quick-netlify-dev-tip-for-complex-static-sites",
		"content":"<p>Hey everyone, this tip will probably have a <em>very</em> limited audience, but it was a huge deal for me so I wanted to share it with others in case they run into the same issue. In case you don't know it, <a href=\"https://www.netlify.com/products/dev/\">Netlify Dev</a> is a way to run the Netlify Platform locally. Which means features like redirects, functions, and more will work locally.</p>\n<p>As a practical example, I use the redirects feature quite a bit as my site has gone through different engines and domains over the years. Being able to quickly test that support locally is awesome.</p>\n<p>However, I ran into an interesting issue with my site. This blog has over six thousand entries. A complete build takes a bit over ten minutes. So when I work locally, I use a different config file that modifies the <code>exclude</code> parameter:</p>\n<pre><code>exclude: [_posts/2003,_posts/2004,_posts/2005,_posts/2006,_posts/2007,_posts/2008,_posts/2009,_posts/2010,_posts/2011,_posts/2012,_posts/2013,_posts/2014,_posts/2015,_posts/2016,_posts/2017,_posts/2018/01,_posts/2018/02,_posts/2018/03,_posts/2018/04,node_modules]\n</code></pre>\n<p>I also wrote a quick shell script called <code>start.sh</code> to make using this config easier:</p>\n<pre><code class=\"language-bash\">#!/bin/bash\nbundle exec jekyll serve --config _config.dev.yml \n</code></pre>\n<p>As a quick aside, the <code>jekyll</code> CLI does support a &quot;only render last N posts&quot; option, but I discovered that <em>after</em> I had used the <code>exclude</code> feature. Like with most things there's more than one way to solve the problem.</p>\n<p>This different configuration takes my typical build time down to about five seconds which is more than quick enough.</p>\n<p>Sweet!</p>\n<img src=\"https://static.raymondcamden.com/images/2019/07/happycat.jpg\" alt=\"Smiling Cat\" class=\"imgborder imgcenter\">\n<p>Unfortunately, when I started using Netlify Dev, I noticed immediately that my builds were taking the usual, very long, time. I was ok with it a bit as it let me do testing of my redirects but it was definitely less than ideal.</p>\n<p>So of course I went over to the forum and <a href=\"https://community.netlify.com/t/configure-jekyll-config-with-netlify-dev/2038/4\">posted</a> a question about this.</p>\n<p>And since I posted a question, I, of course, discovered how to do it about a minute later.</p>\n<p>Turns out the CLI supports a way to bypass the normal startup command that Dev uses. It's as simple as passing <code>-c</code> and the command you need. This is what I use for my blog:</p>\n<pre><code class=\"language-bash\">netlify dev -c &quot;bundle exec jekyll serve --config _config.dev.yml&quot;\n</code></pre>\n<p>I modified my <code>start.sh</code> to use that and I'm good to go. Running both Jekyll locally and Netlify Dev.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/07/nd1.jpg\" alt=\"Console output showing the netlify dev version running\" class=\"imgborder imgcenter\">\n<p><i>Header photo by <a href=\"https://unsplash.com/@sam_truong?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Sam Truong Dan</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development",
            
                "static sites"
            
		]

	},

	{
		"title": "Multiple Ways of API Integration in your JAMStack",
		"date":"Wed Jul 24 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/07/25/multiple-ways-of-api-integration-in-your-jamstack",
		"content":"<p>This is something I've been kicking around in my head now for a few weeks and I'm finally\ntaking the time to write it down. I've actually covered this before, but not in an explicit\nmanner and I wanted to organize some thoughts I've been having on the matter lately. Before I begin though, a quick note. I was a somewhat late adopter of the <a href=\"https://jamstack.org/\">&quot;JAMStack&quot;</a> moniker. Frankly, the name bugged me. Why not just call them what they are - static sites? But as static sites have become more powerful (thanks to various generators, APIs, and platforms like <a href=\"https://netlify.com\">Netlify</a>), the term &quot;static sites&quot; simply doesn't fit anymore. When you say &quot;static&quot;, especially to a client who may have a tiny bit of technical knowledge, you imply a whole set of limitations that simply don't apply now. &quot;JAMStack&quot; (JavaScript, APIs, and Markup) doesn't have those connotations and really helps frame what we're talking about a lot better.</p>\n<p>Alright, so with that out of the way, what exactly am I talking about today? When adding interactivity to a JAMStack site, typically you think of APIs, remote services that can be used to get dynamic data which is then rendered on your site with JavaScript. But there's multiple ways of using those APIs, and JavaScript, that may not be apparent to you at first. In this post I'm going to go over these options and discuss when you may want to use one form over the other. I'm going to be using Netlify as my example host, but everything I'm discussing here would apply to (most) other hosts as well. I've not hidden my obvious love of Netlify so I'm somewhat biased, but again, these principles will be applicable elsewhere.</p>\n<h2>Option One - Direct Access to a Remote API</h2>\n<p>The most direct and simplest way to work with an API on your JAMStack site is directly accessing it from your JavaScript. In this form, you simply make a HTTP request to the resource and render it. Here's a quick one pager using Vue.js and the <a href=\"https://swapi.co/\">Star Wars API</a>:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n\t&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;\n\t&lt;title&gt;SWAPI Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n\t&lt;h1&gt;Star Wars Films&lt;/h1&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=&quot;film in films&quot;&gt;&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\nconst app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tfilms:[]\n\t},\n\tcreated() {\n\t\tfetch('https://swapi.co/api/films')\n\t\t.then(res =&gt; res.json())\n\t\t.then(res =&gt; {\n\t\t\tthis.films = res.results;\n\t\t});\n\t}\n});\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>You can view this live at <a href=\"https://jamstackapiapproaches.netlify.com/test1.html\">https://jamstackapiapproaches.netlify.com/test1.html</a>.</p>\n<p>Nice and simple, right? However it has a few drawbacks.</p>\n<ul>\n<li>First, it assumes the remote API enables CORS, which allows your domain to directly access its domain. Many APIs allow this, but not all.</li>\n<li>Secondly, it assumes anonymous access. This is actually <em>not</em> the norm as typically an API requires some kind of identifier. Sometimes this isn't a big deal. The API has a generous free tier and is not likely to be abused. But as soon as you put an API key into your code, anyone who can view source can then take that key and use it themselves. Some APIs will let you lock down what domains can use that key, and in that case, you're pretty safe. But you absolutely want to keep that in mind.</li>\n<li>Finally, you are tied to working with data from the API in only the form it provides. That may not sound like a big deal, but what if the API returned a <em>lot</em> of data you don't need? You're putting that burden on the user which means (potentially) a slower web site and a (again, potentially) frustrating experience. This is where GraphQL really shines as it lets you specify exactly what data you need.</li>\n</ul>\n<p>All in all though this is the simplest and quickest way to add dynamic content to your JAMStack.</p>\n<h2>Option Two - An API Proxy</h2>\n<p>The second option is pretty similar to the first, with the main difference being that your code hits an API running on <em>your</em> server. The &quot;server&quot; could be just that, an app server running somewhere in house, but typically will be a serverless platform instead. Basically, instead of your code making an HTTP request to some remote domain, it requests your code which then itself requests data from the remote domain.</p>\n<p>Consider this example using the <a href=\"https://developer.here.com/documentation/weather/topics/overview.html\">Weather API</a> from HERE. (A cool company I'll be blogging about more later.) Their API requires two specific authentication values, an <code>app_id</code> and <code>app_code</code>. If I put that in my client-side code, anyone could use it, which wouldn't be desirable. I'm going to use a serverless proxy set up with <a href=\"https://www.netlify.com/docs/functions/\">Netlify Functions</a> to proxy requests to HERE's API from my client side code.</p>\n<pre><code class=\"language-js\">/* eslint-disable */\nconst fetch = require(&quot;node-fetch&quot;);\n\nexports.handler = async function(event, context) {\n  try {\n    let app_id = process.env.HERE_APP_ID;\n    let app_code = process.env.HERE_APP_CODE;\n\n    const response = await fetch(`https://weather.api.here.com/weather/1.0/report.json?app_id=${app_id}&amp;app_code=${app_code}&amp;product=forecast_astronomy&amp;name=Lafayette,LA`, {\n      headers: { Accept: &quot;application/json&quot; }\n    });\n    if (!response.ok) {\n      // NOT res.status &gt;= 200 &amp;&amp; res.status &lt; 300\n      return { statusCode: response.status, body: response.statusText };\n    }\n    const data = await response.json();\n\n    let results = data.astronomy.astronomy.map(r =&gt; {\n      return {\n        moonRise:r.moonrise,\n        moonSet:r.moonset,\n        moonPhase:r.moonPhase,\n        moonPhaseDesc:r.moonPhaseDesc,\n        time:r.utcTime\n      }\n    });\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ data:results })\n    };\n  } catch (err) {\n    console.log(err); \n    return {\n      statusCode: 500,\n      body: JSON.stringify({ msg: err.message }) \n    };\n  }\n};\n</code></pre>\n<p>In general this is just some trivial Node code, but I want to point out some specific tweaks I did here. First, HERE's weather API supports returning astronomy data. For my demo I want to know about the moon, so you can see me filtering that out in the <code>map</code> call. This will result in less data going to be my client-side code. Also note that the API has slightly different casing going on. So for <code>moonrise</code> it's all lowercase, but then they use <code>moonPhase</code>. There may be a good reason for that, but to me it wasn't what I expected so I took the opportunity to reformat the data a bit as well.</p>\n<p>Once this was in place, I could then use it with some more Vue.js code. (To be clear, you don't have to use Vue, but I recommend it. ;)</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n\t&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n\t&lt;script src=&quot;https://vuejs.org/js/vue.min.js&quot;&gt;&lt;/script&gt;\n\t&lt;title&gt;Moon Data&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n\t&lt;h1&gt;Moon Data for Lafayette, LA&lt;/h1&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=&quot;result in results&quot;&gt;\n\t\t\tOn {{result.time | formatDate}}, the moon will rise at {{result.moonRise}} and set at {{result.moonSet}}. \n\t\t\tIt is in {{result.moonPhaseDesc}}. \n\t\t&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\nVue.filter('formatDate', function(d) {\n\tif(!window.Intl) return d;\n\treturn new Intl.DateTimeFormat('en-US').format(new Date(d));\n}); \n\nconst app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tresults:[]\n\t},\n\tcreated() {\n\t\tfetch('/.netlify/functions/get-moon')\n\t\t.then(res =&gt; res.json())\n\t\t.then(res =&gt; {\n\t\t\tthis.results = res.data;\n\t\t});\n\t}\n});\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>You can view this here: <a href=\"https://jamstackapiapproaches.netlify.com/test2.html\">https://jamstackapiapproaches.netlify.com/test2.html</a></p>\n<p>So, this one is a bit more work, but depending on your app platform, it could be easy. As I said, I used Netlify Functions, and outside of a configuration issue I had (I'll be blogging on this soon), it was trivial. What does this give us?</p>\n<ul>\n<li>We have the ability to hide any required keys.</li>\n<li>We have the ability to shape the result. This could include removing data we don't need, changing data for our needs, or heck, we could even add data too if it would be useful to the client.</li>\n<li>We could even switch providers. If I need to use someone besides HERE for my data, I can change it at the server and the front-end code won't have to know. I'd just ensure the result data matches what I used before.</li>\n<li>You could also add caching. Some API providers ask that you don't do this, but you could store data locally and only fetch when you need to.</li>\n<li>The only real &quot;drawback&quot; I can see is that it's definitely a bit more work. To me this was rather easy, but I've got experience writing code on the server and working with serverless platforms. I don't want to minimize the fact that not having these skills would be a bit of a jump if your only JavaScript experience is in client-side code.</li>\n</ul>\n<h2>Option Three - Using the Build Process</h2>\n<p>In the previous two options I described two methods that were - essentially - the same thing for the client: Hit an API (either remote or local) to get data. There's another option to consider as well. Depending on your needs, your data may need to be &quot;dynamic&quot; but not &quot;very dynamic&quot;. What do I mean by that? Consider the landing page for the music newsletter I run with <a href=\"https://remotesynthesis.com/\">Brian Rinaldi</a> - <a href=\"https://codabreaker.rocks/\">Coda Breaker</a>. The web page lists all the previous editions of the newsletter so folks can get an idea of what they're signing up for. We publish about twice a month so while the data is definitely dynamic, it rarely changes.</p>\n<p>Instead of building a serverless proxy to the API used to host the newsletters, we could use a build script on our site's platform. What do I mean by that? Imagine a simple script that hits an API and then saves the data in a flat file.</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\nconst fs = require('fs');\n\nfetch('https://swapi.co/api/films')\n.then(res =&gt; res.json())\n.then(res =&gt; {\n\tlet films = res.results.map(f =&gt; {\n\t\treturn {\n\t\t\ttitle:f.title,\n\t\t\tdirector:f.director,\n\t\t\treleaseDate:f.release_date\n\t\t}\t\n\t});\n\n\tlet generatedHTML = '';\n\tfilms.forEach(f =&gt; {\n\t\tgeneratedHTML += `&lt;li&gt;${f.title} was released on ${f.releaseDate} and directed by ${f.director}.&lt;/li&gt;`;\n\t});\n\n\tlet contents = fs.readFileSync('./test3.html','utf8');\n\tcontents = contents.replace('{{ filmData }}', generatedHTML);\n\n\tfs.writeFileSync('./test3.final.html', contents);\n\t\n});\n</code></pre>\n<p>This Node script fires off a HTTP request to the Star Wars API. It then turns the result into some HTML. Note that I'm wrapping films in a LI block. Once done, it reads in a source file, looks for a special token and replaces it with the HTML string, and then saves it. I use a different file name, but I could easily overwrite the source file to since this is on the deployed build. Here's <code>test3.html</code>:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n\t&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n\t&lt;title&gt;SWAPI Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n\t&lt;h1&gt;Star Wars Films&lt;/h1&gt;\n\t&lt;ul&gt;\n\t\t{{ filmData }}\n\t&lt;/ul&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>The last bit is to tell my build server to run this when deploying my JAMStack site. Netlify lets you specify a build command which for my demo site, runs a command in my package.json file, <code>npm run build</code>. This is defined here:</p>\n<pre><code class=\"language-js\">  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;node build &amp;&amp; cd functions/get-moon &amp;&amp; npm i&quot;\n  },\n</code></pre>\n<p>Ignore everything after the first <code>&amp;&amp;</code>, that's related to the serverless function, but the first part simply runs my little script that updates the flat file. You can see the result here: <a href=\"https://jamstackapiapproaches.netlify.com/test3.final.html\">https://jamstackapiapproaches.netlify.com/test3.final.html</a> With no JavaScript, it should work incredibly fast and be pretty darn resilient. My build script could definitely add error checking, fall back content, and more.</p>\n<p>Now whenever my site builds, the content is updated automatically. I could do this manually, or as I did with Coda Breaker, I set up a webhook back to Netlify to trigger a build when a new newsletter was released. So it's static... but dynamic. It's manual... but automated. I love that.</p>\n<h2>Conclusion</h2>\n<p>I hope this really demonstrates the kinds of options you have when going static, sorry, I mean JAMStack. Certainly I didn't cover ever possible iteration of this and a site could make use of many of these. I'd love to hear your comments on what techniques you are using so please drop me a line below! If you want, you can browse the source code repo for my demo site here: <a href=\"https://github.com/cfjedimaster/jamstack_api_approaches\">https://github.com/cfjedimaster/jamstack_api_approaches</a>.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@benjaminjohnelliott?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Benjamin Elliott</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development",
            
                "static sites"
            
		]

	},

	{
		"title": "Playing with Vue and Vuex - Lemonade Stand",
		"date":"Wed Jul 31 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/08/01/playing-with-vue-and-vuex-lemonade-stand",
		"content":"<p>One of my goals for this year was to play more with Vue &quot;apps&quot; (ie, not simple page enhancement demos) and to dig more into <a href=\"https://vuex.vuejs.org/\">Vuex</a>. I really like Vuex, but I'm struggling with the &quot;best&quot; way to use it, what makes sense with it and what doesn't, and generally just how to approach it. I figure one of the best ways to get more comfortable is to just build stuff and see what feels right. With that in mind, today I'm sharing a game I built called Lemonade Stand.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/ls.png\" alt=\"Lemonade Stand\" class=\"imgborder imgcenter\">\n<p>Lemonade Stand was a classic PC game from way, <em>way</em> back in the old days. I remember playing it on my Apple II at home and at school. I also remember editing the code so I'd have a lot of money, which wasn't really as fun as you'd imagine. (Although ask me about editing Bard's Tale saves, that was cool.)</p>\n<p>The game is a really simple economic simulator. You run a lemonade stand and every day you're given a weather report, a cost of materials, and you have to decide how many cups of lemonade you want to make as well as the cost. You can also buy advertising signs to help improve your sales.</p>\n<p>The entire project is hosted up on <a href=\"https://codesandbox.io\">Code Sandbox</a> - <a href=\"https://codesandbox.io/s/lemonade-stand-oxbfq?fontsize=14&amp;view=preview\">https://codesandbox.io/s/lemonade-stand-oxbfq?fontsize=14&amp;view=preview</a>. You can both play the game and edit the code (and if you do, let me know in a comment below). Let me break down how I built this.</p>\n<p>First, the application makes use of <a href=\"https://router.vuejs.org/\">Vue Router</a> to handle the different states of the game. There's an initial page that provides a basic introduction.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/ls2.png\" alt=\"Introduction View\" class=\"imgborder imgcenter\">\n<p>The next view is the &quot;planner&quot; where you determine how many glasses you want to make, how many signs you want to buy, and what price you want to sell your goods.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/ls3.png\" alt=\"Screen where you set selling options.\" class=\"imgborder imgcenter\">\n<p>When you figure out your options, you then go to the next screen and see the results.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/ls4.png\" alt=\"Sales results\" class=\"imgborder imgcenter\">\n<p>Now let's look at the code. I'm not going to show every single line but will rather focus on what I think is important. Don't forget you can use the link above to see the code and fork it.</p>\n<p>First, let's look at main.js, the top level setup for my game.</p>\n<pre><code class=\"language-js\">import Vue from &quot;vue&quot;;\nimport App from &quot;./App.vue&quot;;\n\nimport router from &quot;./routes&quot;;\nimport store from &quot;./store&quot;;\n\nVue.config.productionTip = false;\n\nVue.filter(&quot;money&quot;, value =&gt; {\n  if (!window.Intl) return value;\n  return new Intl.NumberFormat(&quot;en-US&quot;, {\n    style: &quot;currency&quot;,\n    currency: &quot;USD&quot;\n  }).format(value);\n});\n\nnew Vue({\n  render: h =&gt; h(App),\n  router,\n  store\n}).$mount(&quot;#app&quot;);\n</code></pre>\n<p>The unique parts here are loading a router, loading a Vuex store, and setting up a global filter for displaying money values.</p>\n<p>The router is trivial as I only have three views:</p>\n<pre><code class=\"language-js\">import Vue from &quot;vue&quot;;\nimport VueRouter from &quot;vue-router&quot;;\n\nimport Home from &quot;./views/Home&quot;;\nimport Game from &quot;./views/Game&quot;;\nimport Report from &quot;./views/Report&quot;;\n\nVue.use(VueRouter);\n\nconst routes = [\n  {\n    path: &quot;/&quot;,\n    component: Home\n  },\n  {\n    path: &quot;/game&quot;,\n    component: Game\n  },\n  {\n    path: &quot;/report&quot;,\n    component: Report\n  }\n];\n\nexport default new VueRouter({\n  routes\n});\n</code></pre>\n<p>The first view is called <code>Home.vue</code> and is mainly just text, but make note of the <code>&lt;router-view&gt;</code> to handle navigation.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Welcome to Lemonade Stand&lt;/h1&gt;\n\n    &lt;p&gt;\n      In this game, you will have ten turns to try to earn as\n      much profit as you can at a simulated Lemonade Stand.\n    &lt;/p&gt;\n\n    &lt;p&gt;\n      On each turn you will be given a weather forecast and the price\n      for each cup of lemonade. You can then select\n      &lt;strong&gt;how many glasses you want to make&lt;/strong&gt;,\n      &lt;strong&gt;how many advertising signs you want to produce&lt;/strong&gt;, and at\n      &lt;strong&gt;what price you will see your lemonade&lt;/strong&gt;.\n    &lt;/p&gt;\n\n    &lt;p&gt;\n      Good luck, and remember that the weather forecase will\n      &lt;strong&gt;not&lt;/strong&gt; always be correct!\n    &lt;/p&gt;\n\n    &lt;router-link to=&quot;/game&quot; tag=&quot;button&quot;&gt;Get Started&lt;/router-link&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {};\n&lt;/script&gt;\n</code></pre>\n<p>So far so good. Now let's look at the next view, <code>Game.vue</code>.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Forecast: {{ forecast }}&lt;/h1&gt;\n    &lt;p&gt;On day {{ day }} the cost of lemonade is {{ costOfLemonade }} cents each.&lt;/p&gt;\n    &lt;p&gt;You currently have {{ assets | money }} in cash.&lt;/p&gt;\n    &lt;p&gt;\n      How many glasses of lemonade do you wish to make?\n      &lt;input\n        type=&quot;number&quot;\n        v-model.number=&quot;numGlasses&quot;\n        min=&quot;0&quot;\n      &gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n      How many advertising signs ({{costOfSigns}} cents each) do you wish to make?\n      &lt;input\n        type=&quot;number&quot;\n        v-model.number=&quot;numSigns&quot;\n        min=&quot;0&quot;\n      &gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n      What price (in cents) do you wish to charge for lemonade?\n      &lt;input\n        type=&quot;number&quot;\n        v-model.number=&quot;pricePerGlass&quot;\n        min=&quot;0&quot;\n      &gt;\n    &lt;/p&gt;\n\n    &lt;div v-if=&quot;hasErrors&quot;&gt;\n      &lt;strong&gt;Oh oh! Please fix these errors!&lt;/strong&gt;\n      &lt;ul&gt;\n        &lt;li v-for=&quot;e in errors&quot;&gt;{{e}}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;button @click=&quot;initiateSales&quot;&gt;Start Selling!&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      numGlasses: 0,\n      numSigns: 0,\n      pricePerGlass: 0\n    };\n  },\n  created() {\n    console.log('created');\n    this.$store.commit(&quot;generateForecast&quot;);\n  },\n  computed: {\n    assets() {\n      return this.$store.state.assets / 100;\n    },\n    day() {\n      return this.$store.state.day;\n    },\n    costOfLemonade() {\n      return this.$store.getters.costOfLemonade;\n    },\n    costOfSigns() {\n      return this.$store.state.signCost;\n    },\n    errors() {\n      return this.$store.state.errors;\n    },\n    forecast() {\n      return this.$store.getters.forecast;\n    },\n    hasErrors() {\n      return this.$store.getters.hasErrors;\n    }\n  },\n  methods: {\n    initiateSales() {\n      // try to sell - note we pass the getter value cuz Mutations can't use Getters (weird!)\n      this.$store.commit(&quot;doSales&quot;, {\n        glasses: this.numGlasses,\n        signs: this.numSigns,\n        cost: this.pricePerGlass,\n        costOfLemonade: this.costOfLemonade\n      });\n      if(!this.hasErrors) this.$router.replace(&quot;/report&quot;);\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>There's a lot going on here. The component begins with the layout which is essentially a report on top and three form fields.</p>\n<p>The first thing the code does in the <code>created</code> handler is to ask the store to generate a forecast: <code>this.$store.commit(&quot;generateForecast&quot;);</code>. I'll share the store code soon, but basically every aspect of the game that relates to numbers and logic is placed in the store. You can see this in multiple places, like where we ask for the price of signs. While that value won't change, I set it up as a constant in my store so I can change it in one place.</p>\n<p>This is why you see a bunch of <code>computed</code> values that just call out to the store. There <em>is</em> a nicer way of doing this (see <a href=\"https://vuex.vuejs.org/guide/getters.html\">mapGetters</a>) but I just didn't feel like using that.</p>\n<p>And note the last bit of code, <code>initiateSales</code>, simply gets the values and asks the store to try to start selling lemonade. If there aren't any errors, we go on to the report page. Let's look at that next.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Daily Financial Report&lt;/h1&gt;\n\n    &lt;p v-if=&quot;message&quot;&gt;\n      &lt;strong&gt;{{message}}&lt;/strong&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;For day {{day}}, you sold {{glassesSold}} glasses of lemonade.&lt;/p&gt;\n\n    &lt;p&gt;\n      You earned {{income | money}} and had expenses of {{expenses | money}}\n      for a net profit of {{ profit | money }}.\n    &lt;/p&gt;\n\n    &lt;p&gt;You currently have {{ assets | money }}.&lt;/p&gt;\n\n    &lt;router-link to=&quot;/game&quot; tag=&quot;button&quot;&gt;Next Day&lt;/router-link&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {};\n  },\n  created() {\n    // we update our assets now, nto before, so i don't have to worry about the\n    // display changing for a spli second. could be better?\n    this.$store.commit(&quot;updateAssets&quot;);\n  },\n  computed: {\n    assets() {\n      return this.$store.state.assets / 100;\n    },\n    day() {\n      return this.$store.state.day;\n    },\n    glassesSold() {\n      return this.$store.state.glassesSold;\n    },\n    income() {\n      return this.$store.state.income / 100;\n    },\n    expenses() {\n      return this.$store.state.expenses / 100;\n    },\n    profit() {\n      return this.income - this.expenses;\n    },\n    message() {\n      return this.$store.state.message;\n    }\n  },\n  methods: {}\n};\n&lt;/script&gt;\n</code></pre>\n<p>In general, all this view does is report back to the user what happened. My store will know how many items were sold, the profit, and so forth (and you'll see the store next), so my view just has to ask for the values. The only <em>slightly</em> weird part is probably this, <code>this.$store.commit(&quot;updateAssets&quot;);</code>. This store mutation updates your assets and I do it here so you don't see a split second change in the previous view after sales are tabulated. Something tells me this could be done nicer.</p>\n<p>Alright, now let's take a look at the store!</p>\n<pre><code class=\"language-js\">import Vue from &quot;vue&quot;;\nimport Vuex from &quot;vuex&quot;;\n\nVue.use(Vuex);\n\n/*\nforecast posibilities and their impacts on sales\n*/\nconst FORECASTS = [\n  {\n    label: &quot;Sunny&quot;,\n    salesRange: [60, 90],\n    chanceOfRain: 10\n  },\n  {\n    label: &quot;Cloudy&quot;,\n    salesRange: [40, 60],\n    chanceOfRain: 40\n  },\n  {\n    label: &quot;Storms&quot;,\n    salesRange: [20, 40],\n    chanceOfRain: 70\n  },\n  {\n    label: &quot;Heat Wave&quot;,\n    salesRange: [70, 100],\n    chanceOfRain: 5\n  },\n  {\n    label: &quot;Partly Cloudy&quot;,\n    salesRange: [50, 70],\n    chanceOfRain: 20\n  }\n];\n\nconst SIGN_COST = 15;\nconst RAIN_PENALTY = 33;\n\n// Credit: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nexport default new Vuex.Store({\n  state: {\n    day: 0,\n    assets: 200,\n    forecast: null,\n    signCost: SIGN_COST,\n    errors: [],\n    message: &quot;&quot;,\n    glassesSold: null,\n    expenses: null,\n    income: null\n  },\n  mutations: {\n    doSales(state, salesData) {\n      console.log(&quot;Attempting to do sales with &quot; + JSON.stringify(salesData));\n      // reset errors\n      state.errors = [];\n      if (salesData.glasses &lt;= 0)\n        state.errors.push(\n          &quot;You must enter a positive number of glasses to sell.&quot;\n        );\n\n      if (salesData.signs &lt; 0)\n        state.errors.push(&quot;You can only buy a positive number of signs.&quot;);\n      if (salesData.cost &lt; salesData.costOfLemonade)\n        state.errors.push(\n          &quot;You can't sell glasses for less than they are worth.&quot;\n        );\n\n      let totalCost =\n        salesData.glasses * salesData.costOfLemonade +\n        salesData.signs * state.signCost;\n      console.log(&quot;totalCost&quot;, totalCost);\n\n      if (totalCost &gt; state.assets)\n        state.errors.push(\n          `Your cost (${totalCost / 100}) is more than you have.`\n        );\n\n      if (state.errors.length &gt; 0) return;\n\n      /*\n        Ok, so a few things here. We have a forecast, and that gives us a range of sales, \n        ie on sunny days you can expect to sell 60-100% of your inventory. \n\n        The # of signs though has an impact, 1 to 0 signs will reduce your chance. Many signs\n        will help, but to a max (the user doesnt know)\n\n        Finally, we have a random chance of rain that is higher with cloudy and partly cloudy, \n        rain reduces your sales range too. We could add more things like construction on the street, etc\n\n        Nope, not finally, cost of lemonade impacts sales too\n      */\n\n      //Ok, first get the range\n      let range = state.forecast.salesRange;\n      console.log(&quot;current range is &quot; + range);\n\n      //now determine signs bonus\n      let signsBonus = 0;\n      if (salesData.signs === 0) signsBonus = -20;\n      else if (salesData.signs === 1) signsBonus = -10;\n      else if (salesData.signs &lt;= 4) signsBonus = 10;\n      else if (salesData.signs &lt;= 6) signsBonus = 15;\n      else if (salesData.signs &gt; 6) signsBonus = 20;\n\n      console.log(&quot;bonus from signs is &quot; + signsBonus);\n\n      //now determine cost bonus\n      let costBonus = 0;\n      if (salesData.cost &lt; 10) costBonus = 25;\n      else if (salesData.cost &lt; 30) costBonus = 15;\n      else if (salesData.cost &lt; 50) costBonus = 10;\n      else if (salesData.cost &lt; 75) costBonus = 10;\n      else if (salesData.cost &lt; 100) costBonus = 0;\n      else costBonus = -10;\n\n      console.log(&quot;bonus from col is &quot; + costBonus);\n\n      //now do we have rain?\n      let didItRain = getRandomInt(0, 100) &lt; state.forecast.chanceOfRain;\n      console.log(&quot;did it rain?&quot;, didItRain);\n\n      //ok, get our percent sold\n      let [bottom, top] = state.forecast.salesRange;\n      let percentSold = getRandomInt(bottom, top);\n\n      console.log(&quot;initial percent sold&quot;, percentSold);\n\n      //modify range based on signsBonus and didItRain\n      percentSold += signsBonus;\n      percentSold += costBonus;\n      if (didItRain) percentSold -= RAIN_PENALTY;\n\n      console.log(&quot;now percent sold is &quot;, percentSold);\n      //figure our glasses sold\n      let glassesSold = Math.floor((percentSold / 100) * salesData.glasses);\n      let moneyEarned = glassesSold * salesData.cost;\n      console.log(&quot;you sold &quot; + glassesSold + &quot; and earned &quot; + moneyEarned);\n\n      //save the data\n      state.glassesSold = glassesSold;\n      state.income = moneyEarned;\n      state.expenses = totalCost;\n      if (didItRain) state.message = &quot;It rained!&quot;;\n    },\n    generateForecast(state) {\n      let prediction = FORECASTS[getRandomInt(0, FORECASTS.length - 1)];\n      state.forecast = prediction;\n      //also clear previous message\n      state.message = &quot;&quot;;\n      state.day++;\n    },\n    updateAssets(state) {\n      state.assets += state.income - state.expenses;\n    }\n  },\n  getters: {\n    costOfLemonade(state) {\n      if (state.day &gt; 2) return 4;\n      return 2;\n    },\n    forecast(state) {\n      return state.forecast.label;\n    },\n    hasErrors(state) {\n      return state.errors.length &gt; 0;\n    }\n  }\n});\n</code></pre>\n<p>My store contains state that represents the current values of the game, but it also has &quot;config&quot; information that won't change. Things like the price of a sign. As folks play the game and provide feedback, I could tweak that value higher or lower.</p>\n<p>The <code>FORECASTS</code> constant represents the types of weather that can happen in the game. Each weather type has an impact on sales (<code>salesRange</code>) and a chance of rain. You can see this logic employed in <code>doSales</code>. After I calculate if your sales values were ok (i.e. you aren't spending more than you have), I determine what percentage of your glasses you sold. This is based on the weather, how many signs you made, the cost of your lemonade, and whether or not it rained. This will increase (or decrease) the percentage of glasses sold.</p>\n<p>Once that's known the values are all stored in the state so they can be used on the report view.</p>\n<p>And that's pretty much it, but I wanted to call out some specific things that occurred to me while I was building this.</p>\n<ul>\n<li>One of the things I like best about Vuex is how it gives me a nice abstraction for my logic. My store ends up complex, my Vue app and components end up simple and dumb.</li>\n<li>I was a bit unsure about using Vuex for &quot;config&quot; data as well as state that actually changes. I asked on Twitter though and it looks like people do that so at least I'm not alone. ;)</li>\n<li>I ran into an interesting issue. Mutations are not allowed to access Getters. Actions can, but I didn't have any async calls in my store. You can see my workaround in <code>doSales</code> where I have to pass in the cost of lemonade, even though it's a getter. This brings me back to the whole mutation/action thing which still feels awkward to me. Yes one is for sync and one is for async but I just kinda wish Vuex had one way to change data, async or not.</li>\n</ul>\n<p>As always, I'd love feedback on this (critical or not!), please leave me a comment below.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@rodlong?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Rod Long</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Creating a One Click Visual Studio Code Snippet to Wrap Content",
		"date":"Thu Aug 01 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/08/02/creating-a-one-click-visual-studio-code-snippet-to-wrap-content",
		"content":"<p>Here's a quick tip for you regarding Visual Studio Code <a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets\">snippets</a>. If you aren't aware, snippets let you define keyword shortcuts for quickly entering content into your code. I've got a bunch tailored for my blogging. For example:</p>\n<pre><code class=\"language-js\">&quot;uns&quot;:{\n\t&quot;scope&quot;:&quot;markdown&quot;,\n\t&quot;prefix&quot;:&quot;uns&quot;,\n\t&quot;body&quot;:[\n\t\t&quot;&lt;i&gt;Header photo by &lt;a href=\\&quot;$1\\&quot;&gt;$2&lt;/a&gt; on Unsplash&lt;/i&gt;&quot;\n\t],\n\t&quot;description&quot;: &quot;Unsplash credit&quot;\n}\n</code></pre>\n<p>This is the snippet I use for my <a href=\"https://unsplash.com/\">Unsplash</a> credit text on most of my blog entries. Unsplash has <em>amazing</em> art you can use for free. They ask that you credit them and I figure it's the least I can do, however their &quot;Copy&quot; button only copies the text of the credit, not the link:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/vs1.png\" alt=\"Screen shot of Unsplash credit notice\" class=\"imgborder imgcenter\">\n<p>I built a snippet so I could quickly insert proper text and then copy in the URL manually. I then type in the image author's name.</p>\n<p>Another one I use is for my images. I keep all of my images on Amazon S3. This snippet not only outputs the right base URL, but also outputs a dynamic year and month, matching the organization rules I use.</p>\n<pre><code class=\"language-js\">&quot;img&quot;: {\n\t&quot;prefix&quot;: &quot;img&quot;,\n\t&quot;body&quot;: [\n\t\t&quot;&lt;img src=\\&quot;https://static.raymondcamden.com/images/$CURRENT_YEAR/$CURRENT_MONTH/$1\\&quot; alt=\\&quot;\\&quot; class=\\&quot;imgborder imgcenter\\&quot;&gt;&quot;\n\t],\n\t&quot;description&quot;: &quot;Used for images&quot;\n}\n</code></pre>\n<p>Ok, so with that in mind, I realized yesterday I needed a new snippet for a very specific use case. I use Jekyll for my static site generator. I also write about Vue.js a lot. It just so happens that both Jekyll and Vue use the same tokens to reference variables - double brackets. So for example: <code>{{ name }}</code>. When I write a blog post with Vue code in it, Jekyll picks up on the variables and tries to render the values, which typically just results in white space.</p>\n<p>Luckily there is an easy fix, wrap the content with <code>{% raw %}</code> and <code>{% endraw %}</code>. (And to get <em>that</em> text to render was messy!) I wanted to see if I could build a Visual Studio Code snippet that would let me select some text, hit a key, and then wrap it with the code above. Turns out it took a few steps.</p>\n<p>First, I defined my snippet:</p>\n<pre><code class=\"language-js\">&quot;raw&quot;: {\n\t&quot;scope&quot;: &quot;markdown&quot;,\n\t&quot;prefix&quot;: &quot;raw&quot;,\n\t&quot;body&quot;: [\n\t\t&quot;{% raw %}$TM_SELECTED_TEXT{% endraw %}&quot;\n\t],\n\t&quot;description&quot;: &quot;Escape Vue&quot;\n}\n</code></pre>\n<p>I use the special variable <code>$TM_SELECTED_TEXT</code> to represent the currently selected text. This works well, but I usually activated snippets by typing their prefix and hitting the space bar. That won't work with selected text.</p>\n<p>Luckily there's a F1 command you can run that lets you select a snippet and execute it:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/vs2.png\" alt=\"Using the Insert Snippet command.\" class=\"imgborder imgcenter\">\n<p>That works, but requires about 3 clicks. What I wanted to do was simply have a keyboard shortcut that would do the same. Luckily that's <a href=\"https://code.visualstudio.com/docs/getstarted/keybindings\">supported</a> as well. I opened my <code>keybindings.json</code> and added:</p>\n<pre><code class=\"language-js\">{\n  &quot;key&quot;: &quot;ctrl+r&quot;,\n  &quot;command&quot;: &quot;editor.action.insertSnippet&quot;,\n  &quot;when&quot;: &quot;editorHasSelection&quot;,\n  &quot;args&quot;: {\n    &quot;langId&quot;: &quot;markdown&quot;,\n    &quot;name&quot;: &quot;raw&quot;\n  }\n}\n</code></pre>\n<p>I specified the language and name of my snippet and also set that it only works when I've got an active selection. Now I just select some Vue code, hit <code>ctrl+r</code>, and I'm good to go.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@andrewtneel?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Andrew Neel</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "visual studio code"
            
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Book Review: Progressive Web Apps",
		"date":"Mon Aug 05 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/08/06/book-review-progressive-web-apps",
		"content":"<iframe style=\"width:120px;height:240px;float:left;margin-right:15px;margin-bottom:15px\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" src=\"//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=tf_til&ad_type=product_link&tracking_id=raymondcamd06-20&marketplace=amazon&region=US&placement=1937557723&asins=1937557723&linkId=be13df8b41534b43b28503145215a5a7&show_border=true&link_opens_in_new_window=true&price_color=333333&title_color=0066c0&bg_color=ffffff\">\n</iframe> \n<p>A while ago the author of <a href=\"https://abookapart.com/products/progressive-web-apps\">&quot;Progressive Web Apps&quot;</a>, <a href=\"https://twitter.com/grigs\">Jason Grigsby</a>, graciously shared with me an advance copy of his book. Things happened and I fell a bit behind, but I finally found time to finish reading the book and thought I'd share my opinion.\nProgressive Web Apps (PWAs) are easily one of the hottest topics now. I've been doing my own part to learn, write, and present, on the topic for about two years now, but honestly feel like I'm still just scratching the surface. It doesn't help that the technology behind PWA feels like it's changing every day. Not only do you have new APIs to learn, you have entirely new browser behaviors to figure out as well. It's a huge topic and one that I think will continue to be talked about heavily for years to come.</p>\n<!--more-->\n<p>The last book I read on PWAs was way back in 2017 (<a href=\"https://www.raymondcamden.com/2017/10/16/review-building-progressive-web-apps\">&quot;Review: Building Progressive Web Apps&quot;</a>). That book was very well done and very heavy on code examples. The book I'm reviewing today, &quot;Progressive Web Apps&quot;, is completely different.</p>\n<p>Grigsby's book has, perhaps, 20 lines of code in the entire book (a bit over 150 pages). Right away that may raise a red flag for you. But instead of spending time sharing code, Grigsby goes into <em>incredible</em> detail about the why and the how of every single aspect of PWA development. Let's be honest, you can easily find code samples related to offline caching and push, but Grigsby tells you why you would consider these features and what they mean for users. Time and time again I found myself nodding along as I read as Grigsby did his best to make you consider why you would use (or not use!) a particular API.</p>\n<p>Another way this book shines is by how far it goes into explaining how browsers will react to certain features, like saving to the home screen. He shows screen shots, compares multiple browsers, and just goes to incredible lengths to show you the <em>result</em> of the code you would use rather than pages and pages of JavaScript.</p>\n<p>I can absolutely recommend this book if you want to get a <em>deep</em> introduction to PWAs before you start writing code. It's also the perfect kind of book you could share with a non-technical manager. (And to be clear, I'm not saying it isn't appropriate for developers. This developer was very happy with it!)</p>\n<p>Here's the table of contents:</p>\n<ul>\n<li>Defining Progressive Web Apps</li>\n<li>The Case for PWAs</li>\n<li>Making It Feel Like an App</li>\n<li>Installation and Discovery</li>\n<li>Offline</li>\n<li>Push Notifications</li>\n<li>Beyond PWAs</li>\n<li>Progressive Roadmap (my favorite chapter)</li>\n<li>A Web for Everyone</li>\n</ul>\n<p>If you've read this book as well, please leave me a comment below telling me what you think.</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "books",
            
                "development"
            
		]

	},

	{
		"title": "Drag and Drop File Upload in Vue.js",
		"date":"Wed Aug 07 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/08/08/drag-and-drop-file-upload-in-vuejs",
		"content":"<p>This won't be a terribly long post. I had to build a small demo for a friend demonstrating drag/drop along with uploading so I thought I'd share the code for others. Honestly this is mostly for me so that when I need to build this again in a few months I'll Google and end up back here completely surprised that I had already written it.</p>\n<p>I'll start off by saying I'm not going to cover the mechanics of drag and drop here. The MDN Web Docs have a great article on this (of course they do): <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API\">HTML Drag and Drop API</a>. In my case, I'm not concerned with making a DOM item dragable but rather making my code respond to drop events.</p>\n<p>For what I need I have to handle two events, <code>drop</code> and <code>dragover</code>. Handling <code>drop</code> makes sense. I'll be honest and say I'm not quite sure why I need to handle <code>dragover</code>, but the code is incredibly small as you just need to prevent the default behavior.</p>\n<p>Working on this demo also taught me something else about Vue. I'm used to building my Vue apps like so:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot;&gt;\nHere is where the awesome happens...\n&lt;/div&gt;\n</code></pre>\n<p>Where my div is then passed to Vue:</p>\n<pre><code class=\"language-javascript\">const app = new Vue({\n\tel:'#app',\n\t//lots more stuff here\n});\n</code></pre>\n<p>However, what if I wanted to do something with <code>&lt;div id=&quot;app&quot;&gt;</code> app itself? Turns out you can add Vue directives there just fine. I guess that makes sense but I'd never tried that before. I was able to specify that my entire Vue application &quot;area&quot; was covered by drag and drop support.</p>\n<p>Ok with that out of the way, let's look at the code. I'll start off wth HTML.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n&lt;body&gt;\n&lt;div id=&quot;app&quot; v-cloak @drop.prevent=&quot;addFile&quot; @dragover.prevent&gt;\n  &lt;h2&gt;Files to Upload (Drag them over)&lt;/h2&gt;\n  &lt;ul&gt;\n    &lt;li v-for=&quot;file in files&quot;&gt;\n      {{ file.name }} ({{ file.size | kb }} kb) &lt;button @click=&quot;removeFile(file)&quot; title=&quot;Remove&quot;&gt;X&lt;/button&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  \n  &lt;button :disabled=&quot;uploadDisabled&quot; @click=&quot;upload&quot;&gt;Upload&lt;/button&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>On top, you can see my two event handlers. As I said, for <code>dragover</code> all we need to do is prevent default behavior which makes that part short and sweet. The <code>drop</code> event, <code>addFile</code>, is where I'll handle generating the list of files.</p>\n<p>Inside the div I keep track of the files you want to upload. For each I output the name, the size (passed through a filter <code>kb</code>), and add a simple button to let you remove the item.</p>\n<p>Finally I've got an button to fire off the upload. For my demo I don't bother using a &quot;Loading&quot; widget of any sort, nor do I clear out the files when done. If anyone wants to see that just ask!</p>\n<p>Alright, now the code.</p>\n<pre><code class=\"language-javascript\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nVue.filter('kb', val =&gt; {\n  return Math.floor(val/1024);  \n});\n\nconst app = new Vue({\n  el:'#app', \n  data: {\n    files:[]\n  },\n  computed: {\n    uploadDisabled() {\n      return this.files.length === 0;\n    }\n  },\n  methods:{\n    addFile(e) {\n      let droppedFiles = e.dataTransfer.files;\n      if(!droppedFiles) return;\n      // this tip, convert FileList to array, credit: https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/\n      ([...droppedFiles]).forEach(f =&gt; {\n        this.files.push(f);\n      });\n    },\n    removeFile(file){\n      this.files = this.files.filter(f =&gt; {\n        return f != file;\n      });      \n    },\n    upload() {\n      \n      let formData = new FormData();\n      this.files.forEach((f,x) =&gt; {\n        formData.append('file'+(x+1), f);\n      });\n      \n      fetch('https://httpbin.org/post', {\n        method:'POST',\n        body: formData\n      })\n      .then(res =&gt; res.json())\n      .then(res =&gt; {\n         console.log('done uploading', res);\n      })\n      .catch(e =&gt; {\n        console.error(JSON.stringify(e.message));\n      });\n      \n    }\n  }\n})\n</code></pre>\n<p>On top you can see my simple <code>kb</code> filter to render the file sizes a bit nicer. Inside the Vue app I've got one data item, <code>files</code>, and note how <code>uploadDisabled</code> works as a nice computed property.</p>\n<p>In <code>addFile</code>, I use the Drag/Drop API to access the files (if any) that were dropped. This demo lets you drag over one file, or 100 (don't do that). I then iterate over each and add them to the <code>files</code> value. Remember that when a user intentionally provides a file to a web app you now have read access to it. That's how I'm able to show the file sizes. I could do a lot more here like validate file type, set a max size per file, or even set a total size allowed.</p>\n<p>Finally, my <code>upload</code> method just hits httpbin.org which will echo back what it was sent. I create a <code>FormData</code> object and just append each file. Remember by the user dropping the files on the app we can read from them.</p>\n<p>And that's it. I hope this simple demo helps!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@photohunter?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jimmy Chang</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Working with the Keyboard in your Vue App",
		"date":"Sun Aug 11 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/08/12/working-with-the-keyboard-in-your-vue-app",
		"content":"<p>This weekend I started working on another game in Vue.js (if you're curious, you can take a peak at it <a href=\"https://taipan.raymondcamden.now.sh/\">here</a> if you want). For part of the game I wanted to really make use of the keyboard for interaction. My goal, and I won't make it 100%, is a game where you can use the keyboard for the entire time you play. I knew that JavaScript had access to keyboard events, but I had never tried using them in Vue. Before I share what I found, I want to give a shoutout to <a href=\"https://forum.vuejs.org/u/LinusBorg\">LinusBorg</a> of the Vue forums. The good stuff below is all him, the bad stuff and mistakes are my fault.</p>\n<p>Alright, so let's start with a simple example. If you look at the Vue docs for event handling, you'll find a specific section that talks about <a href=\"https://vuejs.org/v2/guide/events.html#Key-Modifiers\">key modifiers</a>. This section discusses how you can add shortcuts to listen for specific keys. While not exactly what I was looking for, it reassured me that working with the keyboard was going to be easy. So for example, this will fire an event on every <code>keyup</code> call:</p>\n<pre><code class=\"language-html\">&lt;input @keyup=&quot;keyEvent&quot;&gt;\n</code></pre>\n<p>This modification will only fire when the enter key is pressed:</p>\n<pre><code class=\"language-html\">&lt;input @keyup.enter=&quot;keyEvent&quot;&gt;\n</code></pre>\n<p>Cool! But notice how the event is bound to an input field. For my needs, I wanted keyboard handling at the &quot;app&quot; level, by that I mean without having to use an input field first. Consider this example.</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak @keyup.enter=&quot;test('div enter', $event)&quot; @keyup=&quot;test('div',$event)&quot;&gt;\n  &lt;input @keyup=&quot;test('input', $event)&quot;&gt;&lt;br/&gt;\n  enter only: &lt;input @keyup.enter=&quot;test('second input', $event)&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n<p>I've got multiple uses of <code>keyup</code> here. I'm passing a label to my test handler as well as the <code>$event</code> object. I listen, twice, at the <code>div</code> level, and then once for each input field. My handler just echoes out what was passed in:</p>\n<pre><code class=\"language-js\">test(where, e) {\n\tconsole.log(`keyuptest at ${where} with code ${e.keyCode}`);\n}\n</code></pre>\n<p>The result is interesting. If you type outside of any input field, nothing is registered. But if you first click into one of the two input fields, things work as expected. Both the input handler and div handler will fire. You can test this yourself at my <a href=\"https://codepen.io/cfjedimaster/pen/rXbywY?editors=1111\">Codepen</a>.</p>\n<p>So a bit more Googling, and I came across this Vue.js forum post: <a href=\"https://forum.vuejs.org/t/capture-keypress-for-all-keys/14560\">Capture keypress for all keys</a>. In it, the poster asks about responding to any and all keypress events globally across the app. LinusBorg came up with a simple solution that boils down to this:</p>\n<pre><code class=\"language-js\">mounted() {\n\twindow.addEventListener(&quot;keypress&quot;, e =&gt; {\n\t\tconsole.log(String.fromCharCode(e.keyCode));\n\t});\n}\n</code></pre>\n<p>In my testing, this worked great, but I ran into an interesting issue. My game makes use of routing and I only need to listen for keyboard events in one route. When I'd leave that route and return, the event listener would get bound again. The more I did this, the more duplicate event handlers were being bound for <code>keypress</code>.</p>\n<p>I struggled with this some more, and again, LinusBorg came up with a solution. I knew about <code>window.removeEventListener</code>, but it doesn't work with anonymous functions. The solution was to just use a Vue method for both registering and removing the event. That may not make sense, but here's a simple example:</p>\n<pre><code class=\"language-js\">created() {\n\twindow.addEventListener('keypress', this.doCommand);\n},\ndestroyed() {\n\twindow.removeEventListener('keypress', this.doCommand);\n},\nmethods: {\n\tdoCommand(e) {\n\t\tlet cmd = String.fromCharCode(e.keyCode).toLowerCase();\n\t\t// do stuff\n\t}\n}\n</code></pre>\n<p>And that's it! Of course, things are a bit more complex in my game, but I'll leave those bits for the post describing my game. As always, I hope this helps!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@bulgakovmihaly?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Csabi Elter</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "My Thoughts on Documentation",
		"date":"Tue Aug 13 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/08/14/my-thoughts-on-documentation",
		"content":"<p>I am <em>incredibly</em> opinionated about technical documentation. While my degree was in English, my focus in college was technical writing. I've written over six thousand blog posts and worked on around fifteen books. I am not trying to brag about my ability (which, trust me, can always use the skill of an editor), but rather to provide some context as to why, when I'm testing a cool new utility or API, I judge it based on the level of documentation and how much care (or how little) is put into it.</p>\n<p>With that in mind, I thought I'd share some opinions and suggestions I have in regards to developer focused documentation. I don't pretend to know everything and I'd highly encourage you to share your opinions below.</p>\n<h2>Documentation is a Required Feature</h2>\n<p>I feel silly leading with this, but experience has shown me that developers are often fine shipping code and simply skipping the documentation. You (or your company) must develop a mindset that the feature is simply not complete until the documentation is written. You wouldn't (hopefully) ship something without a security review. Or tests. But for some reason documentation is often considered an afterthought or simply something that can be done at the last minute.</p>\n<p>In order to address this, make documentation part of the process. Have it reviewed just like you have code reviewed. Even better, have it reviewed by someone who didn't work on the feature. When the developer writes the docs it's far too easy for them to make assumptions about what the reader knows. You get so close to the code you don't properly understand what it may be like for a new developer just coming in.</p>\n<h2>Balance What You Include (and When)</h2>\n<p>At one of my more recent jobs, one of the things I did while reviewing the documentation was find a lot of things to remove. The documentation for this product had stuff towards the beginning that covered the history and theory of what the product covered. It was all... factual information but also completely unnecessary and distracting from actually <em>learning</em> how to use the product.</p>\n<p>My goal when I'm just learning a product is to focus on the basics of how it works and what I can do with it. I don't need to know everything at once. Give me the basics, walk me through building something simple, and give me an early success to get me motivated. After that introduction it's time to get deeper.</p>\n<p>So in abstract, this is what I like to see in the docs:</p>\n<ul>\n<li>An introduction, light weight, and a quick read.</li>\n<li>Installation, walk me through getting the product installed and ready to use. It is <em>completely</em> ok to focus on the simplest path and cover other methods later.</li>\n<li>Getting Started, a quick demo where I can see the thing in action, and as I said, get excited/motivated to do more</li>\n<li>Everything Else</li>\n</ul>\n<p>Ok, so that last bullet is a bit broad, but in general, the topics after installation and getting started are things I may not need to read immediately or even in order.</p>\n<p>Consider the <a href=\"https://router.vuejs.org/\">Vue Router docs</a>:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/doc1.png\" alt=\"Router doc nav\" class=\"imgborder imgcenter\">\n<p>When I was learning the Router, I focused on the first three bullet points, and actually stopped after &quot;Dynamic Route Navigation.&quot; That literally got me to where I needed and has covered most of my usage since then. I recently needed to learn about guards so I simply skipped ahead to the part of the docs.</p>\n<p>Now of course I should have read everything from start to finish, but let's be honest, developers don't do that.</p>\n<p>By focusing on the &quot;let me get you started and running on your own&quot; approach, the docs become so much more useful to me. And as I said, I can come back later for specific topics when the need arises.</p>\n<h2>Code Samples</h2>\n<p>This one's a bit hard to define. Yes, developer documentation should have code samples. But there's a lot to consider when using them.</p>\n<p>First, how much code do you include in the sample? So for example, if I wanted to demonstrate a <a href=\"https://vuejs.org/v2/guide/computed.html\">computed property</a> in Vue, this is what I'd see in the docs:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/doc2.png\" alt=\"Computed props docs\" class=\"imgborder imgcenter\">\n<p>There's the HTML needed to demonstrate the use and the JavaScript. But what's <em>not</em> there? In the HTML, we don't include the <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code> tags. We don't include the script tags used to load Vue or the code.</p>\n<p>In the JavaScript, we have the bare minimum Vue.js application in order to make it work. The JavaScript could have been shorter, perhaps just showing this:</p>\n<pre><code class=\"language-js\">computed: {\n\t// a computed getter\n\treverseMessage: function () {\n\t\t// stuff\n\t}\n}\n</code></pre>\n<p>However by showing it in the scope of a greater application the reader sees it in a context that may be more clear.</p>\n<p>The authors here handled this very well. You have enough context for the code to learn the feature and minimal &quot;noise&quot; that distracts from what is being taught.</p>\n<p>Unfortunately there's no magic formula here for how to do this. In general you want to keep your code listings &quot;short&quot; but what that means will depend on what you're trying to show and even the language itself.</p>\n<p>There's also the question of - should the reader be able to literally copy and paste the code? In the Vue example... they actually couldn't do that. If you copied and pasted both into one HTML file the JavaScript wouldn't work. It's missing the <code>&lt;script&gt;</code> tag around the JavaScript code and the <code>&lt;script&gt;</code> tag to load Vue. I don't think that's a failure at all, as I said I think the Vue docs here are great, but there was a conscious decision here made about what to assume the reader will know.</p>\n<p>If you go to the <a href=\"https://vuejs.org/v2/guide/index.html\">beginning</a> of the Vue docs, they <a href=\"https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html\">link out</a> to a Gist showing a complete HTML page with all the bits in it. I may have included that on the page itself just so the reader gets one example of everything at once.</p>\n<p>Some more nits about code samples:</p>\n<ul>\n<li>Do not use screen shots. Even if I can't copy and paste to run the code, I probably want to copy the code anyway.</li>\n<li>Use a nice code formatter. My favorite is <a href=\"https://prismjs.com/\">Prism</a>.</li>\n</ul>\n<h2>Animated Gifs are for Social Media, not Docs</h2>\n<p>See this cute animated Gif of a cat?</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/tenor.gif\" alt=\"Animated cute\" class=\"imgborder imgcenter\">\n<p>Yeah, that's nice. Huge size and all but who cares about performance, right? Now imagine this animation was showing how your API works. The reader comes here, scrolls down, and catches the gif halfway. Or so they think. It's not a video so you can't see how far along they are. Oh, and they can't pause either. So they want the animated gif intently and hopefully it's perfectly clear because, remember, you can't pause or rewind or anything.</p>\n<p>Last week I actually ran across a site that had, I kid you not, a minute long animated gif that showed a ten step process and it was the most distracting, hard to follow flow I've ever tried to follow.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/justdont.jpg\" alt=\"Just Don't\" class=\"imgborder imgcenter\">\n<h2>Save (Most) of the Jokes</h2>\n<p>And speaking of cute graphics, including the one right above, as much as I go for a &quot;light fun tone&quot; in my blog posts and presentations, I actually think docs should be a bit more serious. That isn't to say they should be boring, or you can't have a humorous example, but I definitely tone things down for documentation. I also avoid pictures like the two above. It's fine for a presentation, but try to avoid it in your docs.</p>\n<h2>Do Not Require a Login</h2>\n<p>That's it. Seriously. I know sites want user signups. It's an important user metric. But if you require me to register for your app/service before I can see the docs, I'll simply go elsewhere if I have a choice in the matter, and I usually do.</p>\n<p>It's fine to <em>suggest</em> a login and even better if your code samples dynamically update to reflect your personal information, such as API keys and the such.</p>\n<h2>Let Me Help!</h2>\n<p>The final tip I have is to provide a way to give feedback on the docs. I can't tell you how many times I run across typos or other mistakes. If I see a quick way to shoot you an email on it, I will. If your docs use GitHub, then that's even better. GitHub has an <em>incredibly</em> simple UI workflow that walks you through making a fork, writing the doc change, and submitting the PR. I mean it really goes out it's way to make that process easy. Even if your company does nothing else on GitHub, I'd highly suggest using it for your docs, and depending on how you host your docs, you can even set it up such that as soon as a file is edited, or a PR of a fix accepted, it's automatically published live.</p>\n<p>The <a href=\"https://nativescript-vue.org\">NativeScript-Vue</a> docs have an example of this. At the bottom of each page you see:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/doc3.png\" alt=\"Improve this Doc button/link\" class=\"imgborder imgcenter\">\n<p>That button takes you right to the GitHub repository page for that piece of documentation. There a user can then edit the docs to submit a quick fix.</p>\n<h2>Hire an Editor</h2>\n<p>I've been lucky to work with editors on my blog in the past and definitely on my article and book projects. An editor helps you find things you were sure you checked for but somehow missed. Obviously this won't always be an option, especially for open source projects. But if you <em>can</em> afford a professional editor then it will <em>absolutely</em> be worth the cost.</p>\n<h2>What Else?</h2>\n<p>Before wrapping this post, I want to point out the <em>excellent</em> resource, <a href=\"https://www.writethedocs.org/\">Write the Docs</a>. Write the Docs is a site, community, set of conferences, and more all dedicated to, you guessed it, writing the docs. It's a great place to get started and meet other people working in technical documentation.</p>\n<p>Ok folks, so what else would you recommend? What sites have especially good docs? Have you ever stopped using a product due to bad documentation? Share your experiences below!</p>\n<p>p.s. Speaking of editors, my thanks go to <a href=\"https://remotesynthesis.com/\">Brian Rinaldi</a> for editing this post before I published!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@impatrickt?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Patrick Tomasso</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Sailing the Seas with Vue - My Take on Taipan",
		"date":"Sun Aug 18 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/08/19/sailing-the-seas-with-vue-my-take-on-taipan",
		"content":"<p>As a young kid, I spent a <em>hell</em> of a lot of time on my Apple 2. I played many different games, but one of my favorite was <a href=\"https://en.wikipedia.org/wiki/Taipan!\">Taipan!</a>.</p>\n<figure>\n<img src=\"https://static.raymondcamden.com/images/2019/08/TaipanGameTitle.png\" alt=\"title screen for Taipain!\" class=\"imgborder imgcenter\">\n<figcaption>By Source, Fair use, https://en.wikipedia.org/w/index.php?curid=8888638</figcaption>\n</figure>\n<p>Taipan was a basic trade simulator based in the far east. You had a ship with storage capacity and would buy and sell goods across multiple ports. The game had basic combat, a money lender, and other details to make things interesting, but for me, my enjoyment came from pure grinding. I'd play it for a few hours at night just to see how much money I could make. (Of course, once I found the money lender bug it became trivial to get rich.)</p>\n<p>As part of my basic &quot;get more experience with Vue apps&quot; goal this year, I decided to rebuild the game (to the best of my ability) using, of course, Vue.js. I didn't want an exact rebuild though and in my version I made a few changes.</p>\n<ul>\n<li>First, I got rid of combat. I <em>hated</em> the combat aspect of the game as it felt incredible slow. I liked the fact that it added risk to the game, but didn't like how it killed the pace. In my version, you can be attacked by pirates but they simply do damage and steal some goods.</li>\n<li>I got rid of the money lender. It's an interesting aspect, but it also slowed down the pace of the game when arriving at port.</li>\n<li>I got rid of the 'shake down' aspect via Li Yuen. I liked this aspect too and may eventually bring it back.</li>\n<li>I got rid of the warehouse. To me this always felt like a distraction.</li>\n<li>I also skipped making one of my goods illegal.</li>\n</ul>\n<p>That's pretty much it but there's a few other smaller mods as well. My game feels quite a bit more snappy and quick compared to the original which feeds into how I enjoyed playing it.</p>\n<p>I also tried to make use of the keyboard as much as possible. You can read about my work in that area here: <a href=\"https://www.raymondcamden.com/2019/08/12/working-with-the-keyboard-in-your-vue-app\">Working with the Keyboard in your Vue App</a>. I didn't make <em>everything</em> keyboard accessible, but navigation from port to port can be done entirely by keyboard and while playing it felt like a really good setup. So before I get into the code, if you want to give it a try, you can play here:</p>\n<p><a href=\"https://taipan.raymondcamden.now.sh/\">https://taipan.raymondcamden.now.sh/</a></p>\n<p>And you can view the source code here:</p>\n<p><a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/taipan/\">https://github.com/cfjedimaster/vue-demos/tree/master/taipan/</a></p>\n<p>Alright, so let's take a look at the code a bit. I'm not going to go over every single line, but rather talk about the more interesting bits (to me) at a high level.</p>\n<p>Taipan makes use of both Vue Router and Vuex. My router use wasn't anything special. There's an home route which introduces you to the game. A &quot;setup&quot; route which just asks for your name. Then the game route were most of the work is done. Next is a &quot;travel&quot; route which handles going from one port to another. Finally there's a end of game route which shows your final stats.</p>\n<p>My Vuex usage was interesting. As with my <a href=\"https://www.raymondcamden.com/2019/08/01/playing-with-vue-and-vuex-lemonade-stand\">Lemonade Stand</a> game, I spent a good amount of time thinking about what should go in my views versus what should go into the store. I definitely think I have a few things in views that should not be there. I think this particular aspect of Vue development is something that will change over the iteration of an application.</p>\n<p>Let's look at how gameplay happens. Each turn consists of the following logic.</p>\n<ul>\n<li>First, I ask Vuex to consider random events. This was - truly - the most difficult aspect of the entire game. The core &quot;turn to turn, buy, sell&quot; etc logic wasn't too hard. But handling &quot;special events&quot; was definitely problematic.</li>\n<li>My view prompts for input. This can be one of - buying goods, selling goods, repairing damage, upgrading the ship, or moving to another port.</li>\n</ul>\n<p>That &quot;prompts for input&quot; aspect is related to the keyboard. My solution involved showing a menu based on the current 'state' of what you are doing. So initially the state is - show the menu. But if you want to buy something, I switch to another menu prompting you for an amount and good. You can see this in play in the layout for Game.vue.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n\t&lt;div&gt;\n\t\t&lt;p&gt;\n\t\t\tThe date is {{ date }}, Captain {{captain}}. You are currently docked at {{ port }}.\n\t\t&lt;/p&gt;\n\n\t\t&lt;div class=&quot;container&quot;&gt;\n\t\t\t&lt;Stats /&gt;\n\t\t\t&lt;Hold /&gt;\n\t\t\t&lt;Prices /&gt;\n\t\t&lt;/div&gt;\n\n\t\t&lt;p v-if=&quot;canUpgrade&quot;&gt;\n\t\t\t&lt;strong&gt;Good News!&lt;/strong&gt; You can upgrade your ship for {{ upgradeCost }}.\n\t\t\t&lt;span v-if=&quot;money &lt; upgradeCost&quot;&gt;Unfortunately you do not have the funds.&lt;/span&gt;\n\t\t\t&lt;span v-else&gt;&lt;button @click=&quot;doUpgrade&quot;&gt;Purchase Upgrade&lt;/button&gt;&lt;/span&gt;\n\t\t&lt;/p&gt;\n\n\t\t&lt;p v-if=&quot;!keyState&quot;&gt;\n\t\t\t&lt;b&gt;Menu:&lt;/b&gt; Type &lt;code&gt;B&lt;/code&gt; to buy, &lt;code&gt;S&lt;/code&gt; to sell, \n\t\t\t&lt;span v-if=&quot;damage&quot;&gt;&lt;code&gt;R&lt;/code&gt; to repair, &lt;/span&gt;\n\t\t\t&lt;code&gt;M&lt;/code&gt; to go to another port or &lt;code&gt;Q&lt;/code&gt; to quit.\n\t\t&lt;/p&gt;\n\n\t\t&lt;p v-if=&quot;keyState == 'Move'&quot;&gt;\n\t\t\tMove to \n\t\t\t\t&lt;span v-for=&quot;(p, i) in ports&quot; :key=&quot;i&quot;&gt;{{ i+1 }}) {{ p }} &lt;/span&gt;\n\t\t\t&lt;br/&gt;\n\t\t\tOr &lt;code&gt;C&lt;/code&gt; to cancel.\n\t\t&lt;/p&gt;\n\n\t\t&lt;p v-if=&quot;keyState == 'Buy'&quot;&gt;\n\n\t\t\tBuy \n\t\t\t\t&lt;input v-model.number=&quot;toBuyQty&quot; type=&quot;number&quot; min=&quot;0&quot;&gt; units of \n\t\t\t\t&lt;select v-model=&quot;toBuy&quot;&gt;\n\t\t\t\t&lt;option v-for=&quot;(s, i) in prices&quot; :value=&quot;s&quot; :key=&quot;i&quot;&gt;{{ s.name }}&lt;/option&gt;\n\t\t\t\t&lt;/select&gt; \n\t\t\t\tfor {{ purchasePrice | num }}.\n\t\t\t\t&lt;button :disabled=&quot;cantBuy&quot; @click=&quot;buyGoods&quot;&gt;Purchase&lt;/button&gt;\n\t\t\t&lt;br/&gt;\n\t\t\tOr &lt;code&gt;C&lt;/code&gt; to cancel.\n\t\t&lt;/p&gt;\n\n\t\t&lt;p v-if=&quot;keyState == 'Sell'&quot;&gt;\n\n\t\t\tSell \n\t\t\t\t&lt;input v-model.number=&quot;toSellQty&quot; type=&quot;number&quot; min=&quot;0&quot;&gt; units of \n\t\t\t\t&lt;select v-model=&quot;toSell&quot;&gt;\n\t\t\t\t&lt;option v-for=&quot;(s, i) in prices&quot; :value=&quot;s&quot; :key=&quot;i&quot;&gt;{{ s.name }}&lt;/option&gt;\n\t\t\t\t&lt;/select&gt; \n\t\t\t\tfor {{ sellPrice | num }}.\n\t\t\t\t&lt;button :disabled=&quot;cantSell&quot; @click=&quot;sellGoods&quot;&gt;Sell&lt;/button&gt;\n\t\t\t&lt;br/&gt;\n\t\t\tOr &lt;code&gt;C&lt;/code&gt; to cancel.\n\t\t&lt;/p&gt;\n\n\t\t&lt;p v-if=&quot;keyState == 'Repair'&quot;&gt;\n\n\t\t\tSpend \n\t\t\t\t&lt;input v-model.number=&quot;toRepairQty&quot; type=&quot;number&quot; min=&quot;0&quot;&gt; on repairs. \n\t\t\t\t&lt;button :disabled=&quot;cantRepair&quot; @click=&quot;doRepair&quot;&gt;Repair&lt;/button&gt;\n\t\t\t&lt;br/&gt;\n\t\t\tOr &lt;code&gt;C&lt;/code&gt; to cancel.\n\t\t&lt;/p&gt;\n\n\t&lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>I moved my a lot of my display stuff into components which lets the layout of this page mainly focus on responding to your inputs. The <code>keyState</code> value is how I handle dynamically changing the current menu. Here's the JavaScript:</p>\n<pre><code class=\"language-js\">import Hold from '@/components/Hold.vue'\nimport Prices from '@/components/Prices.vue'\nimport Stats from '@/components/Stats.vue'\n\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tkeyState:null,\n\t\t\tray:null,\n\t\t\ttoBuy:null,\n\t\t\ttoBuyQty:0,\n\t\t\ttoSell:null,\n\t\t\ttoSellQty:0,\n\t\t\ttoRepairQty:0\n\t\t}\n\t},\n\tcomponents:{\n\t\tHold, Prices, Stats\n\t},\n\tcreated() {\n\t\tthis.$store.commit('newTurn');\n\t\twindow.addEventListener('keypress', this.doCommand);\n\t},\n\tdestroyed() {\n\t\twindow.removeEventListener('keypress', this.doCommand);\n\t},\n\tcomputed: {\n\t\tcantBuy() {\n\t\t\treturn (\n\t\t\t\tthis.toBuy === null\n\t\t\t\t||\n\t\t\t\t(this.toBuy.price * this.toBuyQty) &gt; this.money\n\t\t\t\t||\n\t\t\t\tthis.toBuyQty + this.shipUsedSpace &gt; this.holdSize\n\t\t\t)\n\t\t},\n\t\tcantRepair() {\n\t\t\treturn this.toRepairQty &gt; this.money;\n\t\t},\n\t\tcantSell() {\n\t\t\tif(this.toSell === null) return true;\n\t\t\tlet avail = 0;\n\t\t\tfor(let i=0;i&lt;this.hold.length;i++) {\n\t\t\t\tif(this.hold[i].name === this.toSell.name) {\n\t\t\t\t\tavail = this.hold[i].quantity;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log('avail is '+avail);\n\t\t\treturn (\n\t\t\t\tthis.toSellQty &gt; avail\n\t\t\t)\n\t\t},\n\t\tcanUpgrade() {\n\t\t\treturn this.$store.state.offerUpgrade;\n\t\t},\n\t\tcaptain() {\n\t\t\treturn this.$store.state.name;\n\t\t},\n\t\tdamage() {\n\t\t\treturn this.$store.state.damage;\n\t\t},\n\t\tdate() {\n\t\t\treturn this.$store.getters.gameDate;\n\t\t},\n\t\thold() {\n\t\t\treturn this.$store.state.hold;\n\t\t},\n\t\tholdSize() {\n\t\t\treturn this.$store.state.holdSize;\n\t\t},\n\t\tmoney() {\n\t\t\treturn this.$store.state.money;\n\t\t},\n\t\tport() {\n\t\t\treturn this.$store.state.port.name;\n\t\t},\n\t\tports() {\n\t\t\treturn this.$store.getters.ports;\n\t\t},\n\t\tprices() {\n\t\t\treturn this.$store.state.prices;\n\t\t},\n\t\tpurchasePrice() {\n\t\t\tif(!this.toBuy) return 0;\n\t\t\t/* disabled due to warning about unexpected side effect, which makes sense\n\t\t\tif(this.toBuyQty &lt; 0) this.toBuyQty = 0;\n\t\t\t*/\n\t\t\treturn this.toBuy.price * this.toBuyQty;\n\t\t},\n\t\trepairCost() {\n\t\t\treturn this.$store.getters.repairCost;\n\t\t},\n\t\tsellPrice() {\n\t\t\tif(!this.toSell) return 0;\n\t\t\treturn this.toSell.price * this.toSellQty;\n\t\t},\n\t\tshipUsedSpace() {\n\t\t\treturn this.$store.getters.shipUsedSpace\n\t\t},\n\t\tupgradeCost() {\n\t\t\treturn this.$store.getters.upgradeCost;\n\t\t}\n\t},\n\tmethods: {\n\t\tbuyGoods() {\n\t\t\t//in theory not needed due to other checks\n\t\t\tif(!this.toBuy) return;\n\t\t\tif(this.toBuyQty &lt;= 0) return;\n\n\t\t\tthis.$store.commit('purchase', { good: this.toBuy, qty: this.toBuyQty });\n\t\t\tthis.keyState = null;\n\t\t},\n\t\tdoUpgrade() {\n\t\t\tthis.$store.commit('upgrade', { cost: this.upgradeCost });\n\t\t},\n\t\tsellGoods() {\n\t\t\tif(!this.toSell) return;\n\t\t\tif(this.toSellQty &lt;= 0) return;\n\n\t\t\tthis.$store.commit('sale', { good: this.toSell, qty: this.toSellQty });\n\t\t\tthis.keyState = null;\n\t\t},\n\t\tdoCommand(e) {\n\t\t\tlet cmd = String.fromCharCode(e.keyCode).toLowerCase();\n\n\t\t\t/*\n\t\t\tHow we respond depends on our state. If keyState is null, \n\t\t\tit meand we aren't doing anything, so BSM are valid.\n\t\t\t*/\n\t\t\tif(!this.keyState) {\n\n\t\t\t\tif(cmd === 'b') {\n\t\t\t\t\tconsole.log('Buy');\n\t\t\t\t\tthis.toBuy = null;\n\t\t\t\t\tthis.toBuyQty = 0;\n\t\t\t\t\tthis.keyState = 'Buy';\n\t\t\t\t}\n\n\t\t\t\tif(cmd === 's') {\n\t\t\t\t\tconsole.log('Sell');\n\t\t\t\t\tthis.toSell = null;\n\t\t\t\t\tthis.toSellQty = 0;\n\t\t\t\t\tthis.keyState = 'Sell';\n\t\t\t\t}\n\n\t\t\t\tif(cmd === 'm') {\n\t\t\t\t\tconsole.log('Move');\n\t\t\t\t\tthis.keyState = 'Move';\n\t\t\t\t}\n\n\t\t\t\tif(cmd === 'r') {\n\t\t\t\t\tconsole.log('Repair');\n\t\t\t\t\tthis.keyState = 'Repair';\n\t\t\t\t}\n\n\t\t\t\tif(cmd === 'q') {\n\t\t\t\t\tthis.$router.replace('/end');\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//keystate for move\n\t\t\tif(this.keyState === 'Move') {\n\n\t\t\t\tif(cmd === 'c') {\n\t\t\t\t\tthis.keyState = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcmd = parseInt(cmd, 10);\n\t\t\t\tfor(let i=0;i&lt;this.ports.length;i++) {\n\t\t\t\t\tif(cmd-1 === i) {\n\t\t\t\t\t\tconsole.log('going to move to '+this.ports[i]);\n\t\t\t\t\t\tthis.$router.replace({ name:'travel', \n\t\t\t\t\t\tparams: { \n\t\t\t\t\t\t\tdestination: this.ports[i],\n\t\t\t\t\t\t\tdestinationIndex: i\n\t\t\t\t\t\t} });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//keystate for buy\n\t\t\tif(this.keyState === 'Buy' || this.keyState === 'Sell') {\n\n\t\t\t\tif(cmd === 'c') {\n\t\t\t\t\tthis.keyState = null;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\t\tdoRepair() {\n\t\t\t// in theory not needed\n\t\t\tif(this.toRepairQty &gt;= this.money) return;\n\t\t\tif(this.toRepairQty &gt;= this.repairCost) this.toRepairQty = this.repairCost;\n\n\t\t\tthis.$store.commit('repair', { total: this.toRepairQty, repairCost: this.repairCost });\n\t\t\tthis.keyState = null;\n\t\t}\n\n\t\t\n\t}\n}\n</code></pre>\n<p>That's quite a bit and I apologize. Probably the most interesting aspect is <code>doCommand</code>, where I respond to keyboard events and based on the current state I handle the input. I feel like this could be done better, but for a first draft, I'm happy with it.</p>\n<p>One part I'm not happy with is all of the items in <code>computed</code> that simply reach out to the Vuex state and their getters. I know I could use <a href=\"https://vuex.vuejs.org/guide/state.html#the-mapstate-helper\">mapState</a> to make it a bit cleaner but I decided to hold off on that for now. (I'm going to force myself to use it in myh next demo.)</p>\n<p>Outside of that though most of the code here just handles input and interacts with the store. Here's a quick screen shot of my awesome design.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/08/taipan1.png\" alt=\"Game screen\" class=\"imgborder imgcenter\">\n<p>Let's take a look at <code>Travel.vue</code>. This is an temporary screen you see while moving between ports.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n\t&lt;div&gt;\n\t\t&lt;h1&gt;On the sea...&lt;/h1&gt;\n\t\t&lt;p&gt;\n\t\t\tYou are on the way to {{ destination }}.\n\t\t&lt;/p&gt;\n\t\t&lt;p v-if=&quot;randomEvent&quot;&gt;\n\t\t\t{{ randomMessage }}\n\t\t&lt;/p&gt;\n\n\t\t&lt;p v-if=&quot;damage &gt;= 100&quot;&gt;\n\t\t\t&lt;strong&gt;Your ship is completely destroyed!&lt;/strong&gt;\n\t\t&lt;/p&gt;\n\t&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n\tcomputed: {\n\t\tdamage() {\n\t\t\treturn this.$store.state.damage;\n\t\t},\n\t\tdestination() {\n\t\t\treturn this.$route.params.destination;\n\t\t},\n\t\trandomEvent() {\n\t\t\treturn this.randomMessage !== '';\n\t\t},\n\t\trandomMessage() {\n\t\t\treturn this.$store.state.randomMessage;\n\t\t}\n\t},\n\tcreated() {\n\t\t// check for random event\n\t\tthis.$store.commit('generateRandomEvent', {destination: this.$route.params.destination});\n\n\t\t// this feels icky\n\t\tlet destinationIndex = this.$route.params.destinationIndex;\n\t\tif(this.$store.state.newPortIndex) {\n\t\t\tdestinationIndex = this.$store.state.newPortIndex;\n\t\t}\n\n\t\tlet timeToWait = 1000;\n\t\t// if there was a special event, we need more time to read, and possibly end the game\n\t\tif(this.randomEvent) {\n\t\t\ttimeToWait += 2000;\n\t\t}\n\n\t\tsetTimeout(() =&gt; {\n\t\t\tconsole.log('done waiting');\n\t\t\tif(this.damage &gt;= 100) {\n\t\t\t\tthis.$router.replace('/end');\n\t\t\t} else {\n\t\t\t\tthis.$store.commit('setPort', destinationIndex);\n\t\t\t\tthis.$router.replace('/game');\n\t\t\t}\n\t\t}, timeToWait);\n\t}\n}\n&lt;/script&gt;\n</code></pre>\n<p>The most interesting aspect of this is the <code>setTimeout</code> in <code>created</code>. The idea is that you enter this view but then move out automatically. Normally this is done in one second, but if a random event happens I delay it to three seconds total so you have time to read what happened. And since a random event could actually end the game for you, I've got some logic in there to move to the end view.</p>\n<p>Finally, let's take a look at the store. I'm going to break this up a bit instead of just pasting the entire thing.</p>\n<pre><code class=\"language-js\">/*\nstarting year for the game\n*/\nconst BASE_YEAR = 1900;\n\nconst MONTHS = [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,\n             &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;];\n\n/*\nPorts. For now ports just have names but I may add boosts later, like port\nX for good Y is good.\n*/\nconst PORTS = [\n  {\n    name:'Bespin'\n  },\n  {\n    name:'Dagobah'\n  },\n  {\n    name:'Naboo'\n  },\n  {\n    name:'Coruscant'\n  },\n  {\n    name:'New Boston'\n  }\n];\n\n/*\nGoods have a value range representing, generally, what they will sell for.\nillegal=true means there is a chance it will be stolen\n*/\nconst GOODS = [\n  {\n    name:'General',\n    salesRange: [5, 20],\n    illegal:false\n  },\n  {\n    name:'Arms',\n    salesRange: [60, 120],\n    illegal:false\n  },\n  {\n    name:'Silk',\n    salesRange: [200, 500],\n    illegal:false\n  },\n  {\n    name:'Spice',\n    salesRange: [3000, 6000],\n    illegal:true\n  }\n\n];\n\n//how much each upgrade adds\nconst HOLD_UPGRADE = 10;\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n</code></pre>\n<p>My store starts off with various constants that impact game play. You can see the ports (yes, I diverted a bit from the old game), goods, and more. Ports are just names for now, but my intent was to allow for ports to 'favor' certain goods. Goods support a range in which their prices will fall and you can see I marked <code>Spice</code> as illegal, but haven't yet implemented it yet. Finally I've got a random utility function in there, <code>getRandomInt</code>.</p>\n<p>Here's my store state:</p>\n<pre><code class=\"language-js\">state: {\n\tname:'',\n\tport:null,\n\tmoney:100000,\n\tturn:0,\n\tholdSize:100,\n\thold:[],\n\tprices: [],\n\tdamage:0,\n\trandomMessage:'',\n\tnewPortIndex:null\n},\n</code></pre>\n<p>Most of this is self explanatory, but note that the last two items, <code>randomMessage</code> and <code>newPortIndex</code>, are only used for the special events that happen when you travel.</p>\n<p>Now let's look at the various mutations. First up is <code>bootstrap</code>, which simply sets up things for a new game.</p>\n<pre><code class=\"language-js\">bootstrap(state) {\n\tstate.port = PORTS[0];\n\tGOODS.forEach(g =&gt; {\n\tstate.hold.push({name:g.name, quantity: 0});\n\t});\n},\n</code></pre>\n<p>Next is my special event handling:</p>\n<pre><code class=\"language-js\">/*\nA random event is one of the following:\n\tNothing (ie nothing happened, no event\n\tStorm sends you to X port\n\tStorm damages you Y percentage points\n\tPirates attack - steal items + Y damage\n\nAlso note we skip random events for the first ten turns or so\n\n*/\ngenerateRandomEvent(state, info) {\n\tstate.randomMessage = '';\n\tstate.offerUpgrade = false;\n\n\tif(state.turn &lt; 10) return;\n\n\tlet rand = getRandomInt(0, 100);\n\n\t//nothing\n\tif(rand &lt; 60) return;\n\n\tif(rand &gt;= 60 &amp;&amp; rand &lt; 70) {\n\t\tconsole.log('storm redirection');\n\t\tlet newPort = null;\n\n\t\twhile(!newPort || newPort.name === info.destination.name) {\n\t\t\tstate.newPortIndex = getRandomInt(0, PORTS.length);\n\t\t\tnewPort = PORTS[state.newPortIndex];\n\t\t}\n\t\tstate.randomMessage = 'A storm has blown you off course to ' + newPort.name;\n\t\tconsole.log(state.randomMessage);\n\t}\n\n\tif(rand &gt;= 70 &amp;&amp; rand &lt; 80) {\n\t\tlet damage = getRandomInt(1, 12);\n\t\tconsole.log('Storm damages you for '+damage);\n\t\tstate.randomMessage = 'A violent storm damages your ship!';\n\t\tstate.damage += damage;\n\t}\n\n\tif(rand &gt;= 80 &amp;&amp; rand &lt; 90) {\n\t\t//note, if your hold is empty, we ignore everything;\n\t\t//now get the hold and filter to items with stuff\n\t\tlet heldItems = state.hold.filter(h =&gt; {\n\t\t\treturn h.quantity &gt; 0;\n\t\t});\n\t\tif(heldItems.length === 0) return;\n\n\t\tconsole.log('pirates attack and damage and steal shit');\n\t\t//first, do damange, bit less than storm to be nice\n\t\tlet damage = getRandomInt(1, 7);\n\t\tconsole.log('Storm damages you for ' + damage);\n\n\t\tconsole.log('state.hold with items',JSON.stringify(heldItems));\n\t\t//select the index to steal\n\t\tlet stealIndex = getRandomInt(0, heldItems.length);\n\t\tconsole.log('going to steal from '+JSON.stringify(heldItems[stealIndex]));\n\t\tlet stealAmt = getRandomInt(1, heldItems[stealIndex].quantity + 1);\n\t\tconsole.log('stealing '+stealAmt);\n\t\tlet target = -1;\n\t\tfor(let i=0;i&lt;state.hold.length;i++) {\n\t\t\tif(heldItems[stealIndex].name === state.hold[i].name) target = i;\n\t\t}\n\n\t\tstate.randomMessage = 'Pirates attack your ship and steal some cargo!';\n\t\tstate.damage += damage;\n\t\tstate.hold[target].quantity -= stealAmt;\n\t}\n\n\tif(rand &gt;= 90) {\n\t\tstate.offerUpgrade = true;\n\t}\n\t\n},\n</code></pre>\n<p>As you can see, I basically just pick a random number and based on the result, a few different things can happen. One of them (<code>offerUpgrade</code>) will actually trigger when you arrive at the port, not &quot;in transit&quot;.</p>\n<p>The rest of the mutations are that interesting as the mainly apply goods changes and do repairs or upgrades. In the <code>getters</code> section, I thought these parts were neat.</p>\n<pre><code class=\"language-js\">gameDate(state) {\n\tlet years = Math.floor((state.turn-1)/12);\n\tlet month = (state.turn-1) % 12;\n\treturn `${MONTHS[month]} ${BASE_YEAR + years}`;\n},\n</code></pre>\n<p>The <code>gameDate</code> getter is how I handle showing a date that advances month to month and year to year.</p>\n<pre><code class=\"language-js\">rank(state) {\n\t// your final score is just based on money, cuz life\n\tif(state.money &lt; 10000) return 'Deck Hand';\n\tif(state.money &lt; 50000) return 'Ensign';\n\tif (state.money &lt; 100000) return 'Lieutenant';\n\tif (state.money &lt; 1000000) return 'Commander';\n\t//below is 10 million, just fyi ;)\n\tif (state.money &lt; 10000000) return 'Captain';\n\t//below is 100 million, just fyi ;)\n\tif (state.money &lt; 100000000) return 'Admiral';\n\treturn 'Grand Admiral';\n},\n</code></pre>\n<p>The <code>rank</code> getter simply returns a label based on the money you earned. Note that I used comments there to help me read the large numbers. There's an ES proposal for <a href=\"https://2ality.com/2018/02/numeric-separators.html\">numeric separators</a> that aims to make this easier. So for example, imagine if that last condition was:</p>\n<pre><code>if (state.money &lt; 100_000_000) return 'Admiral';\n</code></pre>\n<p>Unfortunately this is not supported very well yet. The latest Chrome has it, but not Firefox.</p>\n<p>The last interesting bit was handling the cost of ship upgrades:</p>\n<pre><code class=\"language-js\">upgradeCost(state) {\n\t// the cost to upgrade is based on the size of your ship;\n\tlet cost = state.holdSize * 200 * (1 + getRandomInt(5,10)/10);\n\treturn Math.floor(cost);\n}\n</code></pre>\n<p>My goal here was to make it expensive, and progressively so, as you got bigger and bigger. This is something I'd tweak as folks play and provide feedback.</p>\n<p>Anyway, I hope this demo is interesting to folks, and as always, I'm very much open to feedback and critiques of my design decisions! Let me know what you think by leaving me a comment below!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@jcotten?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Joshua J. Cotten</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Starting My New Role at HERE!",
		"date":"Fri Aug 23 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/08/24/starting-my-new-role-at-here",
		"content":"<p>For the past year (ok, nearly a year), I've worked as a Developer Experience engineer at American Express. My work there had me interfacing with product owners to help them present the best developer experience possible. This involved everything from simple documentation improvements to helping work on tools to improve developer facing APIs. While I worked with some great people, the role wasn't a great fit for me. Also, I've had some changes at home (good changes!) that will allow me to have a more public facing role, to spend more time on the road, and generally do what I love - help others.</p>\n<p>Starting on Monday, I'll be a Lead Developer Evangelist for <a href=\"https://www.here.com/\">HERE</a>. HERE works with location services, think mapping, routing, and related technologies. I'll be blogging, making videos, presentations, and so forth. I'll also be looking at our documentation and working to make things better and easier for developers. As a reminder, if you want to see where I'm speaking next, you can view my <a href=\"/speaking\">speaking</a> page and if you would like me to present to your group, just <a href=\"/contact\">drop me a line</a>. I'm really excited about this new phase and I can't wait to share more with you!</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "misc"
            
		]

	},

	{
		"title": "Using Geolocation with Vue.js",
		"date":"Sat Aug 31 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/09/01/using-geolocation-with-vuejs",
		"content":"<p>I decided to spend my lazy Sunday morning working on a quick Vue.js post. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API\">Geolocation</a> is one of the older and simpler APIs you can use with your web browser so this article won't necessarily be that exciting, but I thought a quick demo of the API with Vue, and a few variations, could be useful to folks. As a reminder, web pages that use Geolocation <strong>must</strong> be run on either localhost or an https server. This is a security precaution and... let's be honest - there is <strong>zero</strong> reason to be using a non-secure server in 2019.</p>\n<h2>Example One</h2>\n<p>For the first example, let's build a simple Vue application that will:</p>\n<ul>\n<li>Automatically try to get your location</li>\n<li>Display a &quot;loading&quot; type message while this is happening</li>\n<li>And properly support error conditions.</li>\n</ul>\n<p>First we'll build the front end:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;div v-if=&quot;errorStr&quot;&gt;\n    Sorry, but the following error\n    occurred: {{errorStr}}\n  &lt;/div&gt;\n  \n  &lt;div v-if=&quot;gettingLocation&quot;&gt;\n    &lt;i&gt;Getting your location...&lt;/i&gt;\n  &lt;/div&gt;\n  \n  &lt;div v-if=&quot;location&quot;&gt;\n    Your location data is {{ location.coords.latitude }}, {{ location.coords.longitude}}\n  &lt;/div&gt;\n  \n&lt;/div&gt;\n</code></pre>\n<p>I've got three divs here. The first handles displaying an error. The second is the loading message. And the final div displays our location. Now let's look at the code.</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data:{\n    location:null,\n    gettingLocation: false,\n    errorStr:null\n  },\n  created() {\n    //do we support geolocation\n    if(!(&quot;geolocation&quot; in navigator)) {\n      this.errorStr = 'Geolocation is not available.';\n      return;\n    }\n\n    this.gettingLocation = true;\n    // get position\n    navigator.geolocation.getCurrentPosition(pos =&gt; {\n      this.gettingLocation = false;\n      this.location = pos;\n    }, err =&gt; {\n      this.gettingLocation = false;\n      this.errorStr = err.message;\n    })\n  }\n})\n</code></pre>\n<p>I'm using the <code>created</code> method to start requesting location as soon as the application is ready. I do a quick check to see if the API is supported. After that, I simply use the API. It's all rather simple, but even this code could be improved. You'll notice that my front end is addressing the result as <code>location.coords.latitude</code>. If I know for a fact that I only need latitude and longitude, I could copy those values out. My front end code could then look something like this:</p>\n<pre><code class=\"language-html\">Your location data is {{ latitude }}, {{ longitude}}\n</code></pre>\n<p>That's a bit better in my opinion as the layout code is simpler and not directly tied to knowing that the Geolocation API was used. You can play with this example here:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"ZEzJwZN\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Geolocation 1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/ZEzJwZN/\">\n  Geolocation 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2>Example Two</h2>\n<p>In my next example, I'm going to switch the code so that it doesn't request your location until the user actually needs it. In this case I'm going to use a simple button to kick off that process. Here's the HTML:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n\n  &lt;p&gt;\n    Let us locate you for better results...\n    &lt;button @click=&quot;locateMe&quot;&gt;Get location&lt;/button&gt;\n  &lt;/p&gt;\n  \n  &lt;div v-if=&quot;errorStr&quot;&gt;\n    Sorry, but the following error\n    occurred: {{errorStr}}\n  &lt;/div&gt;\n  \n  &lt;div v-if=&quot;gettingLocation&quot;&gt;\n    &lt;i&gt;Getting your location...&lt;/i&gt;\n  &lt;/div&gt;\n  \n  &lt;div v-if=&quot;location&quot;&gt;\n    Your location data is {{ location.coords.latitude }}, {{ location.coords.longitude}}\n  &lt;/div&gt;\n  \n&lt;/div&gt;\n</code></pre>\n<p>Most of the layout above is the same with the exception of the paragraph and button on top. For the code, I decided to abstract things a bit. The <code>locateMe</code> method referenced by the button will be simpler as I've migrated out the Geolocation stuff. Let's take a look.</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data:{\n    location:null,\n    gettingLocation: false,\n    errorStr:null\n  },\n  methods: {\n    async getLocation() {\n      \n      return new Promise((resolve, reject) =&gt; {\n\n        if(!(&quot;geolocation&quot; in navigator)) {\n          reject(new Error('Geolocation is not available.'));\n        }\n\n        navigator.geolocation.getCurrentPosition(pos =&gt; {\n          resolve(pos);\n        }, err =&gt; {\n          reject(err);\n        });\n\n      });\n    },\n    async locateMe() {\n\n      this.gettingLocation = true;\n      try {\n        this.gettingLocation = false;\n        this.location = await this.getLocation();\n      } catch(e) {\n        this.gettingLocation = false;\n        this.errorStr = e.message;\n      }\n      \n    }\n  }\n})\n</code></pre>\n<p>If you focus on <code>locateMe</code>, you can see it is much simpler. I use <code>async</code> and <code>await</code> to call <code>getLocation</code>. My method handles things like the loading screen and errors, and the result, but the actual mechanism of the location request is now abstracted away. <code>getLocation</code> makes use of a Promise to properly work with <code>async</code> and <code>await</code>, but outside of that it's mostly the same as before.</p>\n<p>You can test this version here:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"jONLdgQ\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Geolocation 2\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/jONLdgQ/\">\n  Geolocation 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2>Option Three</h2>\n<p>For one last example, let's do something fun with the location. Most people can't translate a longitude and latitude into something useful. It would be cooler if we could use reverse geocoding (which is the process of attempting to map a latitude/longitude to a place with a name) to display the user's location in a friendlier name. For this example I'm going to be making use of the <a href=\"https://developer.here.com/signup/geocoding\">Geocoding API</a> by HERE. Disclaimer - I started working for HERE last week so I'm talking about my employers products. This API (and many more) have a free tier so you can play with them all you want!</p>\n<p>The API is rather extensive (you can see the docs <a href=\"https://developer.here.com/documentation/maps/topics/geocoding.html\">here</a>) but I'll focus on the simplest example. To begin, I created a new JavaScript project in my HERE account. This gave me an API key I could then use in my code. I added two HERE JavaScript libraries and then this bit of initialization code:</p>\n<pre><code class=\"language-js\">const platform = new H.service.Platform({\n  'apikey': 'iEnZe8bO68AnNVZEdPpq7hl9UFqiPxTSPjQkLfR3Qcg'\n});\nconst geocoder = platform.getGeocodingService();\n</code></pre>\n<p>Note that you can specify a domain whitelist for your API keys which will make the code above perfectly safe for your public web pages. Once you've configured your geocoder, to do a reverse geocode you can simply do this (pseudo-code):</p>\n<pre><code class=\"language-js\">let reverseGeocodingParameters = {\n    prox: 'Latiude,Longitude', // not literaly that, but the real values\n    mode: 'retrieveAddresses',\n    maxresults: 1\n};\n\ngeocoder.reverseGeocode(\n    reverseGeocodingParameters,\n    res =&gt; {\n        // work with results\n    },\n    e =&gt; reject(e) \n);\n</code></pre>\n<p>Here's the updated JavaScript for <code>getLocation</code>:</p>\n<pre><code class=\"language-js\">async getLocation() {\n    \n    return new Promise((resolve, reject) =&gt; {\n\n    if(!(&quot;geolocation&quot; in navigator)) {\n        reject(new Error('Geolocation is not available.'));\n    }\n\n    navigator.geolocation.getCurrentPosition(pos =&gt; {\n        let reverseGeocodingParameters = {\n            prox: `${pos.coords.latitude},${pos.coords.longitude}`,\n            mode: 'retrieveAddresses',\n            maxresults: 1\n        };\n\n        geocoder.reverseGeocode(\n        reverseGeocodingParameters,\n        res =&gt; {\n            let results = res.Response.View;\n            if(results.length === 0) {\n                resolve('No match.')\n            } else {\n                resolve(results[0].Result[0].Location);\n            }\n        },\n        e =&gt; reject(e) \n        );\n    }, err =&gt; {\n        reject(err);\n    });\n\n    });\n},\n</code></pre>\n<p>For the most part this is just a simple update to the previous example, but do note that when I leave the function, I &quot;dig down&quot; into the Geocoder result to simplify things a bit: <code>resolve(results[0].Result[0].Location);</code></p>\n<p>The HTML now uses this:</p>\n<pre><code class=\"language-html\">&lt;div v-if=&quot;location&quot;&gt;\n    Your location data is {{ location.Address.Label }}\n&lt;/div&gt;\n</code></pre>\n<p>If you remember what I said about Option One, I kind of don't like my HTML having too much knowledge about the data so a nicer solution would probably just store <code>Address.Label</code> to <code>location</code>. You can run this here:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"wvwqOMx\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Geolocation 3\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/wvwqOMx/\">\n  Geolocation 3</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>As always, let me know what you think and ask any questions in the comments below. There's also multiple options for Vue components to simply Geolocation for you. One is <a href=\"https://www.npmjs.com/package/vue-browser-geolocation\">vue-browser-geolocation</a>.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@paulamayphotography?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Paula May</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "A Look at Zeit's Zero Config and Serverless Platform",
		"date":"Thu Sep 05 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/09/06/a-look-at-zeits-zero-config-and-serverless-platform",
		"content":"<p>For a while now my go to service for hosting static sites &quot;for fun&quot; has been <a href=\"https://surge.sh/\">Surge</a>. While I host my blog on\n<a href=\"https://www.netlify.com/\">Netlify</a> and absolutely consider it the &quot;gold standard&quot; for static sites, I try to reserve my usage\nthere for &quot;real&quot; sites, i.e. not things I'm playing around with or temporary examples. I had heard of <a href=\"https://zeit.co/\">Zeit</a> of course and knew of their cool command line deployment, but outside of a few Node.js demos, I hadn't really thought of it.</p>\n<p>Over the past few weeks I've had a chance to dig deeper and have to say I'm incredibly impressed by Zeit, specifically their new zero config and serverless features. I've pretty much decided it will be my new default place for quick ad hoc demos. Let me expand on that and why I'm excited about the service.</p>\n<h3>What is Zero Config?</h3>\n<p>Zero Config (at least in terms of Zeit) simply means you can upload your code in a commonly known format and Zeit knows how to handle it. Want an example? Imagine I scaffold a new Vue application: <code>vue create zeroconfig1</code></p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/z1.png\" alt=\"CLI output\" class=\"imgborder imgcenter\">\n<p>And then <code>cd</code> into the directory and type <code>now</code>:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/z2.png\" alt=\"now upload\" class=\"imgborder imgcenter\">\n<p>And... that's it. Zeit's platform knew how to handle the Vue application, both in terms of how to build it and then how to serve the final result. I did nothing. No config. No special JSON file. Nothing. Obviously this isn't just for Vue but supports, according to them, &quot; any framework or tool you can think of.&quot;</p>\n<p>And yes, the URL in the screen shot above is up and live at <a href=\"https://zeroconfig1.raymondcamden.now.sh/\">https://zeroconfig1.raymondcamden.now.sh/</a>. It isn't that exciting but it took longer to scaffold the application then deploy it. <strong>That's freaking cool.</strong></p>\n<h3>How about that Serverless?</h3>\n<p>Serverless is also zero config too. You add an <code>api</code> folder and then drop in either a TypeScript file, JavaScript file, Go, or Python, and that's it. Given <code>/api/cats.js</code>, you can hit it via the url <code>/api/cats</code>. If you need to install NPM modules, the platform auto parses your <code>package-lock.json</code> file and will install what it needs to. It all works <em>incredibly</em> easy. Consider the simplest example of building a proxy to an API that doesn't support CORS.</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\nmodule.exports = async (req, res) =&gt; {\n\n    const app_id = 'xxxx';\n    const app_code = 'yyyy';\n\n    let response = await fetch(`https://weather.api.here.com//weather/1.0/report.json?app_id=${app_id}&amp;app_code=${app_code}&amp;product=observation&amp;name=Lafayette,LA`)\n    let data = await response.json();\n    res.json(data.observations);\n\n}\n</code></pre>\n<p>I'm making use of HERE's <a href=\"https://developer.here.com/documentation/weather/topics/overview.html\">Weather API</a> to make a hard coded request to the forecast for Lafayette, LA. (You don't need to look at the results. It's hot. It's always hot.)</p>\n<p>To test, I can use the command line to run a local server: <code>now dev</code>. This fires up a local server and I can then hit my API at <code>http://localhost:3000/api/weather</code>. I can then edit, debug, etc, all locally and quickly fine tune the serverless function. I can then deploy with <code>now</code> and... again. I'm done.</p>\n<p>You can see this API here: <a href=\"https://zeroconfig1.raymondcamden.now.sh/api/weather\">https://zeroconfig1.raymondcamden.now.sh/api/weather</a> I hope you can see how great this would be for a Vue (or other frontend framework) app that needs a few back end APIs to support it.</p>\n<p>All in all it's rather painless. I did have a bit of trouble working with secrets. Zeit does support, and document, working with <a href=\"https://zeit.co/docs/v2/serverless-functions/env-and-secrets/\">secrets</a>. You can specify secrets via the CLI with a simple call: <code>now secrets add somename somevalue</code>. However, that isn't enough, and the zero config thing breaks down a bit here.</p>\n<p>In order for your serverless function to get access to secrets, or other environment values, you must create a <code>now.json</code> file that looks like this:</p>\n<pre><code class=\"language-js\">{\n  &quot;env&quot;: {\n    &quot;VARIABLE_NAME&quot;: &quot;@variable-name&quot;\n  }\n}\n</code></pre>\n<p>In this example, <code>VARIABLE_NAME</code> is the name your code will use, not as a global, but for example, <code>process.env.VARIABLE_NAME</code>. The <code>@variable-name</code> is the name of the secret or environment variable.</p>\n<p>Now - stick with me a bit because this tripped me up. I used uppercase secret values in a test and found that my secrets weren't working. Why? The CLI lowercases secret names. I don't know why, and I feel like it's a bug, but if you make a secret named FOO it will be called foo. So my <code>now.json</code> file looks like this:</p>\n<pre><code class=\"language-js\">{\n  &quot;env&quot;: {\n    &quot;FOO&quot;: &quot;@foo&quot;\n  }\n}\n</code></pre>\n<p>Honestly this is my only real complaint. I can't imagine why I'd define a secret I <em>wouldn't</em> want to use and it would be nice if you could skip <code>now.json</code> if you were fine with all the secrets just being available. But it's a minor nit I can live with.</p>\n<p>If you remember, a few weeks ago I <a href=\"https://www.raymondcamden.com/2019/07/01/random-pictures-of-beauty\">blogged</a> about a Twitter bot I wrote to post pictures from the National Park Service. I built this on Azure Functions, and while I like their service, they do not have a 100% free tier. I got my first bill this month (a bit over a dollar) and used this as an excuse to migrate from Azure to Zeit. Ignoring the issue I ran into with case above, the &quot;process&quot; was about five minutes. Zeit doesn't support scheduled tasks so I just made use of <a href=\"https://www.easycron.com/user\">EasyCron</a>, a free service that can hit URLs on schedules.</p>\n<h3>Price Details</h3>\n<p>For folks curious, you can checkout the <a href=\"https://zeit.co/account/plan\">pricing information</a> for what's supported at what tier. Currently they only have Free and Unlimited. For serverless, you're limited to 5000 a day which seems to be more than enough for testing, demos, and the such. The paid plan starts at $0.99 so if you do need to start shelling out money, you're starting at a pretty good place.</p>\n<p>As always, if you're using this, drop me a comment below. I love to hear about real world uses.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@cbarbalis?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Chris Barbalis</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development",
            
                "static sites",
            
                "serverless"
            
		]

	},

	{
		"title": "A National Parks Service API Demo with Vue.js",
		"date":"Sun Sep 08 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/09/09/a-national-parks-service-api-demo-with-vuejs",
		"content":"<p>This weekend I was on the road and had some time to build (yet another) application with Vue.js. I don't think this one necessarily does anything terribly cool. At minimum it was more &quot;exercise&quot; for my Vue muscles and provides another demo I can share with folks. As always though, if you have any suggestions or feedback in general, just let me know. If posts like these <em>aren't</em> helpful, also free free to share!</p>\n<p>Let me start by giving a high level overview of what I built. I'll start with a few screen shots. The initial page shows a list of all fifty states.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/nps1.png\" alt=\"List of 50 States\" class=\"imgborder imgcenter\">\n<p>Selecting a state will then make a call out to the <a href=\"https://www.nps.gov/subjects/digital/nps-data-api.htm\">National Park Systems API</a> to ask for all the parks within that state. I then render them out:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/nps2.png\" alt=\"List of parks\" class=\"imgborder imgcenter\">\n<p>Behind the scenes I'm using the following technologies:</p>\n<ul>\n<li><a href=\"https://vuejs.org/\">Vue.js</a> of course. :)</li>\n<li><a href=\"https://router.vuejs.org/\">Vue Router</a></li>\n<li><a href=\"https://vuex.vuejs.org/\">Vuex</a> to handle calling my API and caching (this is somewhat interesting I think).</li>\n<li><a href=\"https://vuetifyjs.com/en/\">Vuetify</a> for the UI.</li>\n<li><a href=\"https://zeit.co/\">Zeit</a> for my serverless function.</li>\n</ul>\n<p>Before I dig into the code more, you can find the complete repository here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/nps_gallery\">https://github.com/cfjedimaster/vue-demos/tree/master/nps_gallery</a>. You can run the demo here: <a href=\"https://npsgallery.raymondcamden.now.sh/\">https://npsgallery.raymondcamden.now.sh/</a></p>\n<p>Alright, so I'm not going to share anything about the first view of this page. I've got a hard coded list of the 50 states (and abbreviations) I store in my Vuex store and I simply fetch them to render. The only part that was interesting here is that I discovered the <code>&lt;router-link&gt;</code> will correctly handle URL encoding values:</p>\n<pre><code class=\"language-html\">&lt;v-btn color=&quot;teal&quot; width=&quot;100%&quot; :to=&quot;`/state/${state}/${abbr}`&quot;&gt;\n{{state}}\n&lt;/v-btn&gt;\n</code></pre>\n<p>In the link above, note that I can safely use the <code>state</code> value without worry. I should have expected this, but I was happy to see it worked well.</p>\n<p>It's the state view where things get interesting. First, the main view component, which is pretty simple since my complexity lies elsewhere.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n\n  &lt;v-container&gt;\n      &lt;h3&gt;National Parks for {{state}}&lt;/h3&gt;\n\n      &lt;i v-if=&quot;loading&quot;&gt;Please stand by - loading data.&lt;/i&gt;\n\n      &lt;v-row&gt;\n        &lt;v-col cols=&quot;4&quot; v-for=&quot;(park,idx) in parks&quot; :key=&quot;idx&quot;&gt;\n          &lt;Park :park=&quot;park&quot; /&gt;\n        &lt;/v-col&gt;\n      &lt;/v-row&gt;\n  &lt;/v-container&gt;\n\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Park from '../components/Park';\n\nexport default {\n  components: { Park },\n  data() {\n    return {\n      state:'',\n      abbr:''\n    }\n  },\n  computed: {\n    loading() {\n      return !this.parks.length;\n    },\n    parks() {\n      return this.$store.state.selectedParks;\n    }\n  },\n  async created() {\n    // clear selecion\n    this.$store.commit('clearSelection');\n\n    this.state = this.$route.params.state;\n    this.abbr = this.$route.params.abbr;\n    this.$store.dispatch('loadParks', this.abbr);\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>You can see I'm rendering values by binding to a <code>parks</code> variable that comes from my store. You'll notice I'm calling two things in my <code>created</code> related to the store. I first call <code>clearSelection</code> and then <code>loadParks</code>. <code>clearSelection</code> removes any previously loaded parks from the view and <code>loadParks</code> obviously fires off the request to load parks. Let's look at the store now because here is where things get a bit deep.</p>\n<pre><code class=\"language-js\">import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nimport api from './api/nps';\n\nexport default new Vuex.Store({\n  state: {\n    states:{\n      &quot;AL&quot;: &quot;Alabama&quot;,\n\t  // stuff removed here\n      &quot;WY&quot;: &quot;Wyoming&quot;\n    }, \n    parks:{\n\n    },\n    selectedParks:[]\n  },\n  mutations: {\n    cache(state, args) {\n      console.log('storing cache for '+args.abbr+ ' and '+args.parks.length + ' parks');\n      state.parks[args.abbr] = args.parks;\n    },\n    clearSelection(state) {\n      state.selectedParks = [];\n    },\n    select(state, parks) {\n      state.selectedParks = parks\n    }\n  },\n  actions: {\n    async loadParks(context, abbr) {\n      // check the cache\n      if(context.state.parks[abbr]) {\n        console.log('woot a cache exists');\n        context.commit('select', context.state.parks[abbr]);\n      } else {\n        console.log('no cache, sad face');\n        let results = await api.getParks(abbr);\n        context.commit('cache', {abbr:abbr, parks:results});\n        context.commit('select', context.state.parks[abbr]);\n      }\n    }\n  }\n})\n</code></pre>\n<p>So the biggest thing I want to point here is that I'm using the store to wrap calls to my API and as a simple cache. Anytime you ask for parks for state X, I first see if it's cached and if so - return it immediately. Otherwise I make a call out to the API. It's a pretty simple system but I love how it came out, and performance wise it works really.</p>\n<p>The API part is actually two fold. You can see I load in <code>'./api/nps'</code>, which is yet another wrapper:</p>\n<pre><code class=\"language-js\">const NPS_API = '/api/npswrapper';\n\n\nexport default {\n\n    async getParks(state) {\n        return new Promise(async (resolve, reject) =&gt;{\n          let results = await fetch(NPS_API+`?state=${state}`);\n          let parks = await results.json();\n          /*\n            API returns park.images[], we want to change this to park.image to simplify it\n          */\n          let parkData = parks.data.map(p =&gt; {\n            if(p.images &amp;&amp; p.images.length &gt; 0) {\n                p.image = p.images[0].url;\n            }\n            return p;\n          });\n          resolve(parkData);  \n        });\n    }\n\n}\n</code></pre>\n<p>All this does is call my serverless function. The NPS API doesn't support CORS so I need that to handle that aspect. I also do a bit of filtering to ensure we get images back. (Although this doesn't seem to work perfectly - I think some parks have images that 404.) The final bit is the serverless function:</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\nconst NPS_KEY = process.env.NPS_KEY;\n\nmodule.exports = async (req, res) =&gt; {\n\n    let state = req.query.state;\n    let httpResult = await fetch(`https://developer.nps.gov/api/v1/parks?stateCode=${state}&amp;limit=100&amp;fields=images&amp;api_key=${NPS_KEY}`);\n    let results = await httpResult.json();\n    res.json(results);\n\n};\n</code></pre>\n<p>If you want to know more about serverless and Zeit, check out the <a href=\"https://www.raymondcamden.com/2019/09/06/a-look-at-zeits-zero-config-and-serverless-platform\">article</a> I wrote a few days on it.</p>\n<p>Anyway, that's it! As I always say, I'd love some feedback, so leave me a comment below.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@sebastian_unrau?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Sebastian Unrau</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "An iTunes Audio Enabled Search Built in Vue.js",
		"date":"Tue Sep 17 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/09/18/an-itunes-audio-enabled-search-built-in-vuejs",
		"content":"<p><strong>(Before I begin, a quick note. The iTunes API will <i>randomly</i> throw CORS issues, most likely due to a misconfigured server in their network. To use this in production I'd add a serverless proxy. You may, or may not, run into this while testing.)</strong> When I present on Vue.js, one of the demos I show makes use of the <a href=\"https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/\">iTunes Search API</a>. It isn't necessarily that exciting of a demo, and I don't use iTunes very often, but the fact that it has interesting data and does <em>not</em> require a key of any sort makes it a good candidate for simple demos. I thought I'd quickly demonstrate this with Vue.js in the simplest form possible, and then work through some updates to improve the application.</p>\n<h3>Version One</h3>\n<p>In the first version, I'm just going to do a search against the API and render the results in the simplest way possible. I will provide some feedback when the search begins so the user knows what's going on, but that's pretty much. Let's start with the HTML:</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;&lt;/title&gt;\n\t\t&lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;\n\t\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;\n\t\t&lt;style&gt;\n\t\t[v-cloak] {display: none}\n\t\t&lt;/style&gt;\n\t\t&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\n\t\t&lt;div id=&quot;app&quot; v-cloak&gt;\n\t\t\t&lt;input v-model=&quot;term&quot; type=&quot;search&quot;&gt;\n\t\t\t&lt;button @click=&quot;search&quot;&gt;Search&lt;/button&gt;\n\t\t\t&lt;p/&gt;\n\n\t\t\t&lt;div v-for=&quot;result in results&quot; class=&quot;result&quot;&gt;\n\t\t\t\t&lt;img :src=&quot;result.artworkUrl100&quot;&gt;\n\t\t\t\t&lt;b&gt;Artist:&lt;/b&gt; {{result.artistName}}&lt;br/&gt;\n\t\t\t\t&lt;b&gt;Track:&lt;/b&gt; {{result.trackName}}&lt;br/&gt;\n\t\t\t\t&lt;b&gt;Released:&lt;/b&gt; {{result.releaseDate | formatDate}}\n\t\t\t\t&lt;br clear=&quot;left&quot;&gt;\n\t\t\t&lt;/div&gt;\n\n\t\t\t&lt;div v-if=&quot;noResults&quot;&gt;\n\t\t\t\tSorry, but no results were found. I blame Apple.\n\t\t\t&lt;/div&gt;\n\n\t\t\t&lt;div v-if=&quot;searching&quot;&gt;\n\t\t\t\t&lt;i&gt;Searching...&lt;/i&gt;\n\t\t\t&lt;/div&gt;\n\n\t\t&lt;/div&gt;\n\n\t\t&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;\n\t\t&lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>We've got a simple form on top where you enter your terms with a button that will kick off the search. Beneath that are three divs. The first renders the results. I chose to show the artwork, artist, track, and release date. The API returns more information but I figured that was enough. The second div is only shown when no results are returned. The final div is used to indicate that the search is in progress. Now let's look at the JavaScript.</p>\n<pre><code class=\"language-js\">Vue.filter('formatDate', function(d) {\n\tif(!window.Intl) return d;\n\treturn new Intl.DateTimeFormat('en-US').format(new Date(d));\n}); \n\nconst app = new Vue({\n\tel:'#app',\n\tdata:{\n\t\tterm:'',\n\t\tresults:[],\n\t\tnoResults:false,\n\t\tsearching:false\n\t},\n\tmethods:{\n\t\tsearch:function() {\n\t\t\tthis.results = [];\n\t\t\tthis.searching = true;\n\t\t\tfetch(`https://itunes.apple.com/search?term=${encodeURIComponent(this.term)}&amp;limit=10&amp;media=music`)\n\t\t\t.then(res =&gt; res.json())\n\t\t\t.then(res =&gt; {\n\t\t\t\tthis.searching = false;\n\t\t\t\tthis.results = res.results;\n\t\t\t\tthis.noResults = this.results.length === 0;\n\t\t\t});\n\t\t}\n\t}\n});\n</code></pre>\n<p>My code begins by defining a filter <code>formatDate</code> that makes use of the Intl spec. (If this sounds interesting, read the <a href=\"https://vuejsdevelopers.com/2018/03/12/vue-js-filters-internationalization/\">article</a> I wrote on the topic.) The application itself is fairly simple. I've got one method that fires off the request to the API. Note that I'm limiting both the total number of results and the media type to music. When done, I set the results, set the flag for no results, and that's it.</p>\n<p>You can demo this version here: <a href=\"https://cfjedimaster.github.io/vue-demos/itunes-search/ajax-search/\">https://cfjedimaster.github.io/vue-demos/itunes-search/ajax-search/</a>. Try searching for &quot;duran duran&quot; because I said so. ;)</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/vue1.png\" alt=\"Results of searching for Duran Duran\" class=\"imgborder imgcenter\">\n<h3>Version Two</h3>\n<p>The second version is virtually the same, except for the addition of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\">Audio API</a> to play the samples returned by the API. The only thing changed in the HTML is the result view so I'll just share that part:</p>\n<pre><code class=\"language-html\">&lt;div v-for=&quot;result in results&quot; class=&quot;result&quot;&gt;\n\t&lt;img :src=&quot;result.artworkUrl100&quot;&gt;\n\t&lt;b&gt;Artist:&lt;/b&gt; {{result.artistName}}&lt;br/&gt;\n\t&lt;b&gt;Track:&lt;/b&gt; {{result.trackName}}&lt;br/&gt;\n\t&lt;b&gt;Released:&lt;/b&gt; {{result.releaseDate | formatDate}}&lt;br/&gt;\n\t&lt;button @click=&quot;play(result.previewUrl)&quot;&gt;&amp;#9658; Play Sample&lt;/button&gt;\n\t&lt;br clear=&quot;left&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n<p>In the JavaScript, I've added support for the <code>play</code> method. Here's the code:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n\tel:'#app',\n\tdata:{\n\t\tterm:'',\n\t\tresults:[],\n\t\tnoResults:false,\n\t\tsearching:false,\n\t\taudio:null\n\t},\n\tmethods:{\n\t\tsearch:function() {\n\t\t\tif(this.audio) {\n\t\t\t\tthis.audio.pause();\n\t\t\t\tthis.audio.currentTime = 0;\n\t\t\t}\n\t\t\tthis.results = [];\n\t\t\tthis.searching = true;\n\t\t\tfetch(`https://itunes.apple.com/search?term=${encodeURIComponent(this.term)}&amp;limit=10&amp;media=music`)\n\t\t\t.then(res =&gt; res.json())\n\t\t\t.then(res =&gt; {\n\t\t\t\tthis.searching = false;\n\t\t\t\tthis.results = res.results;\n\t\t\t\tthis.noResults = this.results.length === 0;\n\t\t\t});\n\t\t},\n\t\tplay:function(s) {\n\t\t\tif(this.audio) {\n\t\t\t\tthis.audio.pause();\n\t\t\t\tthis.audio.currentTime = 0;\n\t\t\t}\n\t\t\tthis.audio = new Audio(s);\n\t\t\tthis.audio.play();\n\t\t}\n\t}\n});\n</code></pre>\n<p>Note I have an <code>audio</code> object defined in my data. I need a &quot;global&quot; audio object so I can cancel a previous preview if you start a new one. (For fun, disable that logic and then play a bunch of previews at once.) And that's literally it. For this demo you should search for &quot;hatchie&quot;, one of my favorite new bands.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/vue2.png\" alt=\"Demonstrates adding play support to search results\" class=\"imgborder imgcenter\">\n<p>You can demo this here: <a href=\"https://cfjedimaster.github.io/vue-demos/itunes-search/ajax-search-2/\">https://cfjedimaster.github.io/vue-demos/itunes-search/ajax-search-2/</a></p>\n<h3>Version the Third</h3>\n<p>For the third and final version I put some lipstick on the pig and added <a href=\"https://bootstrap-vue.js.org/\">BootstrapVue</a>. As you can guess, this is a Vue component library that wraps the Bootstrap UI project. I didn't do a lot to it, but you can see the result here:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/vue3.png\" alt=\"Nicely styled results\" class=\"imgborder imgcenter\">\n<p>This is my first time using BootstrapVue (well, first time in quite some time), and in general it went ok. I don't like how you have to hunt sometimes to find random properties, for example it took me a while to figure out how to do spacing. (And to be fair, &quot;a while&quot; was maybe two minutes or so.) Since the JavaScript didn't change at all, I'll just show the HTML update.</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;&lt;/title&gt;\n\t\t&lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;\n\t\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;\n\t\t&lt;style&gt;\n\t\t[v-cloak] {display: none}\n\t\t#app {\n\t\t\tpadding-top: 50px;\n\t\t}\n\t\t&lt;/style&gt;\n\t\t&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;//unpkg.com/bootstrap/dist/css/bootstrap.min.css&quot; /&gt;\n\t\t&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.css&quot; /&gt;\n\t\t&lt;script src=&quot;//unpkg.com/vue@latest/dist/vue.min.js&quot;&gt;&lt;/script&gt;\n\t\t&lt;script src=&quot;//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.min.js&quot;&gt;&lt;/script&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\n\t\t&lt;div id=&quot;app&quot; v-cloak&gt;\n\t\t\t&lt;b-container &gt;\n\t\t\t\t\n\t\t\t\t&lt;b-row&gt;\n\t\t\t\t\t&lt;b-col sm=&quot;9&quot;&gt;\n\t\t\t\t\t\t&lt;b-form-input v-model=&quot;term&quot; type=&quot;search&quot;&gt;&lt;/b-form-input&gt;\n\t\t\t\t\t&lt;/b-col&gt;\n\t\t\t\t\t&lt;b-col sm=&quot;3&quot;&gt;\n\t\t\t\t\t\t&lt;b-button @click=&quot;search&quot; block variant=&quot;dark&quot;&gt;Search&lt;/b-button&gt;\n\t\t\t\t\t&lt;/b-col&gt;\n\t\t\t\t&lt;/b-row&gt;\n\n\t\t\t\t&lt;b-row v-if=&quot;searching&quot;&gt;\n\t\t\t\t\t&lt;b-col sm=&quot;12&quot;&gt;\n\t\t\t\t\t\t&lt;i&gt;Searching...&lt;/i&gt;\n\t\t\t\t\t&lt;/b-col&gt;\n\t\t\t\t&lt;/b-row&gt;\n\n\t\t\t\t&lt;b-row&gt;\n\t\t\t\t\t&lt;b-col sm=&quot;3&quot; class=&quot;my-3&quot; v-for=&quot;result in results&quot; class=&quot;result&quot;&gt;\n\t\t\t\t\t\t&lt;b-card :title=&quot;result.trackName&quot;\n\t\t\t\t\t\tclass=&quot;h-100&quot;\n\t\t\t\t\t\timg-top\n\t\t\t\t\t\t:img-src=&quot;result.artworkUrl100&quot;&gt;\n\t\t\t\t\t\t\t&lt;b-card-text&gt;\n\t\t\t\t\t\t\tFrom {{ result.artistName }}, released on {{result.releaseDate | formatDate}}.\n\t\t\t\t\t\t\t&lt;/b-card-text&gt;\n\t\t\t\t\t\t\t&lt;b-button @click=&quot;play(result.previewUrl)&quot; variant=&quot;dark&quot;&gt;&amp;#9658; Play Sample&lt;/b-button&gt;\n\t\t\t\t\t\t&lt;/b-card&gt;\n\t\t\t\t\t&lt;/b-col&gt;\n\t\t\t\t&lt;/b-row&gt;\n\n\t\t\t\t&lt;b-row v-if=&quot;noResults&quot;&gt;\n\t\t\t\t\t&lt;b-col sm=&quot;12&quot;&gt;\n\t\t\t\t\t\tSorry, but no results were found. I blame Apple.\n\t\t\t\t\t&lt;/b-col&gt;\n\t\t\t\t&lt;/b-row&gt;\n\n\t\t\t&lt;/b-container&gt;\n\t\t&lt;/div&gt;\n\n\t\t&lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>You can see I'm loading in various Bootstrap libraries (both JS and CSS) in my head. I've pretty much changed all of my HTML tags into Vue components. I assume most make sense as is, but obviously you can check the <a href=\"https://bootstrap-vue.js.org/docs/\">BootstrapVue docs</a> for more information. (You can ask me too of course!) All in all it was a mostly painless process, but I wish they had more of a dark theme. (They may, but I couldn't find it outside of dark UI elements.)</p>\n<p>You can test this version here: <a href=\"https://cfjedimaster.github.io/vue-demos/itunes-search/ajax-search-3/\">https://cfjedimaster.github.io/vue-demos/itunes-search/ajax-search-3/</a></p>\n<p>Finally, all of the code may be found here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/itunes-search\">https://github.com/cfjedimaster/vue-demos/tree/master/itunes-search</a></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Sending a Notification to Alexa when Netlify Builds Your Site",
		"date":"Thu Sep 19 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/09/20/sending-a-notification-to-alexa-when-netlify-builds-your-site",
		"content":"<p>This will be a quick post and credit for the idea goes to <a href=\"https://twitter.com/gigastacey/\">Stacey Higgenbotham</a> and her post from last year, <a href=\"https://staceyoniot.com/how-to-trigger-custom-alexa-notifications-from-a-smart-home-event/\">&quot;How to trigger custom Alexa notifications from a smart home event&quot;</a>.</p>\n<p>In her post, she describes how to use the <a href=\"https://www.amazon.com/Thomptronics-Notify-Me/dp/B07BB2FYFS/ref=sr_1_1\">Notify Me</a> skill on Alexa to allow for custom notifications. When you add the &quot;Notify Me&quot; skill to Alexa, you get an email with a unique access code. You can then head over to the web site, <a href=\"https://www.thomptronics.com/about/notify-me\">https://www.thomptronics.com/about/notify-me</a>, and check out the docs. At the simplest level, you can just hit a URL like so:</p>\n<p>https://api.notifymyecho.com/v1/NotifyMe?notification=Hello%20World!&amp;accessCode=ACCESS_CODE</p>\n<p>That's the entire API, seriously. You can pass an additional title attribute and the API is flexible in terms of accepting GET, POST, or PUT. Here's an example of how it looks on my Echo Spot.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/notification1.png\" alt=\"Example of Alexa notification being shown\" class=\"imgborder imgcenter\">\n<p>In this case, the text of the notification is not visible, just the title, but if I ask her for my notifications, I'll hear the full text.</p>\n<p>Given that you've enabled the skill and gotten your access code, then how would you set it up to get notifications on builds?</p>\n<p>Log in to Netlify, go to your site, Settings, &quot;Build &amp; deploy&quot;, and then finally &quot;Deploy notifications&quot;:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/notification2.png\" alt=\"Netlify's list of notifications\" class=\"imgborder imgcenter\">\n<p>Click the &quot;Add notification&quot; button and select &quot;Outgoing webhook&quot;:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/notification3.png\" alt=\"Menu for notification optins\" class=\"imgborder imgcenter\">\n<p>First figure out what you want to be notified on, most likely &quot;Deploy succeeded&quot;, and in the URL enter the URL in the form I shared above. Perhaps something like this:</p>\n<pre><code>https://api.notifymyecho.com/v1/NotifyMe?notification=Build%20Done&amp;title=Build%20Done!&amp;accessCode=ACCESS_CODE\n</code></pre>\n<p>Remember that only the title will be visible, but you could include more information in the notification part to provide context, perhaps the name of the site that was deployed.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/notification4.png\" alt=\"Example webhook value\" class=\"imgborder imgcenter\">\n<p>And that's it! If you want you can go to the &quot;Deploys&quot; menu and hit &quot;Trigger deploy&quot; to force a new build. I wish there was a bit more control over the UI of the notification, but for a free service I'll take it.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@prateekkatyal?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Prateek Katyal</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Using OAuth and Vue.js to Build an Untappd Stats Page",
		"date":"Fri Sep 27 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/09/28/using-oauth-and-vuejs-to-build-an-untappd-stats-page",
		"content":"<p>Every now and then I try to remember to remind folks - I hope that my readers assume when I share stuff like this that I'm sharing as I learn. This is my first time doing anything with OAuth and Vue.js so most likely there's ways to do it better. As always, I <em>strongly</em> encourage my readers to leave me a comment below if they have any suggestions whatsoever. I wanted to build something with Vue.js that would use OAuth to talk to a service. At the same time, I also wanted to do something with <a href=\"https://untappd.com\">Untappd</a>. Untappd is a &quot;social network&quot; type app for beer drinkers. I pretty much ignore the &quot;social&quot; aspect and just use it to record the unique beers I drink. Whenever I try a new beer I'll record and rate it in the app.</p>\n<p>I've been a member of the site since March of 2011. It was also one of the first popular apps built using Cordova/PhoneGap. I've known for a while now that they've got an API and I thought it would be kind of neat to build a &quot;stats&quot; page using their service. Now to be clear, they already <em>have</em> stats available. You can go pretty deep at my profile page: <a href=\"https://untappd.com/user/cfjedimaster\">https://untappd.com/user/cfjedimaster</a>. And if you support the site you get even more stats. But of course, I didn't let that stop me from building something that I thought would give me more experience with Vue, and as I said, try to work with OAuth.</p>\n<p>To begin, I read over the <a href=\"https://untappd.com/api/dashboard\">API documentation</a> and created my application. Authentication with the API works like so:</p>\n<ol>\n<li>You link the user to an endpoint on Untappd.</li>\n<li>The user will be prompted to login there.</li>\n<li>The user is redirected back to your site, where you will use server-side code to fetch an access token.</li>\n<li>You can then use the access token to make authenticated requests to the API.</li>\n</ol>\n<p>Nothing too crazy, but obviously step three there requires a hybrid solution, you can't do it all in Vue.js. I decided to use the simple serverless functionality provided by <a href=\"https://zeit.co/home\">Zeit</a> (see my <a href=\"https://www.raymondcamden.com/2019/09/06/a-look-at-zeits-zero-config-and-serverless-platform\">blog post</a> in it earlier this month) as a way to handle that aspect.</p>\n<p>For my stats, and again, most of this is on the site, I decided to show the following:</p>\n<ul>\n<li>Total number of unique beers.</li>\n<li>Total number of checkins (I don't usually checkin a beer I've already recorded).</li>\n<li>Average ABV, IBU of my beers.</li>\n<li>My average rating.</li>\n<li>My favorite and least favorite beers.</li>\n<li>My favorite styles by number of checkins. I could have also done it by average rating and that would be better, but I kept it simple for now. (For folks curious, my truly favorite style is Märzen.)</li>\n</ul>\n<p>Here's the initial screen prompting you to login:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/u1.png\" alt=\"Initial screen\" class=\"imgborder imgcenter\">\n<p>After clicking the login screen, you'll be prompted to login over at Untappd:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/u2.jpg\" alt=\"Untappd login\" class=\"imgborder imgcenter\">\n<p>Back on my site, I use the API to get your checkins and then render some lovely stats:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/09/u3.jpg\" alt=\"Stats view\" class=\"imgborder imgcenter\">\n<p>OK, so let's look at the code. Before I begin, note that you can find the entire codebase here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/untappd\">https://github.com/cfjedimaster/vue-demos/tree/master/untappd</a>.</p>\n<p>The initial state of the application assumes you are not logged in. I'll show in a bit how we detect that but here's the HTML for the login button:</p>\n<pre><code class=\"language-html\">&lt;b-button @click=&quot;login&quot; v-if=&quot;showLogin&quot; variant=&quot;success&quot; size=&quot;lg&quot;&gt;Login via Untappd&lt;/button-b&gt;\n</code></pre>\n<p>You'll note that I'm using <a href=\"https://bootstrap-vue.js.org/\">BootstrapVue</a> again. Here's the login method:</p>\n<pre><code class=\"language-js\">login() {\n\tlet redirect_url = 'https://untappd.raymondcamden.now.sh/api/auth';\n\tlet url = `https://untappd.com/oauth/authenticate/?client_id=${CLIENTID}&amp;response_type=code&amp;redirect_url=${redirect_url}`;\n\tdocument.location.href = url;\n},\n</code></pre>\n<p>Untappd requires me to pass a <code>redirect_url</code> which is where, as you can guess, the user will be redirected to after logging in. This points to the serverless function I wrote. My <code>CLIENTID</code> value is from the application I created and is safe to use here in client-side code. Once redirected to Untappd and then returned, they hit my serverless function, auth.js:</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\nmodule.exports = async (req, res) =&gt; {\n\n\tconst CLIENTID = process.env.UT_CLIENTID;\n\tconst CLIENTSECRET = process.env.UT_CLIENTSECRET;\n\tconst REDIRECT_URL = process.env.UT_REDIRECT_URL;\n\n\tlet code = req.query.code;\n\t\n\tlet response = await fetch(`https://untappd.com/oauth/authorize/?client_id=${CLIENTID}&amp;client_secret=${CLIENTSECRET}&amp;response_type=code&amp;redirect_url=${REDIRECT_URL}&amp;code=${code}`);\n\tlet data = await response.json();\n\tres.writeHead(302, { Location: '/#access_token='+data.response.access_token });\n\tres.end();\n\n}\n</code></pre>\n<p>Pretty small, right? Untappd sends me a code. I use that code, my <code>CLIENTID</code> and <code>CLIENTSECRET</code> values to then request an access token value. When I have that, I redirect the user back to the Vue app with the token in the URL hash. Back in the Vue app, my <code>created</code> handler picks up on it:</p>\n<pre><code class=\"language-js\">async created() {\n\tif(document.location.hash &amp;&amp; document.location.hash.indexOf('access_token') &gt;= 0) {\n\t\tthis.access_token = document.location.hash.split('=')[1];\n\t\tthis.showLogin = false;\n\t\tthis.showStats = true;\n\t\tawait this.getBeers();\n\t\tthis.prepareBeers();\n\t}\n},\n</code></pre>\n<p>Now we get down to business. Untappd has an API limit of 100 calls per hour per user. The most beers I can get in one API call is 50. So I wrote functionality to:</p>\n<ul>\n<li>Get 50 beers at a time, to a max of 90 calls (4500 beers)</li>\n<li>Cache the results for one hour using LocalStorage.</li>\n</ul>\n<p>Let's take a look at this code.</p>\n<pre><code class=\"language-js\">async getBeers() {\n\t\n\t/*\n\tUntappd has kinda tight limits on API calls so we need to cache.\n\t*/\n\n\tconsole.log('get mah beers!');\n\tlet beers = [];\n\tlet profile = {};\n\n\tif(!this.hasCache()) {\n\n\t\t// get my info first\n\t\tlet meRequest = await fetch(API + `user/info?access_token=${this.access_token}`);\n\t\tlet profileData = await meRequest.json();\n\t\tprofile = profileData.response.user;\n\n\t\tlet hasMore = true;\n\t\t// x is used as a sanity check and to keep us under the limit of 100. I use 90 so I have some wiggle room\n\t\tlet x = 0;\n\t\tlet rootUrl = API + `user/beers/?access_token=${this.access_token}&amp;limit=50`;\n\t\tlet thisUrl = rootUrl;\n\t\twhile(hasMore &amp;&amp; x &lt; 90) {\n\t\t\tconsole.log(thisUrl);\n\t\t\tlet result = await fetch(thisUrl);\n\t\t\tlet data = await result.json();\n\t\t\tbeers = beers.concat(data.response.beers.items);\n\t\t\tif(data.response.pagination.next_url &amp;&amp; data.response.pagination.next_url !== '') { \n\t\t\t\tthisUrl = rootUrl + `&amp;offset=${data.response.pagination.offset}`;\n\t\t\t} else {\n\t\t\t\thasMore = false;\n\t\t\t}\n\t\t\tx++;\n\t\t}\n\t\tconsole.log('all done');\n\t\tthis.setCache(beers, profile);\n\t} else {\n\t\tconsole.log('got from cache');\n\t\tlet cache = this.getCache();\n\t\tbeers = cache.beers; \n\t\tprofile = cache.profile;\n\t}\n\tconsole.log('ready for next');\n\tthis.beers = beers;\n\tthis.profile = profile;\n\tthis.showLoading = false;\n},\nhasCache() {\n\tlet cache = localStorage.getItem(CACHE_KEY);\n\tif(!cache) return false;\n\tlet cache_ts = localStorage.getItem(CACHE_KEY_TS);\n\tif(!cache_ts) return false;\n\tlet duration = new Date().getTime() - cache_ts;\n\treturn duration &lt; CACHE_MAX;\n},\ngetCache() {\n\treturn JSON.parse(localStorage.getItem(CACHE_KEY));\n},\nsetCache(beers, profile) {\n\tlocalStorage.setItem(CACHE_KEY, JSON.stringify({beers, profile}));\n\tlocalStorage.setItem(CACHE_KEY_TS, new Date().getTime());\n},\n</code></pre>\n<p>I begin by seeing if I have cached information. You can see that logic in <code>hasCache</code> and <code>getCache</code>. Typically I wouldn't store a large blob of JSON in LocalStorage, but IndexDB felt a bit too heavy for this. Feel free to argue with me about this! If I don't have a cache, I start off by first getting the user profile. Then I start getting your beers. This is done in a loop to handle pagination. I use the simple named <code>x</code> variable as my way of ensuring I stay within API limits. And yes, I screwed this up multiple times.</p>\n<p>Once I've got all the data, I have another method that prepares this data for rendering.</p>\n<pre><code class=\"language-js\">prepareBeers() {\n\tconsole.log('Im now going to do some data massaging so we can render');\n\tthis.$set(this.stats, 'totalUnique', this.beers.length);\n\n\tlet myStyles = {};\n\tfor(let i=0;i &lt; this.beers.length; i++) {\n\n\t\tlet beerCheckin = this.beers[i];\n\t\tthis.$set(this.stats, 'totalRating', this.stats.totalRating += beerCheckin.user_auth_rating_score);\n\t\tthis.$set(this.stats, 'totalAbv', this.stats.totalAbv += beerCheckin.beer.beer_abv);\n\t\tthis.$set(this.stats, 'totalIbu', this.stats.totalIbu += beerCheckin.beer.beer_ibu);\n\n\t\tif(!myStyles[beerCheckin.beer.beer_style]) myStyles[beerCheckin.beer.beer_style] = 0;\n\t\tmyStyles[beerCheckin.beer.beer_style]++;\n\t}\n\n\t// do averages\n\tthis.$set(this.stats, 'avgRating', this.stats.totalRating / this.stats.totalUnique);\n\tthis.$set(this.stats, 'avgAbv', this.stats.totalAbv / this.stats.totalUnique);\n\tthis.$set(this.stats, 'avgIbu', this.stats.totalIbu / this.stats.totalUnique);\n\n\tthis.topBeers = this.beers.sort((a, b) =&gt; {\n\t\tif(a.user_auth_rating_score &gt; b.user_auth_rating_score) return -1;\n\t\tif(a.user_auth_rating_score &lt; b.user_auth_rating_score) return 1;\n\t\treturn 0;\n\t}).slice(0,10)\n\t.map(b =&gt; {\n\t\treturn this.mapBeer(b);\n\t});\n\n\t/*\n\tFiltering zeros as I think those are false positives\n\t*/ \n\tthis.worstBeers = this.beers.filter(b =&gt; {\n\t\treturn b.user_auth_rating_score !=0;\n\t})            \n\t.sort((a, b) =&gt; {\n\t\tif(a.user_auth_rating_score &gt; b.user_auth_rating_score) return 1;\n\t\tif(a.user_auth_rating_score &lt; b.user_auth_rating_score) return -1;\n\t\treturn 0;\n\t}).slice(0,10)\n\t.map(b =&gt; {\n\t\treturn this.mapBeer(b);\n\t});\n\n\t// Convert my hash into an array of objects\n\tlet stylesArray = [];\n\tfor(let key in myStyles) {\n\t\tstylesArray.push({name:key, value:myStyles[key]});\n\t}\n\n\tstylesArray = stylesArray.sort((a, b) =&gt; {\n\t\tif(a.value &lt; b.value) return 1;\n\t\tif(a.value &gt; b.value) return -1;\n\t\treturn 0;\n\t}).slice(0,20);\n\tthis.styles = stylesArray;\n\n},\n</code></pre>\n<p>This is mostly boring things like getting averages and sorting and stuff. The only part really fun for me was using array methods in chain to filter and sort and the like.</p>\n<p>And that's it. If you want to try it (although if you don't use Untappd it won't work too well for you), simply go to <a href=\"https://untappd.raymondcamden.now.sh\">https://untappd.raymondcamden.now.sh</a>. Let me know what you think!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@christinhumephoto?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Christin Hume</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building a Netlify Stats Viewer in Vue.js",
		"date":"Fri Oct 04 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/10/05/building-a-netlify-stats-viewer-in-vuejs",
		"content":"<p>I'm in somewhat of a &quot;stats building&quot; mood lately as this is my second (see last month's post on building a <a href=\"https://www.raymondcamden.com/2019/09/28/using-oauth-and-vuejs-to-build-an-untappd-stats-page\">stats page for Untappd</a>) post on the same topic. For today's demo I'm building a stats viewer for Netlify's cool Analytics feature. (You can read <a href=\"https://www.raymondcamden.com/2019/07/12/netlify-analytics-an-initial-look\">my review</a> of the feature from when it launched.) This particular demo actually has <em>less</em> stats than Netlify but it does have a cool feature they don't support yet - changing the date range.</p>\n<p>If you want to check out the code, you can find it up on GitHub: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/netlify-stats\">https://github.com/cfjedimaster/vue-demos/tree/master/netlify-stats</a>.</p>\n<p>The Vue application makes use of the following parts:</p>\n<ul>\n<li>Vuex - nothing special here really.</li>\n<li>Vue Router - I made use of my first navigation guard here.</li>\n<li>vue-chartjs - I just made one chart so it's not terribly deep integration.</li>\n<li>BootstrapVue - I made use of their dynamic table stuff which was pretty cool.</li>\n<li>And of course, <a href=\"https://www.netlify.com/docs/api/\">Netlify's API</a>.</li>\n</ul>\n<p>I'm not going to share all of the code in the blog post as you can read it yourself at the repo, but I'd like to call out a few things. Here's a screen shot so you can see how it looks with my site.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/10/nstats.jpg\" alt=\"Demo output\" class=\"imgborder imgcenter\">\n<h2>OAuth Flow</h2>\n<p>Like my last demo, I make use of Netlify's OAuth flow so I can make calls to the API with your data. For the most part this was simple except for a few hiccups. First off, when you define your application in Netlify's administrator (this is done in your profile settings as it isn't site specific), the redirect URL is listed as optional. That is not the case. I could never get it to work when leaving it blank and passing it in my application. Maybe I did something wrong, but you want to keep it in mind.</p>\n<p>My OAuth flow begins with a button. When you click it, I fire off this method:</p>\n<pre><code class=\"language-js\">login() {\n\tlet url = netlify.getUrl(this.$store.state.clientId);\n\tdocument.location.href = url;\n}\n</code></pre>\n<p>My Vuex store has my clientID value, hard coded, and I pass this to my Netlify API library to have it generate a URL. Here's that method:</p>\n<pre><code class=\"language-js\">getUrl(clientid) {\n\tlet redirect_url = window.location.href + 'callback';\n\tlet url = `https://app.netlify.com/authorize?client_id=${clientid}&amp;response_type=token&amp;redirect_uri=${redirect_url}`;\n\treturn url;\n},\n</code></pre>\n<p>Note the hard coded <code>callback</code> path. That's built in my <code>Callback.vue</code> file and all it does is store the access token returned by Netlify:</p>\n<pre><code class=\"language-js\">created() {\nif(document.location.hash &amp;&amp; document.location.hash.indexOf('access_token') &gt;= 0) {\n\tlet access_token = document.location.hash.split('=')[1].split('&amp;')[0];\n\tthis.$store.commit('storeToken', access_token);\n\tthis.$router.replace('sites');\n}\n}\n</code></pre>\n<h2>Displaying Your Sites</h2>\n<p>The Sites view of my application first asks for your sites via the API and then filters it to sites using the Analytics feature. Remember that this is a paid feature so your sites won't have it by default. This is how it's called:</p>\n<pre><code class=\"language-js\">async created() {\n\tlet sites = await netlify.getSites(this.$store.state.token);\n\tthis.sites = sites.filter(s =&gt; {\n\t\treturn typeof s.capabilities.analytics !== 'undefined';\n\t});\n},\n</code></pre>\n<p>And here's the Netlify call being made:</p>\n<pre><code class=\"language-js\">async getSites(token) {\n\n\tlet url = `https://api.netlify.com/api/v1/sites`;\n\tlet response = await fetch(url,{ \n\t\theaders: new Headers({\n\t\t\t'Authorization': 'Bearer '+ token, \n\t\t})\n\t});\n\treturn await response.json();\n\n},\n</code></pre>\n<p>I render the sites using Bootstrap Cards. I've only got one so it isn't too exciting:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/10/nsites.png\" alt=\"Sites rendered as cards\" class=\"imgborder imgcenter\">\n<p>Currently I don't handle the &quot;you have no available sites&quot; option but I'd gladly take a PR adding it. To give you an idea of how Bootstrap handles the cards, here's the source of that part of the view.</p>\n<pre><code class=\"language-html\">&lt;b-container&gt;\n\t&lt;b-row&gt;\n\t\t&lt;b-col cols=&quot;4&quot;&gt;\n\t\t\t&lt;b-card\n\t\t\t\tv-for=&quot;site in sites&quot;\n\t\t\t\t:key=&quot;site.id&quot;\n\t\t\t\t:title=&quot;site.name&quot;\n\t\t\t\t:img-src=&quot;site.screenshot_url&quot;\n\t\t\t\timg-top\n\t\t\t\tclass=&quot;mb-2&quot;\n\t\t\t\t&gt;\n\t\t\t\t\n\t\t\t\t&lt;b-card-text&gt;\n\t\t\t\t\t{{ site.ssl_url }}\n\t\t\t\t&lt;/b-card-text&gt;\n\n\t\t\t\t&lt;b-button @click=&quot;select(site)&quot; variant=&quot;primary&quot;&gt;Select&lt;/b-button&gt;\n\t\t\t&lt;/b-card&gt;\n\t\t&lt;/b-col&gt;\n\t&lt;/b-row&gt;\n&lt;/b-container&gt;\n</code></pre>\n<h3>The Analytics</h3>\n<p>Alright, now for the fun part. As I said, my analytics are pretty limited, I mainly wanted to handle date filters. I report on three things:</p>\n<ul>\n<li>Page views</li>\n<li>Top pages</li>\n<li>Top sources</li>\n</ul>\n<p>Currently the Netlify Analytics API is <em>not</em> documented, but if you use devtools while on their site you can clearly see the calls being made. Each endpoint had a pretty simple API where you could pass a max count where it made sense and use date values (as times since epoch) for filtering. So here's those calls:</p>\n<pre><code class=\"language-js\">async getPages(token, site, from, to) {\n\n\tlet url = `https://analytics.services.netlify.com/v1/${site}/pages?from=${from}&amp;to=${to}&amp;timezone=-0500&amp;limit=15`;\n\tlet response = await fetch(url,{ \n\t\theaders: new Headers({\n\t\t\t'Authorization': 'Bearer '+ token, \n\t\t})\n\t});\n\tlet result = await response.json();\n\treturn result.data;\n},\n\nasync getPageViews(token, site, from, to) {\n\n\tlet url = `https://analytics.services.netlify.com/v1/${site}/pageviews?from=${from}&amp;to=${to}&amp;timezone=-0500&amp;limit=15`;\n\tlet response = await fetch(url,{ \n\t\theaders: new Headers({\n\t\t\t'Authorization': 'Bearer '+ token, \n\t\t})\n\t});\n\tlet result = await response.json();\n\tlet data = result.data.map(i =&gt; {\n\t\treturn {\n\t\t\tdate:i[0],\n\t\t\tviews:i[1]\n\t\t};\n\t});\n\treturn data;\n},\n\nasync getSources(token, site, from, to) {\n\n\tlet url = `https://analytics.services.netlify.com/v1/${site}/sources?from=${from}&amp;to=${to}&amp;timezone=-0500&amp;limit=15`;\n\tlet response = await fetch(url,{ \n\t\theaders: new Headers({\n\t\t\t'Authorization': 'Bearer '+ token, \n\t\t})\n\t});\n\tlet result = await response.json();\n\treturn result.data;\n}\n</code></pre>\n<p>Each one is pretty darn similar. I only do some mapping in <code>getPageViews</code> as I didn't like the original shape of the result.</p>\n<p>For page views I made use of a Vue wrapper for ChartJS. The docs were a bit weird at times, but I got it working. To be honest I definitely need to use it a heck of a lot more to be comfortable with it, but I loved the result. The other two reports make use of <a href=\"https://bootstrap-vue.js.org/docs/components/table/\">BootstrapVue tables</a> which support binding to data. Last time I had used their &quot;simple&quot; table but I really like how well the more advanced ones did things. Column customization is powerful, but I don't think I 100% understand how they work. Here's one example.</p>\n<pre><code class=\"language-html\">&lt;b-table :items=&quot;pages&quot; striped hover :fields=&quot;pagesFields&quot;&gt;\n\t&lt;template v-slot:cell(path)=&quot;data&quot;&gt;\n\t\t&lt;a :href=&quot;data.item.link&quot; target=&quot;_new&quot;&gt;{{ data.item.path}}&lt;/a&gt;\n\t&lt;/template&gt;\n\t&lt;template v-slot:cell(count)=&quot;data&quot;&gt;\n\t\t{{ data.item.count | num }}\n\t&lt;/template&gt;\n&lt;/b-table&gt;\n</code></pre>\n<p>To be clear, I only needed the customizations to get links in my first column and formatting in my second. There may be simpler ways of doing this.</p>\n<h3>The Navigation Guard</h3>\n<p>The final bit was handling cases where you reload and have <em>not</em> logged in yet. I did this using a navigation guard, one of the more advanced features of the Vue Router, although it was pretty easy to use:</p>\n<pre><code class=\"language-js\">router.beforeEach((to, from, next) =&gt; {\n  if(!store.state.token &amp;&amp;\n    (to.name === 'analytics' || to.name === 'sites')) {\n      next('/');\n  }\n  next();\n});\n</code></pre>\n<p>I could have done the <code>to.name</code> part easier with route metadata. I'll do that next time. :)</p>\n<p>And that's really it. You are absolutely welcome to try the online version, but obviously it will only work if you are a Netlify user and have sites with analytics.</p>\n<p><a href=\"https://netlify-stats.raymondcamden.now.sh/\">https://netlify-stats.raymondcamden.now.sh/</a></p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@wirhabenzeit?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Dominik Schröder</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Why I'm Digging Eleventy",
		"date":"Fri Oct 11 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/10/12/why-im-digging-eleventy",
		"content":"<p>It's been quiet around here lately and for that I apologize. Between the new job and a bunch of trips and presentations, I've not had much time for exploration. Next week I'm giving a presentation at connect.tech on static sites (<a href=\"https://connect.tech/session/?id=4290\">The Platform Formally Known as Static</a>). It's been a while since I presented on static sites (the JAMStack) so I've been updating my slide deck in preparation. When I present on the JAMStack, I typically focus on one particular engine to give folks a &quot;feel&quot; for what it's like to work with static sites. On a whim, I decided I'd give <a href=\"https://www.11ty.io/\">Eleventy</a> a try. I've been hearing about it for a while and thought it would be nice to do a bit of research.</p>\n<p>One of the things I've found is that I either <em>love</em> a static site generator or <em>hate</em> it. These apps tend to be very opinionated about how they do things and if you don't like their opinion then it's not fun to work with them. I love the JAMStack but there's only a few generators that I enjoy working with.</p>\n<p>While it's still rather early (I've been looking at Eleventy for a grand total of about three days), I'm absolutely blown away by Eleventy. Why?</p>\n<h3>Built on Node</h3>\n<p>My current favorite generator is <a href=\"https://jekyllrb.com/\">Jekyll</a>. I really like it. However it's built on Ruby and getting it to work on Windows has been, at times, hellish. I've got nothing against Ruby in general, but it's not a platform I'm familiar with and I've never worked with the SDK before. I got a new laptop about two months ago and I was <em>dreading</em> getting Jekyll up and running on it. I knew once I did I'd be fine, but I was not looking forward to the process.</p>\n<p>To be fair, it actually went OK. The main issue I had was that Jekyll 4 came out recently and upgrading caused me a bit of trouble. (Maybe 1-2 hours of work, so not really <em>that</em> bad.) Also, you don't need to know Ruby at all to be successful with Jekyll. I've written one custom plugin for Jekyll in the year I've used it, but outside of that, the Ruby language isn't a concern for me.</p>\n<p>That being said, the fact that Eleventy is built on Node is a big plus for me. It's a platform I know well, I'm comfortable with, and know will work reasonably well on any platform, even my &quot;Linux on Windows&quot; platform with WSL.</p>\n<h3>Multiple Template Languages</h3>\n<p>I enjoy working with template languages, some more than others. Eleventy gives you 11 (oh my god, I just noticed that) different <a href=\"https://www.11ty.io/docs/languages/\">templating options</a>. That's a huge amount of variety and you can pick the one that works best for you. For example, they support Handlebars, and while I like Handlebars, it can be a bit too strict at times for me. It also supports Liquid, which is the template language Jekyll uses, so I can re-use my existing skills.</p>\n<p>You're also free to mix and match languages as you see fit. So for example, you can use Markdown (which also lets you use Liquid inside it) for content and then Liquid for your layouts.</p>\n<h3>Simple</h3>\n<p>While there is a huge amount of customization and power behind Eleventy, it is also incredibly easy to get started with. You can take one markdown file, run the CLI, and get an HTML file out. If you aren't worried about layouts or other features, you can take source files and immediately generate HTML output. The default behavior of Eleventy covers most use cases but you also have deep <a href=\"https://www.11ty.io/docs/config/\">configuration</a> options for tweaking how it behaves.</p>\n<h3>Customizable to the Extreme</h3>\n<p>As stated above, there's a rich configuration API to modify how Eleventy behaves. The part that I think is really need is how Eleventy provides hooks into the various template languages. Things like Handlbars helpers for example. In a typical Node.js application, you would load in Handlebars, add your helpers, and get to work. Because Eleventy loads up the engines for you behind the scenes, that isn't an option. Instead, they provide an API to directly add stuff (like helpers, and more) to your engine.</p>\n<p>So pretend I'm using Handlebars and want to build an uppercase helper to use for the following template.</p>\n<pre><code class=\"language-html\">---\nname: ray\n---\n\nHello {{ upper name }}\n</code></pre>\n<p>To make this work, I'd add a <code>.eleventy.js</code> file in the root of my folder, and then use the following:</p>\n<pre><code class=\"language-js\">module.exports = function(eleventyConfig) {\n\n\televentyConfig.addHandlebarsHelper(&quot;upper&quot;, function(value) { \n\t\treturn value.toUpperCase();\n\t});\n\t\n};\n</code></pre>\n<p>And that's it. But holy crap - it gets better. Eleventy actually supports adding stuff to multiple engines at once. While this isn't supported across all 11 templating engines, you could change the code above to:</p>\n<pre><code class=\"language-js\">module.exports = function(eleventyConfig) {\n\t\n\televentyConfig.addFilter(&quot;upper&quot;, function(value) { \n\t\treturn value.toUpperCase();\n\t});\n};\n</code></pre>\n<p>This adds the helper (called a filter to Eleventy) to Liquid, Nunjucks, and Handlebars.</p>\n<p>Another example of the flexibility comes with permalinks. Most engines provide a way to change the default &quot;source file to output file&quot; logic. Eleventy allows this too, and is really useful in cases where you want to output non-HTML files. So for example, I could have a <code>data.json.liquid</code> file. By default Eleventy will output this to <code>/data.json/index.html</code>. This normally makes sense for HTML files. In this case, I can change the output like so:</p>\n<pre><code class=\"language-html\">---\npermalink: data.json\n---\n</code></pre>\n<p>This particular use case is one of the reasons I stopped using <a href=\"https://gohugo.io/\">Hugo</a> for my blog. Hugo was incredibly fast (although not much faster than Jekyll 4) but it felt like anything non-HTML related was a pain. I remember spending <em>hours</em> trying to get Hugo to output JSON and I simply gave up. That could been my fault (most likely it was), and I know they have support for this use-case, but I could never get it to work properly. Hugo felt <em>incredibly</em> strict about how it worked and I'm glad I left it.</p>\n<p>As an FYI, permalinks can also have variables in them. This allows for dynamic outputs.</p>\n<h3>Data Support</h3>\n<p>All static site generators support &quot;data&quot; in some form. This is a way to define information that can be used in templates when generating static output. Eleventy is very flexible in this regards as well.</p>\n<ul>\n<li>It obviously supports front matter, both for templates and layouts.</li>\n<li>Data can also be specified for a particular file. This lets you associate information with one particular template and help keep it a bit cleaner by having separation between the layout and the data.</li>\n<li>Data can also be associated with a directory, and subdirectories.</li>\n<li>Data can also be global.</li>\n<li>Front matter data is typically YAML (although it doesn't have to be in Eleventy), but for data files you can use both JSON and JS.</li>\n</ul>\n<p>That last point is really, really cool. Why? Because you can actually use async data for your static site. Imagine the following script in <code>_data\\films.js</code>:</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\nmodule.exports = async function() {\n\tlet resp = await fetch('https://swapi.co/api/films/');\n\tlet films = await resp.json();\n\treturn films.results;\n};\n</code></pre>\n<p>This simply hits the Star Wars API to return a list of films. Now my templates can do this:</p>\n<pre><code class=\"language-html\">## Star Wars Films\n\n{% for film in films %}\n* {{ film.title }}\n{% endfor %}\n</code></pre>\n<p>And by the way, when I first tried this, I forgot to install <code>node-fetch</code>, Eleventy recognized this very quickly and gave me a nice error in the console. In general, when I've screwed things up, Eleventy has been great about providing information. In code like the above, you can also use <code>console.log</code> to help debug.</p>\n<h3>The Final Reason</h3>\n<p>Alright, so I was sold on Eleventy before I discovered this, but this final reason is what really, <em>really</em> impressed me. There isn't a good name for the problem I'm about to describe, but it's a common issue with static site generators.</p>\n<p>Consider the example code above where I wrote some code to load data and return a dynamic set of Star Wars films. I then rendered it in a list in a template. But what if I wanted to do a &quot;detail&quot; view? In an app server, I'd simply link to a detail page and pass an ID value, so for example, I may use a URL like this in a Node application: <code>/film/3</code>. The <code>3</code> represents the primary identifier for the film. I'd use logic in my handler for <code>film</code> to render the right result.</p>\n<p>In a static site, you would need something different typically. Given 3 films, you may need output like so:</p>\n<pre><code>/film/1/index.html\n/film/2/index.html\n/film/3/index.html\n</code></pre>\n<p>However, most static site generators require a &quot;one to one&quot; correlation between input files and output files. In the past I've solved this in a variety of ways. One way is with a script that reads in the data, generates stub files, each of which will then include a core layout file to render the detail.</p>\n<p>Eleventy solves this issue in what I consider to be the most awesome, and simple, way possible. Eleventy has a <a href=\"https://www.11ty.io/docs/pagination/\">Pagination</a> API that I initially ignored. I saw the feature and thought, ok, given N blog posts, this helps me build N/10 pages of blog listings. And yes, it does that (and does it damn well), but, it also handles the use case above.</p>\n<p>So imagine I have an array of data, <code>films</code>, and I want go generate one file each. I could use the following file I've named <code>film.liquid</code>:</p>\n<pre><code class=\"language-html\">---\npagination:\n    data: films\n    size: 1\n    alias: film\npermalink: films/{{ film.title | slug }}/index.html\n---\n\n{{ film.title }} was released in {{ film.release_date }}\n</code></pre>\n<p>THe front matter defines that I want pagination, that I want to iterate over films, and that I want one data item per file. Now check out the permalink. It specifies that I should take the title of the film, pass it via a &quot;slug&quot; filter (this is built into Eleventy), and store it there. The code beneath the front matter is how I render the film.</p>\n<p>And that's it. As I said... holy crap. Here's how the output looks:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/10/11_1.png\" alt=\"Folder output from dynamic films\" class=\"imgborder imgcenter\">\n<h3>Want to Learn More?</h3>\n<p>So this wasn't meant to be a &quot;Intro to Eleventy&quot; post. As the title says, I wanted to explain why I'm so darn impressed by what I've seen. I <em>highly</em> encourage you to take a look at the <a href=\"https://www.11ty.io/docs/\">docs</a> to learn more. I don't see myself immediately rebuilding my site in Eleventy, I just updated the UI less than a year ago I think. But it will absolutely be the next generator I use. I'm also tinkering around some blog posts demonstrating how to use it more fully. (As I said above though, it's been tough to find time lately.) If you are using it currently, leave me a comment. Or - if you looked at it and decided <em>against</em> it, I'd love to hear why as well.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@wirhabenzeit?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Dominik Schröder</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Using IndexedDB with Vue.js",
		"date":"Tue Oct 15 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/10/16/using-indexeddb-with-vuejs",
		"content":"<p>It's been a while since I've talked about one of my favorite APIs, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a>. Mainly because as cool as it is, there hasn't been much new about it recently. That being said, I was thinking about how I'd use it in Vue.js and decided to build a few demos to test it out. This post is <em>not</em> meant to be an introduction to IndexedDB, please see that previous link for a good guide. You can also check out jsMobileConf where I'm giving a <a href=\"https://jsmobileconf.com/schedule/session-camden.html\">talk</a> on client-side data storage next month. For my exploration, I built two demos. The first one is rather simple and makes use of CodePen and Vue embedded directly on the page. I.e. a &quot;non-app&quot; use of Vue. (I'm still struggling with the best way to refer to that!) The second demo is more complete, uses a full Vue application, and works with Vuex. As always, I'm hoping folks will provide feedback, suggestions, and share their own examples.</p>\n<h2>Example One</h2>\n<p>As I said above, the first example was meant to be as simple as possible. With that in mind, I built a demo that lets you work with Cat data. You can add cats, but not via a form, just a simple button that adds random data. You can delete cats. And that's it.</p>\n<p>As it's rather short, let's start with the HTML.</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;div v-if=&quot;ready&quot;&gt;\n    &lt;button @click=&quot;addCat&quot; :disabled=&quot;addDisabled&quot;&gt;Add Cat&lt;/button&gt;\n    &lt;p/&gt;\n    &lt;ul&gt;\n      &lt;li v-for=&quot;cat in cats&quot;&gt;\n        {{cat.name}} is {{cat.age}} years old. &lt;button @click=&quot;deleteCat(cat.id)&quot;&gt;Delete&lt;/button&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>You can see the button used to add new cats, the list of existing cats, and then a delete button for each one. The JavaScript is where things get interesting. I tried my best to separate out the Vue methods such that event handlers focused on their own thing and other methods were specifically targeting IndexedDB calls. This will (hopefully) make a bit more sense when you see the code. Let's start with the <code>created</code> handler:</p>\n<pre><code class=\"language-js\">async created() {\n\tthis.db = await this.getDb();\n\tthis.cats = await this.getCatsFromDb();\n\tthis.ready = true;\n},\n</code></pre>\n<p>This does three things. First, it initializes the IndexedDB database and waits for the db object so it can be used later. Then it asks for any existing data. Let's first look at <code>getDb</code>:</p>\n<pre><code class=\"language-js\">async getDb() {\n\treturn new Promise((resolve, reject) =&gt; {\n\n\tlet request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\t\n\trequest.onerror = e =&gt; {\n\t\tconsole.log('Error opening db', e);\n\t\treject('Error');\n\t};\n\n\trequest.onsuccess = e =&gt; {\n\t\tresolve(e.target.result);\n\t};\n\t\n\trequest.onupgradeneeded = e =&gt; {\n\t\tconsole.log('onupgradeneeded');\n\t\tlet db = e.target.result;\n\t\tlet objectStore = db.createObjectStore(&quot;cats&quot;, { autoIncrement: true, keyPath:'id' });\n\t};\n\t});\n}\n</code></pre>\n<p>This is fairly boilerplate IndexedDB stuff. Open the database and setup an object store the first time you run the application. Our object store (&quot;cats&quot;) uses autoincrementing primary keys. I don't specify any indexes on the store as I'm keeping it simple. In order to use <code>async</code> and <code>await</code>, I return a promise from the method and I resolve it in the <code>onsuccess</code> handler for the database. Now let's look at <code>getCatsFromDb</code>:</p>\n<pre><code class=\"language-js\">async getCatsFromDb() {\n\treturn new Promise((resolve, reject) =&gt; {\n\n\t\tlet trans = this.db.transaction(['cats'],'readonly');\n\t\ttrans.oncomplete = e =&gt; {\n\t\t\tresolve(cats);\n\t\t};\n\t\t\n\t\tlet store = trans.objectStore('cats');\n\t\tlet cats = [];\n\t\t\n\t\tstore.openCursor().onsuccess = e =&gt; {\n\t\t\tlet cursor = e.target.result;\n\t\t\tif (cursor) {\n\t\t\t\tcats.push(cursor.value)\n\t\t\t\tcursor.continue();\n\t\t\t}\n\t\t};\n\n\t});\n},\n</code></pre>\n<p>This method opens up a read transaction, then a cursor, and will iterate over each object until done. As before, I wrap this up in a promise so I can use <code>async\\await</code>.</p>\n<p>Whew, ok, almost there. Let's look at the 'add cat' logic. As I said above, to make this simpler, I just created random data. I've written enough forms in my life, I'm allowed to skip them from time to time.</p>\n<pre><code class=\"language-js\">async addCat() {\n\tthis.addDisabled = true;\n\t// random cat for now\n\tlet cat = {\n\t\tname:&quot;Cat&quot; + Math.floor(Math.random() * 100),\n\t\tage:Math.floor(Math.random() * 10)+1\n\t};\n\tconsole.log('about to add '+JSON.stringify(cat));\n\tawait this.addCatToDb(cat);\n\tthis.cats = await this.getCatsFromDb();\n\tthis.addDisabled = false;      \n},\n</code></pre>\n<p>This method is primarily just concerned with the UI/UX of the operation. It chains out to <code>addCatToDb</code> for the actual persistence.</p>\n<pre><code class=\"language-js\">async addCatToDb(cat) {\n\treturn new Promise((resolve, reject) =&gt; {\n\n\tlet trans = this.db.transaction(['cats'],'readwrite');\n\ttrans.oncomplete = e =&gt; {\n\t\tresolve();\n\t};\n\n\tlet store = trans.objectStore('cats');\n\tstore.add(cat);\n\n\t});\n},\n</code></pre>\n<p>While not much more complex, I liked separating this out. And as before, I'm wrapping my calls in a promise. The final bit is deletion and it uses a similar pattern. First the method you call when clicking the delete button.</p>\n<pre><code class=\"language-js\">async deleteCat(id) {\n\tawait this.deleteCatFromDb(id);\n\tthis.cats = await this.getCatsFromDb();      \n},\n</code></pre>\n<p>And then the actual deletion:</p>\n<pre><code class=\"language-js\">async deleteCatFromDb(id) {\n\treturn new Promise((resolve, reject) =&gt; {\n\tlet trans = this.db.transaction(['cats'],'readwrite');\n\ttrans.oncomplete = e =&gt; {\n\t\tresolve();\n\t};\n\n\tlet store = trans.objectStore('cats');\n\tstore.delete(id);\n\t});\n},\n</code></pre>\n<p>All in all not too bad. If you want, you can play with the complete demo here:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"oNNxavx\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"IDB1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/oNNxavx\">\n  IDB1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2>Example Two</h2>\n<p>For the second example, I went all in. A full Vue.js application, routing, Vuex, and more. I built a full CRUD that lets you view cats, add and edit them, and then delete it.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/10/catdb.png\" alt=\"Example of the app's UI\" class=\"imgborder imgcenter\">\n<p>All of the code for this demo may be found in my GitHub repo: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/idb\">https://github.com/cfjedimaster/vue-demos/tree/master/idb</a></p>\n<p>You can run this version in your browser here: <a href=\"https://idb.raymondcamden.now.sh/\">https://idb.raymondcamden.now.sh/</a></p>\n<p>I won't share all of the code as it's mostly UI stuff (and you can browse it yourself at the link above), but I will describe my general approach. I built the first version of the app such that IndexedDB wasn't used at all. Instead, Vuex kept the data in memory. This allowed me to build out the UI, routing, and so forth, and then simply edit the store later. Here's the initial version of my store.</p>\n<pre><code class=\"language-js\">import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    cats:[]\n  },\n  mutations: {\n\n  },\n  actions: {\n    deleteCat(context, cat) {\n      console.log('store is being asked to delete '+cat.id);\n      context.state.cats = context.state.cats.filter(c =&gt; {\n        return c.id != cat.id;\n      });\n    },\n    getCats(context) {\n      if(context.state.cats.length === 0) {\n        context.state.cats.push({name:'default cat', age:1, id: 1});\n        context.state.cats.push({ name: 'cat deux', age: 2, id: 2 });\n      }\n    },\n    async saveCat(context, cat) {\n      if(cat.id) {\n        context.state.cats.forEach(c =&gt; {\n          if(c.id === cat.id) {\n            c.name = cat.name;\n            c.age = cat.age;\n          }\n        });\n      } else {\n        cat.id = context.state.cats.length+1;\n        context.state.cats.push(cat);\n      }\n    }\n  }\n})\n</code></pre>\n<p>Just three methods, all working with a simple array of data. This worked perfectly though and let me focus on the flow of the application. Switching to IndexedDB then was a completely separate job. Here's the current version of the store.</p>\n<pre><code class=\"language-js\">import Vue from 'vue'\nimport Vuex from 'vuex'\n\nimport idb from '@/api/idb';\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    cats:[]\n  },\n  mutations: {\n\n  },\n  actions: {\n    async deleteCat(context, cat) {\n      await idb.deleteCat(cat); \n    },\n    async getCats(context) {\n      context.state.cats = [];\n      let cats = await idb.getCats();\n      cats.forEach(c =&gt; {\n        context.state.cats.push(c);\n      });\n    },\n    async saveCat(context, cat) {\n      await idb.saveCat(cat);\n    }\n  }\n})\n</code></pre>\n<p>As you can see, it's actually somewhat simpler. That's because the actual storage work is being done in a new component, <code>idb</code>. In this version, Vuex simply handles managing the data, but not storing or retrieving. I could replace IndexedDB with API calls and no one would be the wiser. Let's consider <code>idb.js</code> now.</p>\n<pre><code class=\"language-js\">const DB_NAME = 'catdb';\nconst DB_VERSION = 1;\nlet DB;\n\nexport default {\n\n\tasync getDb() {\n\t\treturn new Promise((resolve, reject) =&gt; {\n\n\t\t\tif(DB) { return resolve(DB); }\n\t\t\tconsole.log('OPENING DB', DB);\n\t\t\tlet request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\t\t\t\n\t\t\trequest.onerror = e =&gt; {\n\t\t\t\tconsole.log('Error opening db', e);\n\t\t\t\treject('Error');\n\t\t\t};\n\t\n\t\t\trequest.onsuccess = e =&gt; {\n\t\t\t\tDB = e.target.result;\n\t\t\t\tresolve(DB);\n\t\t\t};\n\t\t\t\n\t\t\trequest.onupgradeneeded = e =&gt; {\n\t\t\t\tconsole.log('onupgradeneeded');\n\t\t\t\tlet db = e.target.result;\n\t\t\t\tdb.createObjectStore(&quot;cats&quot;, { autoIncrement: true, keyPath:'id' });\n\t\t\t};\n\t\t});\n\t},\n\tasync deleteCat(cat) {\n\n\t\tlet db = await this.getDb();\n\n\t\treturn new Promise(resolve =&gt; {\n\n\t\t\tlet trans = db.transaction(['cats'],'readwrite');\n\t\t\ttrans.oncomplete = () =&gt; {\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tlet store = trans.objectStore('cats');\n\t\t\tstore.delete(cat.id);\n\t\t});\t\n\t},\n\tasync getCats() {\n\n\t\tlet db = await this.getDb();\n\n\t\treturn new Promise(resolve =&gt; {\n\n\t\t\tlet trans = db.transaction(['cats'],'readonly');\n\t\t\ttrans.oncomplete = () =&gt; {\n\t\t\t\tresolve(cats);\n\t\t\t};\n\t\t\t\n\t\t\tlet store = trans.objectStore('cats');\n\t\t\tlet cats = [];\n\t\t\t\n\t\t\tstore.openCursor().onsuccess = e =&gt; {\n\t\t\t\tlet cursor = e.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tcats.push(cursor.value)\n\t\t\t\t\tcursor.continue();\n\t\t\t\t}\n\t\t\t};\n\n\t\t});\n\t},\n\n\tasync saveCat(cat) {\n\n\t\tlet db = await this.getDb();\n\n\t\treturn new Promise(resolve =&gt; {\n\n\t\t\tlet trans = db.transaction(['cats'],'readwrite');\n\t\t\ttrans.oncomplete = () =&gt; {\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tlet store = trans.objectStore('cats');\n\t\t\tstore.put(cat);\n\n\t\t});\n\t\n\t}\n\n}\n</code></pre>\n<p>In general, this is pretty similar to the code used in the first version. I've got IndexedDB calls wrapped in promises. I cache the database handler too so it's only opened once. I could make this easier too if I used one of the many IndexedDB wrapper libraries out there, but as I was a bit out of practice working with IndexedDB, I kinda wanted to do things &quot;by hand&quot; as a way of remembering.</p>\n<p>So - I hope this helps. If you want to learn more, definitely look at the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">MDN docs</a> on the subject. As always, leave me a comment below if you have a question or suggestion!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@frankiefoto?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">frank mckenna</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Adding Search to your Eleventy Static Site with Lunr",
		"date":"Sat Oct 19 2019 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2019/10/20/adding-search-to-your-eleventy-static-site-with-lunr",
		"content":"<p>I recently came back from <a href=\"http://connect.tech/\">connect.tech</a> (one of my favorite conferences). I had the honor of giving not one, but two different talks. One of them was on static sites, or the JAMstack. This is a topic I've covered many times in the past, but it had been a while since I gave a presentation on it. During my presentation I covered various ways of adding dynamic features back to the static site, one of them being search.</p>\n<p>For my blog here, I make use of <a href=\"https://cse.google.com\">Google's Custom Search Engine</a> feature. This basically lets me offload search to Google, who I hear knows a few things about search. But I also give up a bit of control over the functionality. Oh, and of course, Google gets to run a few ads while helping find those results...</p>\n<img src=\"https://static.raymondcamden.com/images/2019/10/lunr1.png\" alt=\"Ads in search result\" class=\"imgborder imgcenter\">\n<p>To be clear, I don't fault Google for those ads, I'm using their service for free, but it isn't something a lot of folks would want on their site.</p>\n<p>There's an alternative that's been around for a while that I've finally made some time to learn, <a href=\"https://lunrjs.com/\">Lunr</a>. Lunr is a completely client-side search solution. Working with an index of your creation (a <em>lot</em> more on that in a moment), Lunr will take in search input and attempt to find the best match it can. You are then free to create your search UI/UX any way you choose.</p>\n<p>I was first introduced to Lunr while working at Auth0, we used it in the docs for <a href=\"https://goextend.io/docs\">Extend</a>. (Note - this product is currently EOLed so the previous link may not work in the future.) If you use the search form on the top right, all the logic of running the search, finding results, and displaying them, are all done client-side.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/10/lunr2.png\" alt=\"Example of search results at GoExtend\" class=\"imgborder imgcenter\">\n<p>Lunr is a pretty cool project, but let's talk about the biggest issue you need to consider - your index. In order for Lunr to find results, you need to feed it your data. In theory, you could feed it the plain text of every page you want to index. That essentially means your user is downloading all the text of your site on every request. While caching can be used to make that a bit nicer, if your site has thousands of pages, that's not going to scale. This is why I didn't even consider Lunr for my blog. You also need to determine what you want to actually search.</p>\n<p>Consider an ecommerce site. Adding search for products is a no brainer. But along with text about the product, you may want to index the category of the product. Maybe a subcategory. Shoot, maybe even a bit of the usage instructions.</p>\n<p>And even after determining what you want to index, you need to determine if some parts of your index are more important than others. If you are building a support site, you may consider usage instructions for products more important than the general description.</p>\n<p>Lunr isn't going to care what you index, but you really think about this aspect up front. I definitely recommend spending some time in the <a href=\"https://lunrjs.com/docs/index.html\">Lunr docs</a> and <a href=\"https://lunrjs.com/guides/getting_started.html\">guides</a> to get familiar with the API.</p>\n<p>So, how about an example?</p>\n<h3>Our Site</h3>\n<p>For my test, I decided to build a simple static site using <a href=\"https://www.11ty.io/\">Eleventy</a>. This is my new favorite static site generator and I'm having a lot of fun working with it. You can use absolutely any other generator with Lunr. You could also absolutely use an application server like Node, PHP, or ColdFusion.</p>\n<p>My static site is a directory of GI Joe characters sourced from <a href=\"https://gijoe.fandom.com/wiki/Joepedia_-_The_G.I._Joe_Wiki\">Joepedia</a>. I only copied over a few characters to keep things simple. You can see the site (including the full search functionality we're going to build) at <a href=\"https://lunrjoe.raymondcamden.now.sh/\">https://lunrjoe.raymondcamden.now.sh/</a>. Here's an example character page.</p>\n<pre><code class=\"language-html\">---\nlayout: character\ntitle: Cobra Commander\nfaction: Cobra\nimage: https://vignette.wikia.nocookie.net/gijoe/images/b/b4/Cobra-commander-02.jpg/revision/latest?cb=20091014201339\n---\n\nNot much is known of the background of the man many call the Cobra Commander. What we can only tell is how he works and how he thinks. We know that he has deliberately started political and social conflict in a number of areas. He has amassed an army by recruiting displaced people, promising them money, power and a chance to get back at the world that hurt them. In return, he demands that they swear absolute loyalty to his cause. What is his cause? World domination. \n\nCobra Commander does not delude himself by justifying his actions as matters of principles or glory. He knows he does it for control and power. He is ruthless, hatred-personified and totally obsessed. A meticulous person, he likes to personally oversee vital projects himself, even engaging in military combat himself on occasion. Not much is known about him, he is a master of disguise and he has appeared as a goatee artist looking man with a son in a coma, in the Marvel comics. His appearance in the 12 inch G.I. Joe line shows him as a man with dark slicked back hair, his appearance constantly changing leaves him assumed to wear masks, even the commander can keep his identity from the people around him.\n</code></pre>\n<p>And how it looks on the site:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/10/lunr3.png\" alt=\"Cobra Commander page\" class=\"imgborder imgcenter\">\n<h3>Our Search Index</h3>\n<p>I decided to build my index out of the character pages. My index would include the title, URL, and the first paragraph of each character page. You can see the final result here: <a href=\"https://lunrjoe.raymondcamden.now.sh/index.json\">https://lunrjoe.raymondcamden.now.sh/index.json</a>. So how did I build it?</p>\n<p>The first thing I did was create a <a href=\"https://www.11ty.io/docs/collections/\">custom collection</a> for Eleventy based on the directory where I stored my character Markdown files. I added this to my <code>.eleventy.js</code> file.</p>\n<pre><code class=\"language-js\">eleventyConfig.addCollection(&quot;characters&quot;, function(collection) {\n\treturn collection.getFilteredByGlob(&quot;characters/*.md&quot;).sort((a,b) =&gt; {\n\t\tif(a.data.title &lt; b.data.title) return -1;\n\t\tif(a.data.title &gt; b.date.title) return 1;\n\t\treturn 0;\n\t});\n});\n</code></pre>\n<p>I am embarrassed to say it took me like 10 minutes to get my damn sort right even though that's a pretty simple JavaScript array method. Anyway, this is what then allows me to build a list of characters on my site's home page, like so:</p>\n<pre><code class=\"language-html\">&lt;ul&gt;\n{% for character in collections.characters %} \n  &lt;li&gt;&lt;a href=&quot;{{ character.url }}&quot;&gt;{{ character.data.title }}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>This is also how I'm able to look over my characters to build my JSON index. But before I did that, I needed a way to get an &quot;excerpt&quot; of text out of my pages. The docs at Eleventy were a bit weird about this. I had the impression it was baked in via one of the tools it uses, but for the life of me I could not get it to work. I eventually ended up using a modified form of the tip on this article, <a href=\"https://keepinguptodate.com/pages/2019/06/creating-blog-with-eleventy/\">Creating a Blog with Eleventy</a>. I added his code there to add a short code, <code>excerpt</code>, built like so:</p>\n<pre><code class=\"language-js\">eleventyConfig.addShortcode('excerpt', article =&gt; extractExcerpt(article));\n\n// later in my .eleventy.js file...\n// https://keepinguptodate.com/pages/2019/06/creating-blog-with-eleventy/\nfunction extractExcerpt(article) {\n\tif (!article.hasOwnProperty('templateContent')) {\n\t  console.warn('Failed to extract excerpt: Document has no property &quot;templateContent&quot;.');\n\t  return null;\n\t}\n   \n\tlet excerpt = null;\n\tconst content = article.templateContent;\n\n\t// The start and end separators to try and match to extract the excerpt\n\tconst separatorsList = [\n\t  { start: '&lt;!-- Excerpt Start --&gt;', end: '&lt;!-- Excerpt End --&gt;' },\n\t  { start: '&lt;p&gt;', end: '&lt;/p&gt;' }\n\t];\n   \n\tseparatorsList.some(separators =&gt; {\n\t  const startPosition = content.indexOf(separators.start);\n\t  const endPosition = content.indexOf(separators.end);\n   \n\t  if (startPosition !== -1 &amp;&amp; endPosition !== -1) {\n\t\texcerpt = content.substring(startPosition + separators.start.length, endPosition).trim();\n\t\treturn true; // Exit out of array loop on first match\n\t  }\n\t});\n\treturn excerpt;\n  }\n</code></pre>\n<p>Note that I modified his code such that it finds the <em>first</em> closing P tag, not the last.</p>\n<p>With these pieces in place, I built my index in <code>lunr.liquid</code>:</p>\n<pre><code class=\"language-js\">---\npermalink: /index.json\n---\n\n[\n{% for character in collections.characters %}\n{\n   &quot;title&quot;:&quot;{{character.data.title}}&quot;,\n   &quot;url&quot;:&quot;{{character.url}}&quot;,\n   &quot;content&quot;:&quot;{% excerpt character %}&quot;\n} {% if forloop.last == false %},{% endif %}\n{% endfor %} \n]\n</code></pre>\n<h3>Our Search Front-End</h3>\n<p>Because I'm a bit slow and a glutton for punishment, I decided to build my search code using Vue.js. Why am implying this was a mistake? Well it really wasn't a mistake per se, but I did run into an unintended consequence of using Liquid as my template engine and Vue.js. You see, by using Liquid on the back end (in my static site generator), I made use of a template syntax that is similar to Vue.js. So if I did <code>{{ name }}</code> it would be picked up by Liquid first before Vue ever got a chance to run it. The solution wasn't too difficult, but possibly added a bit of complexity that may be something you wish to avoid in the future.</p>\n<p>Of course, using Vue was totally arbitrary here and not something you need to use with Lunr, so please keep that in mind when looking at my solution. Since my own blog <em>also</em> uses Liquid, I'm going to share the HTML code via an image. Note that my entire demo is available at GitHub (via the link I'll share at the end).</p>\n<img src=\"https://static.raymondcamden.com/images/2019/10/lunr4.png\" alt=\"Use of raw\" class=\"imgborder imgcenter\">\n<p>In the screen shot above, note the <code>raw</code> and <code>endraw</code> tags surrounding my Vue code. That's how I was able to get it working. But as I said, let's ignore that. ;) The code here is rather simple. A search field, a place for the results, and a simple way to handle it when no results are found. Note that my results include a <code>url</code> and <code>title</code> value. This actually takes a little bit of work, and I'll explain why in a bit. Alright, let's switch to the JavaScript.</p>\n<p>First, let's look at the <code>data</code> and <code>created</code> parts of my code.</p>\n<pre><code class=\"language-js\">data:{\n\tdocs:null,\n\tidx:null,\n\tterm:'',\n\tresults:null\n},\nasync created() {\n\tlet result = await fetch('/index.json');\n\tdocs = await result.json();\n\t// assign an ID so it's easier to look up later, it will be the same as index\n\tthis.idx = lunr(function () {\n\t\tthis.ref('id');\n\t\tthis.field('title');\n\t\tthis.field('content');\n\n\t\tdocs.forEach(function (doc, idx) {\n\t\t\tdoc.id = idx;\n\t\t\tthis.add(doc); \n\t\t}, this);\n\t});\n\tthis.docs = docs;\n},\n</code></pre>\n<p>When my Vue application loads up, I first make a request to my index data. When that's done, it's time to build the Lunr index. This is done via a function passed in to the constructor. The first thing I do is define the <code>ref</code>, or primary identifier of each thing I'm indexing, what Lunr refers to as docs. I then define the fields in my content I want indexed. Note that I could boost certain fields here if I want one to be more important than another.</p>\n<p>I then loop over each item in my index and here's a <strong>SUPER IMPORTANT</strong> thing you need to keep in mind. When Lunr returns search matches, it only returns the <code>ref</code> value. If you remember, my index consists of the url, the title, and a block of text. If I want to tell my users the title of the matched document, and if I want to link to that result, I have to get that information. But I just said - Lunr doesn't return it. So how do I get it?</p>\n<p>Since Lunr returns the <code>ref</code> value, I can use that as a way to look up my information in the index. My URLs are unique and I could use array methods to find my data, but if I simply use the position value, the <code>idx</code> above, then I've got a quick and easy way to get my original document. This comes together in the <code>search</code> method:</p>\n<pre><code class=\"language-js\">search() {\n\tlet results = this.idx.search(this.term);\n\n\t// we need to add title, url from ref\n\tresults.forEach(r =&gt; {\n\t\tr.title = this.docs[r.ref].title;\n\t\tr.url = this.docs[r.ref].url;\n\t});\n\n\tthis.results = results;\n}\n</code></pre>\n<p>I begin by just doing the search, passing your input as is. Lunr will parse it, do it's magic, and return the results. In order for me to use the title and url values, I refer back to the original array as I loop over the results. And that's basically it. You can test this yourself - try searching for <code>weapon</code> to find Destro.</p>\n<p>Finally, you can find the entire repository for this demo here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/lunr\">https://github.com/cfjedimaster/eleventy-demos/tree/master/lunr</a>. I hope this helps, and now you know how to use client-site search with Lunr and Eleventy. And as we know...</p>\n<img src=\"https://static.raymondcamden.com/images/2019/10/lunr5.png\" alt=\"Knowing is half the battle...\" class=\"imgborder imgcenter\">\n<p><i>Header photo by <a href=\"https://unsplash.com/@imagesbykayla?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Kayla Farmer</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs",
            
            "eleventy"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Building a Custom Sound Board with Vue and IndexedDB",
		"date":"Mon Nov 11 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/11/12/building-a-custom-sound-board-with-vue-and-indexeddb",
		"content":"<p>Pardon the lack of updates around here. I've been writing more for my <a href=\"https://developer.here.com/blog\">work blog</a> and have started a new (small) book project. Plus, well, holidays and life. I had hoped to keep to a pace of one post per week minimum, but I've fallen a bit behind there. That being said, I think what I've got to share today is really freaking cool and I hope you do too.</p>\n<p>A few weeks ago I wrote up how I integrated <a href=\"https://www.raymondcamden.com/2019/10/16/using-indexeddb-with-vuejs\">Vue.js and IndexedDB</a>. That post was actually some prep work for what I'm sharing here. I'm a fan of &quot;sound board&quot; apps, those apps that collect sound files from a particular source and let you play them back. So for example, the official Star Wars app (which is more than a sound board) has this as a feature:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/sb1a.jpg\" alt=\"Screenshot of Star Wars app, soundboard\" class=\"imgborder imgcenter\">\n<p>I like the idea so much, I built my own using Ionic and Cordova about three years ago (<a href=\"https://www.raymondcamden.com/2015/07/30/cordovaionic-sample-app-my-sound-board\">&quot;Cordova/Ionic Sample App: My Sound Board&quot;</a>). The most painful part of that process was handling the file system, but outside of that it wasn't terribly difficult.</p>\n<p>I wanted to see if I could rebuild this application 100% web-native. To handle storage I'd use IndexedDB, which has no problem with binary data. Before I get into the code, you can browse the complete source here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/idb-sound-board\">https://github.com/cfjedimaster/vue-demos/tree/master/idb-sound-board</a>. You can also check it out online at <a href=\"https://idbsoundboard.raymondcamden.now.sh/\">https://idbsoundboard.raymondcamden.now.sh/</a>.</p>\n<h2>Setup</h2>\n<p>To begin the application, I used the Vue cli to scaffold a new application and enabled both Vuex and Vue Router. I also added <a href=\"https://vuetifyjs.com/\">Vuetify</a> for the URL. I'll point out right away that I'm not 100% happy with how the application looks, it could definitely be better. (I'm thinking of switching to cards instead of list items.)</p>\n<p>To support audio recording, I used this excellent open source library: <a href=\"https://github.com/higuma/web-audio-recorder-js\">web-audio-recorder</a>. It worked great, but the docs were a bit hard to grok at times. This article was very helpful: <a href=\"https://blog.addpipe.com/using-webaudiorecorder-js-to-record-audio-on-your-website/\">&quot;Using WebAudioRecorder.js to Record MP3, Vorbis and WAV Audio on Your Website&quot;</a></p>\n<h2>The App</h2>\n<p>The first iteration of the application focused on everything <em>but</em> audio. I built the UI first. The initial page is a list of sounds with a button to add a new one. Clicking the title would play the sound.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/sb2.jpg\" alt=\"List of sounds\" class=\"imgborder imgcenter\">\n<p>The next page is where you add new sounds. It lets you record, play, and add a title to the sound.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/sb3.jpg\" alt=\"Sound saver/editor\" class=\"imgborder imgcenter\">\n<p>I had initially thought about adding &quot;edit&quot; support, but I decided you could just delete a sound and record it again. Yes, I'm being lazy.</p>\n<p>I set up my code to persist sounds, but just the title value at first. Once I had the flow done (adding sounds, listing sounds, and deleting), I then added in the recording functionality. The web-audio-recorder library uses a callback that returns a blob. So I was able to use it like this:</p>\n<pre><code class=\"language-js\">this.recorder.onComplete = (recorder, blob) =&gt; {\n\tthis.recordingStatus = 'Record Sound';\n\tthis.blob = blob;\n};\n</code></pre>\n<p>All I do here is copy out blob into my Vue data so I can store it later:</p>\n<pre><code class=\"language-js\">async save() {\n\tlet sound = {\n\t\ttitle: this.title, \n\t\tblob: this.blob\n\t};\n\tawait this.$store.dispatch('saveSound', sound);\n\tthis.$router.push('/');\t\n}\n</code></pre>\n<p>My store was simply persisting the sound object as is, so when I went from saving just the title to the title and the audio blob, nothing there had to change. IndexedDB stored the string and binary data perfectly.</p>\n<p>To play that blob, I just used this:</p>\n<pre><code class=\"language-js\">play(s) {\n\tlet player = new window.Audio();\n\tplayer.src = window.URL.createObjectURL(s.blob);\n\tplayer.play();\n}\n</code></pre>\n<p>A slightly better implementation would handle not letting you play two or more sounds at once, but I kinda like that you can do that if you want.</p>\n<h2>The Best Part</h2>\n<p>The absolute best part of this whole thing is - I forgot that I had enabled PWA support when I scaffolded the application. When I was done and deployed my build version, I noticed the service worker in play and did a quick test. Using Chrome DevTools, I turned off network support and reloaded. The entire application had been cached locally and it worked perfectly. Since all the sounds are stored in IndexedDB, there's no remote resources to hit. If I wanted to, I could replace the icons spit out by default and provide my own, but I'll probably only bother with that if folks actually like the application.</p>\n<p>So that's it. I feel like I didn't share a lot of code here, but most of the code was done in the Vue/IndexedDB example from a few weeks ago. You can check out the full code on the <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/idb-sound-board\">repo</a> and try it yourself here: <a href=\"https://idbsoundboard.raymondcamden.now.sh/\">https://idbsoundboard.raymondcamden.now.sh/</a>.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@akeenster?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Abigail Keenan</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Serverless JAMStack AndCats Demo",
		"date":"Wed Nov 13 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/11/14/serverless-jamstack-andcats-demo",
		"content":"<p>Many years ago, I built a <a href=\"https://www.raymondcamden.com/2013/08/27/Another-Node-Experiment-AndKittens\">demo</a> called &quot;AndKittens&quot;. This was a simple Node application that used wildcard subdomains and the <a href=\"https://azure.microsoft.com/en-us/services/cognitive-services/bing-image-search-api/\">Bing Image Search API</a> to let you find pictures of kittens and... whatever. You would use the subdomain to specify what you wanted, so for example, bacon.andkittens.us would return pictures of kittens and bacon. I thought it might be interesting to rebuild this in the JAMStack with a serverless backend.</p>\n<p>I've been kind of down on Microsoft Azure lately. While I really like the platform, I don't like that it doesn't have a good free tier. To be clear, it <em>does</em> have multiple free tiers and such, but it's tricky to ensure you remain within them. Some things, like Azure Functions, are technically free, but you have to pay for the disk space to store them. To be clear, I don't think Azure is overpriced. But it doesn't support the &quot;tinker/play&quot; developer model well. I had pretty much decided I'd stop using it completely, but I really wanted this demo to work with the Bing Image API so I decided to bite the bullet and try it again.</p>\n<p>Another change I decided on was to skip the dynamic subdomain part. You can absolutely to wildcard domains with Netlify and Zeit and other platforms, but I decided on a simpler solution - a search box. Here's an example of how it looks.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/baconcat.jpg\" alt=\"Picture of cat with bacon\" class=\"imgborder imgcenter\">\n<p>The picture rotates every five seconds so in theory you could just leave it up and watch forever. (Although I only fetch 50 images from the API.)</p>\n<p>Let's take a look at the code. The complete repository may be found here: <a href=\"https://github.com/cfjedimaster/andkittensserverless\">https://github.com/cfjedimaster/andkittensserverless</a></p>\n<p>First, the front end. The HTML is rather simple:</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;Stuff and Cats&lt;/title&gt;\n\t\t&lt;style&gt;\n\t\t\t/* \thttps://css-tricks.com/perfect-full-page-background-image/ */\n\n\t\t\timg.bg {\n\t\t\t\t/* Set rules to fill background */\n\t\t\t\tmin-height: 100%;\n\t\t\t\tmin-width: 1024px;\n\t\t\t\t\n\t\t\t\t/* Set up proportionate scaling */\n\t\t\t\twidth: 100%;\n\t\t\t\theight: auto;\n\t\t\t\t\n\t\t\t\t/* Set up positioning */\n\t\t\t\tposition: fixed;\n\t\t\t\ttop: 0;\n\t\t\t\tleft: 0;\n\t\t\t}\n\n\t\t\t#ui {\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 30px;\n\t\t\t\tleft: 30px;\n\t\t\t}\n\t\t&lt;/style&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\n\t\t&lt;div id=&quot;app&quot;&gt;\n\t\t\t\t&lt;img class=&quot;bg&quot; :src=&quot;currentImage&quot; v-if=&quot;currentImage&quot;&gt;\n\t\t\t\t&lt;div id=&quot;ui&quot;&gt;\n\t\t\t\t&lt;input v-model=&quot;term&quot; type=&quot;search&quot;&gt; &lt;button @click=&quot;search&quot; :disabled=&quot;!term&quot;&gt;Search&lt;/button&gt;\n\t\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\n\t\t&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n\t\t&lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>The most interesting part of this I think is the full image background CSS I got from <a href=\"https://css-tricks.com/perfect-full-page-background-image/\">CSS-Tricks</a>. I <em>love</em> that site and I absolutely recommend folks bookmark it. I've got a minimal amount of code to handle rendering stuff, first the image and then a form. I'm using Vue.js for my interactivity, and here's the code for that.</p>\n<pre><code class=\"language-js\">const app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tterm:'',\n\t\timages:[],\n\t\tcurrentImage:null,\n\t\ttimer:null,\n\t\tindex:0\n\t},\n\tmethods: {\n\t\tasync search() {\n\t\t\tif(this.timer) clearInterval(this.timer);\n\t\t\tlet resp = await fetch(`/api/search?term=${this.term}`);\n\t\t\tlet data = await resp.json();\n\t\t\tthis.images = data;\n\t\t\tthis.currentImage = this.images[0].url;\n\t\t\tthis.timer = setInterval(this.changeImage, 5000);\n\t\t},\n\t\tchangeImage() {\n\t\t\tthis.index++;\n\t\t\tthis.currentImage = this.images[this.index].url;\n\t\t\tif(this.index &gt; this.images.length-1) this.index = -1;\n\t\t}\n\t}\n});\n</code></pre>\n<p>Basically - wait for the user to click for search, and when they do, hit my serverless API, get the results, and iterate over each one in an interval.</p>\n<p>The last bit is my wrapper for the image API. Bing's Image API supports a lot of different options, but I kept it simple - search for some term and cats (not kittens this time), keep it kid safe, and look for wallpaper size results.</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\nconst key = process.env.key;\nconst api = 'https://api.cognitive.microsoft.com/bing/v7.0/images/search?safeSearch=strict&amp;size=wallpaper&amp;count=50';\n\nmodule.exports = async (req, res) =&gt; {\n\n\tlet term = req.query.term;\n\tif(!term) term='kittens';\n\n\tlet resp = await fetch(api+ '&amp;q=' + encodeURIComponent(term) + '%20AND%20cats', {\n\t\tmethod:'get',\n\t\theaders: {\n\t\t\t'Ocp-Apim-Subscription-Key':key\n\t\t}\n\t});\n\tlet json = await resp.json();\n\tlet results = json.value.map(i =&gt; {\n\t\treturn {\n\t\t\turl: i.contentUrl,\n\t\t\tdisplayHost:i.hostPageDisplayUrl,\n\t\t\thost:i.hostPageUrl,\n\t\t\tname:i.name\n\t\t}\n\t});\n\t\n\tres.json(\n\t\tresults\n\t)\n\t\n}\n</code></pre>\n<p>I'd call out two things of importance here. First note I hide my API key using Now secrets. That's how it shows up in <code>process.env.key</code>. Then note I map the results a bit to make them much smaller. Bing's API returns a <em>lot</em> of information about each result, but I only need a few. I actually use less than what I'm returning here and could further optimize this if I wanted to.</p>\n<p>Anyway, if you want to give this a try, and hopefully not put me over the free tier, check it out at <a href=\"https://rckittens.now.sh\">https://rckittens.now.sh</a> and let me know what you think.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@mariashanina?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Maria Shanina</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Adding Google Calendar to your JAMStack",
		"date":"Sun Nov 17 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/11/18/adding-google-calendar-to-your-jamstack",
		"content":"<p>This is something I've had on my &quot;To Write&quot; list for a very long time. The plan changed over time but it never actually got done because I couldn't get what I wanted to do actually working, which as you can imagine put something of a crimp on getting this post done.</p>\n<p>I'm a huge Google Calendar user and I know many other people are as well. I thought it might be interesting to see if you could add upcoming events, driven by a Google Calendar, to a static website. Of course, you already have a simple way of doing this. If you go into your calendar settings, &quot;Integrate calendar&quot;, you'll find an &quot;Embed code&quot;:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/gcal1.png\" alt=\"Screenshot of embed UI\" class=\"imgborder imgcenter\">\n<p>If you click &quot;Customize&quot;, you can turn on or off various things, but the end result is a bit... meh.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/gcal2.png\" alt=\"Demo\" class=\"imgborder imgcenter\">\n<p>This is an example of the calendar embedded in a simple Bootstrap-driven site. The calendar is fully interactive in read-only mode. I just don't find it terribly pretty. You can find the online version here: <a href=\"https://site.raymondcamden.now.sh/\">https://site.raymondcamden.now.sh/</a> Go to December 2019 to see an example of an event.</p>\n<p>That's the super easy, get it done in one minute solution. But we don't like easy solutions, right?</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/gcal3.jpg\" alt=\"Cat learning node\" class=\"imgborder imgcenter\">\n<p>Alright - so before I even started thinking about integrating events into a static site, I tried to write a simple Node script that would get my events. This is the part that took a year.</p>\n<p>To be clear, it wasn't a year straight of working on it. I've got a job, yo. But I'd take a stab at it. Fail. And then try again a few months later. Why did I fail?</p>\n<p>Google provides a Node library for all of their services and they even have a <a href=\"https://developers.google.com/calendar/quickstart/nodejs\">quickstart</a> for integrating with the Calendar API in Node. However, the documentation assumes an OAuth flow. So basically, a solution that would work for the scenario where you want a website visitor to login via OAth and then you can display their information on your site.</p>\n<p>But that's not what I wanted. I wanted access to one specific calendar. I knew Google supported &quot;service accounts&quot;, which let you create a virtual (may not be the right word) access for their APIs. Jackie Han (either a fellow GDE or Google employee) pointed me to this StackOverflow post: <a href=\"https://stackoverflow.com/questions/26064095/inserting-google-calendar-entries-with-service-account/26067547#26067547\">Inserting Google Calendar Entries with Service Account</a></p>\n<p>This was a good post, but it was PHP based. And unfortunately, outside of the Node quickstart which used OAth, I found the rest of the docs to be really, really freaking hard. Here's the script I got working that I'll do my best to try to explain.</p>\n<pre><code class=\"language-js\">const {google} = require('googleapis');\nlet creds = require('./credentials2.json');\n\nasync function main() {\n\n\tconst auth = new google.auth.GoogleAuth({\n\t\tcredentials:creds,\n\t\tscopes: ['https://www.googleapis.com/auth/calendar']\n\t});\n\n\tconst calendar = google.calendar({\n\t\tversion:'v3',\n\t\tauth:auth\n\t});\n\n\tcalendar.events.list({\n\t\tcalendarId: '4p6qtp2jeu40piuul6bklfra94@group.calendar.google.com',\n\t\ttimeMin: (new Date()).toISOString(),\n\t\tmaxResults: 10,\n\t\tsingleEvents: true,\n\t\torderBy: 'startTime',\n\t}, (err, res) =&gt; {\n\t\tif (err) return console.log('The API returned an error: ' + err);\n\t\tconst events = res.data.items;\n\t\tif (events.length) {\n\t\t\tconsole.log('Upcoming 10 events:');\n\t\t\tevents.map((event, i) =&gt; {\n\t\t\tconst start = event.start.dateTime || event.start.date;\n\t\t\tconst loc = event.location || '(none)';\n\t\t\tconsole.log(`${start} - ${event.summary} Location: ${loc}`);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log('No upcoming events found.');\n\t\t}\n\t});\n\t\n}\n\nmain().catch(console.error);\n</code></pre>\n<p>I start off loading in the Google API package. Then I load in my credentials. That comes from Google's Service Account panel where I generated a key and selected the JSON output format. If we go into the <code>main</code> function, I create an auth object that makes use of that JSON data and defines the scope of my use, in this case just Google Calendar.</p>\n<p>So that part was like half a year to figure out. Maybe I'm being overly dramatic, but I literally had to guess at it for the most part.</p>\n<p>Next I make an instance of the Calendar library and I can use the same code as the quick start (except I added a display of the location part of the event). The calendar ID part was a pain. If you go to the same part of the calendar settings you would use to get the embed code and look at the various URLs, you will see they all include an email address in them. For example:</p>\n<pre><code>&lt;iframe src=&quot;https://calendar.google.com/calendar/embed?src=4p6qtp2jeu40piuul6bklfra94%40group.calendar.google.com&amp;ctz=America%2FChicago&quot; style=&quot;border: 0&quot; width=&quot;800&quot; height=&quot;600&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;\n</code></pre>\n<p>The email address is <code>4p6qtp2jeu40piuul6bklfra94%40group.calendar.google.com</code>. Change the <code>%40</code> to <code>@</code> and you've got your calendar ID.</p>\n<p>I ran this little script and got the following:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/gcal4.jpg\" alt=\"terminal output of node script\" class=\"imgborder imgcenter\">\n<p>Woot! Ok, so we've got code that can suck down events. The quick start demo code was already filtering on future events, sorted properly, and limited to ten, which is actually exactly what I want, but obviously you could tweak that to meet your needs. I decided to use <a href=\"https://www.11ty.io/\">Eleventy</a> to build my demo as it would let me set up a script to load events and display them on my page. To give you an idea of what I mean, let's look at the final result. First a screen shot:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/gcal5.png\" alt=\"List of events\" class=\"imgborder imgcenter\">\n<p>And here's the template behind this:</p>\n<pre><code class=\"language-html\">---\nlayout: layout\ntitle: Advanced Calendar\n---\n\n## Upcoming Events\n\nHere's our upcoming events:\n\n&lt;ul&gt;\n{% for event in events %}\n&lt;li&gt;{{ event.summary }} at {{ event.startValue }}\n{% if event.location %}&lt;br/&gt;Located at {{ event.location }}{% endif %}\n{% endfor %}\n\n&lt;/ul&gt;\n</code></pre>\n<p>Note that this isn't terribly creative, but it gets the job done. I'm looping over <code>events</code> which is driven by a file called <code>events.js</code> in my Eleventy's <code>_data</code> folder:</p>\n<pre><code class=\"language-js\">const {google} = require('googleapis');\nlet creds = require('./credentials.json');\n\nmodule.exports = async function() {\n\n\tconst auth = new google.auth.GoogleAuth({\n\t\tcredentials:creds,\n\t\tscopes: ['https://www.googleapis.com/auth/calendar']\n\t});\n\n\tconst calendar = google.calendar({\n\t\tversion:'v3',\n\t\tauth:auth\n\t});\n\n\treturn new Promise((resolve, reject) =&gt; {\n\n\t\tcalendar.events.list({\n\t\t\tcalendarId: '4p6qtp2jeu40piuul6bklfra94@group.calendar.google.com',\n\t\t\ttimeMin: (new Date()).toISOString(),\n\t\t\tmaxResults: 10,\n\t\t\tsingleEvents: true,\n\t\t\torderBy: 'startTime',\n\t\t}, (err, res) =&gt; {\n\t\t\tif (err) return console.log('The API returned an error: ' + err);\n\t\t\tlet events = res.data.items;\n\t\t\tevents = events.map(event =&gt; {\n\t\t\t\tconst start = event.start.dateTime || event.start.date;\n\t\t\t\tevent.startValue = start;\n\t\t\t\treturn event;\n\t\t\t});\n\n\t\t\tresolve(events);\n\t\t});\n\n\t});\n\n}\n</code></pre>\n<p>This is - essentially - the same logic as before with some minor tweaks. I have to return a promise since the Google API wrapper is using a callback. I also take the <code>start</code> value the original code used and write it to a new key, <code>startValue</code>, that I use in my template. I could further massage the event data here if I wanted.</p>\n<p>And that's it. You can see it live here: <a href=\"https://site.raymondcamden.now.sh/test\">https://site.raymondcamden.now.sh/test</a></p>\n<h2>Considerations</h2>\n<p>So, this solution isn't perfect. If you add, edit, or delete an event, it won't be reflected on the site. However, you could simply do daily builds of your site via a CRON job let it be updated at that point. Or do a manual update if you want.</p>\n<p>Another solution would be to use a serverless function with similar logic and JavaScript on the front end. To me, that seems like overkill for most organizations who may be changing their events only every couple of days, but if you absolutely need the most up to date list of events without needing to fire off a build, that would be an option as well.</p>\n<p>If you want to build this yourself, you can find my GitHub repo for the Eleventy site here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/gcal\">https://github.com/cfjedimaster/eleventy-demos/tree/master/gcal</a></p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@adders?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Adam Tinworth</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Sanitizing HTML in Vue.js",
		"date":"Mon Nov 25 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/11/26/sanitizing-html-in-vuejs",
		"content":"<p>As part of my goal to learn more about Vue (and, honestly, find things to blog about), I came across this interesting StackOverflow post: <a href=\"https://stackoverflow.com/questions/59057780/how-to-sanitize-html-received-from-an-api-call-in-vuejs/59057815#59057815\">How to Sanitize HTML Received from an API Call in Vue.js</a>. I did a quick Google search and came across a nice little library that makes this easy - <a href=\"https://www.npmjs.com/package/vue-sanitize\">vue-sanitize</a>. I thought it would be nice to give it a try (especially since I was suggesting it as a solution) so I whipped up a quick demo.</p>\n<p>Before I start though, it's good to remember how Vue treats HTML in data in general. Consider the following data:</p>\n<pre><code class=\"language-js\">message:`\nMy &lt;strong&gt;milkshake&lt;/strong&gt; brings all the boys to the yard&lt;br/&gt;\nAnd &lt;i&gt;they're&lt;/i&gt; like, it's better than yours\n`\n</code></pre>\n<p>This is a string with three HTML tags in it. Nothing scary, but let's see what happens if you try to output it:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    {{ message }}\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>This will return:</p>\n<pre><code>My &lt;strong&gt;milkshake&lt;/strong&gt; brings all the boys to the yard&lt;br/&gt; \nAnd &lt;i&gt;they're&lt;/i&gt; like, it's better than yours \n</code></pre>\n<p>As you can see, the HTML is escaped. Not ideal, right? If you know you can trust the data, you can use the <code>v-html</code> directive:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;span v-html=&quot;message&quot;&gt;&lt;/span&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>This will return what you expect. Cool! But... it's very black and white. You either escape all HTML or allow all HTML. What if you want something in between? This is where <a href=\"https://www.npmjs.com/package/vue-sanitize\">vue-sanitize</a> comes in. Not only will it allow you to use a whitelist of &quot;safe&quot; HTML tags, it will remove disallowed tags rather than escaping them.</p>\n<p>Using it is pretty simple and covered in the docs. Add the NPM package, and once done, you can then add it to your Vue.js code. From what I can see there's no support for &quot;script tag Vue&quot;, so you'll need to have a proper Vue application.</p>\n<p>Outside of that, there's only one main API, <code>this.$sanitize(someVariable)</code>. This will return a string with unsafe HTML tags removed. You still need to use <code>v-html</code> to render the safe HTML of course.</p>\n<p>The docs don't mention the defaults, but as the library wraps another library, <a href=\"https://github.com/apostrophecms/sanitize-html\">sanitize-html</a>, you can check <em>their</em> docs for the defaults:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/sani.png\" alt=\"List of defaults options\" class=\"imgborder imgcenter\">\n<p>Let me demonstrate an example before I show how you can customize the defaults. First, my main.js, which just loads in the library.</p>\n<pre><code class=\"language-js\">import Vue from &quot;vue&quot;;\nimport App from &quot;./App.vue&quot;;\n\nimport VueSanitize from &quot;vue-sanitize&quot;;\n\nVue.use(VueSanitize);\n\nVue.config.productionTip = false;\n\nnew Vue({\n  render: h =&gt; h(App)\n}).$mount(&quot;#app&quot;);\n</code></pre>\n<p>And now my test:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    Escaped: {{ message }}\n    &lt;p/&gt;\n    &lt;span v-html=&quot;message&quot;&gt;&lt;/span&gt;\n    &lt;hr/&gt;\n    &lt;span v-html=&quot;cleanMessage&quot;&gt;&lt;/span&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\nexport default {\n  name: &quot;App&quot;,\n  data() {\n    return {\n      message:`\n        My &lt;strong&gt;milkshake&lt;/strong&gt; brings all the boys to the yard&lt;br/&gt;\n        And &lt;i&gt;they're&lt;/i&gt; like, it's better than yours\n      `\n    }    \n  },\n  computed:{\n    cleanMessage() {\n      return this.$sanitize(this.message);\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>So I begin with two simple tests related to what I said before - the default behavior in Vue and the use of <code>v-html</code>. I don't use the sanitize code until <code>cleanMessage</code>. I've got that bound to a computed value that returns the sanitized version. The output is:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/sani2.png\" alt=\"Output with sanitized\" class=\"imgborder imgcenter\">\n<p>In this case, there's no difference between the built-in version and the sanitize version. I only used three simple HTML tags. Let's see what happens when we change the defaults.</p>\n<p>In order to change the defaults, you create your own object containing the defaults you would like. The main <a href=\"https://github.com/apostrophecms/sanitize-html#readme\">sanitize-html</a> site has some good examples on how to slightly modify the built in defaults. For my testing, I wanted to allow everything the defaults allowed, <em>except</em> for the <code>&lt;strong&gt;</code> tag. This is how I did it.</p>\n<pre><code class=\"language-js\">import Vue from &quot;vue&quot;;\nimport App from &quot;./App.vue&quot;;\n\nimport VueSanitize from &quot;vue-sanitize&quot;;\n\nlet defaults = VueSanitize.defaults;\n\ndefaults.allowedTags = defaults.allowedTags.filter(t =&gt; {\n  return t !== 'strong';\n});\n\nVue.use(VueSanitize,defaults);\n\nVue.config.productionTip = false;\n\nnew Vue({\n  render: h =&gt; h(App)\n}).$mount(&quot;#app&quot;);\n\n</code></pre>\n<p>Basically - loop through the array of <code>allowedTags</code> and remove when the tag name is <code>strong</code>. It's easier if you just want to define a short list of tags you want - just pass an array of strings.</p>\n<p>The result is as you expect:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/11/sani3.png\" alt=\"Now the output shows strong removed\" class=\"imgborder imgcenter\">\n<p>Notice though that the <code>&lt;strong&gt;</code> tag wasn't escaped, it was removed. That's much better than escaping it (typically). I could see this being really useful for allowing all the format tags but removing <code>&lt;a&gt;</code> for example. (And <code>&lt;iframe&gt;</code> and probably other's I've forgotten.)</p>\n<p>Anyway, I hope this is helpful. I've got a CodeSandbox with this running and you can play with it below.</p>\n<iframe\n     src=\"https://codesandbox.io/embed/vue-template-025et?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"Vue Sanitize Example\"\n     allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n     sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n   ></iframe>\n<p><i>Header photo by <a href=\"https://unsplash.com/@4themorningshoot?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Oliver Hale</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Sunday Quick Hack - Eliza in Vue.js",
		"date":"Sat Dec 07 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/12/08/sunday-quick-hack-eliza-in-vuejs",
		"content":"<p>I tend to be a bit hesitant when I go to blog what I consider to be totally trivial examples, but while working on this project this morning, I ran into a few little issues that I thought might be helpful to share for folks who don't waste their time building dumb games in Vue. Before I get into the code (and the small little issues I found), a quick history lesson.</p>\n<p>Eliza, or more correctly, ELIZA, is an <em>old</em> program (circle 1964) that attempts to parse your input and respond intelligently. The &quot;intelligence&quot; really wasn't. All Eliza really did was try to match patterns and then parrot them back to you. So telling it you don't like cats could give you a response of &quot;Don't you really like cats?&quot;</p>\n<p>The creator of Eliza (Joseph Weizenbaum) was trying to demonstrate the &quot;superficiality of communication&quot; between people and machines, but was surprised by how people responded to it. Instead of noticing the shallowness of the responses, multiple people felt an emotional connection to Eliza. You can read much more about Eliza at it's <a href=\"https://en.wikipedia.org/wiki/ELIZA\">Wikipedia</a> page and if you Google, you will find implementations of Eliza in pretty much every language possible. And as an interesting aside, there's also <a href=\"https://en.wikipedia.org/wiki/PARRY\">PARRY</a>, another early chatbot meant to simulate a person with paranoid schizophrenia. Of course, folks connected the two and you can see read one of their <a href=\"https://phrasee.co/parry-the-a-i-chatterbot-from-1972/\">conversations</a> if you're interested.</p>\n<p>So - that's a long winded way of saying - I felt like finding a simple Eliza JavaScript implementation and building a Vue.js demo around it. I did some Googling and one of the first ones I found was here: <a href=\"https://www.masswerk.at/elizabot/\">https://www.masswerk.at/elizabot/</a>. This code is nearly <strong>fifteen</strong> years old but was the first I found that was the easiest to &quot;plug and play&quot; into another application. It definitely doesn't follow what we would consider to be &quot;modern best practices&quot;, and in fact, it comes in two separate JavaScript files, with no minification, and pollutes the global variable space.</p>\n<p>But it works.</p>\n<p>Alright, so given that, let me share the end result so you can see it in action. I'll then explain the code. You can run Vue Eliza here: <a href=\"https://cfjedimaster.github.io/vue-demos/eliza/\">https://cfjedimaster.github.io/vue-demos/eliza/</a></p>\n<p>Here's a screen shot of in action, with all my design skills at play:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/eliza1.png\" alt=\"Screen shot of Eliza conversation.\" class=\"imgborder imgcenter\">\n<p>As you can see in the conversation above, it isn't terribly intelligent, but it comes close. If you didn't know better you could (possibly) be fooled into thinking you were talking to a real, if lazy, therapist. (And for folks curious, a real therapist isn't like this at all!) Let's look at the code. First, my HTML.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;Vue-Eliza&lt;/title&gt;\n\t\t&lt;script src=&quot;js/elizabot.js&quot;&gt;&lt;/script&gt;\n\t\t&lt;script src=&quot;js/elizadata.js&quot;&gt;&lt;/script&gt;\n\t\t&lt;link rel=&quot;stylesheet&quot; href=&quot;style/app.css&quot;&gt;\n\t&lt;/head&gt;\n\n\t&lt;div id=&quot;app&quot;&gt;\n\t\t&lt;div class=&quot;chatBox&quot; ref=&quot;chatBox&quot;&gt;&lt;span v-html=&quot;chat&quot;&gt;&lt;/span&gt;&lt;/div&gt;\n\t\t&lt;form @submit.prevent=&quot;&quot;&gt;&lt;input v-model=&quot;msg&quot; class=&quot;msg&quot;&gt;&lt;button @click=&quot;speak&quot; :disabled=&quot;!msg&quot; class=&quot;chatBtn&quot;&gt;Chat&lt;/button&gt;&lt;/form&gt;\n\t&lt;/div&gt;\n\n\t&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n\t&lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;\n\t&lt;body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>You can see I start off loading up Eliza, and like I mentioned, it's two different script files. The second one just provides data for your bot and - unfortunately - uses the global name space. Luckily my Vue app is completely separated from that (except for it's own instance) so I don't really have to worry about it.</p>\n<p>The UI consists of a chatbox, an input for your typing, and a button to send in the results. You can also use the enter key and make note of <code>@submit.prevent=&quot;&quot;</code> to stop the form from submitting itself. I've never used an event handler pointing to an empty string before, but Vue seemed to handle it perfectly. My confidence isn't terribly high on that but I tried it in Firefox and Chrome and it worked. (I just tested in Edge and it worked fine there too.)</p>\n<p>Now let's look at the JavaScript.</p>\n<pre><code class=\"language-js\">const app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tchat:'',\n\t\tmsg:'',\n\t\teliza:null\n\t},\n\tcreated() {\n\t\tthis.eliza = new ElizaBot();\n\t\tthis.chat = 'Eliza: '+this.eliza.getInitial();\n\t},\n\tmethods: {\n\t\tspeak() {\n\t\t\tlet reply = this.eliza.transform(this.msg);\n\t\t\tthis.chat += `&lt;br/&gt;You: ${this.msg}&lt;br/&gt;Eliza: ${reply}`;\n\t\t\tthis.msg = '';\n\t\t\tthis.$nextTick(() =&gt; {\n\t\t\t\t// https://stackoverflow.com/a/40737063/52160\n\t\t\t\tthis.$refs.chatBox.scrollTop = this.$refs.chatBox.scrollHeight;\n\n\t\t\t\tif(this.eliza.quit) {\n\t\t\t\t\talert('Your conversation is now over.');\n\t\t\t\t\twindow.location.reload(true);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n});\n</code></pre>\n<p>Not much to it, but let's point out some of the interesting bits.</p>\n<p>First, I begin by making a new instance of the Eliza bot. The library supports multiple bots so in theory, you could have a conversation with multiple Eliza's at once. I track the chat using one large string object where I keep appending new messages. I'm using HTML to break up newlines so note how I use <code>v-html</code> in my template to render it. I feel like this would be more memory efficient as an array perhaps but if you're having that long of a conversation with my bot... you should just stop.</p>\n<p>What's happening in <code>$nextTick</code>? Two things actually. First, I wanted to ensure that the div displaying the chat was always scrolled to the bottom. I found a simple one liner of doing that at StackOverflow (and I credited in the code above.) However, due to Vue updating the DOM asynchronously, I needed to wait until it had written out my new chat. You can read more about <code>$nextTick</code> on this <a href=\"https://www.raymondcamden.com/2019/02/22/what-is-nexttick-in-vue-and-when-you-need-it\">blog post</a> I wrote earlier in the year.</p>\n<p>Secondly, I also check to see if the conversation is over. The bot provides a simple boolean value, <code>quit</code>, that you can check and respond to if you wish. In my demo I simply alert the user and then reload the page. Another option would be to make a new instance of the bot and clear the chat. It would be all of maybe 2-3 more lines of code but I took the easy way out with a reload.</p>\n<p>Anyway, that's it, and let me know if you have any questions by leaving a comment below. You can find the complete source coe for this demo here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/eliza\">https://github.com/cfjedimaster/vue-demos/tree/master/eliza</a></p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@rocknrollmonkey?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Rock'n Roll Monkey</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Using Bearer for Easier OAuth and API Calls",
		"date":"Tue Dec 10 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/12/11/using-bearer-for-easier-oauth-and-api-calls",
		"content":"<p>For the past few days I've been playing with a new service that I'm <em>really</em> excited about, <a href=\"https://www.bearer.sh/\">Bearer</a>. At a high level, Bearer gives you a proxy to other APIs to provide monitoring, logging, incident reporting, and more. At a lower level, there's one aspect of Bearer (and again, this blog entry is on <em>one</em> aspect of Bearer) that really got my attention.</p>\n<p>Working with OAuth isn't <em>terribly</em> difficult, especially if you can use a library like <a href=\"http://www.passportjs.org/\">Passport</a> to simplify it a bit. I first blogged about <a href=\"https://www.raymondcamden.com/2016/06/23/some-quick-tips-for-passport\">my experiences</a> with Passport back in 2016. Things get more interesting when you then work with APIs that require OAuth first, as you typically (or at least in my experience) have to follow up the initial OAuth flow with a call to get a &quot;bearer token&quot; and <em>then</em> call your API.</p>\n<p>Again, not <em>terribly</em> difficult, but not exactly fun either. It's also something you can't do 100% client-side. (<a href=\"https://auth0.com\">Auth0</a> helps here, I'll talk about it a bit more at the end.) With serverless functions it's possible to have a &quot;mostly&quot; client-side JAMStack type site but what if you could skip that entirely?</p>\n<p>Bearer will give you the ability to login with OAuth flow and handle the process of getting bearer tokens for you. Finally, it lets you use it's JavaScript library to make calls to remote API, CORS or not, by proxying via it's network. It took me a few tries to get it working correctly, but once I did, I was incredibly impressed. As an example, I'd like to share a demo I built.</p>\n<p>Back in 2016, I create a Node.js demo that retrieved images from a Twitter account: <a href=\"https://www.raymondcamden.com/2016/03/25/getting-images-from-a-twitter-account\">Getting Images from a Twitter Account</a> I built this because I follow (and have created) a number of Twitter accounts that only (or mostly) post pictures. My tool would let you specify an account, fetch the pictures, and just display them in one big wall of media.</p>\n<img src=\"https://static.raymondcamden.com/images/2016/03/t3.jpg\" alt=\"Screenshot from older demo\" class=\"imgborder imgcenter\">\n<p>If you look at the <a href=\"https://github.com/cfjedimaster/TwitterSuckImage\">repo</a> for that demo, you can see a lot of code involved in the OAth flow and then handling the API calls to Twitter. Again, not terrible, but &quot;work&quot;. I don't like work. So what was this like in Bearer?</p>\n<p>The first thing I did was sign up at Bearer of course. Then I registered a new Twitter API.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/b1.png\" alt=\"Screenshot of the dashboard\" class=\"imgborder imgcenter\">\n<p>This involved me making an app on Twitter's developer portal first and then providing those credentials to Bearer. Once registered, if you intend to use their API, you must go into Settings, scroll down to Security, and toggle Client-Side API Calls.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/b2.png\" alt=\"Security setting\" class=\"imgborder imgcenter\">\n<p>Don't forget this. I did.</p>\n<p>Once enabled, it's time for the code. At a basic level, it comes down to doing the auth first, which can look like this:</p>\n<pre><code class=\"language-js\">this.client = bearer('pk_development_e38bd15803c95f9c09e64a0da804e181299dc477dd05751651')\n\nthis.client.connect(&quot;twitter&quot;)\n.then(data =&gt; {\n\tthis.authId = data.authId;\n})\n.catch(console.error);\n</code></pre>\n<p>The resulting <code>authId</code> value is then used in later API calls:</p>\n<pre><code class=\"language-js\">this.client.integration('twitter')\n.auth(this.authId)\n.get('users/show.json?screen_name=raymondcamden')\n.then(({ data }) =&gt; { this.settings = data; })\n.catch(err =&gt; { console.log('Error: ', err) })\n</code></pre>\n<p>Note I only use the ending portion of the URL for Twitter API calls. Bearer knows how to handle it. And that's basically it. With that in mind, I rebuilt my previous demo using Vue.js. I didn't built it exactly the same as the previous one. I didn't add the &quot;lightbox&quot; effect for example. But I got everything done in one simple(ish) component. First - the template:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;v-app&gt;\n    &lt;v-app-bar app dark&gt;\n      &lt;v-toolbar-title&gt;Twitter Image Search&lt;/v-toolbar-title&gt;\n    &lt;/v-app-bar&gt;\n\n    &lt;v-content class=&quot;ma-5&quot;&gt;\n\n      &lt;p&gt;\n      This tool provides an &quot;image only&quot; view of a Twitter account. Simply enter the username of an account \n      and you'll see the most recent pictures they've embedded into their Tweets. You can click an individual\n      image for a close up view.          \n      &lt;/p&gt;\n\n      &lt;div v-if=&quot;!authId&quot;&gt;\n        &lt;v-btn @click=&quot;login&quot;&gt;Authenticate with Twitter&lt;/v-btn&gt;\n      &lt;/div&gt;\n      &lt;div v-else&gt;\n        \n          &lt;v-row&gt;\n            &lt;v-col cols=&quot;12&quot; sm=&quot;3&quot;&gt;\n              &lt;v-text-field v-model=&quot;user&quot; required label=&quot;Username&quot;&gt;&lt;/v-text-field&gt;\n            &lt;/v-col&gt;\n            &lt;v-col cols=&quot;12&quot; sm=&quot;6&quot;&gt;\n              &lt;v-btn @click=&quot;getImages&quot;&gt;Get Images&lt;/v-btn&gt;\n            &lt;/v-col&gt;\n          &lt;/v-row&gt;\n\n        &lt;div v-if=&quot;loading&quot;&gt;\n          &lt;p&gt;\n            &lt;i&gt;Loading...&lt;/i&gt;\n          &lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;v-container fluid v-if=&quot;images&quot;&gt;\n          &lt;v-row&gt;\n            &lt;v-col class=&quot;d-flex child-flex&quot; cols=&quot;3&quot; v-for=&quot;(img,idx) in images&quot; :key=&quot;idx&quot; &gt;\n              &lt;v-img :src=&quot;img&quot; max-width=&quot;350&quot; max-height=&quot;500&quot; /&gt;\n            &lt;/v-col&gt;\n          &lt;/v-row&gt;\n        &lt;/v-container&gt;\n\n      &lt;/div&gt;\n\n    &lt;/v-content&gt;\n  &lt;/v-app&gt;\n&lt;/template&gt;\n</code></pre>\n<p>I'm using <a href=\"https://vuetifyjs.com/en/\">Vuetify</a> for the UI layout. Initially the button prompting for login is displayed, and after you've authenticated, I then show a form where you can enter a username and ask for their images. I defaulted to <a href=\"twitter.com/oneperfectshot\">oneperfectshot</a> as it's a damn cool account. Here's how it renders.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/b3b.jpg\" alt=\"Screenshot of demo\" class=\"imgborder imgcenter\">\n<p>Now for the JavaScript:</p>\n<pre><code class=\"language-js\">import bearer from '@bearer/js';\n\nconst BEARER_KEY = 'pk_development_e38bd15803c95f9c09e64a0da804e181299dc477dd05751651';\n\nexport default {\n  name: 'App',\n  data: () =&gt; ({\n      authId: null,\n      client: null,\n      images: [],\n      user: 'oneperfectshot',\n      loading: false\n  }),\n  mounted() {\n    this.client = bearer(BEARER_KEY);\n  },\n  methods: {\n    login() {\n      this.client\n        .connect(&quot;twitter&quot;)\n        .then(data =&gt; {\n          this.authId = data.authId;\n        })\n        .catch(console.error);\n    },\n    getImages() {\n      this.images = [];\n      this.loading = true;\n      let account = this.user;\n      console.log(`loading images for ${account} and my auth is ${this.authId}`);\n      this.client\n        .integration(&quot;twitter&quot;)\n        .auth(this.authId)\n        .get(\n          `search/tweets.json?q=from%3A${account}+filter%3Amedia&amp;count=100&amp;tweet_mode=extended`\n        )\n        .then(({ data }) =&gt; {\n          this.loading = false;\n          console.log(`Got ${data.statuses.length} tweets`);\n          // in theory not needed since we asked for stuff with media\n          let filtered = data.statuses.filter(t =&gt; {\n            return (\n              t.entities &amp;&amp; t.entities.media &amp;&amp; t.entities.media.length &gt; 0\n            );\n          });\n          console.log(`Filtered to ${filtered.length} tweets with media`);\n          filtered.forEach(t =&gt; {\n            t.entities.media.forEach(m =&gt; {\n              this.images.push(m.media_url_https);\n            });\n          });\n        })\n        .catch(err =&gt; {\n          console.log(&quot;Error: &quot;, err);\n        });\n    }\n  }\n\n};\n</code></pre>\n<p>Outside of the Vue stuff, this is mostly a repeat of what I showed before. One call to auth and one call to the API. In this case, I'm using Twitter's API to search for tweets from a user, that have media, and then filtering out to get the image URLs.</p>\n<p>Want to try it out yourself? I'm hosting it here: <a href=\"https://twitter-image-search.raymondcamden.now.sh/\">https://twitter-image-search.raymondcamden.now.sh/</a> You can find the source code here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/twitter-image-search\">https://github.com/cfjedimaster/vue-demos/tree/master/twitter-image-search</a></p>\n<p>And that's basically it. As I said, Bearer does more. As one more small example, here are the included logs for my demo.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/b4.jpg\" alt=\"Logs\" class=\"imgborder imgcenter\">\n<p>I also like the simpler stats on the dashboard:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/b6.jpg\" alt=\"Dashboard\" class=\"imgborder imgcenter\">\n<p>As I said, I'm really impressed by their service and how easy it was to get going with an entirely client-side application. Earlier I mentioned Auth0. Auth0 obviously does login really simple. What it doesn't do simply is the bearer token stuff. It is definitely possible and my buddy <a href=\"https://iamnotmyself.com/\">Bobby Johnson</a> showed me an example. I couldn't get it working, but I trust his worked and that it was my issue. But honestly, I was really surprised Auth0 didn't make this as simple as Bearer did. All in all, Bearer just feels easier to use. (I should add that while I worked at Auth0, I never worked with their main identity product. My experience there was with their serverless platform.)</p>\n<p>Anyway - I'd love to hear from anyone who may be using Bearer. Please leave me a comment below and tell me what you think.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@anniespratt?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Annie Spratt</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building Sudoku in Vue.js - Part 1",
		"date":"Sun Dec 15 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/12/16/building-sudoku-in-vuejs-part-1",
		"content":"<p>While sitting at my local airport yesterday, I decided to take advantage of a ninety minute delay by working on another Vue.js game - an implementation of Sudoku. No, not <em>that</em> guy...</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/dooku2.jpg\" alt=\"Count Dooku\" class=\"imgborder imgcenter\">\n<p>But the <a href=\"https://en.wikipedia.org/wiki/Sudoku\">game</a> where you must fill in a puzzle grid. The grid consists of 9 rows of 9 cells. Each row must contain the numbers 1-9. Each column as well. And each &quot;block&quot; of 3x3 grids must always contain the numbers. Here's how a typical puzzle may look...</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/puzzle1.png\" alt=\"Sudoku puzzle\" class=\"imgborder imgcenter\">\n<p>And here's the puzzle solved.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/puzzle2.png\" alt=\"Solved Sudoku puzzle\" class=\"imgborder imgcenter\">\n<p>I am - shall we say - slightly addicted to this game. It's a great way to pass some time and I enjoy the feeling of completing the puzzle. I'll typically play one to two puzzles per day and I'm <em>slowly</em> getting better at it. I thought it would be fun to take a stab at building my own Sudoku puzzle game in Vue.</p>\n<p>To be clear, I didn't want to write the code to build a puzzle or solve it. That's some high level algorithm stuff that I simply suck at. (Ask me sometime about how I failed these tests trying to get a developer advocate job at Google.) But I figured if I googled for &quot;sudoku javascript&quot; I'd find about a million results and I wasn't disappointed. I came across a great library at <a href=\"https://github.com/robatron/sudoku.js\">https://github.com/robatron/sudoku.js</a>. It generates puzzles, solutions, even possible candidates for empty cells it had everything. It was a bit old, but I figured that just meant it had some experience and why hold that against it?</p>\n<p>I've worked on this off and on over the past two days and I've gotten it about 70% done. I figured it was a good place to take a break, share what I've done so far, and then continue on to wrap the game later in the week. (And the good news is that when I couldn't sleep last night, I thought about <em>another</em> game I'm going to build in Vue later!)</p>\n<p>So, let's take a look! First, what do I have working so far?</p>\n<ul>\n<li>I have the puzzle being generated and displayed.</li>\n<li>You can click an empty square to select it.</li>\n<li>You can type a number and it fills in.</li>\n</ul>\n<p>What's left?</p>\n<ul>\n<li>See if you solved the puzzle</li>\n<li>Let you start a new game and select the difficulty</li>\n</ul>\n<p>Honestly there isn't a lot left, but I really felt like I hit a milestone tonight, and I'm tired, so I figured it was a good place to stop and blog.</p>\n<p>I'll start off with the <code>App.vue</code> page. Right now it's pretty minimal.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;h1&gt;Sudoku&lt;/h1&gt;\n    &lt;Grid /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Grid from '@/components/Grid';\n\nexport default {\n  name: 'app',\n  components: {\n    Grid\n  },\n  created() {\n    this.$store.commit('initGrid');\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n&lt;/style&gt;\n</code></pre>\n<p>Basically it just calls the <code>Grid</code> component and then asks the grid to initialize itself. I'm using Vuex in this demo and most of the logic is there. Let's look at the Grid component.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;table&gt;\n      &lt;tbody&gt;\n      &lt;tr v-for=&quot;(row,idx) in grid&quot; :key=&quot;idx&quot;&gt;\n        &lt;td v-for=&quot;(cell,idy) in row&quot; :key=&quot;idy&quot; \n\t\t:class=&quot;{ locked: grid[idx][idy].locked, selected:grid[idx][idy].selected }&quot;\n        @click=&quot;setSelected(grid[idx][idy], idx, idy)&quot;&gt; {{ grid[idx][idy].value }}&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState } from 'vuex';\n\nexport default {\n  name: 'Grid',\n  computed: mapState([\n    'grid'\n  ]),\n  methods: {\n    pickNumber(e) {\n      let typed = parseInt(String.fromCharCode(e.keyCode),10);\n      // if it was NaN, split out\n      if(!typed) return;\n      console.log(typed);\n      this.$store.commit('setNumber', typed);\n    },\n    setSelected(cell,x,y) {\n      this.$store.commit('setSelected',{x,y});\n    }\n  },\n  mounted() {\n    window.addEventListener('keypress', this.pickNumber);\n  },\n  destroyed() {\n    window.removeEventListener('keypress', this.pickNumber);\n  }\n}\n&lt;/script&gt;\n\n&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;\n&lt;style scoped&gt;\ntable {\n  border-collapse: collapse;\n  border: 2px solid;\n}\n\ntd {\n  border: 1px solid;\n  text-align: center;\n  height: 40px;\n  width: 40px;\n}\n\ntable tbody tr td:nth-child(3), table tbody tr td:nth-child(6) {\n  border-right: 2px solid;\n}\n\ntable tbody tr:nth-child(3), table tbody tr:nth-child(6) {\n  border-bottom: 2px solid;\n}\n\ntd.locked {\n  cursor: not-allowed;\n}\n\ntd {\n  cursor: pointer;\n}\n\ntd.selected {\n  background-color: bisque;\n}\n&lt;/style&gt;\n</code></pre>\n<p>Let me start off by saying that I am DAMN PROUD OF MY CSS! I honestly didn't think I'd get the design right.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I am *incredibly* proud I was able to style this Sudoku table with CSS. It was just a few border commands, but I honestly thought I couldn&#39;t do it. <a href=\"https://t.co/l8rzF2049E\">pic.twitter.com/l8rzF2049E</a></p>&mdash; Raymond Camden 🥑 (@raymondcamden) <a href=\"https://twitter.com/raymondcamden/status/1206341688874156032?ref_src=twsrc%5Etfw\">December 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n<p>Outside of that my display just renders the table. I've got some basic keyboard support in (see my <a href=\"https://www.raymondcamden.com/2019/08/12/working-with-the-keyboard-in-your-vue-app\">article</a>) on that topic) as well as the ability to select a cell. You have to pick a cell before you can type in a number. But that's it. The real meat of the application is in my Vuex store.</p>\n<pre><code class=\"language-js\">import Vue from 'vue'\nimport Vuex from 'vuex'\n\nimport sudokuModule from '@/api/sudoku.js';\n\nVue.use(Vuex);\n\n/*\ndifficulty: easy,medium,hard,very-hard,insane,inhuman\n*/\n\nexport default new Vuex.Store({\n  state: {\n    grid: null,\n    origString:null,\n    difficulty:'hard',\n    selected:null\n  },\n  mutations: {\n    initGrid(state) {\n      state.origString = sudokuModule.sudoku.generate(state.difficulty);\n\n      let candidates = sudokuModule.sudoku.get_candidates(state.origString)\n      state.grid = sudokuModule.sudoku.board_string_to_grid(state.origString);\n\n      let solution = sudokuModule.sudoku.solve(state.origString);\n      let solvedGrid = sudokuModule.sudoku.board_string_to_grid(solution);\n\n      // change . to &quot;&quot;, also store a ob instead of just numbers\n      for(let i=0;i&lt;state.grid.length;i++) {\n        for(let x=0;x&lt;state.grid[i].length;x++) {\n\n          let newVal = {\n            value:parseInt(state.grid[i][x],10),\n            locked:true,\n            candidates:candidates[i][x],\n            selected:false,\n            solution:parseInt(solvedGrid[i][x],10)\n          };\n          if(state.grid[i][x] === '.') {\n            newVal.value = '';\n            newVal.locked = false;\n          }\n          state.grid[i][x] = newVal;\n        }\n      }\n    },\n    setNumber(state, x) {\n      if(!state.selected) return;\n      let row = state.grid[state.selected.x];\n      row[state.selected.y].value = x;\n      Vue.set(state.grid, state.selected.x, row);\n    },\n    setSelected(state, pos) {\n      if(state.grid[pos.x][pos.y].locked) return;\n      for(let i=0;i&lt;state.grid.length;i++) {\n       let row = state.grid[i];\n       for(let x=0;x&lt;row.length;x++) {\n         if((i !== pos.x || x !== pos.y) &amp;&amp; row[x].selected) { \n           row[x].selected = false;\n         }\n         if(i === pos.x &amp;&amp; x === pos.y) {\n           row[x].selected = true;\n           state.selected = pos;\n         }\n       }\n       Vue.set(state.grid, i, row);\n     }\n    }\n  }\n})\n</code></pre>\n<p>This is somewhat large, so let me point out some interesting bits. First off, this line:</p>\n<pre><code class=\"language-js\">import sudokuModule from '@/api/sudoku.js';\n</code></pre>\n<p>I honestly guessed at this. The Sudoku code I used defines a sudoku object under <code>window</code> and is typically loaded via a script tag. I was going to add the script tag to my <code>index.html</code> but decided I'd try that. It worked, but I didn't know how to actually <em>get</em> to the methods. After some digging I found I could do it via <code>sudokuModule.sudoku.something()</code>. Again, I was just guessing here and I really don't know if this is &quot;best practice&quot;, but it worked.</p>\n<p><code>initGrid</code> does a lot of the setup work. I generate the puzzle, which is a string, and then convert it to a 2D array. The library has this baked in, but I made my own grid and store additional information - candidates, solution, and a locked value to represent numbers that were set when the game started (you can't change those).</p>\n<p><code>setNumber</code> simply sets a cell value, it doesn't validate if it's ok. I'm probably going to change that. When I play I like automatic alerts when I've picked the wrong value. That's probably cheating a bit, but I only guess when I'm frustrated with a hard puzzle and I'm fine with that.</p>\n<p>Finally, <code>setSelected</code> is how I select a cell. I also use this to deselect anything picked previous. Make note of <code>Vue.set</code>. This is required when working with nested arrays/objects and it's probably something everyone using Vue runs into eventually. Check the docs on it for more details: <a href=\"https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats\">Change Detection Caveats</a></p>\n<p>That's it for the first part. You can see the code as it stands currently at <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/sudoku\">https://github.com/cfjedimaster/vue-demos/tree/master/sudoku</a>. If you want to see it in your browser, visit <a href=\"https://sudoku.raymondcamden.now.sh/\">https://sudoku.raymondcamden.now.sh/</a>.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@jamessutton_photography?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">James Sutton</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building Sudoku in Vue.js - Part 2",
		"date":"Wed Dec 18 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/12/19/building-sudoku-in-vuejs-part-2",
		"content":"<p>Earlier this week I <a href=\"https://www.raymondcamden.com/2019/12/16/building-sudoku-in-vuejs-part-1\">blogged</a> about my attempt to build a Sudoku game in Vue.js. At the time, I felt like I had done a good majority of the work, but that I was at a good stopping point to write it up and blog. Well last night I &quot;finished&quot; the app (to be clear, there's absolutely room for polish) and I'm kind of embarrassed at how little I had left to do. I'm going to assume I'm just far more intelligent than I think and am an awesome coder despite failing the Google test more than once.</p>\n<p>In this update I tackled three things:</p>\n<ul>\n<li>Added the ability start a new game with a custom difficulty.</li>\n<li>Marking incorrect entries. Which again is a personal preference, it wouldn't be too hard to make this optional.</li>\n<li>Added the ability to notice when you won.</li>\n</ul>\n<p>Let me tackle each part separately. For difficulty, I began by adding the supported difficulty levels to my state:</p>\n<pre><code class=\"language-js\">difficulties: [&quot;easy&quot;, &quot;medium&quot;, &quot;hard&quot;, &quot;very-hard&quot;, &quot;insane&quot;, &quot;inhuman&quot;],\n</code></pre>\n<p>I then modified <code>initGrid</code> to handle an optional difficulty:</p>\n<pre><code class=\"language-js\">mutations: {\n\tinitGrid(state, difficulty) {\n\t\tif(!difficulty) difficulty = state.difficulties[0];\n \t\tstate.origString = sudokuModule.sudoku.generate(difficulty);\n</code></pre>\n<p>Finally, over in my main <code>App.vue</code>, I added UI to render the difficulties and a button to start a new game. There's no restriction on when you can do this. First the HTML:</p>\n<pre><code class=\"language-html\">&lt;select v-model=&quot;difficulty&quot;&gt; \n&lt;option v-for=&quot;(difficulty,idx) in difficulties&quot; :key=&quot;idx&quot;&gt;{{difficulty}}&lt;/option&gt;\n&lt;/select&gt; &lt;button @click=&quot;newGame&quot;&gt;Start New Game&lt;/button&gt;\n</code></pre>\n<p>And here's the code behind this.</p>\n<pre><code class=\"language-js\">import { mapState } from 'vuex';\n\nimport Grid from '@/components/Grid';\n\nexport default {\n  name: 'app',\n  components: {\n    Grid\n  },\n  data() {\n    return {\n      difficulty: null\n    }\n  },\n  computed: mapState([\n    'difficulties', 'wonGame'\n  ]),\n  created() {\n    this.$store.commit('initGrid');\n    this.difficulty = this.difficulties[0];\n  },\n  methods: {\n    newGame() {\n      this.$store.commit('initGrid', this.difficulty);\n    }\n  }\n}\n</code></pre>\n<p>I'm using <code>mapState</code> to bring in the difficulties and then added a method, <code>newGame</code>, that calls <code>initGrid</code> with the selected difficulty.</p>\n<p>Now let's look at marking incorrect values. I modified <code>setNumber</code> in my store to simply check if the new value matches the solution value:</p>\n<pre><code class=\"language-js\">// highlight incorrect answers\nif(x !== state.grid[state.selected.x][state.selected.y].solution) {\n\trow[state.selected.y].error = true;\n} else {\n\trow[state.selected.y].error = false;\n}\n</code></pre>\n<p>Then in Grid.vue, I check for this value and apply a class:</p>\n<pre><code class=\"language-html\">&lt;td v-for=&quot;(cell,idy) in row&quot; :key=&quot;idy&quot; \n:class=&quot;{ \n\tlocked: grid[idx][idy].locked, \n\tselected:grid[idx][idy].selected,\n\terror:grid[idx][idy].error\n}&quot;\n@click=&quot;setSelected(grid[idx][idy], idx, idy)&quot;&gt; {{ grid[idx][idy].value }}&lt;/td&gt;\n</code></pre>\n<p>Finally, to handle if you've won the game, I further modified <code>setNumber</code> by adding in this code:</p>\n<pre><code class=\"language-js\">/*\ndid we win? this feels like it should be it's own method\n*/\nlet won = true;\nfor(let i=0;i&lt;state.grid.length;i++) {\n\tfor(let x=0;x&lt;state.grid[i].length;x++) {\n\t\tif(state.grid[i][x].value !== state.grid[i][x].solution) won = false;\n\t}\n}\nif(won) state.wonGame = true;\n</code></pre>\n<p>As the comment says, it really felt like this should be it's own method. Looking over my code now, I'd probably consider moving my Sudoku &quot;game&quot; logic in it's own file and keep my store focused on just the data. I say this again and again but I still struggle, or not struggle, but really think about, where to put my logic when it comes to Vue and Vuex. I love that Vue is flexible in this regard though!</p>\n<p>The final part of handling &quot;game won&quot; logic is a simple conditional in the main component:</p>\n<pre><code class=\"language-html\">&lt;div v-if=&quot;wonGame&quot;&gt;\n\t&lt;h2 class=&quot;wonGame&quot;&gt;YOU WON!&lt;/h2&gt;\n&lt;/div&gt;\n</code></pre>\n<p>That's pretty simple and could be much more exciting, but I'm happy with it. You can see the code at <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/sudoku\">https://github.com/cfjedimaster/vue-demos/tree/master/sudoku</a>. If you want to see it in your browser, visit <a href=\"https://sudoku.raymondcamden.now.sh/\">https://sudoku.raymondcamden.now.sh/</a>. Please let me know what you think by leaving me a comment below!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@tiendabandera?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Tienda Bandera</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "A Non-Spoiler Review of The Rise of Skywalker",
		"date":"Thu Dec 19 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/12/20/a-non-spoiler-review-of-the-rise-of-skywalker",
		"content":"<p>As I said in the title, nothing in the <em>main blog text</em> here will contain spoilers. However, the comments are a free fire zone and I'll be adding my own spoilers there. As always, I don't pretend to be a &quot;real&quot; movie reviewer or even slightly unbiased when it comes to Star Wars, but I'll do my best to be honest about what I thought.</p>\n<p>For folks who may be new here, I am a lifelong fan of Star Wars. Some of my earliest memories are of seeing the original trilogy as a child, then the prequels years later, and the new trilogy on opening night. I work in an office surrounded by hundreds of Star Wars toys (not pristine, my collecting criteria is &quot;does this look cool&quot;) and I've permanently marked my skin with not one, but three different Star Wars tattoos. When I ride my bike, my mind immediately goes here...</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/sw1.jpg\" alt=\"Speeder bikes from ROTJ\" class=\"imgborder imgcenter\">\n<p>To be clear, I'm not saying I'm more of a Star Wars fan than anyone else. I'm just saying that for me, Star Wars has been a huge part of my life from pretty much day one. I have no misconceptions about it's value compared to other media and I certainly don't think it's perfect. But I love it.</p>\n<p>When I was very young, I remember reading that Lucas had imagined his Star Wars saga as nine movies. I distinctly remember thinking how sad it was that I'd probably never see the &quot;whole&quot; store.</p>\n<p>And then we got the prequels.</p>\n<p>I still remember going to some random movie - I think it was an Adam Sandler comedy - literally just to watch the teaser. When it was available online, I remember watching it hundreds of times.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/H8g8nRvCVUA\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>The prequels ended up disappointing a lot of people. Personally, I loved parts of them. I thought Obi Wan and Palpatine were perfect. I loved how the Jedi were duped. But... they failed to give Vader a good origin story. Failed completely. That's a shame, but it didn't stop me from enjoying them for what they were.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/sw2.jpg\" alt=\"The Phantom Menace\" class=\"imgborder imgcenter\">\n<p>Fast forward another decade or so and we get not only the announcement of the final trilogy, but other movies as well.</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/sw3.jpg\" alt=\"The Force Awakens poster\" class=\"imgborder imgcenter\">\n<p>I loved The Force Awakens. I <em>especially</em> love Rogue One, which is my absolute favorite Star Wars movie, hands down. (Yes, even more so than Empire.) I thought Solo was far underrated and wished it had gotten a better reception from audiences. I thought The Last Jedi was fascinating. If I could point out issue with The Force Awakens is that it felt like fan service at times. I'm a fan and that's ok, but The Last Jedi felt like it was made by someone who wanted to challenge me and my preconceived notions of what Star Wars should be. I like that and respect that.</p>\n<p>So - that's a hell of a lot of preamble. :) The Rise of Skywalker was damn enjoyable. It did <em>not</em> feel like as much of a &quot;fan service&quot; movie as The Force Awakens and I can honestly say it surprised me more than I thought it would. There were multiple moments where I got choked up, and the ending itself was quite beautiful. I mean, we're looking at a story released over forty years. There was a lot riding on this conclusion and I've got to say I'm happy with it.</p>\n<p>Was it great? Eh.... not really. But I'd say it was really good. It isn't in my top three Star Wars movies, but certainly nowhere near the bottom. The editing in the beginning felt really rushed and was a bit offputting, even while really, really cool stuff was being shown. The things I'd really thought were great will have to wait for the comments, but I'm looking forward to watching it again. And soon.</p>\n<p>I'm kind of torn. On one hand, we've gotten some damn good Star Wars stuff lately. The Mandalorian is... incredible. I didn't feel like I could call Rise of Skywalker great but I have absolutely no problems calling Mandalorian great, amazing even. The books (and comic books) the last few years have been awesome as well. Fallen Order was... Ok... but I know a lot of folks really like it. It's a great time for Star Wars, but it does feel like a huge chapter is done. I'm excited about what's next, but sad that the Skywalker story is finally over.</p>\n<p>Anyway - stop what you're doing - grab a giant bucket of popcorn - and get your butt in a theater seat soon!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@oliver_z?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Oliver Zenglein</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "movies"
            
		]

	},

	{
		"title": "Another Vue Game Demo - Hangman",
		"date":"Wed Dec 25 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/12/26/another-vue-game-demo-hangman",
		"content":"<p>I decided to wrap up my year with one last post... and yet another web game built with my favorite framework, Vue.js. Many, <em>many</em> years ago (like, 2010) I built a Hangman game using Adobe AIR. For folks who don't remember, AIR was a product that let you use Flash, Flex, or HTML to build cross-platform desktop and mobile applications. I thought it was pretty neat, but it's gone the way of many of Adobe's developer products and is best left in the past. I thought I'd take a stab at building the game in Vue.js.</p>\n<p>For folks who may not know, <a href=\"https://en.wikipedia.org/wiki/Hangman_(game)\">Hangman</a> is a word guessing game. You're presented with a series of blank characters and must select letters you think make up the word. Every correct choice will make the character show up in the word. Every incorrect choice will bring you closer to &quot;death&quot;, death being represented by a stick figure that gets closer to completion on every mistake.</p>\n<p>My game would need to:</p>\n<ul>\n<li>Select a random word</li>\n<li>Display the word as blanks (or dashes)</li>\n<li>Let you type to pick letters</li>\n<li>Update the display based on your choice, either filling in correct letters or drawing the stick figure</li>\n</ul>\n<p>I got everything working and if you want to stop reading this boring blog post and just play, head over here: <a href=\"https://hangman.raymondcamden.now.sh/\">https://hangman.raymondcamden.now.sh/</a></p>\n<p>Now let me share some of the tidbits on how I built it.</p>\n<h3>Finding Words</h3>\n<p>The first thing I did was find my source of words. I found this repository (<a href=\"https://github.com/first20hours/google-10000-english\">https://github.com/first20hours/google-10000-english</a>) which contains the ten thousand most common English words. One list had the swear words removed so I used that. It ended up as 9894 words which felt like more than enough.</p>\n<p>Originally my plan was to store the words in IndexedDB and select a random result from there (<a href=\"https://www.raymondcamden.com/2014/11/30/Selecting-a-random-record-from-an-IndexedDB-Object-Store\">Selecting a random record from an IndexedDB Object Store</a>). But then I realized that the word list was only 74k. While I still think it would make sense to cache this locally, I decided it was ok to skip that for now.</p>\n<p>I set up an action in Vuex to handle fetching the words, splitting the text file by new lines, and handling the random selection. Here's that code:</p>\n<pre><code class=\"language-js\">async selectWord(context) {\n\t//did we load the words yet?\n\tif(context.state.words.length === 0) {\n\t\tlet resp = await fetch('./words.txt');\n\t\tlet text = await resp.text();\n\t\tcontext.commit('setWords', text.split('\\n'));\n\t}\n\tlet selected = context.state.words[getRandomInt(0, context.state.words.length)];\n\tcontext.commit('initGame', selected);\n}\n</code></pre>\n<p>As you can see, I do cache the network call so if you play multiple times in one session, it won't need to reload the data.</p>\n<h3>The Game</h3>\n<p>So I described the steps of the game above. I showed the random word selection logic above, let me share a few more interesting bits.</p>\n<p>When you play the game, the word you have to figure out is displayed as a series of dashes, like so:</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/hang1.png\" alt=\"Game display\" class=\"imgborder imgcenter\">\n<p>This is done via a Getter that handles recognizing what letters you've guessed:</p>\n<pre><code class=\"language-js\">maskedWord(state) {\n\tlet maskedWord = '';\n\tfor(let i=0;i&lt;state.word.length;i++) {\n\t\tlet char = state.word.charAt(i);\n\t\tif(state.pickedLetters.indexOf(char) === -1) {\n\t\t\tmaskedWord += '-';\n\t\t} else {\n\t\t\tmaskedWord += char;\n\t\t}\n\t}\n\treturn maskedWord;\n}\n</code></pre>\n<p>In the same area, I use a Getter to return the image to display, based on the number of incorrect guesses.</p>\n<pre><code class=\"language-js\">hangman(state) {\n\tif(state.misses === 0) return &quot;images/h0.png&quot;;\n\tif(state.misses === 1) return &quot;images/h1.png&quot;;\n\tif(state.misses === 2 || state.misses === 3) return &quot;images/h2.png&quot;;\n\tif(state.misses === 4) return &quot;images/h3.png&quot;;\n\tif(state.misses === 5) return &quot;images/h4.png&quot;;\n\tif(state.misses === 6 || state.misses === 7) return &quot;images/h5.png&quot;;\n\treturn &quot;images/h6.png&quot;;\n},\n</code></pre>\n<p>The images themselves come from the Wikipedia page and could be fancier, but it works.</p>\n<p>Playing the game requires keyboard input which I detailed back in <a href=\"https://www.raymondcamden.com/2019/08/12/working-with-the-keyboard-in-your-vue-app\">August</a> (and have used multiple times since then).</p>\n<p>There is one interesting part of the keyboard handling code - I used a hack I found multiple times to see if the input was a letter:</p>\n<pre><code class=\"language-js\">doGuess(e) {\n\tlet letter = String.fromCharCode(e.keyCode).toLowerCase();\n\t// hack as seen on multiple SO posts\n\tif(letter.toUpperCase() === letter.toLowerCase()) return;\n\tthis.$store.dispatch('guess', letter)\n}\n</code></pre>\n<p>Honestly the hack feels a bit dangerous, but as I said, I saw this used <em>a lot</em> so I figure, it's got to be safe, right?</p>\n<p>The last bit I think I is interesting is how I handle checking if the game is over:</p>\n<pre><code class=\"language-js\">guess(context, letter) {\n\tcontext.commit('addLetter', letter);\n\n\t// did we win?\n\tif(context.getters.maskedWord === context.state.word) {\n\t\tcontext.commit('gameOver', true);\n\t}\n\tif(context.state.misses === MAX_MISSES) {\n\t\tcontext.commit('gameOver', false);\n\t}\n\n},\n</code></pre>\n<p>Checking if the maskedWord equals the real word feels smart which probably means I did it wrong.</p>\n<h3>Am I doing this right?</h3>\n<p>Most of the logic is done in my Vuex store and honestly, it felt a bit off to me. I've been spending this entire year working on getting more practice with Vue applications and Vuex in particular, but I still feel like I'm figuring out to best place to put my logic.</p>\n<p>I try to keep &quot;complex logic&quot; in a separate file and let Vuex simply handle proxying calls to it. In general, and I want to write about this in a longer form, I'd setup my Vue apps like so:</p>\n<ul>\n<li>Main components handle UI and use code to handle events.</li>\n<li>On those events, it calls out to Vuex to handle loading and storing data.</li>\n<li>Finally, business logic is handled in their own specific files.</li>\n</ul>\n<p>This is flexible of course, but it's generally where I'm trying to organize things. Like I said, I'm going to write this up in a more formal sense later on.</p>\n<p>Anyway, it's a game and it's fun to play! If you want to see the complete source, check out the repo here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/hangman\">https://github.com/cfjedimaster/vue-demos/tree/master/hangman</a>. You can play it yourself here: <a href=\"https://hangman.raymondcamden.now.sh/\">https://hangman.raymondcamden.now.sh/</a> As always, let me know what you think by leaving me a comment below!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@ilumire?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jelleke Vanooteghem</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Goodbye 2019, Hello 2020",
		"date":"Mon Dec 30 2019 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2019/12/31/goodbye-2019-hello-2020",
		"content":"<p>For the past several years, I've done &quot;round up&quot; posts where I talk about what I accomplished, what I wanted to do for the next year, and also what my favorite assorted &quot;media&quot; was over the past year. <a href=\"https://www.raymondcamden.com/2019/01/01/goodbye-2018-hello-2019\">Last year's post</a> (which was technically this year, I posted it on January 1st) was somewhat different given the significant changes that had gone on in my life. I had decided that this year's only goals would be my physical and mental health.</p>\n<p>I think I did rather good in that regards. I'm in a very happy place emotionally, having found someone I love (and luckily loves me in return). The physical side is a somewhat different story. I'm pretty healthy, but one of the side effects (I guess) of being in a new relationship and having a lot of fun is that it's somewhat harder to keep the weight off. I've gained a lot of my lost weight back. On the other hand, I was a bit too low this year so my goal for this year is to simply get to about &quot;half way&quot; where I was previously. I'm still exercising a lot and every checkup I get is glowing, so I'm going to do my best to not stress over <em>one</em> number.</p>\n<p>So yeah... personally I'm pretty damn happy. I still have things to work through and see my therapist on occasion, but I'm not going to question my happiness and just try to enjoy the hell out of it.</p>\n<p>Professionally it was an interesting year. After discovering that Amex was absolutely, 100%, not a good fit for me, I looked for work elsewhere and <a href=\"https://www.raymondcamden.com/2019/08/24/starting-my-new-role-at-here\">started a new job</a> at HERE back in August. I absolutely love this job and am still learning new things every day. Next week I get to attend my first CES in Las Vegas. I've been able to give more presentations this past year and see more developers out in the wild.</p>\n<p>Last year I gave <a href=\"https://www.raymondcamden.com/speaking/\">fifteen presentations</a> which is actually much more than I thought I would have. I think that's a great number for the year and I'm going to try to meet that goal for 2020. (I've got three booked so far!)</p>\n<p>For folks curious about my travel stats, this year I had 32 flights, hit 3 different countries and 10 cities. I spent almost 4 days in the air and flew 35K miles. I used <a href=\"https://www.jetitup.net\">JetItUp</a> for these stats. It's having some website issues now but in general, it's a damn good utility.</p>\n<p><a href=\"https://www.jetitup.net/MyStats/See/?name=Raymond~Camden\" title=\"View my JetItUp infographic\"><img src=\"https://www.jetitup.net/MyStats/Banner/?name=Raymond~Camden&lang=en\" alt=\"View my JetItUp infographic\" class=\"imgcenter\" /></a></p>\n<p>One of my other goals for this year was to get better at Vue, especially in regards to the CLI and applications. I hate to brag, but I think I kicked butt in that regards. To be clear, I don't think I'm some Vue master. But in 2018 I'd have said I was a strong beginner and now I'd peg myself as a strong intermediate user. I wrote nearly <a href=\"https://www.raymondcamden.com/tags/vuejs/\">forty blog entries</a> on Vue in 2019 and that's not including my <a href=\"https://www.raymondcamden.com/about/\">external articles</a>. I'm also working on my first Vue.js book! I'm only a contributor, but I haven't worked on a book in a while so I'm pretty happy about that.</p>\n<p>Overall I wrote 64 blog posts this year which is a far cry from my <a href=\"https://www.raymondcamden.com/stats\">earlier years</a> but as I'm writing more and more for other sources, and my job, I'm fine with that. To be honest I think a good half of what I blogged about a decade ago are things that I now use Twitter for - basically short bits of information that I want to share with other developers.</p>\n<p>For next year, my professional goals are:</p>\n<ul>\n<li>Keep learning and practicing Vue</li>\n<li>Keep building web-based games in Vue, even if I'm the only one who plays them</li>\n<li>Learn more about mapping (duh, that's my job ;)</li>\n<li>Keep writing about the JAMStack</li>\n<li>Learn Firebase</li>\n<li>Learn to do voice assistant skills on Google's platform</li>\n<li>Convert my blog to <a href=\"https://www.11ty.dev/\">11ty</a> and pick a new design</li>\n</ul>\n<h2>Favorite Media of 2019</h2>\n<p>To be honest, I don't really want to put a lot of thought into this. My &quot;favorites&quot; always tend to me the most recent things, and when someone says, &quot;But what did you think about X&quot;, typically I'm like, &quot;OMG that was amazing too&quot;. That being said, I figured I could share a bit of what I really liked this year and hopefully there will be some new things here for you to check out.</p>\n<h3>Favorite Movie(s)</h3>\n<p>I already <a href=\"https://www.raymondcamden.com/2019/12/20/a-non-spoiler-review-of-the-rise-of-skywalker\">reviewed</a> &quot;Rise of Skywalker&quot;, and while I liked it a lot (and want to see it again), it wasn't my favorite movie of the year. That would definitely have to be &quot;Knives Out&quot;, which had an amazing story and an incredible cast. It's one of those rare films that looks great in the trailers and ends up being even better than you thought.</p>\n<p>Pretty much all the comic book movies were great. &quot;Endgame&quot; was awesome and frankly, Marvel has accomplished something amazing over the past decade or so with the MCU. &quot;Joker&quot; was very interesting and while not my favorite version of the character, I'd say it's a strong number two.</p>\n<p>&quot;It Chapter Two&quot; was ok... but honestly didn't feel as strong as the first part.</p>\n<p>While not completely new, this is the year I discovered the &quot;John Wick&quot; trilogy. I watched all three over a day or two and damn was that a good trilogy. It may be a mild spoiler, but all three movies take place pretty much in the same time period so watching it all at once made it even more awesome.</p>\n<p>Lastly, if you didn't watch &quot;Us&quot;, absolutely check it out. It was by far a more interesting horror film then &quot;It&quot;.</p>\n<h3>Favorite TV Shows</h3>\n<p>One of the benefits of having a new partner in life is discovering all of their favorite shows. I was lucky enough this year to be introduced to many new things she liked, but I think my favorite may be &quot;Schitt's Creek&quot;. This is a &quot;simple&quot; little comedy with an amazing cast and some truly heartwarming story arcs. Honestly I think I can say I love each and every character in the show.</p>\n<p>I also discovered &quot;The Expanse&quot; which just had a new season released a few weeks ago. It's an incredibly detailed/realistic sci-fi series you can binge on Amazon Prime.</p>\n<p>If you've got Amazon Prime, be sure to check out &quot;The Marvelous Mrs. Maisel&quot; and &quot;The Man in the High Castle&quot;. &quot;The Man in the High Castle&quot; ended this year and while it wasn't a great ending, I love alt history so enjoyed the series overall.</p>\n<p>Speaking of shows I discovered via my girlfriend - &quot;Gotham&quot; is so, so damn good and I'm kicking myself for not watching it earlier. We're currently just at the beginning on season two and still have a lot to catch up on, but I'm loving where this show is going.</p>\n<p>And of course.... the best show... the absolute most incredible show of this year...</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/mando.jpg\" alt=\"The Mandalorian\" class=\"imgborder imgcenter\">\n<p>Disney+ is a great service so far, but honestly I enjoyed &quot;The Mandalorian&quot; so much I'd pay just for that show alone. In fact, the only truly sad part of my year was realizing I'd have to wait another nine or so months to see this beautiful creature...</p>\n<img src=\"https://static.raymondcamden.com/images/2019/12/by.jpg\" alt=\"Sad Baby Yoda\" class=\"imgborder imgcenter\">\n<h3>Favorite Video Games</h3>\n<p>I played a lot of games this year, but honestly no one game really enthralled me. I can absolutely say I love the Nintendo Switch and have played some great games on it. It's a great system and I can definitely recommend it. Game-wise, I've enjoyed some games over the past year, but I don't think anything was great. The new Crackdown was fun, but I expected a bit more after such a long wait. &quot;The Outer Worlds&quot; was a great RPG, and deserves some credit for having a shorter story that didn't require 100+ hours of game play. &quot;No Mans Sky&quot; added an incredible amount of content, but as I've got over two hundred hours in the game I've kinda taken a break from it. The new Star Wars game, &quot;Fallen Order&quot;, was &quot;Ok&quot;, but also really frustrating at times. I don't think I'll ever replay it.</p>\n<p>Finally, I'm ending the year playing the Bards Tale trilogy, a remake of a series I played when I was a child.</p>\n<p>Oops, I almost forgot to mention. This is the year I discovered &quot;Just Dance&quot; (on the Switch) and it is fun as hell. The entire family gets into and it's an incredible amount of exercise. I always knew dancers worked hard, but I don't think I had a true appreciation for the amount of skill and energy required to pull off those performances. We used to play after dinner and I'm gong to try to get that back into our family schedule as a way to burn some calories late in the day.</p>\n<h3>Favorite Books</h3>\n<p>Sigh. If I failed anywhere, it was here. I've only got four books done this year (although I'm nearly done with a fifth), so my plan is try my best to get to one book a month next year. My favorite this past year was &quot;Cruel Stars&quot; by John Birmingham. I was kinda &quot;meh&quot; on the Handmaid's tale sequel. I'm currently reading &quot;The Armored Saint&quot; and re-reading &quot;Nine Princes of Amber&quot;. Neither will get done tonight so they'll help my stats for next year. ;)</p>\n<h3>Favorite Music</h3>\n<p>This was the year that my buddy Brian and I launched a new music listserv, <a href=\"https://codabreaker.rocks/\">Coda Breaker</a>. Our membership is small, but it's been a fun way for us to share new (and old) interesting music. I'd highly encourage you to sign up if you enjoy getting music recommendations from nerds. Trust me - it will be worth your while.</p>\n<p>I've been working on this post for the last hour or two and want to wrap it up so I'll keep it short.</p>\n<p>My favorite new discovery (and again, from my incredibly smart girlfriend) is London Grammar. My favorite track is...</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/pkeDBwsIaZw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>My favorite song from this year (and favorite video) is &quot;Exits&quot; by Foals:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/V6YMCjpfH0c\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2>Finally</h2>\n<p>I say this from time to time, but I've truly come to appreciate how lucky I am and how thankful I am that I can share my thoughts, wacky experiments, and learnings, with all of you. As always, if there is anything I can do to help, please reach out. (My DMs are open on Twitter.) I hope each and every one of you have a wonderful new year.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@jamie452?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jamie Street</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "Uncategorized"
            
		]

	},

	{
		"title": "Another Damn ToDo App in Vue.js",
		"date":"Thu Jan 02 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/01/03/another-damn-todo-app-in-vuejs",
		"content":"<p>It's become somewhat of a trend these days to build ToDo apps in various languages. In fact, it's a rule that you can't release a new programming language, or framework, unless it can build a ToDo app. Seriously, I read it on the Internet.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/vuetodo1.jpg\" alt=\"It's true\" class=\"imgborder imgcenter\">\n<p>You can even find an entire website dedicated to showing you different examples of the ToDo app: <a href=\"http://todomvc.com/\">http://todomvc.com/</a></p>\n<p>It's gotten to a point where I just really don't like seeing ToDo apps even if I recognize their appeal. The functionality is rather simple. We've all got a basic idea of what they do. Etc. That being said, I just never wanted to actually write a post like this.</p>\n<p>But during the holiday break, I was thinking about how I could use the classic ToDo app as a way to show different iterations of the same app with Vue.js. Specifically I want to write three blog posts.</p>\n<p>The first post (this one!) will demonstrate the simplest form of the app and be completely in memory, meaning that as soon as you close the browser tab the data will go away.</p>\n<p>The second post will update the code to add in Vuex and IndexedDB to persist the data. I've talked about <a href=\"https://www.raymondcamden.com/2019/10/16/using-indexeddb-with-vuejs\">IndexedDB and Vue</a> a few times already, but I think showing the upgrade to add it's support will be useful.</p>\n<p>Finally, the third post will show storing the data using <a href=\"https://firebase.google.com\">Firebase</a>. Firebase has been on my own &quot;todo&quot; list to learn for sometime now and I thought it would make an awesome final iteration of the project.</p>\n<p>Now I'm starting this right before heading to my first CES so there may be a bit of break between posts, but I'm sure yall are fine waiting a bit while I do my best to survive the madness in Vegas.</p>\n<p>Alright, with that out of the way, let me describe how I built the simplest version of my ToDo app in Vue.js. First let's look at the UI/UX:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/vuetodo2.jpg\" alt=\"Initial Screen\" class=\"imgborder imgcenter\">\n<p>Initially you're presented with a header, no todos (because remember, the data doesn't persist), and a form field to add a new one. Type in some text and hit the button and you get:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/vuetodo3.jpg\" alt=\"One item added\" class=\"imgborder imgcenter\">\n<p>You can add as many as you like, each one appearing on top of the list.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/vuetodo4.jpg\" alt=\"More items added\" class=\"imgborder imgcenter\">\n<p>The button to the right of each todo lets you mark it done. There is no edit or delete. Do the damn task. When clicked, the item is crossed out, moved to the bottom, and you have the option to &quot;re-open&quot; it so to speak.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/vuetodo5.jpg\" alt=\"Items marked complete\" class=\"imgborder imgcenter\">\n<p>And that's it. So what's the code look like?</p>\n<p>I began by defining my data which consists of the array of todos and the variable that will be bound to the form field.</p>\n<pre><code class=\"language-js\">data: {\n\ttodos:[],\n\ttodoText:''\n},\n</code></pre>\n<p>To add a new todo, I use this simple HTML. It could definitely have some validation and nicer UI.</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;text&quot; v-model=&quot;todoText&quot;&gt;\n&lt;button @click=&quot;saveToDo&quot;&gt;Save ToDo&lt;/button&gt;\n</code></pre>\n<p>This is tied to this method:</p>\n<pre><code class=\"language-js\">saveToDo() {\n\tif(this.todoText === '') return;\n\tthis.todos.unshift({\n\t\ttext:this.todoText,\n\t\tdone:false\n\t});\n\tthis.todoText = '';\n},\n</code></pre>\n<p>The logic is simple. If the value in the field is blank, do nothing. Otherwise add to the front of the array an object containing a text field and done property defaulted to false. Lastly I reset the field so you could type in another one.</p>\n<p>Now let's go back to the HTML, here is how I render the ToDos and the button to mark them complete/incomplete:</p>\n<pre><code class=\"language-html\">&lt;table&gt;\n\t&lt;tr v-for=&quot;todo in sortedToDos&quot;&gt;\n\t\t&lt;td&gt;&lt;span :class=&quot;{todoDone:todo.done}&quot;&gt;{{todo.text}}&lt;/span&gt;&lt;/td&gt;\n\t\t&lt;td&gt;\n\t\t&lt;button @click=&quot;toggleDone(todo)&quot;&gt;\n\t\t\t&lt;span v-if=&quot;todo.done&quot;&gt;\n\t\t\tIncomplete\n\t\t\t&lt;/span&gt;&lt;span v-else&gt;\n\t\t\tDone\n\t\t\t&lt;/span&gt;\n\t\t&lt;/button&gt;\n\t\t&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n<p>Basically I loop over <code>sortedToDos</code> (which I haven't shown you yet, don't worry, I will in a second) and do something\ndifferent for each one based on the <code>done</code> property. In the text, I dynamically add the <code>todoDone</code> class when done is true. This adds the gray and strikethrough. In the second column, I toggle the text of the button based on the done state.</p>\n<p>The <code>toggleDone</code> method does exactly that - changes true to false or false to true:</p>\n<pre><code class=\"language-js\">toggleDone(todo) {\n\ttodo.done = !todo.done;\n}\n</code></pre>\n<p>Finally, <code>sortedToDos</code> is a computed value that takes the original array and sorts them such that done items are at the end of the list.</p>\n<pre><code class=\"language-js\">computed: {\n\tsortedToDos() {\n\t\treturn this.todos.sort((a,b) =&gt; {\n\t\t\tif(!a.done &amp;&amp; b.done) return -1;\n\t\t\tif(a.done &amp;&amp; b.done) return 0;\n\t\t\tif(a.done &amp;&amp; !b.done) return 1;\n\t\t});\n\t}\n},\n</code></pre>\n<p>You can view the entire sample and run it at the following CodePen:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"default\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"NWPwweX\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"ToDos 1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/NWPwweX\">\n  ToDos 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>That's it. As I said, the next version is going to kick it up a notch and add both Vuex and IndexedDB for storage.</p>\n<p>p.s. As a total aside, I've been loving the <em>hell</em> out of the <a href=\"https://todo.microsoft.com/tasks/\">Microsoft ToDo</a> app. It's got desktop and mobile clients, built in syncing, and a lovely UI.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@glenncarstenspeters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Glenn Carstens-Peters</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Yet Another Damn ToDo App in Vue.js",
		"date":"Tue Jan 07 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/01/08/yet-another-damn-todo-app-in-vuejs",
		"content":"<p>So last week I published my thrilling post on building a ToDo app in Vue.js (<a href=\"https://www.raymondcamden.com/2020/01/03/another-damn-todo-app-in-vuejs\">&quot;Another Damn ToDo App in Vue.js&quot;</a>). As promised, I'm following up on that post with an &quot;enhanced&quot; version of the application. The previous version was quite simple. It used Vue as a script tag, not a full Vue application, and stored the ToDos in memory. That meant on every reload the data was lost.</p>\n<p>In this version I made three main changes:</p>\n<ul>\n<li>First I switched over to a complete Vue application.</li>\n<li>I added Vuex as a way to put my all my data access code in one place.</li>\n<li>I used IndexedDB to persist the ToDos over every load. This is still only <em>per device</em> so if you open the app on another machine or in another browser, it won't have the same data.</li>\n</ul>\n<p>Let me explain each step of this.</p>\n<h3>Switching to an Application</h3>\n<p>This part should be relatively straight forward. The original version of my application (which you can see <a href=\"https://codepen.io/cfjedimaster/pen/NWPwweX\">here</a>) was built with just a script tag and some code, no build process. There's nothing wrong with that! But with the idea that I'm enhancing this application to make it more powerful, it made sense for me to move this into an application.</p>\n<p>I simply used the Vue CLI to scaffold a new application, using the <code>-b</code> option to keep it clean of stuff I didn't need.</p>\n<p>With the new application, I copied over the HTML, CSS, and JavaScript from the first version and ensured everything still worked. A tip I like to share from time to time is to take baby steps as you develop.</p>\n<h3>Adding Vuex</h3>\n<p>I then added Vuex to the application. The idea being that my application components will ask for their data from Vuex and Vuex will handle retrieving, updating, and so forth. This required changes in the front-end component, so let's take a look. First, the HTML as the change here is super minor.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n\t&lt;div id=&quot;app&quot;&gt;\n\t\t&lt;h2&gt;ToDos&lt;/h2&gt;\n\n\t\t&lt;table&gt;\n\t\t&lt;tr v-for=&quot;todo in sortedToDos&quot; :key=&quot;todo.id&quot;&gt;\n\t\t\t&lt;td&gt;&lt;span :class=&quot;{todoDone:todo.done}&quot;&gt;{{todo.text}}&lt;/span&gt;&lt;/td&gt;\n\t\t\t&lt;td&gt;\n\t\t\t\t&lt;button @click=&quot;toggleDone(todo)&quot;&gt;\n\t\t\t\t\t&lt;span v-if=&quot;todo.done&quot;&gt;\n\t\t\t\t\tIncomplete\n\t\t\t\t\t&lt;/span&gt;&lt;span v-else&gt;\n\t\t\t\t\tDone\n\t\t\t\t\t&lt;/span&gt;\n\t\t\t\t&lt;/button&gt;\n\t\t\t&lt;/td&gt;\n\t\t&lt;/tr&gt;\n\t\t&lt;/table&gt;\n\n\t\t&lt;p&gt;\n\t\t\t&lt;input type=&quot;text&quot; v-model=&quot;todoText&quot;&gt;\n\t\t\t&lt;button @click=&quot;saveToDo&quot;&gt;Save ToDo&lt;/button&gt;\n\t\t&lt;/p&gt;    \n\n\t&lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>So literally the only change here is in the index in my loop. Previously my todos didn't have a primary key so I had to use the loop index as the key. Now my todos <em>do</em> have one so I use that instead. ANd that's it. The JavaScript changed quite a bit more though.</p>\n<pre><code class=\"language-js\">import { mapGetters } from 'vuex';\n\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\ttodoText:''\n\t\t}\n\t},\n\tcreated() {\n\t\tthis.$store.dispatch('loadToDos');\n\t},\n\tcomputed: {\n\t\t...mapGetters(['sortedToDos'])\n\t},\n\tmethods: {\n\t\tsaveToDo() {\n\t\t\tif(this.todoText === '') return;\n\t\t\tthis.$store.dispatch('saveToDo', { text:this.todoText, done:false} );\n\t\t\tthis.todoText = '';\t\t\t\n\t\t},\n\t\ttoggleDone(todo) {\n\t\t\tthis.$store.dispatch('toggleToDo', todo);\n\t\t}\n\t}\n}\n</code></pre>\n<p>First, I import <code>mapGetters</code>. This Vuex utility makes it easier to use getters from Vuex, which act like computed properties. My <code>created</code> method calls an action on the store that will fetch our data. Both <code>saveToDo</code> and <code>toggleDone</code> now call the store to handle their logic.</p>\n<h3>Implementing IndexedDB</h3>\n<p>For the most part, I copied the work I did back in October last year when I first discussed this topic, <a href=\"https://www.raymondcamden.com/2019/10/16/using-indexeddb-with-vuejs\">Using IndexedDB in Vue.js</a>. My store handles the data, but the persistence is handled by another script, <code>idb.js</code>. (That isn't the best name, but whatevs...) Here's my store:</p>\n<pre><code class=\"language-js\">import Vue from 'vue'\nimport Vuex from 'vuex'\n\nimport idb from '@/api/idb';\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    todos: []\n  },\n  getters: {\n    sortedToDos(state) {\n      return state.todos.slice().sort((a,b) =&gt; {\n        if(!a.done &amp;&amp; b.done) return -1;\n        if(a.done &amp;&amp; b.done) return 0;\n        if(a.done &amp;&amp; !b.done) return 1;\n      });\n    }\n  },\n  mutations: {\n    addToDo(state, todo) {\n      state.todos.unshift(todo);\n    },\n    clearToDos(state) {\n      state.todos = [];\n    },\n    toggleToDo(state, id) {\n      state.todos = state.todos.map(t =&gt; {\n        if(t.id === id) t.done = !t.done;\n        return t;\n      });\n    }\n\n  },\n  actions: {\n    async loadToDos(context) {\n      context.commit('clearToDos');\n      context.state.todos = [];\n      let todos = await idb.getToDos();\n      todos.forEach(t =&gt; {\n        context.commit('addToDo', t);\n      });\n    },\n    async saveToDo(context, todo) {\n      await idb.saveToDo(todo);\n      context.dispatch('loadToDos');\n    },\n    async toggleToDo(context, todo) {\n      todo.done = !todo.done;\n      await idb.saveToDo(todo);\n      context.dispatch('loadToDos');\n    }\n  }\n})\n</code></pre>\n<p>Note that I'm importing that second, new script, and I don't actually ever manipulate the state values. I load them from logic in the script. I manipulate a copy in my getter. But reading and writing is done in <code>idb.js</code>. That code is pretty much exactly the same as the blog post mentioned above, but here it is:</p>\n<pre><code class=\"language-js\">const DB_NAME = 'tododb';\nconst DB_VERSION = 1;\nlet DB;\n\nexport default {\n\n\tasync getDb() {\n\t\treturn new Promise((resolve, reject) =&gt; {\n\n\t\t\tif(DB) { return resolve(DB); }\n\t\t\tconsole.log('OPENING DB', DB);\n\t\t\tlet request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\t\t\t\n\t\t\trequest.onerror = e =&gt; {\n\t\t\t\tconsole.log('Error opening db', e);\n\t\t\t\treject('Error');\n\t\t\t};\n\t\n\t\t\trequest.onsuccess = e =&gt; {\n\t\t\t\tDB = e.target.result;\n\t\t\t\tresolve(DB);\n\t\t\t};\n\t\t\t\n\t\t\trequest.onupgradeneeded = e =&gt; {\n\t\t\t\tconsole.log('onupgradeneeded');\n\t\t\t\tlet db = e.target.result;\n\t\t\t\tdb.createObjectStore('todos', { autoIncrement: true, keyPath:'id' });\n\t\t\t};\n\t\t});\n\t},\n\tasync getToDos() {\n\n\t\tlet db = await this.getDb();\n\n\t\treturn new Promise(resolve =&gt; {\n\n\t\t\tlet trans = db.transaction(['todos'],'readonly');\n\t\t\ttrans.oncomplete = () =&gt; {\n\t\t\t\tresolve(todos);\n\t\t\t};\n\t\t\t\n\t\t\tlet store = trans.objectStore('todos');\n\t\t\tlet todos = [];\n\t\t\t\n\t\t\tstore.openCursor().onsuccess = e =&gt; {\n\t\t\t\tlet cursor = e.target.result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\ttodos.push(cursor.value)\n\t\t\t\t\tcursor.continue();\n\t\t\t\t}\n\t\t\t};\n\n\t\t});\n\t},\n\tasync saveToDo(todo) {\n\n\t\tlet db = await this.getDb();\n\n\t\treturn new Promise(resolve =&gt; {\n\n\t\t\tlet trans = db.transaction(['todos'],'readwrite');\n\t\t\ttrans.oncomplete = () =&gt; {\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tlet store = trans.objectStore('todos');\n\t\t\tstore.put(todo);\n\n\t\t});\n\t\n\t}\n}\n</code></pre>\n<p>Again, if you want more details on how this works, check out my <a href=\"https://www.raymondcamden.com/2019/10/16/using-indexeddb-with-vuejs\">earlier post</a> (and feel free to ask me in a comment below).</p>\n<p>And that's pretty much it. You can see the complete source code of the application here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/todos2\">https://github.com/cfjedimaster/vue-demos/tree/master/todos2</a>. I also have a live version you can run here: <a href=\"https://todos2.raymondcamden.now.sh/\">https://todos2.raymondcamden.now.sh/</a></p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@glenncarstenspeters?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Glenn Carstens-Peters</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Some Notes on Building Blogs with Gridsome",
		"date":"Sat Jan 11 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/01/12/some-notes-on-building-blogs-with-gridsome",
		"content":"<p>I'm doing some research for an upcoming presentation on Gridsome (<a href=\"https://www.eventbrite.com/e/javascript-and-friends-vuejs-columbus-meetup-tickets-85537704577\">An Introduction to Gridsome</a> on January 22) and ran into an issue understanding how one particular feature works that is of particular interest to folks building blogs with Gridsome.</p>\n<h3>tl;dr</h3>\n<blockquote>\nThe frontmatter of your Markdown files become part of your GraphQL schema. You must use <code>date</code> as a field if you want URLs (paths) based on a date property. You will get additional properties (like excerpt) automatically.\n</blockquote>\n<p>Gridsome supports a filesystem plugin that let you point at a folder of files and automatically import them for use within your site. This is first shown in the docs for <a href=\"https://gridsome.org/docs/fetching-data/#import-with-source-plugins\">Import with source plugins</a>. The specific code example show is this:</p>\n<pre><code class=\"language-js\">module.exports = {\n  plugins: [\n    {\n      use: '@gridsome/source-filesystem',\n      options: {\n        path: 'docs/**/*.md',\n        typeName: 'DocPage'\n      }\n    }\n  ]\n}\n</code></pre>\n<p>That's fairly straight forward. Point to a path, give it a type name that will be used for the GraphQL server and you're good to go. You need a bit more information though, and you can then checkout the docs for <a href=\"https://gridsome.org/plugins/@gridsome/source-filesystem\">source-filesystem</a>. This page brings up an important detail - that in order to use the filesystem a transformer must be used to parse your files. For Markdown, you are asked to install <a href=\"https://www.npmjs.com/package/@gridsome/transformer-remark\">@gridsome/transformer-remark</a>.</p>\n<p>So far so good, but let's look at the sample code used in the plugin doc:</p>\n<pre><code class=\"language-js\">module.exports = {\n  plugins: [\n    {\n      use: '@gridsome/source-filesystem',\n      options: {\n        typeName: 'BlogPost',\n        path: './content/blog/**/*.md',\n      }\n    }\n  ],\n  templates: {\n    BlogPost: '/blog/:year/:month/:day/:slug'\n  }\n}\n</code></pre>\n<p>One important detail different is that this example shows that you need a template to handle displaying the blog posts. <a href=\"https://gridsome.org/docs/templates/\">Templates</a> are how Gridsome transform collections of data into pages. Personally I don't like the name as templates make me think of layouts, but that's just me. ;)</p>\n<p>Ok.... so here's where I began to have issues. If you look at the template defintion above, you'll see this value: <code>/blog/:year/:month/:day/:slug</code>. While I admit I didn't read every single line of Gridsome documentation, I wasn't sure where slug, year, month, and day came from.</p>\n<p>To make matters worse, when I tested, I used one Markdown file that looked like this:</p>\n<pre><code>Hi I'm *markdown*!\n</code></pre>\n<p>That's a valid example, but it was missing a crucial part, frontmatter.</p>\n<p>So while it's mostly obvious, I guess, that a blog using Markdown files will use frontmatter, it wasn't necessarily called out how important this was.</p>\n<p>Gridsome, the filesystem plugin, and the transformer plugin beneath that, will make use of your frontmatter in multiple ways.</p>\n<p>First, all the unique values of your frontmatter will be made available in the GraphQL collection. What do I mean by that? Imagine your blog has two files:</p>\n<pre><code>```\ntitle: Blog one\ncat: I like cats\n```\n</code></pre>\n<p>And...</p>\n<pre><code>```\ntitle: Blog one\ndog: I like cats too\n```\n</code></pre>\n<p>The resultant GraphQL schema type will include: <code>title</code>, <code>cat</code>, and <code>dog</code> properties. But that's not all - I'll get back to the full schema later in the post.</p>\n<p>Alright, so what about <code>:slug</code>? A slug generally refers to taking a string and making URL safe (and lower case), so something like &quot;Ray's Happy World&quot; turns into &quot;rays-happy-world&quot;. When I used <code>:slug</code> in my testing, I got this error:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/grid1.png\" alt=\"Notice about using slug versus title\" class=\"imgborder imgcenter\">\n<p>Ok... so... I guess if my frontmatter included slug then I'd be fine, but for now I simply switched to using <code>:title</code> and it used that value from my frontmatter.</p>\n<p>Alright, so what about <code>:year/:month/:day</code>? In my testing this only worked if your frontmatter uses a value called <code>date</code> and it follows the UTC date format, then it will be picked up and parsed automatically. So like so:</p>\n<pre><code>---\ntitle: Goo\ndate: 2020-01-05\n---\n\nThis is goo\n</code></pre>\n<p>This will output a URL path like so, <code>/2020/01/05</code>. I didn't find this till this morning, but it is documented on the <a href=\"https://gridsome.org/docs/templates/\">templates</a> page.</p>\n<p>Unfortunately I can't see anyway to change this behavior if you use another field for your date. To be clear, if you use another date field, like <code>edited: 2020-01-10</code> then Gridsome (and the relevant plugins) will recognize it as a date and make it available as a date type in GraphQL, but I don't believe you can use it in the template path. Wait, I lie. It absolutely can be if you write a custom path function. Here's how the templates doc demonstrate that:</p>\n<pre><code class=\"language-js\">// gridsome.config.js\nmodule.exports = {\n  templates: {\n    Post: [\n      {\n        path: (node) =&gt; {\n          return `/product/${node.slug}/reviews`\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n<p>So in my case I could use values from node.edited.</p>\n<p>Finally, if for some reason you don't specify a date field in your frontmatter, the output will include &quot;Invalid date&quot; in the path: <code>http://localhost:8080/blog/Invalid%20date/Invalid%20date/Invalid%20date/ray-rules/</code> So don't do that. ;)</p>\n<p>Ok... there's more. When Gridsome (and the relevant plugins again) parse your frontmatter, you get a <em>lot</em> of fields in your collection. For a test, I used three Markdown files with frontmatter like this:</p>\n<pre><code>---\ntitle: dude\ndate: 2020-01-05\ncover_image: goo.jpg\ntags: php, perl\n---\n</code></pre>\n<p>This generated this GraphQL schema:</p>\n<pre><code class=\"language-js\">type BlogPost implements Node {\n  id: ID!\n  path(to: String = &quot;default&quot;): String\n  fileInfo: BlogPost_FileInfo\n  content: String\n  excerpt: String\n  title: String\n  date(\n    format: String\n    locale: String\n  ): Date\n  cover_image: String\n  tags: String\n  headings(\n    depth: RemarkHeadingLevels\n    stripTags: Boolean = true\n  ): [RemarkHeading]\n  timeToRead(speed: Int = 230): Int\n  belongsTo(\n    sortBy: String = &quot;date&quot;\n    order: SortOrder = DESC\n    perPage: Int\n    skip: Int = 0\n    limit: Int\n    page: Int\n    sort: [SortArgument!]\n    filter: BelongsToFilterInput\n  ): NodeBelongsTo\n}\n</code></pre>\n<p>There's a lot there to note. For example, <code>excerpt</code> is useful for sure and <code>timeToRead</code> is nice. I'm guessing these come from the transformer, but I'm not sure where this is documented. <code>excerpt</code> is documented, I believe, way down in the <a href=\"https://github.com/jonschlinkert/gray-matter#options\">gray-matter</a> code which is a couple chains down from the top plugin, but I really wish this was closer to the &quot;main&quot; Gridsome docs if that makes sense. <code>headings</code> seems to come from the fact that the <a href=\"https://github.com/gridsome/gridsome/tree/master/packages/transformer-remark#readme\">transformer</a> plugin supports automatically creating anchors for your headings in Markdown. I mean I assume that's why. I like the automatic anchors. Not sure when I'd use it in GraphQL query. (Oh, I know how - for maybe making a table of contents for a long documentation page.)</p>\n<p>You'll notice that my tags ended up as a string. The source-filesystem plugin supports a <a href=\"https://gridsome.org/plugins/@gridsome/source-filesystem#refs\">refs</a> feature that lets you fix that:</p>\n<pre><code class=\"language-js\">module.exports = {\n  plugins: [\n    {\n      use: '@gridsome/source-filesystem',\n      options: {\n        refs: {\n          // Create a Tag content type and its nodes automatically.\n          tags: {\n            typeName: 'Tag',\n            create: true\n          }\n        }\n      }\n    }\n  ]\n}\n</code></pre>\n<p>I ran into one more issue though. It treated my multitag value &quot;php, perl&quot; as a string. When I rewrote it like so, <code>tags: [&quot;php&quot;,&quot;perl&quot;]</code> it worked. I also saw this represented in the GraphQL schema:</p>\n<pre><code class=\"language-js\">tags(\n    sortBy: String\n    order: SortOrder = DESC\n    skip: Int = 0\n    sort: [SortArgument]\n    limit: Int\n  ): [Tag]\n</code></pre>\n<p>Finally, and I think I'm really done now, sometimes it took a server restart for Gridsome to notice and update the GraphQL schema. As a specific example, when I was testing getting tags to work as an array I had to restart with every change. I hope this helps!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@worldsbetweenlines?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Patrick Hendry</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "gridsome"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "The Last Damn Vue ToDo App",
		"date":"Sat Jan 18 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/01/19/the-last-damn-vue-todo-app",
		"content":"<p>Welcome to the last, ever (ok, for me) iteration of the ToDo app in Vue.js. I started this series a few weeks ago (<a href=\"https://www.raymondcamden.com/2020/01/03/another-damn-todo-app-in-vuejs\">&quot;Another Damn ToDo App in Vue.js&quot;</a>). In the first iteration, the data was ephemeral and lost every time you closed the application. I then followed up with a version that persisted the data using IndexedDB, <a href=\"https://www.raymondcamden.com/2020/01/08/yet-another-damn-todo-app-in-vuejs\">&quot;Yet Another Damn ToDo App in Vue.js&quot;</a>. In this third and final version I decided to kick it up quite a bit by adding <a href=\"https://firebase.google.com/\">Google Firebase</a>.</p>\n<p>Firebase is a platform I've been meaning to play with for quite sometime now. It's got quite a few features but at minimum I knew it supported a cloud-based database and authentication. With that in mind, I wanted to add the following support to the previous version.</p>\n<ul>\n<li>Store data in Firebase.</li>\n<li>Add authentication to the application.</li>\n<li>Associate data with the current user.</li>\n<li>Make it so only logged in users can read and write data.</li>\n<li>Make it so you can only read and write your own data.</li>\n</ul>\n<p>I got it working, but I want to be super, duper clear that this is my first attempt at building such a thing. <strong>My assumption is that my security rules are NOT RIGHT.</strong> They seem right, but if you aren't 100% sure when it comes to security you might as well be 0% sure. I also think my code, in general, is a bit messy and could be organized a bit better perhaps. But as I got the basic features done I thought it was a good place to stop, take stock, and write about my experience.</p>\n<p>Lastly, I intentionally did <em>not</em> look for Vue/Firebase plugins/modules/etc as I wanted to do everything &quot;by hand&quot; so to speak, at least for this first build.</p>\n<p>Basically - I hope this post gives you an idea about Firebase and Vue but please, please, please consider this a rough first draft that is incomplete.</p>\n<p>Ok, ready?</p>\n<h2>Getting Started</h2>\n<p>I started off with the <a href=\"https://firebase.google.com/docs/firestore\">Cloud Firestore</a> documentation. Firebase is the overall product whereas Firestore is specifically related to data storage. Initially this went rather well. Setting up the project was pretty simple. Although at the time I didn't realize that the project is like an overall... err... well project and you need an &quot;app&quot; under the project as well. Things got a bit confusing in the <a href=\"https://firebase.google.com/docs/firestore/quickstart\">quickstart</a>:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/fs1.png\" alt=\"Screen shot of directions\" class=\"imgborder imgcenter\">\n<p>Notice how step 1 takes you to <em>another</em> guide, kinda, and I tried to manage that section plus this section together and it was... weird. Looking at it now... I guess the idea is that you add Firebase, and then Firestore? Although step 2 has that already. Maybe it's just me. :)</p>\n<h2>Initial Version</h2>\n<p>So going through the docs, my initial changes basically came down to:</p>\n<ol>\n<li>Adding script tags to my index.html. The Vue CLI uses it as a template that gets injected with your Vue app.</li>\n</ol>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;\n    &lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;&gt;\n    &lt;script src=&quot;https://www.gstatic.com/firebasejs/7.7.0/firebase-app.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://www.gstatic.com/firebasejs/7.7.0/firebase-firestore.js&quot;&gt;&lt;/script&gt;\n    &lt;title&gt;todos3&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;noscript&gt;\n      &lt;strong&gt;We're sorry but todos3 doesn't work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt;\n    &lt;/noscript&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n    &lt;!-- built files will be auto injected --&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Next it was time to work with Firestore. In the previous iteration, my component calls to a Vuex store. The store uses an API library that manages access to IndexedDB. My goal was to simply make a new API library and 'drop' it into the store. I was able to do that. Here's the new API file, <code>firestore.js</code>:</p>\n<pre><code class=\"language-js\">const FS_API_KEY = 'AIzaSyC2AhAIueIBhcUHt1zLW69HSlUy8gIyCuE';\nconst FS_AUTH_DOMAIN = 'todos3.firebaseapp.com';\nconst FS_PROJECT_ID = 'todos3';\nconst FS_COLLECTION = 'todos';\n\nlet DB;\n\nexport default {\n\n\tasync getDb() {\n\t\treturn new Promise((resolve, reject) =&gt; {\n\n\t\t\tif(DB) { return resolve(DB); }\n\t\t\tconsole.log('OPENING FS');\n\t\t\ttry {\n\t\t\t\tfirebase.initializeApp({\n\t\t\t\t\tapiKey: FS_API_KEY,\n\t\t\t\t\tauthDomain: FS_AUTH_DOMAIN,\n\t\t\t\t\tprojectId: FS_PROJECT_ID\n\t\t\t\t});\n\n\t\t\t\tDB = firebase.firestore();\n\t\t\t\tresolve(DB);\n\t\t\t} catch(e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t});\n\t},\n\tasync getToDos() {\n\n\t\tlet db = await this.getDb();\n\n\t\treturn new Promise(resolve =&gt; {\n\t\t\tconsole.log('attempt to get data');\n\t\t\tlet todos = [];\n\t\t\tdb.collection(FS_COLLECTION).get().then((querySnapshot) =&gt; {\n\t\t\t\tquerySnapshot.forEach((doc) =&gt; {\n\t\t\t\t\tconsole.log(`${doc.id} =&gt; ${JSON.stringify(doc.data())}`);\n\t\t\t\t\tlet todo = doc.data();\n\t\t\t\t\ttodo.id = doc.id;\n\t\t\t\t\ttodos.push(todo);\n\t\t\t\t});\n\t\t\t\tresolve(todos);\n\t\t\t});\t\t\t\n\n\t\t});\n\t},\n\tasync saveToDo(todo) {\n\t\tlet db = await this.getDb();\n\n\t\tif(!todo.id) return db.collection(FS_COLLECTION).add(todo);\n\t\telse return db.collection(FS_COLLECTION).doc(todo.id).update(todo);\n\n\t}\n}\n</code></pre>\n<p>Let's tackle it bit by bit. The <code>getDB</code> routing now handles Firebase initialization and grabbing the firestore object. As a method though it acts the same as the previous version, returning a databasr object.</p>\n<p><code>getToDos</code> makes use of Firestore's API to load every document. I manipulate the results a bit to store the ID the Firestore creates into the document object itself. But at the end, as before, I'm returning an array of todos.</p>\n<p>Finally, <code>saveToDo</code> makes use of the Firestore API as well. In my code I detect a new versus old todo by looking for the ID value. I'm pretty confident that Firestore probably has a &quot;storeThisThingNewOrOld&quot; method, like IndexedDB does, that would make my code simpler and if anyone wants to chime in below in the comments, I'd love it. But I'm also fine with it as is - it's very short.</p>\n<p>And that was it!! Honestly I was a bit surprised actually. I tested offline support and saw that it handled it mostly well. When I went offline (using devtools of course) and tried to store a value, I got an error in the console. But when I went online, Firestore automatically saved the data. <strong>That's awesome!</strong> So I guess all I would need to do is add my own support for noticing the error and let the user know their data would sync when online. In other words, I'd handle letting the user know, Firestore would handle the acutal synchronization, which is bad ass.</p>\n<h2>Bring in the Users</h2>\n<p>Ok, just to re-iterate what I said above, I do not have confidence that I did the security aspect right. It <em>seems</em> to be working but you should not take this as a complete 100% safe example.</p>\n<p>So, working with the security aspect was a bit more difficult. I guess that's to be expected, and I did get it working, but it was definitely harder.</p>\n<p>I started off at the core docs, <a href=\"https://firebase.google.com/docs/auth/\">Firebase Auth</a>. This had me then go to their <a href=\"https://github.com/firebase/firebaseui-web\">UI library</a> which reminds me a bit of Auth0. It was a bit weird going from &quot;official&quot; Google docs to GitHub, it also made me feel like this was not an official supported part of the project. Don't get me wrong - I'm pro GitHub of course, but I was surprised this was &quot;external&quot; documentation.</p>\n<p>The UI stuff lets you select providers, like Google, Facebook, etc, again much like Auth0. For my testing I kept it simple and just used Google. The net result of this part of the process is that you get a user object. From what I know, all calls from that moment on will include the authentication data.</p>\n<p>I began by adding more stuff to the index.html file:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;https://www.gstatic.com/firebasejs/7.7.0/firebase-auth.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://www.gstatic.com/firebasejs/ui/4.3.0/firebase-ui-auth.js&quot;&gt;&lt;/script&gt;\n&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://www.gstatic.com/firebasejs/ui/4.3.0/firebase-ui-auth.css&quot; /&gt;\n</code></pre>\n<p>I then added support to login to my application. In the main component, I added a 'logged in' and 'not logged in' view like so:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n\t&lt;div id=&quot;app&quot;&gt;\n\t\t&lt;div v-if=&quot;user&quot;&gt;\n\t\t\t&lt;h2&gt;ToDos for &lt;/h2&gt;\n\n\t\t\t&lt;table&gt;\n\t\t\t&lt;tr v-for=&quot;todo in sortedToDos&quot; :key=&quot;todo.id&quot;&gt;\n\t\t\t\t&lt;td&gt;&lt;span :class=&quot;{todoDone:todo.done}&quot;&gt;{{todo.text}}&lt;/span&gt;&lt;/td&gt;\n\t\t\t\t&lt;td&gt;\n\t\t\t\t\t&lt;button @click=&quot;toggleDone(todo)&quot;&gt;\n\t\t\t\t\t\t&lt;span v-if=&quot;todo.done&quot;&gt;\n\t\t\t\t\t\tIncomplete\n\t\t\t\t\t\t&lt;/span&gt;&lt;span v-else&gt;\n\t\t\t\t\t\tDone\n\t\t\t\t\t\t&lt;/span&gt;\n\t\t\t\t\t&lt;/button&gt;\n\t\t\t\t&lt;/td&gt;\n\t\t\t&lt;/tr&gt;\n\t\t\t&lt;/table&gt;\n\n\t\t\t&lt;p&gt;\n\t\t\t\t&lt;input type=&quot;text&quot; v-model=&quot;todoText&quot;&gt;\n\t\t\t\t&lt;button @click=&quot;saveToDo&quot;&gt;Save ToDo&lt;/button&gt;\n\t\t\t&lt;/p&gt;    \n\t\t&lt;/div&gt;&lt;div v-else&gt;\n\t\t\t&lt;p&gt;&lt;i&gt;You must login first...&lt;/i&gt;&lt;/p&gt;\n\t\t\t&lt;button @click=&quot;login&quot;&gt;Login with Google&lt;/button&gt;\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>Previously I was only using my firestore API in Vuex, but I added it to my component so I could fire off the request here. This is the part where I think could be a bit messy. Previously only Vuex &quot;spoke&quot; to the API and the component had no idea of Firestore. Now my app is tied to Firestore outside of Vuex as well. Not saying this is wrong, just saying I'm not sure.</p>\n<p>Here's the code:</p>\n<pre><code class=\"language-js\">import { mapGetters } from 'vuex';\nimport fs from '@/api/firestore';\n\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\ttodoText:'',\n\t\t\tuser:null\n\t\t}\n\t},\n\tcreated() {\n\n\t},\n\tcomputed: {\n\t\t...mapGetters(['sortedToDos'])\n\t},\n\tmethods: {\n\t\tasync login() {\n\t\t\tconsole.log('trying login');\n\t\t\tlet user = await fs.login();\n\t\t\tthis.user = user;\n\t\t\tthis.$store.dispatch('loadToDos');\n\t\t},\n\t\tsaveToDo() {\n\t\t\tif(this.todoText === '') return;\n\t\t\tthis.$store.dispatch('saveToDo', { text:this.todoText, done:false} );\n\t\t\tthis.todoText = '';\t\t\t\n\t\t},\n\t\ttoggleDone(todo) {\n\t\t\tthis.$store.dispatch('toggleToDo', todo);\n\t\t}\n\t}\n}\n</code></pre>\n<p>Now let's look at <code>firestore.js</code> again. It's been updated to support a login method. Note that it will store the user ID and use it when both fetching data as well as saving data.</p>\n<pre><code class=\"language-js\">const FS_API_KEY = 'AIzaSyC2AhAIueIBhcUHt1zLW69HSlUy8gIyCuE';\nconst FS_AUTH_DOMAIN = 'todos3.firebaseapp.com';\nconst FS_PROJECT_ID = 'todos3';\nconst FS_COLLECTION = 'todos';\n\nlet setup = false;\nlet DB;\nlet UID;\n\nexport default {\n\n\tinit() {\n\n\t\tif(setup) return;\n\t\tfirebase.initializeApp({\n\t\t\tapiKey: FS_API_KEY,\n\t\t\tauthDomain: FS_AUTH_DOMAIN,\n\t\t\tprojectId: FS_PROJECT_ID\n\t\t});\n\n\t\tsetup = true;\n\n\t},\n\tasync login() {\n\n\t\tthis.init();\n\t\tlet provider = new firebase.auth.GoogleAuthProvider();\n\t\treturn new Promise((resolve, reject) =&gt; {\n\n\t\t\tfirebase.auth().signInWithPopup(provider).then(function(result) {\n\t\t\t\t// This gives you a Google Access Token. You can use it to access the Google API.\n\t\t\t\tlet token = result.credential.accessToken;\n\t\t\t\t// The signed-in user info.\n\t\t\t\tlet user = result.user;\n\t\t\t\tUID = user.uid;\n\t\t\t\tresolve(user);\n\t\t\t}).catch(function(error) {\n\t\t\t\treject(error);\n\t\t\t});\n\n\t\t});\n\n\t},\n\tasync getDb() {\n\t\treturn new Promise((resolve, reject) =&gt; {\n\n\t\t\tif(DB) { return resolve(DB); }\n\t\t\ttry {\n\t\t\t\tthis.init();\n\t\t\t\tDB = firebase.firestore();\n\t\t\n\t\t\t\tresolve(DB);\n\t\t\t} catch(e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t});\n\t},\n\tasync getToDos() {\n\n\t\tlet db = await this.getDb();\n\n\t\treturn new Promise(resolve =&gt; {\n\t\t\tlet todos = [];\n\t\t\tdb.collection(FS_COLLECTION).where('userId','==',UID).get().then((querySnapshot) =&gt; {\n\t\t\t\tquerySnapshot.forEach((doc) =&gt; {\n\t\t\t\t\tlet todo = doc.data();\n\t\t\t\t\ttodo.id = doc.id;\n\t\t\t\t\ttodos.push(todo);\n\t\t\t\t});\n\t\t\t\tresolve(todos);\n\t\t\t});\t\t\t\n\n\t\t});\n\t},\n\tasync saveToDo(todo) {\n\t\tlet db = await this.getDb();\n\t\t// always associate with me\n\t\ttodo.userId = UID;\n\t\tif(!todo.id) return db.collection(FS_COLLECTION).add(todo);\n\t\telse return db.collection(FS_COLLECTION).doc(todo.id).update(todo);\n\n\t}\n}\n</code></pre>\n<p>When I run the app now and click the button, it will open a popup and use a similar UI that I've seen elsewhere for Google login. If you've got multiple signins associated with the browser, you can select the right one. Basically, it's conforms to what users expect when it comes to Google signin.</p>\n<p>The final part of this was securing things on the server side. This was probably the thing that impressed me the most in Firestore. You can write your security rules as simple logic right in the UI for your project. So for example, my &quot;only logged in people can do stuff and you only get your own stuff&quot; rule was:</p>\n<pre><code class=\"language-js\">rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /todos/{todo} {\n      allow read, update, delete: if request.auth.uid == resource.data.userId;\n      allow create: if request.auth.uid != null;\n    }\n  }\n}\n</code></pre>\n<p>You can see more examples at the <a href=\"https://firebase.google.com/docs/firestore/security/get-started\">docs</a> and as I said multiple times above, I'm not sure this is right, but I really dig how this is done. I love having my security right there at the database level and the syntax felt right, even if I had to guess a bit before it worked right.</p>\n<p>Before I published this blog entry, I switched it to their sample &quot;Deny All&quot; rule:</p>\n<pre><code class=\"language-js\">service cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write: if false;\n    }\n  }\n}\n</code></pre>\n<p>And that's it. I ran my demo in two separate browsers, both logged in as me, and the data was the same between them.</p>\n<p>For folks who read this long, thank you! If you want the source, you can find it here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/todos3\">https://github.com/cfjedimaster/vue-demos/tree/master/todos3</a> Despite having a bit of a rough start, I'm pretty impressed by Firestore and I definitely want to use it again.</p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Vue and Form Fields",
		"date":"Sun Jan 26 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/01/27/vue-and-form-fields",
		"content":"<p>Vue has great support for working with forms. This is heavily documented in the <a href=\"https://vuejs.org/v2/guide/forms.html\">Form Input Bindings</a> section. I wanted to build my own demo/set of examples based on this as a way of exploring the different types of inputs and how Vue works with them. In order to do this, I built a demo that covered every single type of form field possible. (As far as I know, let me know what I forgot.) For each I tested setting an initial value and outputting the bound value in case it looked different than what the field displayed, <code>input[type=color]</code> is a great example of this.</p>\n<p>If you don't want to read my long winded text, you can jump right to the CodePen here: <a href=\"https://codepen.io/cfjedimaster/pen/vYEMgjV?editors=1011\">https://codepen.io/cfjedimaster/pen/vYEMgjV?editors=1011</a></p>\n<p>Ok, let's get started! Please note some of these are boring, i.e. they work as expected with no weirdness.</p>\n<h3>input[type=text]</h3>\n<p>The simplest and easiest of the fields, and what the &quot;fancy&quot; fields (like <code>type=color</code>) turn into when run on older browsers. I tested with this markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;text1&quot;&gt;text:&lt;/label&gt; \n&lt;input v-model=&quot;text1&quot; id=&quot;text1&quot; type=&quot;text&quot;&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\n&lt;label for=&quot;text2&quot;&gt;text (maxlength=5):&lt;/label&gt; \n&lt;input v-model=&quot;text2&quot; id=&quot;text2&quot; type=&quot;text&quot; maxlength=5&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And this data:</p>\n<pre><code class=\"language-js\">text1:'Ray',\ntext2:'Raymond Camden',\n</code></pre>\n<p>Notice the second field makes use of <code>maxlength</code>. On initial display, both work as expected, but in the second one you can only delete characters, not add them, until the length is less than five.</p>\n<h3>input[type=button]</h3>\n<p>I used this markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;button1&quot;&gt;button:&lt;/label&gt; \n&lt;input v-model=&quot;button1&quot; id=&quot;button1&quot; type=&quot;button&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>and this data:</p>\n<pre><code class=\"language-js\">button1:'button1',\n</code></pre>\n<p>And it just renders a button where the label is the model value.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/fields1.png\" alt=\"button\" class=\"imgborder imgcenter\">\n<h3>input[type=checkbox]</h3>\n<p>Ok, this is a fun one. Checkboxes allow you to specify zero, one, or multiple items. I used this markup to dynamically render the checkboxes:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\ncheckbox:&lt;br/&gt;\n&lt;span v-for=&quot;(cbv,idx) in checkbox1Values&quot;&gt;\n&lt;input v-model=&quot;checkbox1&quot; :value=&quot;cbv&quot; type=&quot;checkbox&quot;\n\t\t:id=&quot;'checkbox1'+idx&quot;/&gt; &lt;label :for=&quot;'checkbox1'+idx&quot;&gt;{{ cbv }}&lt;/label&gt;&lt;br/&gt;\n&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n<p>Here is the data:</p>\n<pre><code class=\"language-js\">checkbox1: ['red', 'blue'],\ncheckbox1Values: ['red', 'blue', 'green', 'orange' ], \n</code></pre>\n<p>A few things to note here. I've got N inputs based on the total number of items in the array. Each one has a specific value, but the <code>v-model</code> points to the selected value I've defined. Also note when I iterate I include the loop index, this lets me specify a dynamic ID value for each and use a label to make it easier to use.</p>\n<p>The default value, if you want to specify it, is an array.</p>\n<h3>input[type=color]</h3>\n<p>The first one that may not be supported in your browser, it worked just fine in the shiny new Microsoft Edge. Here's the layout:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;color1&quot;&gt;color:&lt;/label&gt; \n&lt;input v-model=&quot;color1&quot; id=&quot;color1&quot; type=&quot;color&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>and here is the data:</p>\n<pre><code class=\"language-js\">color1:'#cc8800',\n</code></pre>\n<p>This is the first control where, by itself, you can't see the real value:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/fields2.png\" alt=\"Color example\" class=\"imgborder imgcenter\">\n<p>When I first tried this, I attempted to set <code>color1</code> to a named color, but that isn't supported, it must be an RBG value in hex. This is - of course - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color\">documented</a> over at MDN.</p>\n<h3>The date inputs</h3>\n<p>To make things a bit easier, let's consider the date related field types: date, datetime-local, month, time, and week. Altogether, their markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;date1&quot;&gt;date:&lt;/label&gt; \n&lt;input v-model=&quot;date1&quot; id=&quot;date1&quot; type=&quot;date&quot;&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\n&lt;label for=&quot;datetimelocal1&quot;&gt;datetime-local:&lt;/label&gt;\n&lt;input v-model=&quot;datetimelocal1&quot; id=&quot;datetimelocal1&quot; type=&quot;datetime-local&quot;&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\n&lt;label for=&quot;month1&quot;&gt;month:&lt;/label&gt;\n&lt;input v-model=&quot;month1&quot; id=&quot;month1&quot; type=&quot;month&quot;&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\n&lt;label for=&quot;time1&quot;&gt;time:&lt;/label&gt; \n&lt;input v-model=&quot;time1&quot; id=&quot;time1&quot; type=&quot;time&quot;&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\n&lt;label for=&quot;week1&quot;&gt;week:&lt;/label&gt; \n&lt;input v-model=&quot;week1&quot; id=&quot;week1&quot; type=&quot;week&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>All in all, there's nothing special about any of these markup wise, but UI wise they all render somewhat differently across different browsers (and not at all in <a href=\"https://caniuse.com/#feat=input-datetime\">Safari</a> because of course not).</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/fields3.png\" alt=\"Date related one\" class=\"imgborder imgcenter\">\n<p>Some work as expected, like date opening up a calendar (again, in Microsoft Edge), but then it gets more complex from there. Week, for example, shows this:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/fields4.png\" alt=\"Example of week control\" class=\"imgborder imgcenter\">\n<p>Each of these had slightly different ways of specifying initial values:</p>\n<pre><code class=\"language-js\">date1:'2020-08-20',\ndatetimelocal1:'2020-01-31T12:38:00.000',\nmonth1:'2020-04',\ntime1:'13:14:00.000',\nweek1:'2021-W02',\n</code></pre>\n<p>I had to guess at some of these. I'd specify a blank value, set the value, and then check my debug output. (I may have forgot to mention, but at the bottom of my markup I've got a debug region where I output every value.) Week, especially, was surprising.</p>\n<h3>input[type=email]</h3>\n<p>Absolutely nothing special about this - here's the markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;email1&quot;&gt;email:&lt;/label&gt;\n&lt;input v-model=&quot;email1&quot; id=&quot;email1&quot; type=&quot;email&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>and the data:</p>\n<pre><code class=\"language-js\">email1:'raymondcamden@gmail.com',\n</code></pre>\n<h3>input[type=file]</h3>\n<p>Here's a fun one. First note that form fields are readonly, so doing this won't be possible:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;file11&quot;&gt;file:&lt;/label&gt;\n&lt;input v-model=&quot;file1&quot; id=&quot;file1&quot; type=&quot;file&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And:</p>\n<pre><code class=\"language-js\">file1:'c:\\\\autoexec.bat',\n</code></pre>\n<p>In fact, Vue screams about it in the console:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/fields5.png\" alt=\"\" class=\"imgborder imgcenter\">\n<p>What's cool is that they tell you exactly how to fix it:</p>\n<pre><code class=\"language-html\">&lt;input @change=&quot;setFile&quot; id=&quot;file1&quot; type=&quot;file&quot;&gt;\n</code></pre>\n<p>This can then be tied to a method:</p>\n<pre><code class=\"language-js\">methods:{\n\tsetFile(e) {\n\t\tconsole.log('selected file(s)', e.target.files);\n\t\t// grab the file name and do something with it\n\t}\n}\n</code></pre>\n<p>This provides you access to information about the files allowing you to do fancy things, like <a href=\"https://www.raymondcamden.com/2019/06/13/reading-image-sizes-and-dimensions-with-vuejs\">figuring the size</a> of images or doing <a href=\"https://www.raymondcamden.com/2019/05/21/reading-client-side-files-for-validation-with-vuejs\">client-side validation</a> of files.</p>\n<h3>input[type=hidden]</h3>\n<p>Works as expected, hidden from the user, nothing to see here, carry on.</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;hidden1&quot;&gt;hidden:&lt;/label&gt;\n&lt;input v-model=&quot;hidden1&quot; id=&quot;hidden1&quot; type=&quot;hidden&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<pre><code class=\"language-js\"> hidden1:'you can\\'t see me...',\n</code></pre>\n<h3>input[type=picture]</h3>\n<p>Also nothing special here. I've never used this one in production before but I guess folks have used it.</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;image1&quot;&gt;picture:&lt;/label&gt;\n&lt;input :src=&quot;image1&quot; id=&quot;image1&quot; type=&quot;image&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>My data was a URL path to the image:</p>\n<pre><code class=\"language-js\">image1:'http://placekitten.com/g/200/300',\n</code></pre>\n<p>In case you're curious it is acts like a submit button.</p>\n<h3>input[type=number]</h3>\n<p>Again, nothing really special... at first. So consider this markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;number1&quot;&gt;number:&lt;/label&gt;\n&lt;input v-model=&quot;number1&quot; id=&quot;number1&quot; type=&quot;number&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And this data:</p>\n<pre><code class=\"language-js\">number1:6,\n</code></pre>\n<p>So if you don't modify the value, what's actually there in the DOM?</p>\n<p>6? Nope.</p>\n<p>&quot;6&quot;</p>\n<p>Pat yourself on the back if you knew this. I know this. Of course I do. I still manage to forget about 90% of the time. Vue provides a dang nice way to handle this though. Just add a <code>.number</code> modifier:</p>\n<pre><code class=\"language-html\">&lt;input v-model.number=&quot;number1&quot; id=&quot;number1&quot; type=&quot;number&quot;&gt;\n</code></pre>\n<h3>input[type=password]</h3>\n<p>Again, nothing special. Take this markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;password1&quot;&gt;password:&lt;/label&gt; \n&lt;input v-model=&quot;password1&quot; id=&quot;password1&quot; type=&quot;password&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And this code:</p>\n<pre><code class=\"language-js\">password1:'kyloren',\n</code></pre>\n<p>And you get a password field where the value is hidden. Don't forget though that you or I can go into devtools and change the field type to text to see the value.</p>\n<h3>input[type=radio]</h3>\n<p>Another one with multiple items, but this one only takes one value, not 0 or more.</p>\n<pre><code class=\"language-html\">&lt;p&gt;\nradio:&lt;br/&gt; \n&lt;span v-for=&quot;(rbv,idx) in radio1Values&quot;&gt;\n&lt;input v-model=&quot;radio1&quot; :value=&quot;rbv&quot; type=&quot;radio&quot; \n\t\t:id=&quot;'radio1'+idx&quot;/&gt; &lt;label :for=&quot;'radio1'+idx&quot;&gt;{{ rbv }}&lt;/label&gt;&lt;br/&gt;\n&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And here is the data:</p>\n<pre><code class=\"language-js\">radio1: 'beer',\nradio1Values: ['pizza', 'donuts', 'beer', 'hamburgers' ],\n</code></pre>\n<p>Notice that the selected value is <em>not</em> an array but one value.</p>\n<h3>input[type=range]</h3>\n<p>First the markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;range1&quot;&gt;range:&lt;/label&gt; \n&lt;input v-model=&quot;range1&quot; id=&quot;range1&quot; type=&quot;range&quot; min=&quot;1&quot; max=&quot;10&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And the value:</p>\n<pre><code class=\"language-js\">range1: 6,\n</code></pre>\n<p>Remember that the browser will <em>not</em> display any numbers with this control:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/01/fields6.png\" alt=\"Range UI\" class=\"imgborder imgcenter\">\n<p>You could use the <code>&lt;output&gt;</code> tag to handle this but it's probably easier to just add <code>{{ range1 }}</code> to the markup.</p>\n<h3>input[type=search]</h3>\n<p>This is mainly the same as a text field with the addition of a little X (or some other UI) to clear the data immediately. Here's the markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;search1&quot;&gt;search:&lt;/label&gt; \n&lt;input v-model=&quot;search1&quot; id=&quot;search1&quot; type=&quot;search&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>and the data:</p>\n<pre><code class=\"language-js\">search1:'search text',\n</code></pre>\n<p>Still with me? We're almost done.</p>\n<h3>input[type=submit]</h3>\n<p>Another boring one. This time binding the value just sets the value on the button.</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;submit1&quot;&gt;submit:&lt;/label&gt; \n&lt;input v-model=&quot;submit1&quot; id=&quot;submit1&quot; type=&quot;submit&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<pre><code class=\"language-js\">submit1: 'Submit or Die'\n</code></pre>\n<h3>input[type=tel]</h3>\n<p>This one primarily works on mobile. It should fire up a keyboard better suited for entering phone numbers. On desktop it does nothing special.</p>\n<p>Markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;tel1&quot;&gt;tel:&lt;/label&gt; \n&lt;input v-model=&quot;tel1&quot; id=&quot;tel1&quot; type=&quot;tel&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And data:</p>\n<pre><code class=\"language-js\">tel1: '555-555-5555',\n</code></pre>\n<h3>input[type=url]</h3>\n<p>And finally, the URL field. Looks the same but will validate differently.</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;url1&quot;&gt;url:&lt;/label&gt; \n&lt;input v-model=&quot;url1&quot; id=&quot;url1&quot; type=&quot;url&quot;&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And code:</p>\n<pre><code class=\"language-js\">url1:'https://www.raymondcamden.com',\n</code></pre>\n<h3>select</h3>\n<p>Did I say finally? Nope, not done yet. Here's how select works. First, the markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\nselect:&lt;br/&gt; \n&lt;select v-model=&quot;select1&quot;&gt;\n\t&lt;option v-for=&quot;sel in select1Values&quot;&gt;{{ sel }}&lt;/option&gt;\n&lt;/select&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And the values:</p>\n<pre><code class=\"language-js\">select1: 'hbo', \nselect1Values: ['cinemax', 'showtime', 'hbo', 'cbs' ],\n</code></pre>\n<p>A regular select lets you pick one option so the value specified is just a simple string.</p>\n<p>When using the multiple option, things change a tiny bit:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\nselect multiple:&lt;br/&gt; \n&lt;select v-model=&quot;select2&quot; multiple&gt;\n\t&lt;option v-for=&quot;sel in select1Values&quot;&gt;{{ sel }}&lt;/option&gt;\n&lt;/select&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And the values:</p>\n<pre><code class=\"language-js\">select2: ['showtime', 'cbs'], \nselect2Values: ['cinemax', 'showtime', 'hbo', 'cbs' ],\n</code></pre>\n<p>The big change here is using an array to set (and work with) the selected values.</p>\n<p>Almost done - honest!</p>\n<h3>textarea</h3>\n<p>First, the markup:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;label for=&quot;textarea1&quot;&gt;textarea&lt;/label&gt;\n&lt;textarea v-model=&quot;textarea1&quot; id=&quot;textarea1&quot;&gt;&lt;/textarea&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And then the value:</p>\n<pre><code class=\"language-js\">textarea1:'This is my text area\\nIt is better than yours...'\n</code></pre>\n<p>Notice that you do not have to provide a value inside the textarea block. I actually forgot and had this originally: <code>&lt;textarea v-model=&quot;textarea1&quot; id=&quot;textarea1&quot;&gt;{{textarea1}}&lt;/textarea&gt;</code></p>\n<h3>Wrap Up</h3>\n<p>For the most part, there weren't many surprises here, but I know I'm happy to have an example of everything in one place. You can run, and fork, the full example here:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"default\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-slug-hash=\"vYEMgjV\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Form Examples\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/vYEMgjV\">\n  Vue Form Examples</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p><i>Header photo by <a href=\"https://unsplash.com/@erol?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Erol Ahmed</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building Table Sorting and Pagination in Vue.js - with Async Data",
		"date":"Fri Jan 31 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/01/building-table-sorting-and-pagination-in-vuejs-with-async-data",
		"content":"<p>Nearly two years ago I wrote a blog post (<a href=\"https://www.raymondcamden.com/2018/02/08/building-table-sorting-and-pagination-in-vuejs\">Building Table Sorting and Pagination in Vue.js</a>) that detailed how to paginate and sort a set of client-side data with Vue.js. A day or so ago a reader asked how you would handle the same thing using data loaded from a remote API. Specifically, data where every sort, and page, is loaded from a remote API. I worked on a demo of this and while doing so learned something new about Vue. So here are my solutions and as always, let me know what you think.</p>\n<h3>The Data</h3>\n<p>For both of my demos, I used the API at <a href=\"https://www.openbrewerydb.org/\">Open Brewery DB</a>. This is a free API that doesn't require a key and supports CORS. Even better, their <a href=\"https://www.openbrewerydb.org/documentation/01-listbreweries\">brewery list</a> API supports both paging and sorting which made it perfect for my tests.</p>\n<h3>Version One</h3>\n<p>For the first version, I updated the layout to show the name, city, and state values of breweries. The API supports more of course but I wanted to keep it simple. All three values can be sorted and the entire data set paginated. Here's the updated layout code:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th @click=&quot;sort('name')&quot;&gt;Name&lt;/th&gt;\n        &lt;th @click=&quot;sort('city')&quot;&gt;City&lt;/th&gt;\n        &lt;th @click=&quot;sort('state')&quot;&gt;State&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr v-for=&quot;b in breweries&quot;&gt;\n        &lt;td&gt;{{b.name}}&lt;/td&gt;\n        &lt;td&gt;{{b.city}}&lt;/td&gt;\n        &lt;td&gt;{{b.state}}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;p&gt;\n  &lt;button @click=&quot;prevPage&quot; :disabled=&quot;cantGoBack&quot;&gt;Previous&lt;/button&gt; \n  &lt;button @click=&quot;nextPage&quot;&gt;Next&lt;/button&gt;\n  &lt;/p&gt;\n  \n  debug: sort={{currentSort}}, dir={{currentSortDir}}, page={{currentPage}}, {{ sortStr }}\n\n&lt;/div&gt;\n</code></pre>\n<p>The table itself isn't too different from the previous versions, I just changed the names of stuff, and obviously we iterate over new data, <code>breweries</code>. The pagination buttons are slightly different this time. I've added the ability to disable the previous button, but not the next one. Why? The brewery API doesn't return the total number of records, so there's no easy to way to know when we are at the end. It <em>is</em> something you could handle by simply seeing if the request for the next page returns no results, but for this demo I just ignored the issue.</p>\n<p>Now let's look at the code.</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data:{\n    breweries:[],\n    currentSort:'name',\n    currentSortDir:'asc',\n    pageSize:20, \n    currentPage:1\n  },\n  created:function() {\n    this.loadBreweries();\n  },\n  methods:{\n    async loadBreweries() {\n      let data = await fetch(`https://api.openbrewerydb.org/breweries?page=${this.currentPage}&amp;per_page=${this.pageSize}&amp;sort=${this.sortStr}`);\n      this.breweries = await data.json();  \n    },\n    sort:function(s) {\n      //if s == current sort, reverse\n      if(s === this.currentSort) {\n        this.currentSortDir = this.currentSortDir==='asc'?'desc':'asc';\n      } else this.currentSortDir = 'asc';\n      this.currentSort = s;\n      this.loadBreweries();\n    },\n    nextPage:function() {\n      this.currentPage++;\n      this.loadBreweries();\n    },\n    prevPage:function() {\n      if(this.currentPage &gt; 1) this.currentPage--;\n      this.loadBreweries();\n    }\n\n  },\n  computed:{\n    cantGoBack() {\n      return this.currentPage === 1;\n    },\n    sortStr() {\n      let s = '';\n      if(this.currentSortDir === 'desc') s += '-';\n      return s + this.currentSort;\n    }\n  }\n})\n</code></pre>\n<p>The most important part is the <code>loadBreweries</code> method. It requests data and contains information about what page to get, how many to get, and how to sort. The API asks that you sort by column name and include <code>-</code> when you want to sort descending, so I built a utility method, <code>sortStr</code>, to handle that for me. Now when the app loads, I immediately call the API to load my breweries and when you sort and page, all I do is change the current values for them. This version is actually easier than my previous ones since paging and sorting data is all handled by the API.</p>\n<p>And that's it! I should absolutely add a &quot;loading&quot; UI of some sort, but I'll leave that as an exercise for the reader.</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"default\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"dyPBwqg\" style=\"height: 400x; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue - Sortable Table Aync 1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/dyPBwqg\">\n  Vue - Sortable Table Aync 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h3>Version Two</h3>\n<p>So after finishing the first version, I noticed that I had used code that processed changes (paging, sorting) and then fired off a method, and it occurred to me that I should simply be using computed properties. Duh. So I went ahead and change the previous code such that <code>breweries</code> wasn't an array but a computed property... and then discovered that you can't do async computed properties. Duh. I mean everyone knows that, right?</p>\n<p>Err, no, I didn't. I'm sure I read that at some point, but this was the first time I ran into it. When you try, you don't get any errors, or warnings, but it just doesn't work.</p>\n<p>However, we're in luck! There's a plugin that makes this easy, <a href=\"https://github.com/foxbenjaminfox/vue-async-computed\">vue-async-computed</a>. You add this and then you can literally move code from a <code>computed</code> block to an <code>asyncComputed</code> block. The plugin also supports returning a &quot;loading&quot; value which is pretty neat.</p>\n<p>I added the script to my codepen and then modified my JavaScript like so:</p>\n<pre><code class=\"language-js\">Vue.use(AsyncComputed);\n\nconst app = new Vue({\n  el:'#app',\n  data:{\n    currentSort:'name',\n    currentSortDir:'asc',\n    pageSize:20, \n    currentPage:1\n  },\n  methods:{\n    sort:function(s) {\n      //if s == current sort, reverse\n      if(s === this.currentSort) {\n        this.currentSortDir = this.currentSortDir==='asc'?'desc':'asc';\n      } else this.currentSortDir = 'asc';\n      this.currentSort = s;\n    },\n    nextPage:function() {\n      this.currentPage++;\n    },\n    prevPage:function() {\n      if(this.currentPage &gt; 1) this.currentPage--;\n    }\n  },\n  asyncComputed: {\n    async breweries() {\n      let data = await fetch(`https://api.openbrewerydb.org/breweries?page=${this.currentPage}&amp;per_page=${this.pageSize}&amp;sort=${this.sortStr}`);\n      let result = await data.json(); \n      return result;\n    }\n  },\n  computed:{\n    cantGoBack() {\n      return this.currentPage === 1;\n    },\n    sortStr() {\n      let s = '';\n      if(this.currentSortDir === 'desc') s += '-';\n      return s + this.currentSort;\n    }\n  }\n})\n</code></pre>\n<p>Note that now when I change paging and sorting, I no longer need to call my method to load breweries, it happens automatically. Here's the demo:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"default\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"QWwewmj\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue - Sortable Table Async 2\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/QWwewmj\">\n  Vue - Sortable Table Async 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Remember that both demos still should use a loading indicator of some sort to let the user know what's going on. Leave me a comment if you've got any feedback!</p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Adding a Last Edited Field to Eleventy",
		"date":"Wed Feb 05 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/06/adding-a-last-edited-field-to-eleventy",
		"content":"<p>Let me begin by asking for some patience here as this post may ramble a bit. It certainly ended up going in directions I didn't expect when I built my proof of concept. If anything doesn't make sense, or I may some silly mistake, absolutely leave me a quick comment below and let me know. Alright, so with that out of the way, what in the heck am I writing about today?</p>\n<p>Next week I'm going to be giving a <a href=\"https://cfe.dev/events/flashback-conference-2020/\">presentation</a> at Flashback Conference in Orlando about the &quot;dynamic&quot; web. As part of my presentation I talk about <a href=\"https://httpd.apache.org/docs/current/howto/ssi.html\">Apache Server Side Includes</a>. This was a <em>very</em> early way to add some dynamic capabilities to HTML pages. One of the examples given is to include the date the page was last modified. If you're curious, it looked like so:</p>\n<pre><code class=\"language-html\">This document last modified &lt;!--#flastmod file=&quot;index.html&quot; --&gt;\n</code></pre>\n<p>It occurred to me that you really don't see this much anymore on the web. Early on though it was pretty common for web pages to document when they last changed. That being said, it actually seems like a <em>really</em> good idea for technical documentation.</p>\n<p>I thought I'd check and see how this could be accomplished with Eleventy. I was also curious if this could be automatic. So for example, if I edit <code>docs/lightsaber.md</code> then I'd like the published site to be able to access the edit time by looking at the file's metadata.</p>\n<p>So, first off, every Eleventy page has <a href=\"https://www.11ty.dev/docs/data/\">data</a> automatically included in a <code>page</code> scope. Included in this is a <code>date</code> value you could use: <code>{{ page.date }}</code></p>\n<p>The docs have this to say about it:</p>\n<blockquote>\nThe date associated with the page. Defaults to the content’s file created date but can be overridden. Read more at Content Dates.\n</blockquote>\n<p>As it defaults to the created date, this wouldn't work for me, but I was curious to see it in action anyway so I built up a quick demo. I made a new site, added a folder called <code>docs</code>, and configured it as a new collection:</p>\n<pre><code class=\"language-js\">eleventyConfig.addCollection(&quot;docs&quot;, function(collection) {\n\treturn collection.getFilteredByGlob(&quot;docs/*.md&quot;).sort((a,b) =&gt; {\n\t\tif(a.data.title &lt; b.data.title) return -1;\n\t\tif(a.data.title &gt; b.date.title) return 1;\n\t\treturn 0;\n\t});\n});\n</code></pre>\n<p>I then added a few files and used a layout:</p>\n<pre><code class=\"language-html\">---\nlayout: doc\ntitle: Apple\n---\n\nThis is about apple.\n</code></pre>\n<p>My doc layout has this:</p>\n<pre><code class=\"language-html\">---\nlayout: layout\n---\n\n{{ content }}\n\n&lt;footer&gt;\nThis document was last updated {{ page.date }}.\n&lt;/footer&gt;\n</code></pre>\n<p>I fired up my Eleventy server and hit my doc pages and confirmed they rendered right. I then modified one doc page, reloaded, and noticed something odd. Every single doc page had a new value for their date!</p>\n<p>I mentioned this in <a href=\"https://join.slack.com/t/thenewdynamic/shared_invite/enQtMjkwNjYwNTY0NjkxLWI1NDhlNjZkZjA5ZGJmODE1OThiMjkwN2ZkMzE1YjEwN2YwNWUxYTNjZTUxMGQ2MzU3NWQ0YmVjNGU1NTkxMDk\">Slack</a> (that's a great place to talk JAMStack stuff!) and I was reminded that when you edit content in Eleventy, it will rebuild the entire site on each change. (This <a href=\"https://github.com/11ty/eleventy/issues/108\">may change</a> with a command line flag.)</p>\n<p>Alright, so now it made sense. Given two doc pages, every time I edited one, then both were recreated. But then I saw something odd.</p>\n<p>Imagine two doc pages, <code>apple.md</code> and <code>banana.md</code>. Both were made at 10AM. I edited <code>banana.md</code> sometime later. When I generated my site, I saw that the resultant HTML files appeared to be using the last modified value, not the creation time. In other words, I expected both to have the same date (or within miliseconds), but <code>banana/index.html</code> clearly had a later value.</p>\n<p>So in theory kind of working like I wanted, but I didn't quite trust it. I quickly looked up how to get information about a file from the operating system and noticed something odd - apparently it had no &quot;creation&quot; value.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/date1.png\" alt=\"Output from the CLI showing no birth\" class=\"imgborder imgcenter\">\n<p>I'm using Ubuntu via WSL on Windows, so I quickly checked what Windows had to say, and it clearly had a value:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/date2.png\" alt=\"Windows Explorer file info\" class=\"imgborder imgcenter\">\n<p>I did some digging and it looks like it might be this: <a href=\"https://askubuntu.com/questions/918300/when-is-birth-date-for-a-file-actually-used\">When is Birth Date for a file actually used?</a></p>\n<p>So if there is something with the operating system, my next question, does Eleventy try to get the creation date, fail, and then go to the last updated value? I filed an <a href=\"https://github.com/11ty/eleventy/issues/900\">issue</a> asking about that and I'm waiting to hear back.</p>\n<p>Ok, still with me? Keeping in mind that I knew this wasn't the best approach, I did one more test. I put my code in a repository, added it to Netlify, and checked the result. On Netlify, the values for every doc page were the same. If I edited one doc, committed the change, and waited for Netlify to build it, I saw the same thing. Both docs had the same file and as far as I could tell, it was the &quot;created&quot; value after Netlify pulled the files down. To me this felt totally right in terms of how I expected things to work and my local environment was just... wrong. Kinda.</p>\n<p>The next step than was to put the onus on the writers to include a date. That isn't horrible at all of course, and can easily be done in frontmatter. So for example:</p>\n<pre><code class=\"language-html\">---\nlayout: doc\ntitle: Apple\ndate: 2020-02-03\n---\n</code></pre>\n<p>and</p>\n<pre><code class=\"language-html\">---\nlayout: doc\ntitle: Banana\ndate: 2020-02-04\n---\n</code></pre>\n<p>When you use <code>date</code> in front matter, it overrides <code>page.date</code> as documented <a href=\"https://www.11ty.dev/docs/dates/\">here</a>. You could also use your own field, like <code>lastEdited</code> or some such, and if you do, then don't forget to address it as that, not <code>page.whatever</code>.</p>\n<p>To make it look nicer, I added a filter as well:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter(&quot;dateFormat&quot;, function(value) {\n\treturn `${value.getMonth()+1}/${value.getDate()}/${value.getFullYear()}`;\n});\n</code></pre>\n<p>And then finally edited my layout:</p>\n<pre><code class=\"language-html\">This document was last updated {{ page.date | dateFormat }}.\n</code></pre>\n<p>You could also extend this idea a bit and support something like this:</p>\n<pre><code class=\"language-html\">---\nlayout: doc\ntitle: Banana\nlastEditDate: 2020-02-04\nlastEdit: Added context about how cool are cats are.\n</code></pre>\n<p>This example shows both a date for the edit and a message about what changed. Since you've got access to all your data in any place in Eleventy, you could build a page that collected these messages and generated a change log automatically!</p>\n<p>So if for some reason you want to see this in action, you can see a live view here: <a href=\"https://determined-liskov-3626af.netlify.com/\">https://determined-liskov-3626af.netlify.com/</a>. And the source may be found here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/datetest\">https://github.com/cfjedimaster/eleventy-demos/tree/master/datetest</a></p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@charissek?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Charisse Kenion</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Checking (and Upgrading) Template Engines in Eleventy",
		"date":"Thu Feb 06 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/07/checking-and-upgrading-template-engines-in-eleventy",
		"content":"<p>Yesterday a follower on Twitter encountered an interesting issue with <a href=\"https://www.11ty.dev/\">Eleventy</a> that turned into a bit of a bigger issue. Let's start with his question.</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">So it seems like LiquidJS added support for where filters <a href=\"https://t.co/nYFmA328WF\">https://t.co/nYFmA328WF</a> but maybe that hasn&#39;t been rolled into Eleventy yet? <a href=\"https://t.co/4Ovu4aP8I0\">https://t.co/4Ovu4aP8I0</a></p>&mdash; Richard Herbert (@richardherbert) <a href=\"https://twitter.com/richardherbert/status/1225342539823226880?ref_src=twsrc%5Etfw\">February 6, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>The <code>where</code> filter in Liquid provides a simple way to select values in an array by simple property matching. So consider this array:</p>\n<pre><code class=\"language-js\">[\n\t{&quot;name&quot;:&quot;Fred&quot;,&quot;gender&quot;:&quot;male&quot;},\n\t{&quot;name&quot;:&quot;Ginger&quot;,&quot;gender&quot;:&quot;female&quot;},\n\t{&quot;name&quot;:&quot;Bob&quot;,&quot;gender&quot;:&quot;male&quot;},\n\t{&quot;name&quot;:&quot;Lindy&quot;,&quot;gender&quot;:&quot;female&quot;}\n]\n</code></pre>\n<p>I've got four cats with names and genders. By using the where filter on gender, I could select different cats like so:</p>\n<pre><code class=\"language-html\">{% assign male_cats = cats | where: &quot;gender&quot;, &quot;male&quot; %}\n{% assign female_cats = cats | where: &quot;gender&quot;, &quot;female&quot; %}\n\n&lt;h3&gt;Male Cats&lt;/h3&gt;\n{% for cat in male_cats %}\n\t{{ cat.name }}, {{ cat.gender }}&lt;br/&gt;\n{% endfor %}\n\n&lt;p/&gt;\n\n&lt;h3&gt;Female Cats&lt;/h3&gt;\n{% for cat in female_cats %}\n\t{{ cat.name }}, {{ cat.gender }}&lt;br/&gt;\n{% endfor %}\n\n</code></pre>\n<p>If you run this in Eleventy though, you get this:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/eleventy1.png\" alt=\"All cats, not filtered\" class=\"imgborder imgcenter\">\n<p>The <code>assign</code> works fine, but there's no filtering.</p>\n<p>Why?</p>\n<p>Turns out Eleventy ships with an older version of the Liquid template engine. This then leads to the question, how do you know what version Eleventy ships with? If you go to the docs for <a href=\"https://www.11ty.dev/docs/languages/liquid/\">Liquid in Eleventy</a>, you'll see it isn't mentioned. I raised an <a href=\"https://github.com/11ty/eleventy/issues/906\">issue</a> on this saying the docs should make it more clear (for each engine obviously). It could actually be in the docs and I don't see it of course.</p>\n<p>Luckily though you can provide your own version of Liquid (or Nunjucks, or Handlebars, etc) by using <code>eleventyConfig.setLibrary</code> in your <code>.eleventy.js</code> file. The docs show this example:</p>\n<pre><code class=\"language-js\">module.exports = function(eleventyConfig) {\n  let liquidJs = require(&quot;liquidjs&quot;);\n  let options = {\n    extname: &quot;.liquid&quot;,\n    dynamicPartials: true,\n    strict_filters: true,\n    root: [&quot;_includes&quot;]\n  };\n\n  eleventyConfig.setLibrary(&quot;liquid&quot;, liquidJs(options));\n};\n</code></pre>\n<p>I gave this a shot. I made a new directory, did <code>npm i liquidjs</code>, and tried this code, but it threw an error. I checked the <a href=\"https://github.com/harttle/liquidjs\">docs</a> for liquidjs and saw that their initialization code was a bit different. I copied their code and ended up with this:</p>\n<pre><code class=\"language-js\">module.exports = eleventyConfig =&gt; {\n\tlet { Liquid } = require('liquidjs');\n\tlet engine = new Liquid();\n\n\televentyConfig.setLibrary(&quot;liquid&quot;, engine);\n\n}\n</code></pre>\n<img src=\"https://static.raymondcamden.com/images/2020/02/eleventy2.png\" alt=\"All cats, filtered\" class=\"imgborder imgcenter\">\n<p>Woot! But huge caveat here. Eleventy passes in it's own default options for Liquid. In my sample above I passed none so I'm using the liquidjs defaults instead. This could lead to backwards compatibility issues. This is discussed in another <a href=\"https://github.com/11ty/eleventy/issues/469\">issue</a>.</p>\n<p>So what version of Liquid does Eleventy ship? The user @DirtyF commented that by using <code>npm outdated</code> in a repo with Eleventy you can see the following:</p>\n<pre><code>Package      Current  Wanted  Latest  Location\nejs            2.7.4   2.7.4   3.0.1  @11ty/eleventy\nhandlebars     4.7.1   4.7.3   4.7.3  @11ty/eleventy\nliquidjs       6.4.3   6.4.3   9.6.2  @11ty/eleventy\nmustache       2.3.2   2.3.2   4.0.0  @11ty/eleventy\n</code></pre>\n<p>You could use this as a way to figure out exactly what features you have available when using your desired template language.</p>\n<p>As I raised in my <a href=\"https://github.com/11ty/eleventy/issues/906\">issue</a>, I think Eleventy needs some kind of &quot;statement&quot; or plan about how it does upgrades, when/how it handles backwards compatibility, etc. I don't think there is an easy solution for this but I'm hoping to be able to help the project with this effort. (If you can't tell, I'm rather enamored with it. ;)</p>\n<h3>An Alternative</h3>\n<p>So what if you don't want to muck with how Liquid works in Eleventy? Well you've got options, lots of em!</p>\n<p>One way is to just use a conditional:</p>\n<pre><code class=\"language-html\">{% for cat in cats %}\n\t{% if cat.gender == &quot;female&quot; %}\n\t{{ cat.name }}, {{ cat.gender }}&lt;br/&gt;\n\t{% endif %}\n{% endfor %}\n\n</code></pre>\n<p>While this implies looping over every record, keep in mind this is <em>only</em> done in development. In production it's just a plain static HTML file.</p>\n<p>Another option is to use filters. Liquid filters support arguments, so you could build this generic utility:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter(&quot;where2&quot;, function(value, prop, val) {\n\t// assumes value is an array\n\treturn value.filter(p =&gt; p[prop] == val);\n});\n</code></pre>\n<p>I named it <code>where2</code> just for testing but you would probably want something else. This lets you use the same format that the newer Liquid uses:</p>\n<pre><code class=\"language-js\">{% assign test_cats = cats | where2: &quot;gender&quot;, &quot;female&quot; %}\n\n</code></pre>\n<p>Finally, as yet another option, consider switching engines. What do I mean by that? While Liquid is definitely my preferred engine, <a href=\"https://www.11ty.dev/docs/languages/ejs/\">EJS</a> is <em>incredibly</em> flexible when it comes to code in your template. To be honest, it's too flexibly imo and encourages you to do stuff in your templates I think you should do elsewhere. But that flexibility could be a lifesaver, and one of the most awesome features of Eleventy is that you can easily switch one document to another engine by just changing the extension.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@yogidan2012?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Daniel Levis Pelusi</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Adding Text Linting to Eleventy",
		"date":"Sun Feb 09 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/10/adding-text-linting-to-eleventy",
		"content":"<p>While going through the Eleventy's docs recently I discovered an interesting feature, <a href=\"https://www.11ty.dev/docs/config/#linters\">Linters</a>. This feature lets you define custom rules you want to apply to your logic such that you can throw warnings during the editing and publishing process. The docs have an example of this in action but I wanted to expand a bit on it and see if I can add in <a href=\"https://textlint.github.io/\">textlint</a> support. textlint is a customizable text linting program built with Node.</p>\n<p>I first <a href=\"https://www.raymondcamden.com/2018/12/28/adding-automated-text-linting-to-my-blog\">blogged</a> about textlint back at the end of 2018 and described how I connected it to my GitHub commit process. I decided to take a look at how I could integrate it with Eleventy.</p>\n<p>First, a quick note about their linter API. First, this will not allow you to throw errors. I mean you could throw an error in your code, a manual Exception I mean. Instead you use this feature as a way to log out messages to the console during development.</p>\n<p>You are passed three arguments: content, inputPath, and outputPath. Let's discuss the second two first. As you can guess, inputPath is the file being processed, like foo.liquid, and outputPath is the destination path which follows Eleventy's rules for such things. Using foo.liquid as input, it may be foo/index.html for output. <em>These paths are relative</em>, so keep that in mind if you need to do anything that requires the full path.</p>\n<p>The content argument is the <em>parsed</em> HTML output of the template, which is very cool. It means you can lint the text the public will see. Well that's mostly cool. In my testing, I noticed that one of the plugins I used for text linting did not like HTML, so I removed it. But in general I think it's very good that you get the &quot;final&quot; content instead of content with embedded variables and things in it from the template language.</p>\n<p>Alright, so with all that, how does this all work? Let's consider their default example:</p>\n<pre><code class=\"language-js\">  eleventyConfig.addLinter(&quot;inclusive-language&quot;, function(content, inputPath, outputPath) {\n    let words = &quot;simply,obviously,basically,of course,clearly,just,everyone knows,however,easy&quot;.split(&quot;,&quot;);\n    if( inputPath.endsWith(&quot;.md&quot;) ) {\n      for( let word of words) {\n        let regexp = new RegExp(&quot;\\\\b(&quot; + word + &quot;)\\\\b&quot;, &quot;gi&quot;);\n        if(content.match(regexp)) {\n          console.warn(`Inclusive Language Linter (${inputPath}) Found: ${word}`);\n        }\n      }\n    }\n  });\n</code></pre>\n<p>They begin by defining a set of source words they want to check for. Next they see if the input file was markdown. I think, in general, this is a good thing to do since a content site will probably be largely markdown with other ancillary files being Liquid or some other template language. So for example, my blog uses markdown for 100% of the blog content, but pages like my &quot;About&quot; and &quot;Speaking&quot; pages are Liquid. In theory I'd like to lint them too, but I'd be ok with just the markdown being check. When run, this is how it looks (assuming you have a few issues in your content):</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/tl1.png\" alt=\"Example output\" class=\"imgborder imgcenter\">\n<p>You can see the messages sent out immediately after I started the server. The messages will be repeated every time I edit so the feature gives you good, constant, feedback in the console as you work.</p>\n<p>That's the out of the box example, how about an example with the textlint project? First off, note that textlint has a large number of <a href=\"https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule\">rules</a>. Each rule is it's own project and must be npm installed. Each rule also has it's own configuration. In my testing (both now and the previous times I've worked with it), I've found mixed results from different rules. For example, I never could get spell check working well. Also, things like the <a href=\"https://github.com/azu/textlint-rule-alex\">alex</a> rule, which looks for gender favouring or insensitive language, didn't work with HTML. I don't think that was documented at all. Basically this is my way of saying that while overall textlint is a cool project I think, you should expect a bit of roughness around the edges.</p>\n<p>For my testing I decided to use some of the same rules I used in my previous test.</p>\n<ul>\n<li><a href=\"https://github.com/azu/textlint-rule-alex\">alex</a> which covers insensitive language</li>\n<li><a href=\"https://github.com/azu/textlint-rule-no-start-duplicated-conjunction\">no-start-duplicated-conjunction</a> which attempts to find multiple sentences starting with words like &quot;but&quot; or &quot;so&quot; - I never got this test to work though.</li>\n<li><a href=\"https://github.com/sapegin/textlint-rule-terminology\">terminology</a> which looks for the right spelling of certain technology-related words, like iOS versus ios.</li>\n</ul>\n<p>I made a new Eleventy project (which is just a folder) and npm installed textlint and then the three rule plugins. Here's my .eleventy.js:</p>\n<pre><code class=\"language-js\">const chalk = require('chalk');\nconst TextLintEngine = require('textlint').TextLintEngine;\nconst options = {\n  rules: [&quot;alex&quot;, &quot;no-start-duplicated-conjunction&quot;, &quot;terminology&quot;]\n};\nconst engine = new TextLintEngine(options);\n\nmodule.exports = function(eleventyConfig) {\n\n  eleventyConfig.addLinter(&quot;textlinter&quot;, async function(content, inputPath, outputPath) {\n\n    // Some rules don't like the HTML\n    content = content.replace(/&lt;.*?&gt;/g, '');\n\n    let results = await engine.executeOnText(content);\n    //console.log(JSON.stringify(results));\n    for(let i=0; i&lt;results.length; i++) {\n      for(let x=0; x&lt;results[i].messages.length; x++) {\n        let msg = `[${inputPath}] `+results[i].messages[x].message\n        console.log(chalk.yellow(msg));\n      }\n    }\n\n  });\n\n};\n</code></pre>\n<p>Alright, so on top, I started off adding <a href=\"https://github.com/chalk/chalk#readme\">Chalk</a>, a cool utility that makes console.log messages stand out a bit. I then instantiated my instance of textlint.</p>\n<p>In the <code>addLinter</code> block, I then pass the content of the file being parsed to the engine and take the result. The results an array where each instance of the array contains an array of messages. So I loop inside a loop and output the result. You can do more with the results, like provide alternatives and the like, but you'll need to check what's provided on a rule by rule basis.</p>\n<p>For each message, I use <code>chalk.yellow</code> to make the message stand out a bit. Red may be better, but it's up to you!</p>\n<p>As I mentioned earlier, the alex rule didn't like HTML. It didn't throw an error, it simply ignored the entire input. That was frustrating, but quick to fix with the regex you see.</p>\n<p>Here's the output based on some test files I created.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/tl2.png\" alt=\"Example output from textlint 2\" class=\"imgborder imgcenter\">\n<p>As I said, this is not a perfect solution. So for example, for terminology I had used <code>javascript</code> in my test and it wasn't picked up. Why? I had this as input:</p>\n<pre><code class=\"language-html\">Hi world I'm the mailman for today.\n\nI love me some javascript, don't you?\n\nI've got an android browser.\n\nHow about ios testing?\n</code></pre>\n<p>See the comma after <code>javascript</code>? That was enough to &quot;break&quot; the rule. When I removed it the linter rule found it. It's an open source project so this could be patched of course, just remember what I said - each rule has it's own quirks you'll need to figure out.</p>\n<p>I hope this helps, and you can find the complete demo repository here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/textlint_demo\">https://github.com/cfjedimaster/eleventy-demos/tree/master/textlint_demo</a></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Ionicons in Vue.js",
		"date":"Sun Feb 16 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/17/ionicons-in-vue",
		"content":"<p>It's been a long time since I've written about <a href=\"https://ionicframework.com/\">Ionic</a>. In general, I haven't done much in the hybrid mobile space over the past few years. I pay attention to their updates though (<a href=\"https://ionicframework.com/blog/announcing-ionic-5/\">version 5</a> looks impressive) and noticed recently they did a <a href=\"https://ionicframework.com/blog/announcing-ionicons-5/\">major update</a> to their <a href=\"https://ionicons.com/\">Ionicons</a> project.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/io1.png\" alt=\"Screen shot of the Ionicon site\" class=\"imgborder imgcenter\">\n<p>I've only used Ionicons with Ionic project, and while not required, it was useful as hell to have a robust icon library to use when building mobile apps. I knew that the project could be used outside of Ionic but I hadn't actually tested it out. On a whim, I thought I'd take a quick look at what you need to do to use it in a Vue app.</p>\n<p>Spoiler - it was ridiculously easy.</p>\n<p>I started off with a Vue application on CodePen. And by &quot;application&quot;, I mean just a CodePen with the Vue script tag added. I then setup some data for testing:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    drinks: [\n    \t{&quot;name&quot;:&quot;Abita&quot;,&quot;type&quot;:&quot;beer&quot;},\n    \t{&quot;name&quot;:&quot;Merlot&quot;,&quot;type&quot;:&quot;wine&quot;},\n    \t{&quot;name&quot;:&quot;Saint Arnold&quot;,&quot;type&quot;:&quot;beer&quot;},\n    \t{&quot;name&quot;:&quot;Red Something&quot;,&quot;type&quot;:&quot;wine&quot;}\n      ]\n  }\n})\n</code></pre>\n<p>I've got an array of drinks where each one has a name and type. To make things a bit simpler, the types also happen to correspond to icons supported by Ionicons.</p>\n<p>To add support, and pay attention, this is really complex, I added this script src: https://unpkg.com/ionicons@5.0.0/dist/ionicons.js.</p>\n<p>And that's it. Done. Ionicons make use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">web components</a> to add in support for the icons. (For unsupported browsers, polyfills should be used. I did a quick test with IE11 and it worked fine.) Using them then is as simple as this:</p>\n<pre><code class=\"language-html\">&lt;ion-icon name=&quot;something&quot;&gt;&lt;/ion-icon&gt;\n</code></pre>\n<p>where &quot;something&quot; refers to the icon you want to load. You may not notice it at first but the home page has a search field that lets you quickly look for a particular icon by name. The <a href=\"https://ionicons.com/usage\">usage</a> page also details how to use variants, like filled icons versus outlined. You can even specify per platform (ios versus android) like so:</p>\n<pre><code class=\"language-html\">&lt;ion-icon ios=&quot;heart-outline&quot; md=&quot;heart-sharp&quot;&gt;&lt;/ion-icon&gt;\n</code></pre>\n<p>My guess it that every single browser outside of Safari will use the <code>md</code> version. In my quick test on my Windows machine, Firefox used the <code>md</code> version.</p>\n<p>So given my data, I wanted to render my drinks and use the right icon based on the drink type. This is what I used.</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;ul&gt;\n    &lt;li v-for=&quot;drink in drinks&quot;&gt;\n      {{drink.name}} &lt;ion-icon :name=&quot;drink.type&quot;&gt;&lt;/ion-icon&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n<p>And here's the result:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"default\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"GRJRYqw\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue plus Ionic Icons\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/GRJRYqw\">\n  Vue plus Ionic Icons</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>So yeah, I love it when I decide to test something to see if it works, and it just does, and it doesn't get complex in any way whatsoever. I had not thought of Ionicons at all recently but now I'm absolutely going to use it in my Vue apps where it makes sense.</p>\n<h3>Oops, One More Thing</h3>\n<p>I had my buddy and Ionic devrel <a href=\"https://mhartington.io/\">Mike Hartington</a> do a quick sanity check on the post. He wondered why I didn't run into the &quot;Unknown custom element&quot; issue. Turns out, I <em>had</em> run into it, just hadn't noticed. It's an warning thrown in the console, not an error, and it takes all of two seconds to fix. Basically, you tell Vue to calm down and don't worry about it like so:</p>\n<pre><code class=\"language-js\">Vue.config.ignoredElements = ['ion-icon'];\n</code></pre>\n<p>My CodePen above has this added.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@aquatium?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Harpal Singh</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "ionic",
            
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Adding Another Template Language to Eleventy",
		"date":"Tue Feb 18 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/19/adding-another-template-language-to-eleventy",
		"content":"<p>While at a conference last week, an attendee was asking me about <a href=\"https://www.11ty.dev/\">Eleventy</a> and specifically, how to add support for another template language. He mentioned that he was a user of <a href=\"https://github.com/mjmlio/mjml\">MJML</a>, a format I had never heard of, but apparently it's big for people who build responsive email templates. Doing HTML for email seems to be the &quot;last place&quot; where web dev is painful so this probably makes things quite a bit easier. I did some digging and this is what I turned up.</p>\n<h3>Official Support</h3>\n<p>So first off, there is no official support, yet, in Eleventy for doing this. There's an issue for it: <a href=\"https://github.com/11ty/eleventy/issues/117\">Custom File Extension Handlers</a> It's closed but that's because the repo uses lodash style issue management. (I've got feelings about that, but whatever. ;) Note that this is different from the ability to provide a newer version of the <em>supported</em> template engines. I <a href=\"https://www.raymondcamden.com/2020/02/07/checking-and-upgrading-template-engines-in-eleventy\">blogged</a> about that earlier this month.</p>\n<h3>Attempt One</h3>\n<p>Ok, so given that you can't do it (yet), I went through a couple of iterations to get this working. My first one is not what I'd recommend, but I'm sharing it as just a cool example of the flexibility of Eleventy in general.</p>\n<p>First, I created a folder for my testing (and I'll be sharing a link to the repository at the end of this post) called <code>mjml_first</code>. In that folder I put a file named <code>test1.html</code>. The extension is important. If I named it <code>test1.mjml</code>, Eleventy would <em>not</em> do any processing on the content, which is what we want. Unfortunately it means you lose syntax helpers and color coding in your editor, but remember that Visual Studio Code lets you overwrite the document type. (Or just wait to &quot;Attempt Two&quot; later in this post. ;)</p>\n<p>In that post I copied in the sample MJML I had found:</p>\n<pre><code class=\"language-html\">&lt;mjml&gt;\n&lt;mj-body&gt;\n\t&lt;mj-section&gt;\n\t\t&lt;mj-column&gt;\n\t\t\t&lt;mj-text&gt;\n\t\t\t\tHello World!\n\t\t\t&lt;/mj-text&gt;\n\t\t&lt;/mj-column&gt;\n\t&lt;/mj-section&gt;\n&lt;/mj-body&gt;\n&lt;/mjml&gt;\n</code></pre>\n<p>Now I want to tell Eleventy to use a layout for all the files in this folder. Eleventy lets you specify <a href=\"https://www.11ty.dev/docs/data-template-dir/\">data files</a> at the template and directory level. To do so, I added <code>mjml_first.json</code> to my folder:</p>\n<pre><code class=\"language-js\">{\n\t&quot;layout&quot;:&quot;mjml&quot;\n}\n</code></pre>\n<p>Next I built the layout file. Typically a layout file uses Liquid or some other template language and just includes the content somewhere in the middle. But again, Eleventy is <em>incredible</em> flexible. You can use JavaScript for your layouts as well. At the command line I installed MJML node support and then named my layout file <code>mjml.11ty.js</code>. The <code>11ty</code> part is important. Here's what the file did:</p>\n<pre><code class=\"language-js\">const mjml = require('mjml');\n\nmodule.exports = function(data) {\n\tlet s = '';\n\ts = mjml(data.content);\n\treturn s.html;\n};\n</code></pre>\n<p>Honestly that could be even shorter, but you can see I'm just passing in my content to the mjml engine and returning the output.</p>\n<p>And that's it. When I run my build, I get HTML out which I won't share here as it's <em>crazy</em> long to work correctly in email clients.</p>\n<p>I liked this approach, but as I said, it required using .html files which kind of bugged me a bit.</p>\n<h3>Attempt Two</h3>\n<p>For my second attempt, I focused on getting proper support for the mjml extension in my project. I created a folder named <code>mjml</code> and put two sample files in there. I also installed the <a href=\"https://github.com/attilabuti/vscode-mjml\">Visual Studio Code MJML extension</a> because <em>of course</em> there's an extension for that.</p>\n<p>Since mjml is an extension that Eleventy doesn't support, it's going to be ignored. Of course you can add <code>addPassthroughCopy</code> to copy it to the <code>_site</code> folder, but it would be copied as is with no parsing.</p>\n<p>So instead I did two things. First, I added a data file named <code>mjml.js</code> which the following code:</p>\n<pre><code class=\"language-js\">\nconst mjml = require('mjml');\nconst globby = require('globby');\nconst fs = require('fs');\n\nmodule.exports = async function(data) {\n\tlet result = [];\n\n\tlet files = await globby('mjml/*.*');\n\n\tfor(let i=0; i &lt; files.length; i++) {\n\t\tlet content = fs.readFileSync(files[i], 'utf8');\n\t\tlet path = files[i].replace(/\\.mjml/,'');\n\t\tresult.push({\n\t\t\tpath:path,\n\t\t\toriginalContent:content,\n\t\t\tparsedContent:mjml(content).html\n\t\t});\n\t}\n\n\treturn result;\n};\n</code></pre>\n<p>This loads in all the mjml files and iterates over each. For each item it changes the path value to remove <code>.mjml</code>. We'll add back in a proper extension later. Then I add the mjml parsed version to an array and return it.</p>\n<p>The end result is that Eleventy has access to data that contains a list of parsed MJML files.</p>\n<p>I then used my <a href=\"https://www.11ty.dev/docs/pages-from-data/\">favorite Eleventy</a> feature to define a &quot;pagination&quot; output of the data with a size of 1. Basically, make one file per record in the array of data. I named this <code>mjmldocs.liquid</code>.</p>\n<pre><code class=\"language-html\">---\npagination: \n  data: mjml\n  size: 1\n  alias: doc\npermalink: &quot;{{ doc.path }}/&quot;\n---\n\n{{ doc.parsedContent }}\n</code></pre>\n<p>Now when I create my build, I get a mjml folder with subdirectories per input file and an index.html file with the parsed content.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/mjml.png\" alt=\"Output of parsed mjml files\" class=\"imgborder imgcenter\">\n<p>I was done. Except that I noticed when I edited mjml files, Eleventy didn't notice. I thought perhaps that would just have been a small paint point, but of course not, Eleventy is awesome. I added one line to my <code>.eleventy.js</code> file:</p>\n<pre><code class=\"language-js\">eleventyConfig.addWatchTarget('./mjml/');\n</code></pre>\n<p>That's all it took!</p>\n<p>So hopefully this is helpful to others. You can find the code I used to test here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/customext\">https://github.com/cfjedimaster/eleventy-demos/tree/master/customext</a></p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@belart84?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Artem Beliaikin</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites",
            
                "javascript"
            
		]

	},

	{
		"title": "Adding a SMS Alert for Netlify Builds with RingCentral",
		"date":"Fri Feb 21 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/22/adding-a-sms-alert-for-netlify-builds-with-ringcentral",
		"content":"<p>I'm currently sitting in the Atlanta airport waiting to fly home from one of my favorite conferences, <a href=\"https://devnexus.com/\">DevNexus</a>. While there, my buddy <a href=\"https://recursive.codes/\">Todd Sharp</a> introduced me to <a href=\"https://developers.ringcentral.com/\">RingCentral</a>. RingCentral is a telecom API provider that reminds me a lot of Nexmo and Twilio. I've enjoyed working with both of those companies APIs so this morning I spent some time playing with RingCentral as well.</p>\n<p>They have a great developer onboarding experience. I was able to setup an account in a minute or so. I then looked at one of their first walkthoughs, <a href=\"https://developers.ringcentral.com/guide/messaging/quick-start/node\">SMS JavaScript Quick Start</a> and was happy to see it worked right out of the box. Here's what their sample SMS sending code looks like:</p>\n<pre><code class=\"language-js\">const SDK = require('@ringcentral/sdk').SDK\n\nRECIPIENT = '&lt;ENTER PHONE NUMBER&gt;'\n\nRINGCENTRAL_CLIENTID = '&lt;ENTER CLIENT ID&gt;'\nRINGCENTRAL_CLIENTSECRET = '&lt;ENTER CLIENT SECRET&gt;'\nRINGCENTRAL_SERVER = 'https://platform.devtest.ringcentral.com'\n\nRINGCENTRAL_USERNAME = '&lt;YOUR ACCOUNT PHONE NUMBER&gt;'\nRINGCENTRAL_PASSWORD = '&lt;YOUR ACCOUNT PASSWORD&gt;'\nRINGCENTRAL_EXTENSION = '&lt;YOUR EXTENSION, PROBABLY &quot;101&quot;&gt;'\n\nvar rcsdk = new SDK({\n    server: RINGCENTRAL_SERVER,\n    clientId: RINGCENTRAL_CLIENTID,\n    clientSecret: RINGCENTRAL_CLIENTSECRET\n});\nvar platform = rcsdk.platform();\nplatform.login({\n    username: RINGCENTRAL_USERNAME,\n    password: RINGCENTRAL_PASSWORD,\n    extension: RINGCENTRAL_EXTENSION\n    })\n    .then(function(resp) {\n        send_sms()\n    });\n\nfunction send_sms(){\n  platform.post('/restapi/v1.0/account/~/extension/~/sms', {\n       from: {'phoneNumber': RINGCENTRAL_USERNAME},\n       to: [{'phoneNumber': RECIPIENT}],\n       text: 'Hello World from JavaScript'\n     })\n     .then(function (resp) {\n        console.log(&quot;SMS sent. Message status: &quot; + resp.json().messageStatus)\n     });\n}\n</code></pre>\n<p>My only complaint was that the lack of semicolons in the beginning made me twitch a bit. I would also like to see an async/await version of it (which you'll see in a second ;). Once I confirmed it worked, I then figured out a simple demo I'd build.</p>\n<p>One of the cooler features of Netlify is the ability to run events on <a href=\"https://docs.netlify.com/functions/trigger-on-events/#available-triggers\">triggered events</a>. One of those events is <code>deploy-succeeded</code> which lets you do something after a build is done. All you need to do is name a function <code>deploy-succeeded.js</code> and it will be executed automatically.</p>\n<p>Unfortunately, and I love you Netlify, honest, they still do not document, completely, the information sent to these events. In my case it wasn't necessarily important. I just wanted to know the build succeeded. I had to do some console.logs, copying and pasting, and formatting to get to the information. Again, Netlify, I love you, but take the 5 minutes to add this information to the docs.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/lackofdocs.jpg\" alt=\"Vader talking about the lack of docs\" class=\"imgborder imgcenter\">\n<p>That being said, I was able to find two values in the payload I thought would be useful, <code>published_at</code> and <code>deploy_time</code>, which reports the time in it took to make the build in seconds. I thought it would be cool to integrate RingCentral's SMS support and use these two values. Here's the function I built.</p>\n<pre><code class=\"language-js\">const SDK = require('@ringcentral/sdk').SDK;\n\nRECIPIENT = process.env.SMS_RECIP;\n\nRINGCENTRAL_CLIENTID = process.env.RINGCENTRAL_CLIENTID;\nRINGCENTRAL_CLIENTSECRET = process.env.RINGCENTRAL_CLIENTSECRET;\nRINGCENTRAL_SERVER = process.env.RINGCENTRAL_SERVER;\n\nRINGCENTRAL_USERNAME = process.env.RINGCENTRAL_USERNAME;\nRINGCENTRAL_PASSWORD = process.env.RINGCENTRAL_PASSWORD;\nRINGCENTRAL_EXTENSION = process.env.RINGCENTRAL_EXTENSION;\n\nvar rcsdk = new SDK({\n    server: RINGCENTRAL_SERVER,\n    clientId: RINGCENTRAL_CLIENTID,\n    clientSecret: RINGCENTRAL_CLIENTSECRET\n});\nvar platform = rcsdk.platform();\n\nexports.handler = async (event, context) =&gt; {\n  try {\n\n    console.log('deploy succeeded run!');\n    let pubData = JSON.parse(event.body).payload;\n\n    // get the time\n    let buildTime = pubData.published_at;\n    //in seconds;\n    let buildDuration = pubData.deploy_time;\n\n    console.log(`BUILT at ${buildTime} in ${buildDuration} seconds`);\n    await sendSMS(buildTime, buildDuration);\n\n    return {\n      statusCode: 200,\n      body: ''\n    }\n  } catch (err) {\n    return { statusCode: 500, body: err.toString() }\n  }\n}\n\nasync function sendSMS(time,duration) {\n\n\tawait platform.login({\n\t\tusername: RINGCENTRAL_USERNAME,\n\t\tpassword: RINGCENTRAL_PASSWORD,\n\t\textension: RINGCENTRAL_EXTENSION\n\t\t});\n\tlet resp = await platform.post('/restapi/v1.0/account/~/extension/~/sms', {\n\t\tfrom: {'phoneNumber': RINGCENTRAL_USERNAME},\n\t\tto: [{'phoneNumber': RECIPIENT}],\n\t\ttext: `Site built at ${time} and took ${duration} seconds.`\n  });\n\t\n  let data = await resp.json();\n  return data;\n\n}\n</code></pre>\n<p>The top portion of my code is a block of statements simply copying environment variables into a simpler variable scope. Netlify lets you specify secrets in environment variables. Since my site was tied to GitHub, it would not have made sense to check in code with secrets. (Not that I've ever done that. Honest.)</p>\n<p>My main handler code parses the event information sent in and grabs the values I care about. (And again, there's a lot more. I'd like to share my payload but I'm not sure if there's anything sensitive in there, and also, Netlify should document it!) I then call <code>sendSMS</code>. This is roughly the same logic as their sample code, but rewritten with hipster await awesomeness.</p>\n<p>With that written (well, code like this), I committed and triggered a build. I then discovered that if you have a bug in your handler, the entire build fails. That's a <em>good</em> thing in my opinion. But it's not documented. (Are you sensing a theme here?) I fixed my bug and voila:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/sms.png\" alt=\"Example text messages\" class=\"imgborder imgcenter\">\n<p>Note that the first few messages were me testing, and the watermark goes away from &quot;real&quot; accounts. Let me know what you think. I'm going to be playing with RingCentral for a while so expect more posts!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@myke_simon?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Myke Simon</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "static sites",
            
                "javascript"
            
		]

	},

	{
		"title": "Sending SMS Messages for Form Data with RingCentral and Netlify",
		"date":"Mon Feb 24 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/25/sending-sms-messages-for-form-data-with-ringcentral-and-netlify",
		"content":"<p>A few days ago I blogged about using <a href=\"https://developers.ringcentral.com/\">RingCentral's APIs</a> to send a SMS message when your Netlify-based site builds (<a href=\"https://www.raymondcamden.com/2020/02/22/adding-a-sms-alert-for-netlify-builds-with-ringcentral\">&quot;Adding a SMS Alert for Netlify Builds with RingCentral&quot;</a>). I thought I'd follow it up with a related example - sending a SMS with form data. To be clear, this post isn't too much different from the previous one, but I thought it was an interesting enough example to share.</p>\n<p>Last year I <a href=\"https://www.raymondcamden.com/2019/01/15/customized-form-handling-on-netlify-with-serverless-functions\">blogged</a> about using Netlify serverless functions for form submissions. In that post I detail the data sent to the serverless payload (since, ahem, Netlify still doesn't document this). Based on that, here's the code I used to take the form submission and send it as a SMS:</p>\n<pre><code class=\"language-js\">const SDK = require('@ringcentral/sdk').SDK;\n\n// used for sms\nRECIPIENT = process.env.SMS_RECIP;\nRINGCENTRAL_CLIENTID = process.env.RINGCENTRAL_CLIENTID;\nRINGCENTRAL_CLIENTSECRET = process.env.RINGCENTRAL_CLIENTSECRET;\nRINGCENTRAL_SERVER = process.env.RINGCENTRAL_SERVER;\nRINGCENTRAL_USERNAME = process.env.RINGCENTRAL_USERNAME;\nRINGCENTRAL_PASSWORD = process.env.RINGCENTRAL_PASSWORD;\nRINGCENTRAL_EXTENSION = process.env.RINGCENTRAL_EXTENSION;\n\nvar rcsdk = new SDK({\n  server: RINGCENTRAL_SERVER,\n  clientId: RINGCENTRAL_CLIENTID,\n  clientSecret: RINGCENTRAL_CLIENTSECRET\n});\nvar platform = rcsdk.platform();\n\nexports.handler = async (event, context) =&gt; {\n\n  let payload = JSON.parse(event.body).payload;\n  let name = payload.data.name;\n  let email = payload.data.email;\n  let comments = payload.data.comments;\n\n  console.log(`name, ${name}, email, ${email}, comments, ${comments}`);\n\n  const text = `\nA form was sent by ${name} (email address of ${email}), with these comments: \n${comments}`;\n  await sendSMS(text);\n\n}\n\nasync function sendSMS(text) {\n\n  await platform.login({\n    username: RINGCENTRAL_USERNAME,\n    password: RINGCENTRAL_PASSWORD,\n    extension: RINGCENTRAL_EXTENSION\n  });\n\n  let resp = await platform.post('/restapi/v1.0/account/~/extension/~/sms', {\n    from: {'phoneNumber': RINGCENTRAL_USERNAME},\n    to: [{'phoneNumber': RECIPIENT}],\n    text: text\n  });\n\t\n  let data = await resp.json();\n  return data;\n}\n</code></pre>\n<p>Basically - I create a formatted string and pass it to a function to handle sending the SMS. The result is much like my previous example:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/nsms.png\" alt=\"Screen shot of text sent by RingCentral\" class=\"imgborder imgcenter\">\n<p>As a reminder, that text watermark in front would <em>not</em> be there in a production-released RingCentral application.</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "static sites",
            
                "javascript"
            
		]

	},

	{
		"title": "Working with RingCentral Webhooks",
		"date":"Tue Feb 25 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/26/working-with-ringcentral-webhooks",
		"content":"<p>As you know, I've been playing around with <a href=\"https://developers.ringcentral.com/\">RingCentral</a> lately. While working on another idea (for another post of course), I ran into some difficulty getting their webhook support working. While everything <em>is</em> documented, it didn't quite make sense to me and I had to get it working myself before I actually believed it worked. So with that in mind, here's how I got webhooks with RingCentral working.</p>\n<h3>Stuff to Know First</h3>\n<p>First off, take a look at the docs for <a href=\"https://developers.ringcentral.com/guide/notifications/manual/webhooks\">Webhooks</a> on their platform. In some platforms, you simply specify a URL to hit for a webhook and you're good to go. RingCentral requires you to register a webhook via an API call.</p>\n<p>In order to use webhooks, your application has to enable that permission (this is under your app, Settings, OAuth Settings):</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/wh1.png\" alt=\"Screen shot of the UI to add permissions\" class=\"imgborder imgcenter\">\n<p>Next, note that your webhook must be up and running before you register it. That's not necessarily a bad thing, but it was kind of surprising. In most cases a platform just assumes your URL will work and leaves it it up to you.</p>\n<p>When registering your webhook, RingCentral is going to pass a header, <code>validation-token</code>, and if it exists, your webhook has to echo it back in a header and end the request.</p>\n<p>To register a webhook, you tell RingCentral what events you care about. Getting that list was a bit difficult. If I read the docs right, the event is basically the same as the API related to that event. My code was working with voicemails, so I used this value: <code>/restapi/v1.0/account/~/extension/~/voicemail</code>.</p>\n<p>Now for the last bit, and this is the part I really don't like. When you register a webhook, it isn't permanent. No, it expires after a time. If you want, you can actually specify that you want the service to hit your webhook when it expires. And I guess you... just re-enable it again? Honestly I don't quite get this part. Maybe it's a security setting, but honestly it feels like a lot of burden on the developer. It's already difficult to setup the webhook compared to other services which just let you type in a URL, and this feels like pouring salt in the wound a bit. Now, there may be a <em>very</em> good reason for this setup.</p>\n<p>Ok, good news! So I was about to post to a forum thread where I asked why this was necessary (<a href=\"https://forums.developers.ringcentral.com/questions/9774/purpose-of-webhook-expiration.html\">https://forums.developers.ringcentral.com/questions/9774/purpose-of-webhook-expiration.html</a>), and it turns out the API to register a webhook supports an <code>expiresIn</code> value that can be set to as high as 20 years. As <a href=\"https://forums.developers.ringcentral.com/users/16525/phong1426275020.html\">Phong Vu</a> explains, instead of trying to listen for a callback saying the webhook expired, if you know the exact time it will expire, you could just schedule the re-register yourself.</p>\n<p>So this is good! I still think RingCentral should support a &quot;never expire&quot; option, but I can deal with twenty years.</p>\n<h3>The Code</h3>\n<p>What follows is &quot;Get it Working&quot; code. You should not consider this production ready unless your production system is run by these fine people:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/02/fraggles.jpg\" alt=\"Fraggle Rock FTW!\" class=\"imgborder imgcenter\">\n<p>My code consists of two parts. First, I wrote a simple Node server with Express to handle my webhook. RingCentral has a <a href=\"https://developers.ringcentral.com/guide/notifications/quick-start/webhook/node\">Node example</a> as well but I wanted to use Express because, well, I always use Express when I do server stuff. That being said, I realized today I had not used Express in ages. Serverless has made me a bit lazy. So again, do not consider this code to best practice. Here's my webhook which handles the validation and then just logs the incoming request.</p>\n<pre><code class=\"language-js\">//import dependencies\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\n\n// define the Express app\nconst app = express();\n\n// enhance your app security with Helmet\napp.use(helmet());\n\n// use bodyParser to parse application/json content-type\napp.use(bodyParser.json());\n\n// enable all CORS requests\napp.use(cors());\n\n// log HTTP requests\napp.use(morgan('combined'));\n\n// start the server\napp.listen(8081, () =&gt; {\n\tconsole.log('listening on port 8081');\n});\n\napp.post('/webhook', (req,res) =&gt; {\n\tlet vt = req.headers['validation-token'];\n\tif(vt) { \n\t\tres.set('Validation-Token', vt);\n\t\tres.end();\n\t}\n\tconsole.log(JSON.stringify(req.body,null,'\\t'));  \n\tres.send('ok');\n});\n</code></pre>\n<p>The part you care about is at the end. You can see the validation support and then after that I simply dump the incoming data to the terminal. It's a pretty big object, but it's nicely documented here: <a href=\"https://developers.ringcentral.com/api-reference/Voicemail-Message-Event\">https://developers.ringcentral.com/api-reference/Voicemail-Message-Event</a> That's for Voicemails, but in the navigation you can see they define all the different event types.</p>\n<p>I ran this and then used ngrok to create an externally facing proxy to my laptop. I've blogged about <a href=\"https://ngrok.com/\">ngrok</a> before and if you haven't checked it out, definitely do so. It's incredibly helpful for cases like this.</p>\n<p>Now for the script I used to create the webhook. Here's the script I used:</p>\n<pre><code class=\"language-js\">const SDK = require('@ringcentral/sdk').SDK\n\nRECIPIENT = '3374128987'\n\nRINGCENTRAL_CLIENTID = 'secret'\nRINGCENTRAL_CLIENTSECRET = 'secret'\nRINGCENTRAL_SERVER = 'https://platform.devtest.ringcentral.com'\n\nRINGCENTRAL_USERNAME = 'so secret'\nRINGCENTRAL_PASSWORD = 'super secret'\nRINGCENTRAL_EXTENSION = '101'\n\nvar rcsdk = new SDK({\n    server: RINGCENTRAL_SERVER,\n    clientId: RINGCENTRAL_CLIENTID,\n    clientSecret: RINGCENTRAL_CLIENTSECRET\n});\nvar platform = rcsdk.platform();\n\n(async function() {\n\n\tawait platform.login({\n\t\tusername: RINGCENTRAL_USERNAME,\n\t\tpassword: RINGCENTRAL_PASSWORD,\n\t\textension: RINGCENTRAL_EXTENSION\n\t});\n\n\tlet response = await rcsdk.send({\n\t\tmethod:'POST',\n\t\turl:'/restapi/v1.0/subscription', \n\t\tbody:{\n\t\t\teventFilters:[\n\t\t\t\t'/restapi/v1.0/account/~/extension/~/voicemail'\n\t\t\t],\n\t\t\tdeliveryMode: {\n\t\t\t\t'transportType':'WebHook',\n\t\t\t\t'address':'http://c45955bf.ngrok.io/webhook'\n\t\t\t}\n\t\t}\n\n\t});\n\n\tconsole.log(await response.json());\t\n\t\n})();\n</code></pre>\n<p>The important bits are the call to the subscription endpoint. You can see me specifying my filter for voicemail and the URL I got via ngrok. As I said above, I now know I can specify expiresIn in my call (here's the <a href=\"https://developers.ringcentral.com/api-reference/Subscriptions/createSubscription\">full API doc</a> for creating subscriptions) so I'd modify the above to specify the max value,  630720000.</p>\n<p>Ok, after all of that... it worked. I called the number RingCentral has assigned my user, left a voice mail, and saw my webhook get called in about five to ten seconds! I hope this helps. As I said, I found this to be very difficult to get working, but honestly it probably only took me an hour or so and now that I've got it working, I think I could do it again easily enough. Let me know if any of this doesn't make sense!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@chunlea?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Chunlea Ju</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "static sites",
            
                "javascript"
            
		]

	},

	{
		"title": "RaymondCamden.com now powered by Eleventy!",
		"date":"Wed Feb 26 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/02/27/raymondcamdencom-now-powered-by-eleventy",
		"content":"<p>Another year, another new blog engine for RaymondCamden.com. For folks who haven't been around for the past <a href=\"https://www.raymondcamden.com/2003/02/12/395FA384-CC01-17D6-AE9B36479350D784\">seventeen years</a>, this blog has gone through a few transformations.</p>\n<ul>\n<li>For most of it's life, this blog was powered by a ColdFusion project I created called BlogCFC. I spent many years working on the project before moving on.</li>\n<li>It then spent a short amount of time as a Wordpress site on Google's platform. Wordpress is an incredibly nice blogging platform, but I struggled to keep the site up and running. That's probably my fault but I didn't want to spend the time required to keep the server healthy.</li>\n<li>I moved to the JAMStack in 2015 I believe, using <a href=\"https://gohugo.io/\">Hugo</a> as my platform. It was a lot of work to get things moving smoothly, but the first time I published my site as a static set of files and realized I never had to worry about a server again, I was sold. (I tried to find the exact post where I announced the first time I went static but I failed. Sorry.) Hugo was incredibly fast, especially after I tweaked how my site is built to better work with the size.</li>\n<li>I moved to <a href=\"https://jekyllrb.com/\">Jekyll</a> in <a href=\"https://www.raymondcamden.com/2018/05/15/welcome-to-raymondcamden-2018\">May of 2018</a>. I had grown frustrated with how Hugo did things. Frankly, it was just wasn't for me. Jekyll was easier to work with and &quot;fast enough&quot; for my builds. It got even faster when it hit version 4. Overall, Jekyll was great, but relied on Ruby which was difficult to install and update, at least for me.</li>\n</ul>\n<p>So back in October of last year, I <a href=\"https://www.raymondcamden.com/2019/10/12/why-im-digging-eleventy\">discovered Eleventy</a>. As a Node-based static site generator (SSG), I was really happy with the idea of no longer needing Ruby. It also just plain rocked. It was incredibly flexible and supported everything I needed out of the box. Frankly it is my favorite SSG now and I've been doing <a href=\"https://www.raymondcamden.com/tags/eleventy/\">explorations on it</a> over the past few months.</p>\n<p>With that in mind, I started work on a conversion of this site from Jekyll to Eleventy. I considered a theme change too, but decided I was happy with the current UI for now. I ran into issues of course and thought I'd document them below. You should not consider this a &quot;Jekyll to Eleventy&quot; post (Paul Lloyd has a <a href=\"https://24ways.org/2018/turn-jekyll-up-to-eleventy/\">great post</a> on this), but rather a look at what I ran into. My site is not typical in regards to what most people will hit. I've got a large set of existing content and it was crucial I maintained URL structure so as to not lose traffic. (I'll be checking Netlify Analytics to ensure that.)</p>\n<p>There isn't any particular order, but here's a look at the issues I ran into.</p>\n<h3>Escape Tokens</h3>\n<p>When I use brackets in my code, like when I talk about Vue, I have to escape them because Liquid, the template engine Jekyll uses and Eleventy supports, uses them as well. Years ago when I blogged about Angular a lot, I had a particular way of escaping code that was ugly as heck. A year or so ago I found a simpler way that worked well with Liquid.</p>\n<p>Oddly - the old style of escaping threw errors when Eleventy tried to parse it. So I had to go through all of my old Angular posts and edit them by hand. It took maybe 2-3 hours, but it was painful in terms of getting it just right. I don't have an example of this handy, and honestly I'm not sure how I'd escape the escape here, but if anyone needs to see the &quot;wrong&quot; way, let me know.</p>\n<h3>Markdown files</h3>\n<p>Some of my Markdown files rendered a bit differently in Eleventy in terms of use of HTML. What I mean is that sometimes I'd sprinkle in HTML in my Markdown for things like forms. In Jekyll that was fine. In Eleventy this sometimes would result in the HTML being escaped and shown on screen. To fix it I literally just renamed the files in question, so for example I changed <code>search.md</code> to <code>search.html</code>. Eleventy still parses the files for front matter so my layouts worked just fine.</p>\n<h3>Site variables</h3>\n<p>Jekyll has the idea of site variables, like <code>site.foo</code>. Eleventy does not. I fixed that by simply adding a data file named <code>site.json</code>.</p>\n<h3>Liquid differences</h3>\n<p>This was the big one. A few weeks ago I <a href=\"https://www.raymondcamden.com/2020/02/07/checking-and-upgrading-template-engines-in-eleventy\">blogged</a> about how Eleventy ships with an older version of Liquid. This meant that some filters I used didn't work. To make matters worse, Jekyll adds it's own filters to Liquid.</p>\n<p>But wait - it gets even better. Guess what Liquid does if it encounters an unknown filter?</p>\n<p>Nothing.</p>\n<p>This was first raised as an <a href=\"https://github.com/Shopify/liquid/issues/422\">issue</a> almost six years ago and is still an open bug. It boggles the mind. I can totally see where a person may want that behavior, but to not have it configurable and defaulting to silently ignoring is just crazy (imo). So what this means is that if you do this:</p>\n<pre><code>\nMy name is {{ name | fancycapitalize }}\n\n</code></pre>\n<p>And <code>fancycapitalize</code> isn't recognized, it just returns the value of <code>name</code> as is. While I can see the merit of that perhaps, for someone who wants to ensure things are actually working it's a royal pain in the rear.</p>\n<p>So I ended up rewriting many filters and Eleventy makes this easy. You just drop in code inside your <code>.eleventy.js</code> file. You can see mine <a href=\"https://github.com/cfjedimaster/raymondcamden2020/blob/master/.eleventy.js\">here</a> if you want to dig.</p>\n<h3>Categories</h3>\n<p>Eleventy automatically supports parsing tags in your front matter and making them available in code. Categories however are not recognized. To be clear, you can add any data you want in your front matter and use those variables. But it's just tags that are recognized and picked up globally. I added my own support like so:</p>\n<pre><code class=\"language-js\">eleventyConfig.addCollection(&quot;categories&quot;, collection =&gt; {\n\tlet cats = new Set();\n\tlet posts = collection.getFilteredByGlob(&quot;_posts/**/*.md&quot;);\n\tfor(let i=0;i&lt;posts.length;i++) {\n\t\tfor(let x=0;x&lt;posts[i].data.categories.length;x++) {\n\t\t\tcats.add(posts[i].data.categories[x].toLowerCase());\n\t\t}\n\t}\n\n\treturn Array.from(cats).sort();\n});\n</code></pre>\n<p>And look - I used fancy new Set code too. If you look at my <code>.eleventy.js</code> you'll see I grab posts like you see above twice. Once to add the <code>posts</code> collection and once to add <code>categories</code>.</p>\n<h3>RSS Support</h3>\n<p>I had a little trouble with RSS support. The <a href=\"https://www.11ty.dev/docs/plugins/rss/\">official plugin</a> is Atom only and I wanted to maintain my current flavor of RSS, RSS 2.0.</p>\n<p>I then tried <a href=\"https://github.com/jeremenichelli/eleventy-xml-plugin\">eleventy-xml-plugin</a> but it didn't seem to work. I filed an issue but haven't heard back. I left the plugin in my code, but it's not actually doing anything now. I got my own <code>feed.liquid</code> working and it seems alright, but it may not be perfect.</p>\n<h3>URLs</h3>\n<p>Here's a fun one. Here's how my permalinks looked in my Jekyll site:</p>\n<pre><code>permalink: /2015/11/11/working-with-the-clipboard-in-cordova-apps\n</code></pre>\n<p>Notice there's no .html or anything at the end. Believe it or not, I didn't actually know what files Jekyll was producing. It just worked. Turns out Jekyll was outputting something like:</p>\n<pre><code>/2015/11/11/working-with-the-clipboard-in-cordova-apps.html\n</code></pre>\n<p>The reason why my links could leave out .html is because Netlify supports it. You can see my <a href=\"https://community.netlify.com/t/pretty-urls-with-the-setting-turned-off/8743\">discussion</a> about it on the forums. I'm happy it just worked, but it proved problematic for Eleventy, specifically when running locally.</p>\n<p>I needed a way to output to the same path but let me use URLs as I had been. My hackish way of doing it was like so:</p>\n<pre><code class=\"language-js\">eleventyConfig.addCollection(&quot;posts&quot;, collection =&gt; {\n\tlet posts = collection.getFilteredByGlob(&quot;_posts/**/*.md&quot;);\n\tfor(let i=0;i&lt;posts.length;i++) {\n\t\tposts[i].data.permalink += '.html';\n\t\tposts[i].outputPath += '/index.html';\n\t}\n\n\treturn posts;\n});\n</code></pre>\n<p>I'm not sure it makes sense, but it works. ;)</p>\n<h3>Using EJS</h3>\n<p>I mentioned this in my initial post on Eleventy, but I love, love, <em>love</em> that I can switch template engines at will. My needs for my <a href=\"https://www.raymondcamden.com/stats\">stats</a> page were pretty complex. So as much as I don't like using EJS, it worked darn well for this page. You can see the source <a href=\"https://github.com/cfjedimaster/raymondcamden2020/blob/master/stats.ejs\">here</a></p>\n<h3>Ignoring Files</h3>\n<p>In order for my server to work well locally, I need to ignore most of my content. Eleventy supports a <code>.eleventyignore</code> file that uses globs, and it works well, but it caused me a small problem. You can't tell Eleventy to use a different file. That means if I checked in my <code>.eleventyignore</code> file to GitHub, it would deploy to production. So for now I just keep it local only (and use <code>.gitignore</code> to ensure I don't forget). I also filed an issue with Eleventy to support the ability to specify an ignore file at the command line.</p>\n<h3>Summary</h3>\n<p>I made the switch on Netlify this morning and so far, so good. Of course GitHub decided to have issues at - I swear - the exact same time. On Twitter I've mentioned a bit that build times seem to be a bit slower then Jekyll. But to be clear, we're talking differences of like 30 seconds to a minute. Given the power of Eleventy, I'm more than fine with that. Also, I'm still doing builds to production in less than five minutes for 6000+ pages. I did do a bit of tweaking in my <code>.eleventy.js</code> to cache a few things, but honestly I don't think I need to bother tweaking it more.</p>\n<p>For folks who want to dig into the code, the repo may be found here: <a href=\"https://github.com/cfjedimaster/raymondcamden2020\">https://github.com/cfjedimaster/raymondcamden2020</a> I'm absolutely open to suggestions and improvements, so just let me know what you think!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@md630?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Mikell Darling</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Vue Quick Shot - Disabling a Submit Button While Waiting for an Ajax Call",
		"date":"Sun Mar 01 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/03/02/vue-quick-shot-disabling-a-submit-button-while-waiting-for-an-ajax-call",
		"content":"<p>Welcome to the first of a week long series of quick <a href=\"https://vuejs.org/\">Vue.js</a> tips. Each day (well, each week day) I'll be posting a real short, but hopefully practical, tip for Vue.js developers. For the first day we'll start with a simple tip but one that almost any application can use.</p>\n<p>It is fairly typical for an application to make use of some sort of asynchronous process. Typically this is an Ajax call. (Although not always, and to be clear, today's tip will work with anything asynchronous!) You have a form of some sort. The user hits a button. You make a network call and when that call is done, you render the result. Let's consider a simple example of this.</p>\n<p>First, a quick form.</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;form @submit.prevent=&quot;doSearch&quot;&gt;\n    &lt;input type=&quot;search&quot; v-model=&quot;term&quot; placeholder=&quot;Search&quot;&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;Perform Search&quot;&gt;\n  &lt;/form&gt;\n  \n  &lt;div v-if=&quot;result&quot;&gt;\n  &lt;p&gt;\n    &lt;b&gt;The result: {{ result }}&lt;/b&gt;\n  &lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>My form has one field and a button. On submit I'll run a method named <code>doSearch</code>. When I get a result, it will be displayed in a paragraph below.</p>\n<p>Now let's look at the JavaScript:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    term:'',\n    result:''\n  },\n  methods:{\n    async doSearch() {\n     if(this.term === '') return; \n     console.log(`search for ${this.term}`);\n     // clear previous result\n     this.result = '';\n     this.result = await searchMyAPI(this.term);\n    }\n  }\n})\n\nasync function searchMyAPI(s) {\n  return new Promise((resolve, reject) =&gt; {\n    window.setTimeout(() =&gt; {\n      resolve(`something for ${s}`);\n    }, 3000);\n  });\n}\n</code></pre>\n<p>My <code>doSearch</code> method checks to see if anything was entered and if so, fires off a call to <code>searchMyAPI</code>. The details of <code>searchMyAPI</code> aren't relevant, but you can see I'm faking a slow process by making it wait for three seconds before returning the result.</p>\n<p>You can test this here:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"OJVgqwL\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Disable submit v1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/OJVgqwL\">\n  Disable submit v1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>When you test this, note that there's no indication that the search is actually doing anything. There's actually a few things we can do here, but today we're just going to do one - disabling the button while the search is being done.</p>\n<p>I'll begin by slightly tweaking the button:</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;submit&quot; value=&quot;Perform Search&quot; :disabled=&quot;searchDisabled&quot;&gt;\n</code></pre>\n<p>I've added a bound property, <code>disabled</code>, that points to a new value, <code>searchDisabled</code>. I then modified my JavaScript like so:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    term:'',\n    result:'',\n    searchDisabled:false\n  },\n  methods:{\n    async doSearch() {\n     if(this.term === '') return; \n     console.log(`search for ${this.term}`);\n     //disable the button\n     this.searchDisabled = true;\n     // clear previous result\n     this.result = '';\n     this.result = await searchMyAPI(this.term);\n     //re-enable the button\n     this.searchDisabled = false;\n    }\n  }\n})\n</code></pre>\n<p>First I added <code>searchDisabled</code>, defaulted to false. Before the search is begun I switch to false and when done, back to true. That's it! You can test this version here:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"VwLWRgg\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Disable submit v2\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/VwLWRgg\">\n  Disable submit v2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>That's it for today's quick tip. As I said, there's one more thing you could do to this form to make it even better and I'll be covering that in tomorrow's tip!</p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "A Voicemail Assistant with Vue and RingCentral",
		"date":"Mon Mar 02 2020 13:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/03/02/a-voicemail-assistant-with-vue-and-ringcentral",
		"content":"<p>I've been playing with the <a href=\"https://developers.ringcentral.com/\">RingCentral</a> APIs the past week or so and today I've got another one to share. When you sign up with RingCentral, you get access to a full phone system. By that I mean the ability to manage phone numbers assigned to users, work with forwarding, set greetings, and access voicemail. There's an admin portal UI to manage this along with APIs that provide the same power as well.</p>\n<p>One of the cooler things you can do is access the call log for a user. This gives you insight into incoming and outgoing phone calls. For my demo I wanted to write an app that would report on incoming calls and look for voicemails. For calls with voicemails, I wanted the ability to play the audio via the browser. Here's the UI of what I came up with:</p>\n<img src=\"https://static.raymondcamden.com/images/2020/03/rc1.png\" alt=\"Table of calls\" class=\"imgborder imgcenter\">\n<p>For each call (incoming call remember), I report on the time, duration, caller, and the 'result', which in this case is always voicemail. In a real application you would have calls that our picked up at times of course. Clicking the &quot;Play&quot; button retrieves the audio of the call and plays it in the browser.</p>\n<p>The application was built with Vue.js on the front end and using Netlify serverless functions on the back end. I'll share a little secret. Even though I used Netlify, I never actually deployed this live. I did everything local with <code>netlify dev</code> in order to simply prototype my demo and explore the APIs.</p>\n<p>My application consists of three main parts - the front end HTML, the front end JavaScript, and the back end serverless functions. Let's cover the front end first. Here's the HTML, which primarily just handles displaying that lovely table.</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n\t&lt;meta charset=&quot;UTF-8&quot;&gt;\n\t&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n\t&lt;title&gt;Call Log Demo&lt;/title&gt;\n\t&lt;style&gt;\n\t[v-cloak] {display: none}\n\n\tbody {\n\t\tfont-family: Verdana, Geneva, Tahoma, sans-serif;\n\t}\n\n\ttable {\n\t\twidth: 80%;\n\t\tborder-collapse: collapse;\n\t\tborder: 3px solid #000000;\n\t}\n\n\ttbody tr:nth-child(odd) {\n\t\tbackground-color: #d0d0d0;\n\t}\n\n\ttd {\n\t\tborder: 3px solid #000000;\n\t\tpadding: 5px;\n\t}\n\t&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id=&quot;app&quot; v-cloak&gt;\n\n\t&lt;table&gt;\n\t\t&lt;thead&gt;\n\t\t\t&lt;tr&gt;\n\t\t\t\t&lt;th&gt;Time&lt;/th&gt;\n\t\t\t\t&lt;th&gt;Duration&lt;/th&gt;\n\t\t\t\t&lt;th&gt;To&lt;/th&gt;\n\t\t\t\t&lt;th&gt;From&lt;/th&gt;\n\t\t\t\t&lt;th&gt;Result&lt;/th&gt;\n\t\t\t&lt;/tr&gt;\n\t\t&lt;/thead&gt;\n\t\t&lt;tbody v-if=&quot;calls&quot;&gt;\n\t\t\t&lt;tr v-for=&quot;call in calls&quot;&gt;\n\t\t\t\t&lt;td&gt;{{call.startTime | dtFormat }}&lt;/td&gt;\n\t\t\t\t&lt;td&gt;{{call.duration}}s&lt;/td&gt;\n\t\t\t\t&lt;td&gt;{{call.to.name}}&lt;/td&gt;\n\t\t\t\t&lt;td&gt;{{call.from.phoneNumber}}&lt;br/&gt;{{call.from.location}}&lt;/td&gt;\n\t\t\t\t&lt;td&gt;\n\t\t\t\t\t{{call.result}}\n\t\t\t\t\t&lt;span v-if=&quot;call.hasRecording&quot;&gt;\n\t\t\t\t\t\t&lt;button @click=&quot;playRecording(call.recordingId)&quot;&gt;Play&lt;/button&gt;\n\t\t\t\t\t&lt;/span&gt;\n\t\t\t\t&lt;/td&gt;\n\t\t\t&lt;/tr&gt;\n\t\t&lt;/tbody&gt;\n\t&lt;/table&gt;\n&lt;/div&gt;\n\n\n&lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>As you can see, I'm iterating over a <code>calls</code> variable. The API I'm using returns more information than you see used above, but I wanted to keep it simple. Now let's look at the JavaScript:</p>\n<pre><code class=\"language-js\">Vue.filter('dtFormat', d =&gt; {\n\td = new Date(d);\n\tif(Intl) {\n\t\treturn new Intl.DateTimeFormat().format(d) + ' ' + new Intl.DateTimeFormat(navigator.language, {hour:'numeric',minute:'2-digit'}).format(d);\n\t} else {\n\t\treturn d;\n\t}\n})\n\nconst app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tcalls:[],\n\t\taudio:null\n\t},\n\tasync created() {\n\t\tthis.calls = await loadCalls();\n\t},\n\tmethods: {\n\t\tasync playRecording(u) {\n\t\t\tlet data = await fetch('./.netlify/functions/getMessage?id='+u);\n\t\t\tlet response = await data.text();\n\t\t\tif(this.audio) {\n\t\t\t\tthis.audio.pause();\n\t\t\t\tthis.audio.currentTime = 0;\n\t\t\t}\n\t\t\tthis.audio = new Audio(response);\n\t\t\tthis.audio.play();\n\t\t}\n\t}\n});\n\nasync function loadCalls() {\n\tlet data = await fetch('./.netlify/functions/callLog');\n\tlet response = await data.json();\n\t// make it easier for our template to know if there is a recording\n\tresponse.records.forEach(r =&gt; {\n\t\tr.hasRecording = false;\n\t\tif (r.result === 'Voicemail' &amp;&amp; r.message) {\n\t\t\tr.recordingId = r.message.id;\n\t\t\tr.hasRecording = true;\n\t\t}\n\t});\n\treturn response.records;\n}\n</code></pre>\n<p>As a Vue app it's pretty simple. My data consists of <code>calls</code> and an audio object used to play voicemails. On <code>created</code>, I call off to <code>loadCalls</code> which hits my server side function to work with the RingCentral API. When I get the result, I do a bit of checking to see if I have a voicemail and if so, float up the id value a bit higher. This makes my HTML a bit simpler.</p>\n<p>When we do have voicemails, I've got another method that calls the server side function to ask for the URL of the audio bits itself. I've talked about these server side functions a bit now so let's take a look.</p>\n<p>The first one gets the log of calls. This is <em>really</em> nicely <a href=\"https://developers.ringcentral.com/api-reference/Call-Log/readUserCallLog\">documented</a> along with some great testing utilities built right in the browser. I did a lot of testing right there before copying stuff over to my code. For this API there were three arguments I tweaked. I used the detailed view, set it to incoming calls only, and set the <code>dateFrom</code> to January 1, 2020. That date was totally arbitrary and I'd typically <em>not</em> use a hard coded value. Here's the serverless function.</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\nconst SDK = require('@ringcentral/sdk').SDK;\n\nRINGCENTRAL_CLIENTID = process.env.RINGCENTRAL_CLIENTID;\nRINGCENTRAL_CLIENTSECRET = process.env.RINGCENTRAL_CLIENTSECRET;\nRINGCENTRAL_SERVER = process.env.RINGCENTRAL_SERVER;\nRINGCENTRAL_USERNAME = process.env.RINGCENTRAL_USERNAME;\nRINGCENTRAL_PASSWORD = process.env.RINGCENTRAL_PASSWORD;\nRINGCENTRAL_EXTENSION = process.env.RINGCENTRAL_EXTENSION;\n\nvar rcsdk = new SDK({\n    server: RINGCENTRAL_SERVER,\n    clientId: RINGCENTRAL_CLIENTID,\n    clientSecret: RINGCENTRAL_CLIENTSECRET\n});\nconst platform = rcsdk.platform();\n\nexports.handler = async function(event, context) {\n\n  await rcLogin();\n  let callLog = await rcCallLog();\n  console.log(callLog);\n\n    return {\n      headers: {\n        &quot;Content-Type&quot;:&quot;application/json&quot;\n      },\n      statusCode: 200,\n      body: JSON.stringify(callLog)\n    }\n\n}\n\nasync function rcLogin() {\n  return platform.login({\n    username: RINGCENTRAL_USERNAME,\n    password: RINGCENTRAL_PASSWORD,\n    extension: RINGCENTRAL_EXTENSION\n  });\n}\n\nasync function rcCallLog() {\n\n  let resp = await platform.get('/restapi/v1.0/account/~/extension/~/call-log', {\n    view: 'Detailed',\n    direction: 'Inbound',\n    dateFrom:'2020-01-1'\n  });\n  return resp.json();\n\n}\n</code></pre>\n<p>The beginning of this function handles setting my credentials. The handler logs into the platform and then performs the HTTP call to the API. I'm using their npm package (<code>@ringcentral/sdk</code>) which makes the code pretty minimal. I return the entire dataset and as I said, there's more to it then I show on the page. As I said, their <a href=\"https://developers.ringcentral.com/api-reference/Call-Log/readUserCallLog\">docs</a> are pretty darn verbose and will help you.</p>\n<p>The last part of this is how I handle the voicemail recordings. This function was a carbon copy of the previous one in terms of setup. I mainly just changed the API call and how I return data:</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\nconst SDK = require('@ringcentral/sdk').SDK;\n\nRINGCENTRAL_CLIENTID = process.env.RINGCENTRAL_CLIENTID;\nRINGCENTRAL_CLIENTSECRET = process.env.RINGCENTRAL_CLIENTSECRET;\nRINGCENTRAL_SERVER = process.env.RINGCENTRAL_SERVER;\nRINGCENTRAL_USERNAME = process.env.RINGCENTRAL_USERNAME;\nRINGCENTRAL_PASSWORD = process.env.RINGCENTRAL_PASSWORD;\nRINGCENTRAL_EXTENSION = process.env.RINGCENTRAL_EXTENSION;\nvar rcsdk = new SDK({\n    server: RINGCENTRAL_SERVER,\n    clientId: RINGCENTRAL_CLIENTID,\n    clientSecret: RINGCENTRAL_CLIENTSECRET\n});\nconst platform = rcsdk.platform();\n\nexports.handler = async function(event, context) {\n  let id = event.queryStringParameters.id;\n\n  await rcLogin();\n  let msg = await rcGetMessage(id);\n  let uri = msg.attachments[0].uri;\n  let authData = await platform.auth().data();\n  let url = uri + '?access_token='+authData.access_token;\n\n    return {\n      statusCode: 200,\n      body: url\n    }\n\n}\n\nasync function rcLogin() {\n  return platform.login({\n    username: RINGCENTRAL_USERNAME,\n    password: RINGCENTRAL_PASSWORD,\n    extension: RINGCENTRAL_EXTENSION\n  });\n}\n\nasync function rcGetMessage(id) {\n  console.log('get id '+id);\n  let resp = await platform.get('/restapi/v1.0/account/~/extension/~/message-store/'+id);\n  return resp.json();\n\n}\n</code></pre>\n<p>I use their <a href=\"https://developers.ringcentral.com/api-reference/Message-Store/readMessage\">GetMessage</a> API call. But once I have the result, I can look at the attachment URL and create a new URL that includes the current access_token. This is probably a bad idea, but it lets me return a URL the browser can just &quot;play&quot;.</p>\n<p>And that's it! Let me know what you think. This little demo isn't in a GitHub repo but I'm definitely willing to share.</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Vue Quick Shot - Using a Loading Message",
		"date":"Tue Mar 03 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/03/04/vue-quick-shot-using-a-loading-message",
		"content":"<p>Well, my grand plan to do one blog post per day of Vue quick tips failed rather quickly, but I can get two out today and get back on track. Honest, I can. While I wasn't planning on making every tip link to the previous one, my first two tips do exactly that.</p>\n<p>My <a href=\"https://www.raymondcamden.com/2020/03/02/vue-quick-shot-disabling-a-submit-button-while-waiting-for-an-ajax-call\">first tip</a> explained how to disable a submit button while you waited for an Ajax call to finish. (Or any async call, and I actually used <code>window.setTimeout</code> instead of Ajax.) Today's tip builds on that by adding a rather simple, but helpful, modification - a loading message.</p>\n<p>In the previous example, when you hit the submit button I disabled it while we waited for the result. You can see that in the CodePen below.</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"VwLWRgg\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Disable submit v2\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/VwLWRgg\">\n  Disable submit v2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>While the disabled button lets the user know <em>something</em> is going on, it would be nice to be a bit more obvious. First, let's add a new conditional div to the layout:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;form @submit.prevent=&quot;doSearch&quot;&gt;\n    &lt;input type=&quot;search&quot; v-model=&quot;term&quot; placeholder=&quot;Search&quot;&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;Perform Search&quot; :disabled=&quot;searchDisabled&quot;&gt;\n  &lt;/form&gt;\n  \n  &lt;div v-if=&quot;searching&quot;&gt;\n    &lt;p&gt;&lt;i&gt;Please stand by, I'm searching...&lt;/i&gt;&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;div v-if=&quot;result&quot;&gt;\n  &lt;p&gt;\n    &lt;b&gt;The result: &lt;/b&gt;\n  &lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Right in the middle you can see a new condition, <code>v-if=&quot;searching&quot;</code> and a message inside. You could also <a href=\"http://www.ajaxload.info/\">generate an Ajax loader</a> if you want...</p>\n<img src=\"https://static.raymondcamden.com/images/2020/03/ajax-loader.gif\" alt=\"Ajax loader\" class=\"imgcenter\">\n<p>I then tweaked my JavaScript a little bit:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    term:'',\n    result:'',\n    searchDisabled:false,\n    searching:false\n  },\n  methods:{\n    async doSearch() {\n     if(this.term === '') return; \n     console.log(`search for ${this.term}`);\n     //disable the button\n     this.searchDisabled = true;\n     // clear previous result\n     this.result = '';\n     this.searching = true;\n     this.result = await searchMyAPI(this.term);\n     //re-enable the button\n     this.searchDisabled = false;\n     this.searching = false;\n    }\n  }\n})\n\nasync function searchMyAPI(s) {\n  return new Promise((resolve, reject) =&gt; {\n    window.setTimeout(() =&gt; {\n      resolve(`something for ${s}`);\n    }, 3000);\n  });\n}\n</code></pre>\n<p>I added a default value for <code>searching</code> and within <code>doSearch</code>, I set it to true before the search and back to false after. Here's a CodePen you can test with:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"default\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"dyozxab\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Loading Message\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/dyozxab\">\n  Loading Message</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>That's it for this tip. I'll have the next one up later today, and hopefully, one more for Thursday and Friday. Enjoy!</p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Vue Quick Shot - Copy to the Clipboard",
		"date":"Wed Mar 04 2020 13:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/03/04/vue-quick-shot-copy-to-the-clipboard",
		"content":"<p>Welcome to the third of my Vue quick shots. Be sure to check out my <a href=\"https://www.raymondcamden.com/2020/03/02/vue-quick-shot-disabling-a-submit-button-while-waiting-for-an-ajax-call\">first</a> and <a href=\"https://www.raymondcamden.com/2020/03/04/vue-quick-shot-using-a-loading-message\">second</a> entries. I'll be posting a quick Vue.js tip every day this week (and let's pretend I was late with yesterday's entry, ok) for you to use in your projects.</p>\n<p>Today's entry is an example of how to add &quot;Copy to Clipboard&quot; functionality for a site. You see this fairly often in developer portals where keys or tokens are shared with developers for their code. A little bit of JavaScript tied to a button or some other UI is added to make it easier to copy the value. Today's tip will show one way of adding this feature.</p>\n<p>For this tip I'll be using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API\">Clipboard API</a>. This is a newer way of accessing the clipboard (see this <em>excellent</em> <a href=\"https://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript\">StackOverflow post</a> for a look at other methods) that is supported in everything but Internet Explorer and Safari.</p>\n<p>Let's begin with a simple application. I've got a form with two values:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;p&gt;\n  &lt;label for=&quot;appId&quot;&gt;App ID: &lt;/label&gt;\n  &lt;input id=&quot;appId&quot; v-model=&quot;appId&quot;&gt;\n  &lt;/p&gt;\n  \n  &lt;p&gt;\n  &lt;label for=&quot;appToken&quot;&gt;App Token: &lt;/label&gt;\n  &lt;input id=&quot;appToken&quot; v-model=&quot;appToken&quot;&gt;\n  &lt;/p&gt;  \n&lt;/div&gt;\n</code></pre>\n<p>And here's the application behind it, which for now just sets values for the two fields.</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data: {\n    appId:'3493993048904',\n    appToken:'dksklq33lkj21kjl12lkdsasd21jk'\n  }\n})\n</code></pre>\n<p>Alright, so how can we add a way to copy those values to the clipboard? I'm going to use a simple button that looks like so:</p>\n<pre><code class=\"language-html\">&lt;button v-if=&quot;canCopy&quot; @click=&quot;copy(something)&quot;&gt;Copy&lt;/button&gt;\n</code></pre>\n<p>The <code>v-if</code> portion will handle hiding or showing the button based on if the browser supports the API. The <code>click</code> handler will pass the value to be copied. I can add it to the HTML like so:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;p&gt;\n  &lt;label for=&quot;appId&quot;&gt;App ID: &lt;/label&gt;\n  &lt;input id=&quot;appId&quot; v-model=&quot;appId&quot;&gt;\n  &lt;button v-if=&quot;canCopy&quot; @click=&quot;copy(appId)&quot;&gt;Copy&lt;/button&gt;\n  &lt;/p&gt;\n  \n  &lt;p&gt;\n  &lt;label for=&quot;appToken&quot;&gt;App Token: &lt;/label&gt;\n  &lt;input id=&quot;appToken&quot; v-model=&quot;appToken&quot;&gt;\n  &lt;button v-if=&quot;canCopy&quot; @click=&quot;copy(appToken)&quot;&gt;Copy&lt;/button&gt;\n  &lt;/p&gt;  \n&lt;/div&gt;\n</code></pre>\n<p>Now let's look at the JavaScript:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    appId:'3493993048904',\n    appToken:'dksklq33lkj21kjl12lkdsasd21jk',\n    canCopy:false\n  },\n  created() {\n    this.canCopy = !!navigator.clipboard;\n  },\n  methods: {\n    async copy(s) {\n      await navigator.clipboard.writeText(s);\n      alert('Copied!');\n    }\n  }\n})\n</code></pre>\n<p>I first added a boolean value for <code>canCopy</code> that will handle the toggle for showing the buttons. I then use <code>created</code> to check if the API exists. Finally I added the <code>copy</code> method. The <code>clipboard</code> API is an asynchronous one so I wait for it to finish and then alert the user. Let me just say that I am <em>not</em> a fan of using <code>alert</code> like this. The API runs so darn quick I think you could skip this part completely, but technically it's possible someone could click and try to paste at lightning speed and not get what they expect. I also think you could do the notification a bit nicer than the alert. You could add some text by the button or someplace else in the UI. Many UI frameworks support a &quot;toast&quot; event that will show a message that automatically dismisses. That would be a great option as well.</p>\n<p>You can test this out yourself here:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"default\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"rNVGeXa\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Copy to Clipboard\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/rNVGeXa\">\n  Vue Copy to Clipboard</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>So before I wrap this quick tip, let me point out this functionality could be done a bit nicer as a component or custom directive. If anyone wants to do this and share it in the comments below, please do!</p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Vue Quick Shot - Image Upload Previews",
		"date":"Wed Mar 04 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/03/05/vue-quick-shot-image-upload-previews",
		"content":"<p>Welcome to the fourth entry of my Vue Quick Shots. Be sure to check out <a href=\"https://www.raymondcamden.com/2020/03/02/vue-quick-shot-disabling-a-submit-button-while-waiting-for-an-ajax-call\">part one</a>, <a href=\"https://www.raymondcamden.com/2020/03/04/vue-quick-shot-using-a-loading-message\">part two</a>, and <a href=\"https://www.raymondcamden.com/2020/03/04/vue-quick-shot-copy-to-the-clipboard\">part three</a>. Today's entry is slightly more complex than the previous ones - adding an image preview to file upload controls.</p>\n<p>This is something I've covered before, but not with Vue.js. Let's start with the HTML:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;p&gt;\n  &lt;input type=&quot;file&quot; accept=&quot;image/*&quot; ref=&quot;myFile&quot; @change=&quot;previewFile&quot;&gt;\n  &lt;/p&gt;\n  &lt;img v-if=&quot;imgsrc&quot; :src=&quot;imgsrc&quot; class=&quot;imgpreview&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n<p>In my input field, pay attention to the attributes:</p>\n<ul>\n<li><code>accept=&quot;image/*</code> tells the browser to filter files that can be selected to images of any type. However, the user can switch this filter to any file.</li>\n<li>I then use <code>ref=&quot;myFile&quot;</code> so Vue can have access to it. You'll see how in a bit.</li>\n<li>Finally, I specify the when the file input is changed, it should run the <code>previewFile</code> method.</li>\n</ul>\n<p>Below the input field I have an img tag that will display the image when one is selected.</p>\n<p>Alright, now let's look at the JavaScript:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data: {\n    imgsrc:''\n  },\n  methods:{\n    previewFile() {\n      let file = this.$refs.myFile.files[0];\n      if(!file || file.type.indexOf('image/') === -1) return;\n      let reader = new FileReader();\n\n      reader.onload = e =&gt; {\n        this.imgsrc = e.target.result;\n      }\n\n      reader.readAsDataURL(file);\n    }\n  }\n})\n</code></pre>\n<p>My <code>previewFile</code> method checks the file input field via $refs and looks at the first file available. If there's one, and it's an image, we then use a <code>FileReader</code> object to read in the data and create a data url. This then gets assigned to <code>imgsrc</code> so that the image can render it.</p>\n<p>And that's it! Here's a live version you can play with:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"default\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"gOpGKZG\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Image Preview\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/gOpGKZG\">\n  Vue Image Preview</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>I hope you enjoyed this quick shot - only one more to go!</p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Vue Quick Shot - Links, Links, and More Links",
		"date":"Thu Mar 05 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/03/06/vue-quick-shot-links-links-and-more-links",
		"content":"<p>Welcome to the final entry in my Vue Quick Shot series. I'll share all the links at the end of this post. I hope this week's series has been helpful and if you enjoyed it, please drop me a comment and I'll definitely consider doing another series in the future. For my fifth and final Vue Quick Shot, I'm not going to write a line of code. Instead I'm going to share links to resources that have helped me learn Vue and become a better developer. This is not meant to be an exhaustive list of everything out there for Vue, but rather a more focused list on things that helped me personally.</p>\n<img src=\"https://static.raymondcamden.com/images/2020/03/brace.jpg\" alt=\"Brace yourself - opinions coming\" class=\"imgborder imgcenter\">\n<p/>\n<ul>\n<li><a href=\"https://vuejs.org/v2/guide/\">The Docs</a> - It should come as no surprise that the core docs are where any new developer should start. I'd only point out that you shouldn't miss the excellent <a href=\"https://vuejs.org/v2/cookbook/\">Cookbook</a> as well. I didn't notice it for months.</li>\n<li><a href=\"https://forum.vuejs.org/\">Vue Forum</a> - The official Vue forum. Pretty heavily used and you typically get an answer to anything relatively soon. There's also a pretty busy <a href=\"https://stackoverflow.com/questions/tagged/vue.js\">Stackoverflow tag</a> for Vue.</li>\n<li><a href=\"https://github.com/vuejs/awesome-vue\">Amazing Vue</a> - A huge list of cool things done in Vue. Basically if you need X for Vue, check here first.</li>\n<li><a href=\"https://css-tricks.com/intro-to-vue-1-rendering-directives-events/\">Sarah Drasner on CSS-Tricks</a> - Part one of a five part series on Vue. It's especially good in the animations area, a part of Vue I've never played with.</li>\n<li><a href=\"https://github.com/vuejs/vue-devtools\">Devtools Extension</a> - The devtools extension is nice, and supported in most browsers, but may be more useful to people using Vuex. Honestly unless I'm using Vuex, I just use console messages.</li>\n<li>Newsletters - You can, and should, sign up for both the <a href=\"https://news.vuejs.org\">official newsletter</a> and the\n<a href=\"https://vuejsdevelopers.com/newsletter/\">Vue.js Developers</a> newsletter. For those of us who can't spend all day glued to Twitter, this is the best way to get the news about what's going on with Vue.</li>\n<li>And finally, I've got nearly 100 posts <a href=\"https://www.raymondcamden.com/tags/vuejs\">tagged with Vue</a> and at least a few of them are worth your time. I also write about Vue from time to time for other publications and I keep a list of them on my <a href=\"https://www.raymondcamden.com/about/\">About</a> page.</li>\n</ul>\n<p>That's it! I hope these small nuggets have been helpful to you this week, and as I said, leave me a comment below with your thoughts!</p>\n<h2>Quick Shots</h2>\n<ul>\n<li><a href=\"https://www.raymondcamden.com/2020/03/02/vue-quick-shot-disabling-a-submit-button-while-waiting-for-an-ajax-call\">Part One - Disabling a Submit Button While Waiting for an AJAX Call</a></li>\n<li><a href=\"https://www.raymondcamden.com/2020/03/04/vue-quick-shot-using-a-loading-message\">Part Two - Using a Loading Message</a></li>\n<li><a href=\"https://www.raymondcamden.com/2020/03/04/vue-quick-shot-copy-to-the-clipboard\">Part Three - Copy to the Clipboard</a></li>\n<li><a href=\"https://www.raymondcamden.com/2020/03/05/vue-quick-shot-image-upload-previews\">Part Four - Image Upload Previws</a></li>\n<li><a href=\"https://www.raymondcamden.com/2020/03/06/vue-quick-shot-links-links-and-more-links\">Part Five - Links, Links, and More Links</a></li>\n</ul>\n",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Tips for Giving Remote Presentations",
		"date":"Mon Mar 09 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/03/10/tips-for-giving-remote-presentations",
		"content":"<p>As travel becomes more limited and conferences begin shutting down physical meetings, more and more presenters may find themselves switching to online platforms in order to deliver their talks. If you're an experienced presenter but have never given a presentation online, the change can be somewhat daunting. I thought I'd write up some tips to consider before giving your first remote presentation. And then I had an even better thought - why not ask people much smarter than myself for their advice. I reached out to friends and colleagues to get their advice for remote presentations and I've shared it below. I'll give my thoughts at the very end. (I did some minor editing on people's input for formatting.)</p>\n<h3>Brian Rinaldi, Developer Advocate, Stackbit</h3>\n<p>I think it's important to try to be more interactive when you are presenting online. Ask questions, do surveys, allow people to engage in chat and find a way to check that at regular intervals. The tough part about remote presentations is that it is easy for attendees to be distracted and lose focus. Being interactive keeps their attention and keeps them engaged.</p>\n<h3>Jen Looper, Developer Advocate Lead, Microsoft</h3>\n<p>Here are my tips:</p>\n<ul>\n<li>Tech check beforehand! It's very strange to use software to present to a crowd, and each one is a little different, so double-check.</li>\n<li>Consider asking the organizer to turn the computer towards the crowd - use a second computer, dialed in, if you have to - so that you can gauge your audience. It's very tricky to keep up energy if you can't see your audience.</li>\n<li>Make sure someone is monitoring the chat room and has access to a microphone so that s/he can raise a 'virtual hand' to ask you a question. Work with the organizer/moderator to handle questions as they come through. You could, for example, stop presenting every 15 minutes to take questions, or hold them all to the end.</li>\n<li>Keep in mind that live streaming folks have a different experience than folks dialed in via Zoom, so try to include them in discussions.</li>\n</ul>\n<h3>John Papa, Developer Advocate, Microsoft</h3>\n<p>Stand. Smile. Use your voice. When remote presenting the audience cannot see all of you (or any of you if it is a screen cast). All you have is your voice ... so make the most of it.</p>\n<h3>Tracy Lee, CEO, This Dot Labs</h3>\n<p>Surround yourself with stuffed animals that look really happy so you can replace the lack of immediate feedback you will get from a live audience.... jk... but generally don't worry about the lack of feedback they love you! :) Also, make sure to test your speaker notes with the setup you will have the day before - some livestream conferences do not allow for speaker notes due to lack of multiple monitors.</p>\n<h3>Chris Heilmann, Principal Program Manager, Microsoft</h3>\n<p>Presenting remotely is fraught with quite some obstacles. For starters, you don't get any feedback from the audience other than a chat channel which you shouldn't monitor whilst you present.</p>\n<p>Secondly there is always the chance that you'll be disconnected or not understood and happily presenting away whilst your audience doesn't see you any longer.</p>\n<p>To counteract these problems I made sure to not present from my machine but present a slide deck in whatever system I use to present. That way if I can't see it, I know I also lost the audience.</p>\n<p>It is also vital to have a different channel open with a person at the audience end to tell you when things go wrong.</p>\n<p>When it comes to preparing presentations for remote viewing I found that being more wordy is helpful. Text on a slide is bad for an inspirational keynote, but remote presenting is more like sharing a document for discussion with an audience, so don't feel too bad for having more information on each slide.</p>\n<p>The most important thing to do is to have your presentation to send out to the organizer and to make available to attendees beforehand. This makes remote presenting less lively and not as interactive as dealing with a real audience, but it prevents frustrating gaps in information.</p>\n<p>Last but not least - don't underestimate that not seeing an audience is making it more confusing to present. You have no idea if your jokes work and doing a throwaway remark can easily be seen as an attack if people can't evaluate it with your body language and presence. So maybe it is a good idea to use less &quot;funny&quot; things and stick to the information. In any case, recording you give the presentation as a video beforehand is a good way to test dealing with the lack of audience. And that video could also be a fallback in case everything breaks down.</p>\n<h3>Stacey Levine, Director of Developer Advocacy, OutSystems</h3>\n<p>On remote presentations  - odd thing - but smile when presenting, stand if possible. It comes across in your voice and makes a difference.</p>\n<h3>Diana Rodriguez, Python Developer Advocate, Nexmo</h3>\n<p>In terms of remote presenting I keep it simple. I use streamyard for simple streaming, OBS is a great tool but it takes a bit to get acquainted with. Most podcasts or meetups are using zoom or hangouts so in terms of tools, things can be adapted to circumstances. My best advice is to make slides more engaging and avoid text walls. Keeping content bite size and with images or using mnemonics has helped me a lot!</p>\n<h3>Jennifer Bland, Senior Software Engineer, Vox Media</h3>\n<ul>\n<li>If not using a builtiin camera on your laptop make sure you test the camera before you go live because the cables you need between a Mac and PC are usually different. Some people have newer laptops and some have older laptops which means the connections are different and you need to be prepared with a wide range of cables.</li>\n<li>Microphone - in order of preference I would recommend using these microphones because you get best quality to lowest\n<ul>\n<li>External USB microphone on a boom stand (Blue yeti or similar). This allows you to get quality sound without picking up noise like moving your mouse and typing on the keyboard.</li>\n<li>External USB microphone on stand sitting on computer desk. This provides quality sound but since mic stand is on the desk it will pick up mouse movement and keyboard typing</li>\n<li>External headphone/earbuds with microphone - This will provide good quality sound but not as good as a professional mic. They can be wireless or wired but my preference is wired because Murphy will jump in and cause lag on bluetooth during your presentation with wireless. These all use an audio plug and that is found on both PC and Mac so no issue with cables not matching. The only challenge with these is if you are using earbuds then the mic might pick up sound as it brushes across your clothing. You can avoid that by holding the cable in your hand so that the mic is not touching your clothing or skin.</li>\n<li>Built-in mic on your laptop. This will pick up all sounds around you. Based on how you speak it may be hard for the audience to hear you. It provides the lowest quality.</li>\n</ul>\n</li>\n<li>If you are on a Mac make sure you turn off notifications before you start your presentation. You don't want notifications from slack, email, Facebook, twitter to be going off during your presentation. If there is something similar on a PC then turn it off on it.</li>\n<li>be sure to know how to transfer screen controls to somebody else in case somebody needs to share their screen to present. Like you have the Hosts talking initially, then maybe a sponsor, then you talking then at end the host closing out. So you will have multiple people sharing.</li>\n<li>know how to mute people. The person from WWC who spoke briefly unmuted herself and was talking and playing music which of course everyone heard</li>\n<li>If you are using zoom, point out to people that there is the raise hands icon in participants. People can use that to ask a question. You can call on them and they can unmute to ask their question. That way it is not a free for all with everyone trying to ask questions at same time</li>\n</ul>\n<h3>Raymond Camden, Lead Developer Advocate, HERE</h3>\n<p>Ok, so lastly, me. :) I'll first say that pretty much every tip/opinion shared above matches with my own experience as well. So this is a bit of repeat but it just reinforces the recommendations from others.</p>\n<ul>\n<li>Really, really, really be sure to test the platform you're using before the actual presentation. Not all platforms are created equal. You want to know where various buttons are (like to share your screen, mute etc) so you aren't fumbling around while presenting.</li>\n<li>You must adjust your style quite a bit, especially if you're used to taking the pulse of your audience by scanning faces. To be honest, I really dislike giving remote presentations because it's so difficult to judge the mood of the crowd. I cut back <em>greatly</em> on my jokes and funny pictures and the like. I still let my personality shine a bit, but it's definitely muted compared to a normal presentation.</li>\n<li>Figure out ahead of time how you're going to do Q and A. For the most part I ask folks to hold their questions until the end. I also talk with the organizer ahead of time to ensure they're on the same page. I ask the organizer to be my proxy. So they can take questions in the physical room and simply repeat them to me (the assumption is that they are next to the microphone).</li>\n</ul>\n<p><i>Header photo by <a href=\"https://unsplash.com/@kimtheris?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Sereja Ris</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "Development"
            
		]

	},

	{
		"title": "Implementing Google Custom Search Engine's JSON API in the JAMStack",
		"date":"Sat Mar 21 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/03/22/implementing-google-custom-search-engines-json-api-in-the-jamstack",
		"content":"<p>I've been a fan of Google's <a href=\"https://cse.google.com\">Custom Search Engine</a> support for quite some time now. I use it <a href=\"/search\">here</a> to handle adding search to my site. In all the time I've used CSE though, I've only used it via the &quot;embed&quot; option (again, as you see on my site), but Google also supports a <a href=\"https://developers.google.com/custom-search/v1/overview\">JSON API</a> which gives you more fine grained control over displaying search results. I recently had to build a demo for someone using ColdFusion, so I thought I'd take a stab at demonstrating how to do with with serverless functions and the JAMStack.</p>\n<p>Before I begin, some high level things to know. In general, the API is relatively simple to use. You get an API key, you get your search engine ID, and then you make a HTTP request. Google provides you with 100 requests per day which is probably fine for most folks. As I said, in general it works just fine, but there's some details you should note.</p>\n<p>First, each search request will return the total number of results. That allows for pagination. But you are not allowed to ask for more than 100 results. So if a search for &quot;foo&quot; returned 250 results, you can only show the first ten &quot;pages&quot; of results. That's not too bad, I can't see most users clicking through over ten pages of results, but you want to ensure your code handles this correctly.</p>\n<p>Secondly, in some testing I saw the total number of results fluctuate while paging. So I'd search for &quot;foo&quot; and see X results. I'd go to the next page and still see X. But then on page 4, all of a sudden the total number changed. If I then went to page 5, the total went back to X again.</p>\n<p>Thirdly, also related to paging, the total number of results you can return in one request is ten. That seems odd to me, but I guess Google really wants to ensure you use those 100 requests. Again, probably not a big deal to most folks, but it's something you want to keep in mind.</p>\n<p>A basic request looks like so: <code>https://www.googleapis.com/customsearch/v1?key=KEY&amp;cx=CX&amp;q=TERM</code></p>\n<p>Everything there should be relatively obvious except for <code>cx</code> which is your search engine ID. If you go to the CSE portal, select one of your CSEs, you can see it here:</p>\n<img class=\"lazyload\" data-src=\"https://static.raymondcamden.com/images/2020/03/cse1a.png\" alt=\"Image from CSE Portal\" class=\"imgborder imgcenter\">\n<p>The other variable you would use is <code>start</code> which controls pagination. This number cannot go over 91.</p>\n<p>There are many more parameters you can use that are covered in the <a href=\"https://developers.google.com/custom-search/v1/cse/list#request\">reference guide</a>.</p>\n<p>Alright, so let's consider a simple example of this using Netlify functions. I began by building the serverless function. I set up both my API key and CX value as environment variables.</p>\n<pre><code class=\"language-js\">/* eslint-disable */\nconst fetch = require('node-fetch');\n\nconst apiKey = process.env.CSE_KEY;\nconst cx = process.env.CSE_CX;\n\nexports.handler = async function(event, context) {\n  let query = event.queryStringParameters.query;\n  if(!query) {\n    return {\n      statusCode: 500,\n      body:'Must pass query parameter in the query string.'\n    }\n  }\n\n  let start = event.queryStringParameters.start || 1;\n  if(start &lt;= 0 || start &gt; 91) start = 1;\n\n  let url = `https://www.googleapis.com/customsearch/v1?key=${apiKey}&amp;cx=${cx}&amp;q=${encodeURIComponent(query)}&amp;start=${start}`;\n  let resp = await fetch(url);\n  let data = await resp.json();\n  // reduce the result a bit for simplification\n  let result = {};\n  result.info = data.searchInformation;\n  result.info.totalResults = parseInt(result.info.totalResults, 10);\n  result.items = data.items.map(d =&gt; {\n    delete d.kind;\n    if(d.pagemap &amp;&amp; d.pagemap.cse_thumbnail) {\n      d.thumbnail = { \n        src: d.pagemap.cse_thumbnail[0].src, \n        width: d.pagemap.cse_thumbnail[0].width, \n        height: d.pagemap.cse_thumbnail[0].height\n      } \n    }\n    delete d.pagemap;\n    delete d.cacheId;\n    return d\n  });\n\n  return {\n    statusCode: 200,\n    headers : {\n      'Content-Type':'application/json'\n    },\n    body: JSON.stringify(result)\n  }\n\n}\n</code></pre>\n<p>I begin with a bit of validation on the query string parameters passed to the function. <code>query</code> must be passed. <code>start</code> is optional and defaults to 1. I do a bit of basic validation on it to ensure it doesn't go below 0 or over 91.</p>\n<p>I then do a HTTP request. The <a href=\"https://developers.google.com/custom-search/v1/cse/list#response_1\">response</a> contains a lot of information, not all that I need, so to simplify things a bit I transform the response before returning it. I focus on two elements, <code>searchInformation</code> and <code>items</code>. <code>searchInformation</code> is exactly that, information about the search. Oddly, <code>totalResults</code> is a string so I fix that on the server side. For my items, I remove things that I consider to not be important. You may feel differently and if so, just remove that <code>map</code> call. The end result is a JSON packet that looks like this (I removed most of the items to keep the size down):</p>\n<pre><code class=\"language-js\">{\n  &quot;info&quot;: {\n    &quot;searchTime&quot;: 0.203461,\n    &quot;formattedSearchTime&quot;: &quot;0.20&quot;,\n    &quot;totalResults&quot;: &quot;507&quot;,\n    &quot;formattedTotalResults&quot;: &quot;507&quot;\n  },\n  &quot;items&quot;: [\n    {\n      &quot;title&quot;: &quot;Testing Camera Quality Settings and PhoneGap/Cordova&quot;,\n      &quot;htmlTitle&quot;: &quot;&lt;b&gt;Testing&lt;/b&gt; Camera Quality Settings and &lt;b&gt;PhoneGap&lt;/b&gt;/Cordova&quot;,\n      &quot;link&quot;: &quot;https://www.raymondcamden.com/2015/04/27/testing-camera-quality-settings-and-phonegapcordova&quot;,\n      &quot;displayLink&quot;: &quot;www.raymondcamden.com&quot;,\n      &quot;snippet&quot;: &quot;Testing Camera Quality Settings and PhoneGap/Cordova. by Raymond Camden \\non April 27, 2015 | 4 Comments. As you know, when using the Camera plugin ...&quot;,\n      &quot;htmlSnippet&quot;: &quot;&lt;b&gt;Testing&lt;/b&gt; Camera Quality Settings and &lt;b&gt;PhoneGap&lt;/b&gt;/Cordova. by Raymond Camden &lt;br&gt;\\non April 27, 2015 | 4 Comments. As you know, when using the Camera plugin&amp;nbsp;...&quot;,\n      &quot;formattedUrl&quot;: &quot;https://www.raymondcamden.com/.../testing-camera-quality-settings-and- phonegapcordova&quot;,\n      &quot;htmlFormattedUrl&quot;: &quot;https://www.raymondcamden.com/.../&lt;b&gt;testing&lt;/b&gt;-camera-quality-settings-and- &lt;b&gt;phonegap&lt;/b&gt;cordova&quot;\n    },\n    {\n      &quot;title&quot;: &quot;Using Ripple for PhoneGap Development&quot;,\n      &quot;htmlTitle&quot;: &quot;Using Ripple for &lt;b&gt;PhoneGap&lt;/b&gt; Development&quot;,\n      &quot;link&quot;: &quot;https://www.raymondcamden.com/2013/02/06/Using-Ripple-for-PhoneGap-Development&quot;,\n      &quot;displayLink&quot;: &quot;www.raymondcamden.com&quot;,\n      &quot;snippet&quot;: &quot;Feb 6, 2013 ... As a test, you can simply point to an HTML file on your local server and then click \\nthe Ripple icon. Click to enable Ripple and the page is reloaded ...&quot;,\n      &quot;htmlSnippet&quot;: &quot;Feb 6, 2013 &lt;b&gt;...&lt;/b&gt; As a &lt;b&gt;test&lt;/b&gt;, you can simply point to an HTML file on your local server and then click &lt;br&gt;\\nthe Ripple icon. Click to enable Ripple and the page is reloaded&amp;nbsp;...&quot;,\n      &quot;formattedUrl&quot;: &quot;https://www.raymondcamden.com/.../Using-Ripple-for-PhoneGap- Development&quot;,\n      &quot;htmlFormattedUrl&quot;: &quot;https://www.raymondcamden.com/.../Using-Ripple-for-&lt;b&gt;PhoneGap&lt;/b&gt;- Development&quot;,\n      &quot;thumbnail&quot;: {\n        &quot;src&quot;: &quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcQpl4a1d40RU7E28NnLmbDVXB4pk_aPj6-7gdOf3DCsNIq2UevXu8fTyBvV&quot;,\n        &quot;width&quot;: &quot;251&quot;,\n        &quot;height&quot;: &quot;201&quot;\n      }\n    },\n  ]\n}\n</code></pre>\n<p>And technically - that's all I need for the back end. For the front end, I built a simple Vue.js front end. Here's the HTML portion of my form:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n\t&lt;h2&gt;Search&lt;/h2&gt;\n\t&lt;p&gt;\n\t&lt;input v-model=&quot;search&quot; type=&quot;search&quot;&gt; &lt;button @click=&quot;doSearch&quot; :disabled=&quot;searching&quot;&gt;Search&lt;/button&gt;\n\t&lt;/p&gt;\n\n\t&lt;div v-if=&quot;results&quot;&gt;\n\t\t&lt;h3&gt;Results&lt;/h3&gt;\n\t\t&lt;div v-for=&quot;result in results&quot;&gt;\n\t\t\t&lt;p&gt;\n\t\t\t\t&lt;span v-if=&quot;result.thumbnail&quot;&gt;\n\t\t\t\t\t&lt;img :src=&quot;result.thumbnail.src&quot; :width=&quot;result.thumbnail.width&quot; :height=&quot;result.thumbnail.height&quot; class=&quot;thumbnail&quot; /&gt;\n\t\t\t\t&lt;/span&gt;\n\t\t\t\t&lt;a :href=&quot;result.link&quot; target=&quot;_new&quot;&gt;{{ result.title }}&lt;/a&gt;&lt;br/&gt;\n\t\t\t\t{{ result.snippet }}\n\t\t\t\t&lt;br clear=&quot;left&quot; /&gt;\n\t\t\t&lt;/p&gt;\n\t\t&lt;/div&gt;\n\t\t&lt;p&gt;\n\t\t&lt;span v-if=&quot;showPrevious&quot;&gt;&lt;button @click=&quot;doPrevious&quot;&gt;Previous Results&lt;/button&gt;&lt;/span&gt;\n\t\t&lt;span v-if=&quot;showNext&quot;&gt;&lt;button @click=&quot;doNext&quot;&gt;Next Results&lt;/button&gt;&lt;/span&gt;\n\t\t&lt;/p&gt;\n\t&lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>\n<p>I've got a form up top and then a block to handle showing results. That block handles iterating over each result and optionally showing buttons for next and previous results. Now here's the JavaScript:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tsearch:'',\n\t\tsearching:false,\n\t\tresults:null,\n\t\tstart:1,\n\t\tshowPrevious: false, \n\t\tshowNext: false\n\t},\n\tcreated() {\n\t\tlet params = new URLSearchParams(window.location.search);\n\t\tlet passedInSearch = params.get('search');\n\t\tif(passedInSearch) {\n\t\t\tthis.search = passedInSearch;\n\t\t\tthis.doSearch();\n\t\t}\n\t},\n\tmethods: {\n\t\tasync doSearch() {\n\t\t\tif(this.search === '') return;\n\t\t\tthis.searching = true;\n\t\t\tthis.results = null;\n\t\t\tthis.showPrevious = false;\n\t\t\tthis.showNext = false;\n\t\t\tlet resp = await fetch(`/.netlify/functions/search?query=${encodeURIComponent(this.search)}&amp;start=${this.start}`);\n\t\t\tlet data = await resp.json();\n\n\t\t\tthis.searching = false;\n\t\t\tthis.results = data.items;\n\t\t\t// pagination:\n\t\t\tif(this.start &gt; 10) {\n\t\t\t\tthis.showPrevious = true;\n\t\t\t}\n\t\t\tif(data.info.totalResults &gt; this.start + 10 &amp;&amp; (this.start + 10 &lt;= 91)) {\n\t\t\t\tthis.showNext = true;\n\t\t\t}\n\t\t},\n\t\tdoPrevious() {\n\t\t\tthis.start -= 10;\n\t\t\tthis.doSearch();\n\t\t}, \n\t\tdoNext() {\n\t\t\tthis.start += 10;\n\t\t\tthis.doSearch();\n\t\t}\n\t}\n});\n</code></pre>\n<p>In general this is just a simple wrapper to a back end API, but pay particular attention to the <code>created</code> block. Some sites (not mine in it's current form) support having a search box in the header, or side bar, that let a user enter text, hit a button, and then sends them to a page to display results. In order to support that in my demo, I use <code>created</code> to look at the query string and see if a value is there. If so, I use that to update my form field value for searching and immediately fire off a request.</p>\n<p>So I'd love to show this to you. It <em>is</em> live right now on a demo site. But since I've got a limit of 100 requests per day, I don't think I can safely share it. You are welcome to the <a href=\"https://github.com/cfjedimaster/NetlifyTestingZone\">source code</a> but you'll have to trust me on how awesome it looks. Wait, don't trust me, look at this most excellent screen shot:</p>\n<img class=\"lazyload\" data-src=\"https://static.raymondcamden.com/images/2020/03/cse2.png\" alt=\"Screen shot\" class=\"imgborder imgcenter\">\n",
		"tags":[
	        
            "javascript"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "A Look at Pipedream",
		"date":"Fri Mar 27 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/03/28/a-look-at-pipedream",
		"content":"<p>Every now and then folks will reach out to me to share interesting tech/sites/etc that they would like my opinion on. I like this as it gives me a chance to learn something new and a lot of times it leads to blog posts that I can share with my audience. Nearly a year ago the folks at <a href=\"https://pipedream.com/\">Pipedream</a> reached out to me and - unfortunately - I never really got a chance to look into their product. Friday I was about to hit the Archive button as it was the oldest email in my inbox and sometimes you just have to let go. (It feels great to do that sometimes.) Instead, I clicked around a bit and I've got to say - I am incredibly happy I did so. Pipedream is a really neat product and something I absolutely want to tell other people about.</p>\n<p>Pipedream describes itself as an &quot;integration platform built for developers.&quot; It focuses on what it calls workflow that are run on their platform at no cost. (As their <a href=\"https://docs.pipedream.com/pricing/\">pricing</a> page says though in the future they may offer additional features on a paid tier.)</p>\n<p>Workflows are - essentially - pieces of logic that you put together in a linear fashion. Your workflow will execute step by step. This isn't anything new. I know Lambda supports steps as does Azure Functions. For me, my experience with this type of setup was with OpenWhisk sequences. It was one of my favorite aspects of OpenWhisk as it made it incredibly easy to set up complex applications by piecing together different bits of logic. A lot of times I'd take parts that were pre-built and simply stick a bit of custom logic in the middle. Pipedream reminds me a lot of this.</p>\n<p>Your workflows are comprised of a few different parts. You begin with a trigger which is how the workflow is initiated. This can be via URL (ie, someone hits the URL to start it), a CRON schedule, or email (ie, you send an email to the address to start it).</p>\n<p>Next come your steps. These steps are bits of Node.js code that you can do pretty much anything with, or a pre-built &quot;action&quot; that encapsulates code for you. Steps are processed one by one. They can have their own data, take input, return output, etc.</p>\n<p>The actions are where things get really, <em>really</em> freaking cool though. As an example, I like working with the Twitter API. I've built a few bots, search tools, and so forth. The Twitter API is rather simple to use. However the authentication part can be a bit hard to work with. Pipedreams literally turns this into a &quot;click and login&quot; flow and you're done. I cannot stress how cool that is (going to demonstrate it in a second) and how excited I am about using the platform to build my usual style of stupid demos.</p>\n<p>That was a longish intro so let's walk through an example. I'm going to build a workflow that will search Twitter every hour for a keyword. It will take the results, format them nicely, and then email it. The following example is a modified version of one created by Dylan Sather - one of two folks at Pipedream who answered a crap ton of annoying questions from me. I'm rebuilding it from scratch to demonstrate that the process is like. (But get this - you don't have to. At the end I'll share a link to his workflow that you can copy to your account in one click.)</p>\n<p>Ok, assuming you've signed up for Pipedream, your default view is a dashboard of your workflows:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p1.png\" alt=\"Pipedream dashboard\" class=\"lazyload imgborder imgcenter\">\n<p>Begin by clicking the big obvious green New Workflow button.</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p2.png\" alt=\"Workflow dashboard\" class=\"lazyload imgborder imgcenter\">\n<p>This is the default dashboard for working with workflows and there's a <em>lot</em> going on in it. One of the issues with the site now is that they don't use a lot of alt text on their images and sometimes it's difficult to know what a particular UI item does. I've let them know this and they're working on correcting it. Right now though I'm going to focus on two parts. I'm going to give it a title (upper left hand side) and then select the &quot;Cron Scheduler&quot; trigger as I want a time based workflow:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p3.png\" alt=\"Workflow with settings\" class=\"lazyload imgborder imgcenter\">\n<p>Note that the Cron trigger has both a simple and complex view which I <em>really</em> appreciate. Cron syntax makes regex look friendly so I like having a simpler way to define my timing schedule.</p>\n<p>Ok, so notice the + sign below my trigger. Clicking it gives you a quick form to select your next step.</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p4.png\" alt=\"Adding a new step\" class=\"lazyload imgborder imgcenter\">\n<p>I'm going to select the &quot;Search Twitter&quot; action:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p5.png\" alt=\"Search Twitter\" class=\"lazyload imgborder imgcenter\">\n<p>So it was a bit hard to fit this into a screen shot but I want to point out a few things. First, I love the big obvious warning at the bottom. It's making it clear I need to connect this to an account. Then note the big red button in the step itself. That's what I'll click to connect the workflow to my Twitter account. Next notice params. It's showing you one param, q, which is your search term. There's more properties but this action takes a sensible view of, &quot;90% of the time all you need is this one param.&quot; I've noticed this in a bunch of actions and it's really nicely done.</p>\n<p>What you see only partially in the screen shot is the code. You do not have to modify anything here at all. But what's awesome is that if you <em>do</em> want to do a customization, you just click and start editing. The editing experience is great (although I wish it had a full screen view) with syntax highlighting and code completion.</p>\n<p>I clicked connect account and selected my current account and then entered a term.</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p6.png\" alt=\"Search term selected\" class=\"lazyload imgborder imgcenter\">\n<p>Next we'll add a new step and select &quot;Run Node.js code&quot;. This is where we'll write some custom logic. I'm going to take the results from the Twitter search and make it better for an email.</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p7a.png\" alt=\"Code\" class=\"lazyload imgborder imgcenter\">\n<p>Basically it creates a variable, <code>this.message</code>, and populates it with the result of the previous step. Note how it access it via <code>steps.search_twitter.$return_value</code>. Also note that by writing to <code>this.message</code> the value will be available in later steps.</p>\n<p>For the final step I'll click add again, and select &quot;Email by Pipedream&quot;:</p>\n<img  data-src=\"https://static.raymondcamden.com/images/2020/03/p8.png\" alt=\"\" class=\"lazyload imgborder imgcenter\">\n<p>This step automatically emails me, the workflow owner, so I just need to customize the subject and message text. For subject I simply entered a hard coded value. For text, I can address step data by typing &quot;step&quot; and the field autocompletes as I typed. My previous step was named &quot;nodejs&quot; (that's a default value and you can, and should, rename your steps) so I ended up with the following values:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p9.png\" alt=\"Email settings\" class=\"lazyload imgborder imgcenter\">\n<p>The last thing I did was click Deploy. Now for the fun part - you can test your workflow by hitting &quot;Run Now&quot;:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p10.png\" alt=\"Finished workflow\" class=\"lazyload imgborder imgcenter\">\n<p>What's cool now - and it wasn't completely obvious to me at first - if you click the event now you will see the data in the workflow itself - ie you'll see the results in every step. So I click the execution first (and note it flags errors here in a quick to read way as well as execution time):</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p11.png\" alt=\"Logs of operations\" class=\"lazyload imgborder imgcenter\">\n<p>After you click it, then go to a step, like the search twitter one, to see the result data:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p12.png\" alt=\"Result data\" class=\"lazyload imgborder imgcenter\">\n<p>This is really useful for debugging. I'll also note that you can use console.log and see the messages. And here's the email:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/03/p13.png\" alt=\"email\" class=\"lazyload imgborder imgcenter\">\n<p>As I said, it's easy to copy and reuse workflows. You can find mine <a href=\"https://pipedream.com/@raymondcamden/email-me-da-kittahs-p_MOCMdZ/edit\">here</a> but I'd suggest the <a href=\"https://pipedream.com/@dylan/email-me-new-tweets-p_RRCaqW/edit\">nicer one</a> by Dylan.</p>\n<p>Definitely give it a shot. There's other features I didn't mention, so check their <a href=\"https://docs.pipedream.com/\">docs</a> for more or wait because I've got a few ideas for more blog posts next week. :)</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@spacexuan?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Crytal Kwok</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "Building a Twitter Bot in Pipedream",
		"date":"Wed Apr 01 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/02/building-a-twitter-bot-in-pipedream",
		"content":"<p>A few days ago I <a href=\"https://www.raymondcamden.com/2020/03/28/a-look-at-pipedream\">posted</a> about the <a href=\"https://pipedream.com/\">Pipedream</a> platform and I've had a chance now to play with it a bit more and I'm even more impressed with it now then when I started. I decided to build (yet another) Twitter bot that shares random information. This time it's <a href=\"https://twitter.com/randomgijoe\">@randomgijoe</a>, a bot that shares random GI Joe characters from the &quot;RAH&quot; (&quot;Real American Hero&quot;) universe. Here's an example:</p>\n<blockquote class=\"twitter-tweet\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">Name: Voltar<br>Speciality: Field commander<br>Link: <a href=\"https://t.co/1Igpw6t1fL\">https://t.co/1Igpw6t1fL</a> <a href=\"https://t.co/Y0PJyppFnO\">pic.twitter.com/Y0PJyppFnO</a></p>&mdash; randomjoe (@randomgijoe) <a href=\"https://twitter.com/randomgijoe/status/1245515657103446016?ref_src=twsrc%5Etfw\">April 2, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>I did this by parsing information from the <a href=\"https://gijoe.fandom.com/wiki/Joepedia_-_The_G.I._Joe_Wiki\">GI Joe</a> wikipedia site and implementing it on Pipedream's platform. I'm going to share how I built it, but be aware that roughly <strong><u>95% of the work</u></strong> was involved in getting my random character. The aspects that pertain to Pipedream were incredibly simple - which is what you want in a platform. Also, I once again want to thank <a href=\"https://twitter.com/DylanSather\">Dylan Sather</a> and Tod Sacerdoti for their help.</p>\n<h2>Creating My Tweet</h2>\n<p>So as I said in the beginning, most of my work for this bot was in creating the actual content for the tweet. Wikis using the Wikia platform (which I'm not sure how to exactly link to) share an API that makes it simple to perform calls against the content of the site itself. For my bot, I wanted to do this:</p>\n<ol>\n<li>Get a random page in a category.</li>\n<li>Use the characters name, specialty, and picture in a tweet.</li>\n</ol>\n<p>The first part was easy as it's a standard URL that looks like so:</p>\n<pre><code>https://gijoe.fandom.com/wiki/Special:RandomInCategory/CATEGORY\n</code></pre>\n<p>For my bot, I wanted to focus on the RAH (Real American Hero) category so my URL looked like so: <a href=\"https://gijoe.fandom.com/wiki/Special:RandomInCategory/A_Real_American_Hero_characters\">https://gijoe.fandom.com/wiki/Special:RandomInCategory/A_Real_American_Hero_characters</a>. If you click that link, you'll end up on a random page within that category.</p>\n<p>So step one was - request that URL and look at the request to see where I was redirect. I've never done that before with node-fetch, but it ended up being simple:</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\nconst randomURL = 'https://gijoe.fandom.com/wiki/Special:RandomInCategory/A_Real_American_Hero_characters';\n\nasync function getRandomCharacter() {\n\treturn await fetch(randomURL + '?format=json', {redirect:'manual'})\n\t.then(res =&gt; {\n\t\tlet header = res.headers.raw();\n\t\treturn header.location[0].split('/').pop();\n\t});\n}\n</code></pre>\n<p>Specifically using <code>redirect:'manual'</code> lets me look at the headers and see where it redirected me to. This will be a URL with a page value at the end that I pop out. So a call to this may return something like: <a href=\"https://gijoe.fandom.com/wiki/Decimator\"><code>Decimator</code></a>.</p>\n<p>Easy. The next step is to get the content of the page. The Wikia API lets you get both the rendered page or the original wiki source. I needed the original wiki source, so I wrote this function:</p>\n<pre><code class=\"language-js\">async function getPageData(page) {\n\tlet resp =  await fetch(apiURL + `?action=parse&amp;page=${page}&amp;format=json&amp;prop=wikitext`);\n\tlet data = await resp.json();\n\treturn { \n\t\ttitle: data.parse.title, \n\t\twikitext: data.parse.wikitext['*']\n\t};\n\t\n}\n</code></pre>\n<p>I simplify the result a bit by looking for the title and wikitext. Again, sooooo simple, right? Now came the fun part. And by fun part, I mean the part that made me reconsider what I was doing.</p>\n<p>I noticed that the random characters shared something in common. They all had a box on the right:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/rah1.png\" alt=\"RAH character example\" class=\"lazyload imgborder imgcenter\">\n<p>I noticed &quot;Specialty&quot; in the box and thought that would be nice information for the tweet. I had originally considered the first sentence of the main text, but I figured name, specialty, and an image would be enough. When I looked at the wiki text, I could see the box inline with the rest of the code. Here's a sample:</p>\n<pre><code>{{Chardisambig|Shipwreck}}\n\n:''Shipwreck is a [[G.I. Joe Team|G.I. Joe]] character from the [[A Real American Hero]] and [[G.I. Joe vs. Cobra]] series.'\n'\n{{Joe character_infobox\n|imageBG=\n|image=[[File:Shipwreck_RAH.jpg|250px|center]]\n|name=Shipwreck\n|hidep=\n|realname=Hector X. Delgado\n|birthplace=Chula Vista, California\n|gender=Male\n|alias=\n|hidem=\n|branch=US Navy\n|graderank=Chief Petty Officer (E-7)\n|sernumber=\n|specialty=Sailor; [[Wikipedia:United States Navy SEALs|S.E.A.L.]]; Gunner's mate; Machinist\n|training=Naval Gunnery School; [[Wikipedia:United States Naval Special Warfare Command|S.E.A.L. School]]\n|weapon=[[Wikipedia:M16 rifle|M-16]]; [[Wikipedia:M14 rifle|M-14]]; [[Wikipedia:M2 Browning machine gun|Browning .50 cal]];\n20mm Oerliken anti-aircraft gun; [[Wikipedia:M1911 pistol|M1911A1]]\n|hideo=\n|factions=*[[G.I. Joe Team]]\n|subteams=\n|1stcomic=[[Hydrofoil|''G.I. Joe'' #40]]\n|1sttoon=\n}}\n'''Shipwreck''' has earned a reputation as being one of the more rambunctious members of the [[G.I. Joe Team]]. It's not tha\nt he is in any way disobedient or disrespectful of higher up officers. His arrogant, brash personality and stereotypical sai\nlor attitude has gotten him in trouble so many times. He prefers to take up his own actions and fight the enemy in his own w\nay. He also has a reputation for telling tall tales and for his poor culinary skills. It seems he is the only one who can st\nomach his own cooking. His superiors have had enough and shipped him to Navy S.E.A.L. School in the hopes the training there\nwould make him a better man. It made him better alright... a better fighter only.\n</code></pre>\n<p>Notice this block: {{Joe character_infobox ... }}. You can see that inside it, we have formatted data in the form, |key=value. Here is where things got weird. Yes, wiki's have an API. But when authors write content, they don't always follow a standard format. One of the things I found right away was that the infobox had different styles with different names. That made my code get and parse the box a bit complex. Here's what I came up with.</p>\n<pre><code class=\"language-js\">/* \nLooks for the infobox code and parses it into fields, also prepares image.\nTries to deal with the different forms of infobox\n*/\nfunction getInfoBox(str) {\n\tlet matches = str.match(/{{.*?[_ ]character[_ ]infobox[.\\s\\S]*?}}/);\n\tif(!matches) {\n\t\t//hopefully the only alternative\n\t\tmatches = str.match(/{{Character_infobox[.\\s\\S]*?}}/);\n\t}\n\t\n\tif(!matches) return;\n\tif(matches[0]) {\n\t\tlet box = matches[0];\n\t\tbox = box.replace(/{{.*?[_ ]character[_ ]infobox[\\s\\S]/,'');\n\t\tbox = box.replace(/{{Character_infobox[\\s\\S]/,'');\n\t\tbox = box.replace(/}}/,'');\n\t\tlet parts = box.split('\\n');\n\t\tlet result = {};\n\t\tparts.forEach(p =&gt; {\n\t\t\tif(p.indexOf(&quot;|&quot;) === 0) {\n\t\t\t\tlet [key,value] = p.split('=');\n\t\t\t\tkey = key.replace('|','');\n\t\t\t\tif(key &amp;&amp; value) result[key] = value;\n\t\t\t}\n\t\t});\n\t\t/*\n\t\tlook for image as a key, and it may be: [[File:Marvel-Mainframe.jpg|270px]]'\n\t\t*/\n\t\tif(result.image) {\n\t\t\tlet [file] = result.image.split('|');\n\t\t\tif(file.indexOf('File:') &gt; 0 || file.indexOf('Image:') &gt; 0) {\n\t\t\t\tfile = file.replace('[[File:','');\n\t\t\t\tfile = file.replace('[[Image:','');\n\t\t\t\tfile = file.replace(']]','');\n\t\t\t\tresult.image = file;\n\t\t\t}\n\t\t}\n\t\t/*\n\t\tpossibly fix speciality:\n\t\t&quot;Sailor; [[Wikipedia:United States Navy SEALs|S.E.A.L.]]; Gunner's mate; Machinist\n\t\tIn this case, we'll just take the first part\n\t\t*/\n\t\tif(result.specialty.indexOf(';') &gt; 0) {\n\t\t\tresult.specialty = result.specialty.split(';')[0];\n\t\t}\n\n\t\treturn result;\n\t}\n}\n</code></pre>\n<p>If you look at the very beginning of this function, you'll notice I was not able to come up with one regex to handle every case I found. I did get it covering every test I ran, but I'm not 100% convinced this will work all the time. For a silly bot though, I was ok. Also note I do a bit of extra work on the image and specialty values.</p>\n<p>I still wasn't done though. The image value was just a file name, like foo.jpg, not a &quot;real&quot; URL. I had to use <em>another</em> API call to translate it into a URL I could use:</p>\n<pre><code class=\"language-js\">async function getImageURL(f) {\n\tlet url = `https://gijoe.fandom.com/api.php?action=query&amp;titles=Image:${f}&amp;prop=imageinfo&amp;iiprop=url&amp;format=json`;\n\tlet result = await fetch(url);\n\tlet data = await result.json();\n\tif(data &amp;&amp; data.query &amp;&amp; data.query.pages) {\n\t\t//result is an object with one random key\n\t\tlet keys = Object.keys(data.query.pages);\n\t\tlet image = data.query.pages[keys[0]];\n\t\treturn image.imageinfo[0].url;\n\t}\n}\n</code></pre>\n<p>I did all of this in a Node script that I could run locally as a way of quickly testing. My test looked like so:</p>\n<pre><code class=\"language-js\">let char = await getRandomCharacter();\nconsole.log(`Char=${char}`);\nlet page = await getPageData(char);\nlet box = getInfoBox(page.wikitext);\nconsole.log(box);\nlet pic = await getImageURL(box.image);\n\nlet url = `https://gijoe.fandom.com/wiki/${char}`;\nconsole.log(pic);\n</code></pre>\n<p>Finally, let me just say that this is absolutely some brittle code. I could make it better, but in my testing it seemed to work well. This morning I noticed a bug in specialty where some wiki text got through, but I may just ignore it for now.</p>\n<h2>Setting up the Pipedream Workflow</h2>\n<p>Now for the fun part. My Pipedream workflow ended up like so:</p>\n<ul>\n<li>Use a Cron trigger (once an hour)</li>\n<li>Use a Node.js script to get my Joe character (everything above)</li>\n<li>Use a Node.js script to generate the text for my tweet</li>\n<li>Use a Pipedream action to upload my photo</li>\n<li>Use a Pipedream action to make the tweet</li>\n</ul>\n<p>Let's break this down. The first step is done, I basically just copied and pasted, but in order to share my data out of the step I modified my code to write to the <code>this</code> scope. This makes it available in later steps:</p>\n<pre><code class=\"language-js\">let char = await getRandomCharacter();\nlet page = await getPageData(char);\nthis.box = getInfoBox(page.wikitext);\n//console.log(this.box);\nthis.pic = await getImageURL(this.box.image);\nthis.url = `https://gijoe.fandom.com/wiki/${char}`;\n</code></pre>\n<p>The second step just forms my tweet text:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tthis.text = `\n\tName: ${steps.getjoe.box.name}\n\tSpeciality: ${steps.getjoe.box.specialty}\n\tLink: ${steps.getjoe.url}\n\t`;\n}\n</code></pre>\n<p>My third step was based on a brand new action Dylan from Pipedream created and shared, <code>upload_media_to_twitter</code>. When it comes to tweets with media, Twitter requires you to upload the image first, which gives you an ID value, that you can then use in your tweet. So in Pipedream I added the step and told it to use the value from the first step:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/rah2.png\" alt=\"Pipedream upload to media step\" class=\"lazyload imgborder imgcenter\">\n<p>The output of this will be an ID value that can then be used to generate the tweet:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/rah3.png\" alt=\"Last step - making the tweet\" class=\"lazyload imgborder imgcenter\">\n<p>And that's it. I apologize if I sound like I'm repeating myself, but I freaking love that most of my work was in creating my text and using the wikia API. The actual &quot;now tweet this at a schedule&quot; part was trivial. And heck, if I wanted to change this to a daily email, or even a SMS message, I can reuse my step in another workflow. I love it!</p>\n<p>You can look at the entire Pipedream workflow here: <a href=\"https://pipedream.com/@raymondcamden/random-gi-joe-p_jmCpWe\">https://pipedream.com/@raymondcamden/random-gi-joe-p_jmCpWe</a>. Notice the &quot;COPY&quot; button top of the workflow and if you want, click it to fork the code and play with it yourself!</p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "Quick Tip on Using Vue with Eleventy",
		"date":"Thu Apr 02 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/03/quick-tip-on-using-vue-with-eleventy",
		"content":"<p>Ok, so this falls into the &quot;too obvious to blog&quot; category, but as I've made this mistake twice now I figured I'd share. Let's say your happily working on your Eleventy site and using Liquid as your template language. Your site is done and you realize you need to add some Vue.js to a page to enhance it. That's great because Vue is <em>awesome</em> for stuff like that. In my opinion, one of the reasons it's the best client-side framework out there is because it works great both for single page applications as well as simple page enhancement tasks. Anyway, you take an existing Eleventy template and begin to enhance it:</p>\n<pre><code class=\"language-html\">---\nlayout: main\n---\n\n&lt;h1&gt;Vue Demo&lt;/h1&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n\tThe time is {{ time }}\n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;/app.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Then you write your code.</p>\n<pre><code class=\"language-js\">const app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\ttime:'to rock'\n\t}\n});\n</code></pre>\n<p>Easy-peasy lemon squeezy. Should just work, right? So you fire up your browser and see...</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/vd1.png\" alt=\"Browser screenshot, code isn't working\" class=\"lazyload imgborder imgcenter\">\n<p>Oh crap - where's the dynamic data? If you're like me you immediately open up devtools and if you do, you won't find an error. So what could it be?</p>\n<p>Well, if you view source on the page, you'll see this (I removed the layout code for brevity):</p>\n<pre><code class=\"language-html\">\n&lt;h1&gt;Vue Demo&lt;/h1&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n\tThe time is \n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;/app.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Woah wait - where's the template tokens for Vue? It's at this point you (hopefully) remember that LiquidJS and Vue use <em>the exact same token syntax</em>, i.e. {{ and }}.</p>\n<p>Luckily, there's a few quick options.</p>\n<ol>\n<li>Wrap the code you want to be available in your built site with the raw and endraw tags.</li>\n</ol>\n<script src=\"https://gist.github.com/cfjedimaster/ea6006f41307b8450ea3cde3b1223d0f.js\"></script>\n<p>Yes, I switched to a Gist for this because I gave up trying to double escape the code on my own Eleventy blog. ;)</p>\n<ol start=\"2\">\n<li>Given the nature of how much other code you have in your template, don't forget that Eleventy lets you use one of <em>many</em> template languages. You could switch to EJS for example. That's what I did on my blog for a template where Liquid would have been difficult to use. Or heck, if you hate yourself you could also use Pug! (Sorry, but Jade/Pug just annoys me at a deep level.)</li>\n</ol>\n<p>Anyway, I hope this helps and I also <em>sincerely</em> hope I'm not the only one to have made this mistake!</p>\n",
		"tags":[
	        
            "vuejs",
            
            "eleventy"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Using State in Pipedream Workflows",
		"date":"Fri Apr 03 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/04/using-state-in-pipedream-workflows",
		"content":"<p>I've been playing a lot with <a href=\"https://pipedream.com/\">Pipedream</a> lately and have been enjoying the heck out of it. If you didn't see it, my <a href=\"https://www.raymondcamden.com/2020/04/02/building-a-twitter-bot-in-pipedream\">last post</a> described how to build a simple Twitter bot using the platform. Today I want to demonstrate something else with Pipedream, a feature that is pretty simple but incredibly useful - <a href=\"https://docs.pipedream.com/workflows/steps/code/#managing-state\">managing state</a>.</p>\n<p>Many times when working with serverless functions, it would be convenient to store information. Perhaps a simple cache or even just the time the function last run. There's a huge variety of data storage systems out there with easy to use APIs, but if your needs are <em>really</em> small, then they may seem like overkill.</p>\n<p>One of my favorite features of Webtask (sigh, RIP Webtask) was that it supported a state system that let you read and write to a JavaScript object that persisted for your function. Obviously it doesn't replace something like MongoDB but for remembering a few values it was incredibly useful.</p>\n<p>Pipedream has a similar feature, but done a lot better I think. Pipedream supports a variable called <code>$checkpoint</code>. This value will persist for your workflow. It can contain anything, either a simple value (maybe you want to store only one thing) or a full JavaScript object. Anything that can be serialized can be stored. Even better, while $checkpoint is global to the entire workflow (and is most likely the option you'll use), you can even have <em>per step</em> state if you use <code>$this.checkpoint</code>.</p>\n<p>When I first <a href=\"https://www.raymondcamden.com/2020/03/28/a-look-at-pipedream\">blogged</a> about Pipedream, I described a simple workflow that did a Twitter search, formatted the results, and emailed them to me. One issue with the workflow is that it would (possibly) keep sending the same results over and over again. The Twitter API supports returning results after a previous tweet so this should be easy to fix, and with the <code>$checkpoint</code> variable, it's easy to implement. (See my note at the bottom.)</p>\n<p>Before I describe how I did it, here's a quick refresher of how the workflow looked. In this case I'm using the nicer workflow <a href=\"https://twitter.com/DylanSather\">Dylan Sather</a> of Pipedream had setup. It was a bit more complex, and reusable than the simpler version I did. Anyway, here are the steps:</p>\n<ol>\n<li>The first part of the workflow is a CRON trigger set to run every hour.</li>\n<li>The next part is a Node.js script that specifies a few constants.</li>\n</ol>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\t// this.property exports values for use in future steps. We call these &quot;step exports&quot;:\n\t// https://docs.pipedream.com/workflows/steps/#step-exports.\n\tthis.searchTerm = &quot;convert pdf&quot;\n}\n</code></pre>\n<ol start=\"3\">\n<li>The third step is the search Twitter action. All I had to do there is connect my account and tell it to use the result from the previous step.</li>\n<li>The next step handled formatted the result into a string.</li>\n</ol>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\n\t// Format a message that contains the text of tweets returned by our search,\n\t// which we'll send via email below.\n\n\t// We reference step exports from previous steps here, e.g. steps.search_twitter.$return_value\n\tthis.message = `New ${steps.CONSTANTS.searchTerm} tweets:\n\n\t${steps.search_twitter.$return_value.statuses.map(status =&gt; {\n\treturn `New tweet from ${status.user.screen_name}: ${status.full_text}`\n\t}).join(&quot;\\n\\n&quot;)}\n\n}\n</code></pre>\n<ol start=\"5\">\n<li>The final step then emailed the result of that step to me.</li>\n</ol>\n<p>So that's the workflow as it stands out - every hour (or whatever schedule, or manually if testing), search for a string, format the results, an email it. Now let's enhance it with state!</p>\n<p>First, I modified the step that defined my search string:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\n\t// this.property exports values for use in future steps. We call these &quot;step exports&quot;:\n\t// https://docs.pipedream.com/workflows/steps/#step-exports.\n\tthis.searchTerm = &quot;@raymondcamden&quot;;\n\n\tif($checkpoint &amp;&amp; $checkpoint.lastId) {\n\t\tthis.since_id = $checkpoint.lastId;\n\t}\n}\n</code></pre>\n<p>My modification (ignoring the search term) is to check for $checkpoint and see if I have a <code>lastId</code> key. If so, I export <code>this.since_id</code>. Remember that values you write to the <code>this</code> scope are exported. They act like step output.</p>\n<p>I then modified the Twitter search action to add the <code>since_id</code> param.</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/pds1.png\" alt=\"Action UI\" class=\"lazyload imgborder imgcenter\">\n<p>The next modification was to store a value I could use next time for step ID. I did this in the same step I format the tweets. Note, I could have done a separate step for this. Pipedream's &quot;step&quot; metaphor makes it easy to break things down as much as you want. Much like how you typically write a JavaScript function to do one thing only, you could apply the same to Pipedream too. I'm being lazy though and just keeping it simple.</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\t// Format a message that contains the text of tweets returned by our search,\n\t// which we'll send via email below.\n\n\tif(steps.search_twitter.$return_value.statuses.length === 0 ) {\n\t\t$end(&quot;Ending due to no statuses&quot;);\n\t}\n\n\t// We reference step exports from previous steps here, e.g. steps.search_twitter.$return_value\n\tthis.message = `New ${steps.CONSTANTS.searchTerm} tweets:\n\n\t${steps.search_twitter.$return_value.statuses.map(status =&gt; {\n\treturn `New tweet from ${status.user.screen_name}: ${status.full_text}`\n\t}).join(&quot;\\n\\n&quot;)}\n\t`;\n\n\t//remember last tweet\n\tlet lastId = steps.search_twitter.$return_value.statuses[0].id;\n\t$checkpoint = {\n\t\tlastId:lastId\n\t};\n}\n</code></pre>\n<p>There's two mods here. One is to see if we have any tweets at all. We may not. If so, I use the cool <code>$end</code> feature to immediately end execution. When this is used, it's rendered nice in the UI too:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/pds2.png\" alt=\"Showing how $end is rendered\" class=\"lazyload imgborder imgcenter\">\n<p>Finally, I need to store the ID of the last tweet (first in the array). Notice that I'm using an object for my value. I did that for two reasons. One, I didn't realize Pipedream let you store <em>just</em> a value. Secondly, I decided I may enhance this workflow in the future and store more values. That's me pretending I'm forward thinking and smart (spoiler, I'm not).</p>\n<p>And that's it. If you want to see the full workflow, and copy it to your own account, just hop over here: <a href=\"https://pipedream.com/@raymondcamden/email-me-new-tweets-improved-p_LQCOlq/\">https://pipedream.com/@raymondcamden/email-me-new-tweets-improved-p_LQCOlq/</a>. Thanks again to the folks at Pipedream for answering about 200 emails I sent in the last 48 hours on this and other topics!</p>\n<p>p.s. Ok, way up top I mentioned I had a note about the Twitter API. While the API is generally easy to use, I had trouble getting this exact logic right. I think I did, but I'm not 100% sure. That's not really a Pipedream concern, but I just wanted to be honest about my own uncertainty!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@martinadams?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Martin Adams</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "MadLibs with Vue.js",
		"date":"Tue Apr 07 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/08/madlibs-with-vuejs",
		"content":"<p>It's been a while since I built a game with Vue.js so I figured it was time to take a stab at creating another one. This time I've built an implementation of MadLibs. If you've never heard of this game it's pretty simple. You begin by asking a reader to enter various parts of speech, like a noun, verb, and so forth. You then put their input into a story for (typically) a funny result.</p>\n<p>In researching options for this demo I found a few cool utilities. The first was the <a href=\"https://madlibz.herokuapp.com/api\">Madlibz API</a>, an API that returns a random MadLib. I thought this was neat, but the content was pretty slim and I kinda wanted my final solution to be offline capable.</p>\n<p>Another really cool resource was the <a href=\"https://github.com/SamSamskies/libberfy\">Libberfy Mad Libs API</a>. This one lets you pass text in and it spits out a MaLib version. You should check out his <a href=\"http://samsamskies.github.io/libberfy-demo/\">demo</a> to see it in action. I didn't use this myself as my goal was to have pre-built MadLibs.</p>\n<p>In the end I decided on a simpler approach. I'd have a data file that could be cached offline. I also wanted a data file that was easy to work with. Whenever it comes to stuff like this I always think JSON first, but for this application a text file made more sense. My format was rather simple. Use plain text for your MadLib and use single brackets around things you want to replace. Each MadLib is separated with a --- character. So here's a sample of how it could look:</p>\n<pre><code class=\"language-html\">## My Birthday\n\nToday is {name}'s birthday. They want a {noun} for their birthday so they can {verb} with it. \nBe sure it comes from {foreign country} and it costs at least {number} dollars.\n\n---\n\n## Another One\n\nMy name is {proper noun}.\n\n</code></pre>\n<p>Notice the <code>## My Birthday</code> part? I allow for Markdown in the MadLib as well. The idea was that a non-technical person could easily edit the file to add content. Shoot, I'm technical and I find this much easier than JSON as well.</p>\n<p>The actual application breaks down into three parts. First, a simple title screen:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/ml1.png\" alt=\"Title screen\" class=\"lazyload imgborder imgcenter\">\n<p>I employed <em>all</em> of my incredible design skills there as you can see. I won't share the code for this part as it's just what you see.</p>\n<p>The next route handles prompting for the parts of the MadLib. I show one prompt at a time. A user on Twitter suggested asking a progress bar here and I agree that it would be a good change.</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/ml2.png\" alt=\"Prompt example\" class=\"lazyload imgborder imgcenter\">\n<p>Let's look at the code for this. I'm skipping the styling part but you'll be able to see everything in the repository. (I'll share the link at the end.)</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div v-if=&quot;prompt&quot; class=&quot;promptBlock&quot;&gt;\n        &lt;p&gt;\n        Give me a : \n        &lt;input v-model=&quot;currentPrompt&quot; ref=&quot;promptField&quot; v-on:keyup.enter=&quot;savePrompt&quot;&gt; \n        &lt;button @click.prevent=&quot;savePrompt&quot;&gt;Next&lt;/button&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapGetters } from 'vuex';\n\nexport default {\n  created() {\n    this.$store.dispatch('initMadLib');\n    this.$nextTick(() =&gt; {\n      if(this.$refs.promptField) this.$refs.promptField.focus();\n    });\n  },\n  watch: {\n    prompt(n,o) {\n      console.log('prompt changed',n,o);\n      this.$nextTick(() =&gt; {\n        if(this.$refs.promptField) this.$refs.promptField.focus();\n      });\n    }\n  },\n  computed: {\n    ...mapGetters(['prompts']),\n    prompt() {\n      return this.prompts[this.promptIndex];\n    }\n  },\n  data() {\n    return {\n      promptIndex:0,\n      currentPrompt:'',\n      answers:[]\n    }\n  },\n  methods: {\n    savePrompt() {\n      if(this.currentPrompt === '') return;\n      this.answers.push(this.currentPrompt);\n      this.promptIndex++;\n      this.currentPrompt = '';\n      if(this.promptIndex === this.prompts.length) {\n        this.$store.commit('setAnswers', this.answers);\n        this.$router.replace('/render');\n      }\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>So initially my code called out to my Vuex store to setup a MadLib. Doing this will give me a MadLib set of prompts, an array of things like noun, country, and so forth. In my UI then I can render one at a time and accept user input. You'll see that when I've answered every prompt, I move the user on.</p>\n<p>This was all pretty easy. What took me the most time was getting the darn <code>focus()</code> stuff working correctly. I wanted to make it easier for kids so they wouldn't have to use the mouse as much. I did get it working but I don't believe I've done it the best way possible.</p>\n<p>The final view simply renders the MadLib:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/ml3.png\" alt=\"Render of the ML\" class=\"lazyload imgborder imgcenter\">\n<p>I'll skip the code for this route as well as it just uses a Vuex method to get the rendered HTML. Let's look at that store:</p>\n<pre><code class=\"language-js\">import Vue from 'vue'\nimport Vuex from 'vuex'\nimport marked from 'marked';\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    madlibs:null,\n    madlib:null,\n    answers:null\n  },\n  getters: {\n    prompts(state) {\n      if(state.madlib) return state.madlib.prompts;\n      return [];\n    },\n    render(state) {\n      /*\n      current bug, when i select a new madlib, this runs cuz\n      prompts changes, but answers is []. Hence the new\n      if below. Smells wrong though.\n      */\n      if(state.madlib.prompts.length != state.answers.length) return '';\n      let text = state.madlib.text;\n      for(let i=0;i&lt;state.madlib.prompts.length;i++) {\n        let answer = state.answers[i];\n        let prompt = '{' + state.madlib.prompts[i] + '}';\n        text = text.replace(prompt, '**'+answer+'**');\n        //console.log(`replace ${answer} for ${prompt} in ${text}`);\n      }\n      return marked(text);\n    }\n  },\n  mutations: {\n    setAnswers(state, a) {\n      state.answers = a;\n    },\n    pickMadLib(state) {\n      state.madlib = state.madlibs[getRandomInt(0, state.madlibs.length)];\n      state.answers = [];\n    },\n    setMadLibs(state, data) {\n      state.madlibs = data;\n    }\n  },\n  actions: {\n    async initMadLib(context) {\n      if(!context.state.madlibs) {\n        console.log('need to load madlibs');\n        let result = await fetch('./data.txt');\n        let data = await result.text();\n        let parts = data.split('---');\n        parts = parts.map(p =&gt; fixRawMadLib(p));\n        context.commit('setMadLibs', parts);\n        context.commit('pickMadLib');\n      } else context.commit('pickMadLib');\n\n    }\n  },\n  modules: {\n  }\n})\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nfunction fixRawMadLib(str) {\n  let result = {};\n  // first trim any potential white space around it\n  result.text = str.trim();\n  result.prompts = [];\n  let matches = result.text.matchAll(/{.*?}/g);\n  if(matches) {\n    for(let match of matches) {\n      let prompt = match[0];\n      prompt = prompt.replace(/[{}]/g, '');\n      result.prompts.push(prompt);\n    }\n  }\n\n  return result;\n}\n</code></pre>\n<p>So there's a few things going on here but the main aspects are where I load the MadLibs and when I render one. Loading involves making an XHR request to my text file. I parse it (splitting on <code>---</code>) and then doing some basic parsing of the values within tokens. The result is a MadLib object that has an array of prompts (as well as the original text).</p>\n<p>Rendering then is a simple matter of replacing the tokens with the user's inputs. The final step is passing it through the <code>marked</code> library to convert the Markdown into HTML. Don't forget that when you pass HTML into a value to render for Vue, you need to use the <code>v-html</code> directive:</p>\n<pre><code class=\"language-html\">&lt;div v-html=&quot;render&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>And that's it. You can view the complete source code at <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/madlibs\">https://github.com/cfjedimaster/vue-demos/tree/master/madlibs</a>. I've got a version up and running at <a href=\"https://madlibs-sooty.now.sh/\">https://madlibs-sooty.now.sh/</a>. Note that I did <em>not</em> go ahead and turn it into an offline-capable game. Honestly, I don't have the energy right now. (By the way, it's my birthday. I'm old.) However it wouldn't be too difficult to add that in.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@siora18?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Siora Photography</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "How Pipedream Got Me Excited About SQL Again",
		"date":"Fri Apr 10 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/11/how-pipedream-got-me-excited-about-sql-again",
		"content":"<p>So, I know how I'm <em>supposed</em> to learn something. You go the docs. You start at the beginning. You read to the end. Done. Except... I just don't work that way. I'll definitely go through an introduction and at least attempt to go through the docs one by one, but typically I want to try stuff as soon as I learn. That means leaving the docs, playing with what I learned, and then returning, hopefully, to keep learning. This means I'll sometimes miss interesting things. So for example, I was playing with something on <a href=\"https://pipedream.com/\">Pipedream</a> when I noticed this in the top navigation:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/sql1.png\" alt=\"Top level nav, highlighting SQL\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>SQL? People still use that?</p>\n<p>I'm only kidding of course. I spent many, many years working with SQL when I was primarily doing backend work with ColdFusion. I didn't mind it, but I didn't necessarily miss it either when I started using more NoSQL type solutions like Mongo and IndexedDB. The thing I liked best about object-store type databases is that they made object insertion and updating so much easier. I <em>hated</em> writing INSERT and UPDATE statements in SQL.</p>\n<p>On the other hand, I absolutely <em>loved</em> the power of a SELECT statement. While I know I can do powerful queries in Mongo and IndexedDB, I really appreciated how &quot;expressive&quot; SQL could be.</p>\n<p>So with that in mind, I clicked on the SQL tab and discovered that Pipedream had a <a href=\"https://docs.pipedream.com/destinations/sql/#adding-a-sql-destination\">SQL service</a> baked into the product. The docs do a great job of explaining how it works, but I thought I'd point out some highlights.</p>\n<p>First off - every account has a database they can use to store information. Data is account wide which means one workflow has access to another workflow's data so when naming your tables you want to ensure they are unique.</p>\n<p>Secondly, their services gets rid of the thing I disliked the most about SQL, writing those insert statements. I still remember the first time I stored data in Mongo. I had an object. I stored it. I was done. I freaking loved that. Pipedream's SQL service (which uses a product called <a href=\"https://prestodb.io/\">Preso</a> let's you do the same thing. You take some data:</p>\n<pre><code class=\"language-js\">{\n\tname: &quot;Fluffy&quot;,\n\tbreed: &quot;smelly cat&quot;,\n\tage: 5,\n\tgender: &quot;female&quot;\n}\n</code></pre>\n<p>And you just store it. Done. There are details, of course, on how <a href=\"https://docs.pipedream.com/destinations/sql/#what-happens-when-you-send-data-to-a-sql-destination\">data is mapped</a> and you should check the docs especially if you are trying to store data values, but in general it &quot;just works&quot; and makes it simple to use.</p>\n<p>Speaking of using it, and I'm going to show an example in a second, you can either write Node code to store information or use the SQL destination to handle it for you. The below is a screen shot I &quot;borrowed&quot; from the official docs:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/sql2.png\" alt=\"Example of SQL destination\" class=\"lazyload imgborder imgcenter\">\n<p>Before I get into an example, there's two final details that are important. First, this is not meant to be a permanent data storage solution. The <a href=\"https://docs.pipedream.com/destinations/sql/#data-retention\">data retention</a> docs say that currently your data is only stored for 30 days. That may be a deal breaker but don't forget you've got like an infinite number of other data storage systems you can use. Secondly, you do not yet have &quot;workflow access&quot; to the data. What I mean by that is you can run SQL queries against your data on the site (I'll be showing an example later in this post), but your workflows can't use code to access the data. This is a <a href=\"https://github.com/PipedreamHQ/roadmap/issues/3\">known issue</a> and hopefully something added soon.</p>\n<p>Alright, so how about a simple example, and while we're at it, I can show you another cool Pipedream feature. When you create a new account, one of the workflows you have automatically is &quot;Global Error Workflow&quot;. This is the default error support you have for your account. Notice I said &quot;error support&quot;, not &quot;error handler&quot;, as it doesn't change how your workflows report errors, but rather handles processing the error after the naughty workflow has screwed up. I say &quot;by default&quot; because all new workflows have a setting for it:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/sql3.png\" alt=\"Settings showing error handler support\" class=\"lazyload imgborder imgcenter\">\n<p>And because the Global Error Workflow is, itself, a workflow, you can click in there and check out the code. The workflow has the following steps:</p>\n<ul>\n<li>A trigger bound to error events. You can't do much with this.</li>\n<li>A &quot;filter and format&quot; step that looks at the error and workflow ID and uses logic to only inform you of unique errors per workflow per 24 hours. Yes, you can modify this. Maybe you want to be notified of every error.</li>\n<li>Finally, an email destination.</li>\n</ul>\n<p>So as I said, you can modify this event as you see fit, and I thought it would be cool to store my errors in the database. I wanted my code to run <em>before</em> the filter so I added a Node.js step after the trigger. I used some of the same code from the format step:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tconst dateFormat = require('dateformat')\n\n\tconst { code, msg, ts } = event.error;\n\tconst { id, workflow_id } = event.original_context;\n\n\tlet payload = {\n\t\tworkflow_id, \n\t\ttime: event.original_context.ts,\n\t\tcode, \n\t\tmsg\n\t};\n\n\t$send.sql({\n\t\ttable:&quot;errors&quot;,\n\t\tpayload  \n\t});\n}\n</code></pre>\n<p>The workflow has access to an error object as well as context about the workflow that fired it. (At the time I wrote this, you only have access to the ID of the workflow, not the name. There's an open issue to get access to that too.) I decided that I would log the workflow id, the time, the error code, and the message. I create a simple object called <code>payload</code> and then sent it to the SQL system with <code>$send.sql</code>. And that's it. I love how simple that is.</p>\n<p>Alright, now that I'm storing data, how do I use it? Well my original plan was to build a workflow that would return the data for me and I'd potentially build a dashboard. Unfortunately you can't do that yet. But you can run queries. Here's how that SQL tab looks on the Pipedream site.</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/sql4.png\" alt=\"SQL panel\" class=\"lazyload imgborder imgcenter\">\n<p>They've got a simple editor for you to write SQL in, but it's got nice autocomplete like the code editors do. You can also expand tables on the left hand side to see what columns you have:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/sql5.png\" alt=\"Table properties\" class=\"lazyload imgborder imgcenter\">\n<p>Notice that my date is being stored as a string. Dates are <em>definitely</em> supported so I could make that better, but for now I'm going to wait until I get code access to data. Here's the result of a quick query:</p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/sql6.png\" alt=\"SQL result\" class=\"lazyload imgborder imgcenter\">\n<p>The little downward arrow on the upper right there let's you download your results in CSV. One more quick note about data - your data will not show up for a full minute. This is <a href=\"https://docs.pipedream.com/destinations/sql/#what-happens-when-you-send-data-to-a-sql-destination\">documented</a> but if you are doing quick testing, don't forget.</p>\n<p>Let me know if you've got any questions below, and while I'm not a huge Slack person, consider <a href=\"https://pipedream.com/community\">joining their Slack</a> as the company is really responsive there!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@quinten149?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Quinten de Graaf</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "What are Red Flags to Me as a Developer?",
		"date":"Sun Apr 12 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/13/what-are-red-flags-to-me",
		"content":"<p>This morning I was thinking about developer relations and it occurred to me that there are certain &quot;red flags&quot; I look for when trying out a new product/service. I thought it would be nice to write them up and explain why they are red flags to me. While not specifically related to developer relations, these are things that I tend to think about in my own role and try to exert influence over when I can.</p>\n<p>I want to be clear that this is absolutely an opinion piece. I've worked for, and work for, companies that make these mistakes. Some of the things I'll point out as a red flag are things your company may do, and for good reason. That's ok, but I'm still going to consider it a potential issue when I'm considering your service.</p>\n<p>Developers don't care about your good reasons. They care about getting stuff done.</p>\n<p>I don't expect everyone to agree and I'd love to see your feedback in the comments below. Alright, with that out of the way, here's my list in no particular order!</p>\n<h2>Documentation Behind Signup</h2>\n<p>Simple - don't make me sign up to read documentation. When I see it I know immediately that someone's got a KPI for developer signups and are trying to artificially boost it a bit. I need to be able to browse your docs to see if your solution makes sense, and asking me to create one more account that could be hacked is a barrier to that. I've got a <em>lot</em> more thoughts on documentation that you can read here: <a href=\"https://www.raymondcamden.com/2019/08/14/my-thoughts-on-documentation\">My Thoughts on Documentation</a></p>\n<p>Knowing what your product does and how it works is not a trade secret - make those docs public!</p>\n<h2>Signup Requires a Credit Card</h2>\n<p>This is - probably - the number one thing that makes me reconsider using your service. And I can honestly see why some companies may use it. You may not want to support &quot;tinkerers&quot; and that's fine. But I'll pretty much never play around with a product if I have to give my credit card. You can tell me all you want about how you won't charge it - I'll just do my best to avoid it at all costs.</p>\n<p>Again though - you may <em>specifically</em> want to avoid working with random developers.</p>\n<h2>Timed Trial</h2>\n<p>Another thing I run into quite often are timed trials. I always hesitate when I see this. I look at the trial period - I check my calendar. Will I have time to dig into the product within the time frame? Maybe I'm going to be busy next week. Maybe I'm not busy, so I sign up, and then something crazy happens and I get busy. Basically, I stress over it. You don't want to stress Raymond, do you?</p>\n<h2>Not Using NPM (for the CLI)</h2>\n<p>This is unfair. I get it. Some platforms don't use Node as their development language. Heck, one of the services I've been <em>incredibly</em> happy with lately doesn't use NPM. This is less about NPM and more about onerous installation processes in general. IBM for example, used to have an old school InstallShield installer for their CLI. Even better, it required a restart. About two hours ago I needed to install the CLI again and it was much simpler (even though it wasn't NPM based) so they've definitely improved there.</p>\n<h2>Pricing Obscurity</h2>\n<p>This covers a number of issues. First, I expect it to be real simple to figure out what your service costs. The best is when there is a nice direct API call to cost table. 1K for free, then X cents after that per Y calls. I've seen a lot of bad examples of this. Most recently, I was digging deep into a certain large company's API. They have a per API rate. Then they have different charges for what data you get back in the API calls. All in all, it's the kind of thing you would need a spreadsheet to figure out what you're bill will be.</p>\n<p>In the same area, don't make me dig to find my bill and what cost me money. Azure was (to me) pretty difficult in this respect, although after using it for a while I figured it out. IBM for a while would send me an email saying I had an invoice. I'd log in. Click a few times. Get the PDF and see I owed nothing. It always boggled my mind that they couldn't improve their process such that the email itself couldn't include the total and save me a few clicks. It's a small thing, but it annoyed me.</p>\n<p>And while I'm on a rant a bit, and I <em>know</em> there are commercial reasons against ever doing this, but I wish more services would simply support a &quot;Don't Let me Use Money&quot; option. I.e., I set something up, I use the free tier, and if I forget about it and it <em>would</em> have incurred costs, the service simply disables itself. It's absolutely in the best interest of the company to <em>not</em> do that, but as a developer I sure would appreciate that. If I'm just tinkering and building toys, I can promise you I'd much rather have my toy shut down then to get a 5 dollar bill. I can pay that, I just don't want to!</p>\n<h2>Mac/Unix Only Terminal Commands</h2>\n<p>I get it. Apple makes some darn good machines (I mean, unless you want the keyboard to work, they fixed that, right?) and Unix is a great CLI environment. Windows adding Ubuntu to the OS was one of the biggest reasons I switched back after having been a Mac user for years. But unless I'm mistaken, a huge majority of people are still on Windows. When your documentation assumes a Unix/OSX environment you may be cutting out a significant part of your audience. Normally when I run into this it isn't a huge deal. I can work around it. But it's a red flag to me that you aren't even <em>thinking</em> about your audience.</p>\n<p>This is not scientific, but I can look at the Google Analytics stats for this blog and I have over 60% of my readers coming in on a Windows machine. (Note, I'm not using GA anymore and currently Netlify doesn't report on this metric. But I doubt it shifted significantly in the past few months.)</p>\n<h2>Support Black Holes</h2>\n<p>This is another one that's a bit tricky. If a company has thousands of developers joining every day and aren't actually paying customers, it may be difficult to give them technical support. In general I'm not necessarily concerned about how <em>quick</em> I can get support, but just having a clear <em>direction</em> for what to do. If you have a Support link in your top nav that goes to a contact form that states it may be 5 days until you respond... well that's something. I'll use the form and move on to something else while I wait. But if I see <em>no</em> way to ask for help, no link to a Slack group or StackOverflow tag, then I get worried.</p>\n<h2>What Else?</h2>\n<p>So, what did I forget? Leave me a comment below and feel free to disagree with my list as well.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@neonbrand?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">neONBRAND</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "developer"
            
		]

	},

	{
		"title": "Creating Both HTML and API with Pipedream",
		"date":"Mon Apr 13 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/14/creating-both-html-and-api-with-pipedream",
		"content":"<p>First off, I apologize up front about the title. You don't &quot;Create API&quot;, you create &quot;an API&quot;. No one cares probably but it's bugging me and I can't think of a better alternative. Hopefully I will before I finish the post. (Spoiler, he didn't.) Yesterday I was hanging out in the <a href=\"https://pipedream.com/community\">Pipedream Slack</a> when I asked the team how a person would support running both an API  on Pipedream as well as the HTML in front of it.</p>\n<p>So imagine you've built an incredibly complex API to do, well, who cares. To do something. Doesn't matter but here's my workflow as an API: <a href=\"https://enk542004vp3drh.m.pipedream.net/?name=ray\">https://enk542004vp3drh.m.pipedream.net/?name=ray</a> Change the <code>name</code> value and your response changes.</p>\n<p>Now imagine you want to host an HTML application that makes use of this API. You've got a few options. What follows is a mix of suggestions from Dylan Sather of Pipedream and my own demo code and such.</p>\n<ol>\n<li>Use a &quot;real&quot; hosting provider. Pipedream can absolutely host HTML (see the next suggestion), but if you are building a &quot;site&quot;, you really want to use a service optimized for that, like Netlify and Zeit. Your endpoints have CORS enabled automatically so you can easily hit it from there. I wrote up a quick Vue.js application to demo this:</li>\n</ol>\n<pre><code class=\"language-html\">&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n&lt;p&gt;\n&lt;input v-model=&quot;name&quot;&gt; &lt;button @click=&quot;sendToAPI&quot;&gt;Process&lt;/button&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\nResult: \n&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\nconst app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tname:'',\n\t\tresult:''\n\t},\n\tmethods: {\n\t\tasync sendToAPI() {\n\t\t\tlet resp = await fetch(`https://enk542004vp3drh.m.pipedream.net/?name=${this.name}`);\n\t\t\tlet data = await resp.json();\n\t\t\tthis.result = data.response;\n\t\t}\n\t}\n\n});\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>All this does is call the Pipedream hosted API with input and render it. I then deployed it to Zeit: <a href=\"https://temp-pearl.now.sh/temp.html\">https://temp-pearl.now.sh/temp.html</a>.</p>\n<p>That works just fine.</p>\n<ol start=\"2\">\n<li>Host the HTML with Pipedream. Pipedream workflows can return HTML, even dynamic HTML. Consider this <a href=\"https://pipedream.com/@dylburger/respond-with-html-p_V9C2Kp/edit\">workflow</a>:</li>\n</ol>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\t// Print &quot;Hi there&quot; in the absence of a name\n\tconst { name } = event.query || &quot;there&quot;\n\n\t// See https://docs.pipedream.com/workflows/steps/triggers/#http-responses\n\t$respond({\n\t\tstatus: 200,\n\t\theaders: {\n\t\t\t&quot;Content-Type&quot;: &quot;text/html; charset=UTF-8&quot;\n\t\t},\n\t\tbody: `&lt;html&gt;&lt;h1&gt;Hi, ${name}&lt;/html&gt;`,\n\t}) \n}\n</code></pre>\n<p>As you can see, it inspects the query string to look for a value. It then returns HTML in a template string to return dynamic HTML. (If you're old enough to remember DHTML, it's time for AARP. ;) So we could build a workflow to spit out the HTML I used above:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tlet html = `\n\t&lt;html&gt;\n\t&lt;head&gt;&lt;/head&gt;\n\tEVERYTHING FROM ABOVE WAS HERE\n\t&lt;/body&gt;\n\t&lt;/html&gt;\n\t`;\n\t$respond({\n\tstatus: 200,\n\theaders: {\n\t\t&quot;Content-Type&quot;: &quot;text/html; charset=UTF-8&quot;\n\t},\n\tbody: html,\n\t}) \n\n}\n</code></pre>\n<p>To keep the code listing a bit short I didn't copy the entire string, but you get the idea. Do remember though that if your JavaScript template string itself contains template strings, you need to escape it. I totally knew that. Honest. I deployed this and you can see it here: <a href=\"https://enxfb1rcr2bvdsk.m.pipedream.net/\">https://enxfb1rcr2bvdsk.m.pipedream.net/</a></p>\n<p>This works, but honestly feels a bit wasteful.</p>\n<ol start=\"3\">\n<li>Support both HTML and data in one workflow. A final option to consider is having one workflow support both the HTML as well as the data itself. Your workflow code has access to the entire HTTP request. You've already seen me use the query string, but you can also check the path (/foo) as well as any request headers and form data. So in theory you could do something like, &quot;if the request content type is for html, return it, if it's for json, return data&quot;.</li>\n</ol>\n<p>This <a href=\"https://pipedream.com/@dylburger/generate-an-rss-feed-from-http-post-requests-retrieve-via-get-request-p_n1CrQG/edit\">workflow</a> shows an example where if a request is POST, data is added, and if it's GET, HTML is returned. We can build our own version that has these steps:</p>\n<ul>\n<li>Start with an HTML trigger to give us a URL</li>\n<li>If method is GET, return the HTML string.</li>\n<li>If method is POST, assume it's an API call.</li>\n</ul>\n<p>I built a <a href=\"https://pipedream.com/@raymondcamden/html-api-demo-p_RRCdjB/edit\">workflow</a> that does this. It has 3 steps, with the first one just being the HTTP trigger. The second step handles GET:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tif(event.method === 'GET') {\n\t\tlet html = `\n\t\tDELETED STUFF....\n\n\t\t\t\tasync sendToAPI() {\n\t\t\t\t\tlet resp = await fetch(&quot;${event.url}&quot;, {\n\t\t\t\t\t\tmethod:&quot;post&quot;,\n\t\t\t\t\t\tbody: JSON.stringify({name:this.name})\n\t\t\t\t\t});\n\t\t\t\t\tlet data = await resp.json();\n\t\t\t\t\tthis.result = data.response;\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t\t`;\n\t\t$respond({\n\t\t\tstatus: 200,\n\t\t\theaders: {\n\t\t\t&quot;Content-Type&quot;: &quot;text/html; charset=UTF-8&quot;\n\t\t\t},\n\t\t\tbody: html,\n\t\t});\n\t\t$end();   \n\t}\n}\n</code></pre>\n<p>I'm not a big fan of &quot;surround the entire body with an IF thing&quot; but it gets the job done. Also note that in my HTML (which I trimmed a bit), I switch my URL to <code>${event.url}</code> so I can dynamically pick up the current workflow URL.</p>\n<p>The next step handles the POST:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tif(event.method === 'POST') {\n\t\tlet name = 'Nameless';\n\t\tif(event.body.name) name = event.body.name;\n\t\t$respond({\n\t\t\theaders: {\n\t\t\t\t&quot;Content-Type&quot;:&quot;application/json&quot;\n\t\t\t},\n\t\t\tbody: {&quot;response&quot;:`Hello ${name}`}\n\t\t});\n\t}\n}\n</code></pre>\n<p>It's virtually equal to my initial logic (which I don't ever shared) except it now looks for POST data instead of a query string value. I encourage you to check out the <a href=\"https://pipedream.com/@raymondcamden/html-api-demo-p_RRCdjB/edit\">workflow</a> for the complete code. You can run the demo here: <a href=\"https://enek3dg6pwsn2od.m.pipedream.net/\">https://enek3dg6pwsn2od.m.pipedream.net/</a></p>\n<h3>My Recommendation</h3>\n<p>Ok, so this was mostly me just playing around with Pipedream and seeing what I <em>could</em> do. Honestly while you can serve HTML with Pipedream, I'd more often than not use a &quot;proper&quot; HTML serving platform like Zeit or Netlify. It's cool that Pipedream is flexible enough to handle this though!</p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "Processing Email Sentiment with Pipedream",
		"date":"Tue Apr 14 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/15/processing-email-sentiment-with-pipedream",
		"content":"<p>Ok, a quick spoiler. Today's <a href=\"https://pipedream.com\">Pipedream</a> post isn't really that interesting by itself,\nbut I wanted a way to highlight a couple of cool features while working on an example that I hope folks will enjoy. I've done blog posts in the past about text sentiment analysis. I.e., what is a person talking about and what moods/emotions/etc are being used. In the past I've used IBM's Watson APIs for this and I've also used Microsoft's. Both have pretty darn cool APIs, but I thought I'd try something else, the npm <a href=\"https://www.npmjs.com/package/sentiment\">Sentiment</a> module.</p>\n<p>This is an entirely opensource, Node-based text analysis tool that looks at input and looks specifically for positive and negative words. It supports multiple languages as well as the ability to customize what's positive or negative.</p>\n<p>Before I show using it, how did I find it? A day or so ago I noticed the &quot;Explore&quot; link in the top navigation of the Pipedream site. That brings you to <a href=\"https://pipedream.com/explore\">https://pipedream.com/explore</a>.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/es1.png\" alt=\"\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This page has a bunch of shared workflows that you can look at it, including one named <a href=\"https://pipedream.com/@pravin/p_zACkav/readme\">Real-Time Sentiment Analysis</a>. Once you open up a workflow, you can click the big green COPY button to put a copy in your account and play around with it.</p>\n<p>So that's how I found the Sentiment package. Cool. I decided to build a demo based on customer service email processing. Imagine for a moment you've set up a &quot;support@yourcompany.tld&quot; email address. You may want to flag especially angry emails so that someone responds to them quicker. I built a demo of this workflow like so.</p>\n<p>First, I added an email trigger. This gives you a unique email address that will be checked often. When it gets new email, it will start the workflow.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/es2.png\" alt=\"Example email trigger\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I next built a step that would serve to set up my constant values. I learned this technique from the Pipedream folks. It's not required - remember you can do everything in one step if you want - but I like this breakdown. In this case I've got one constant, the highest level I'll ignore. I.e., everything below this level is considered too angry. The Sentiment package returns a value from -5 to 5 based on how negative or positive it is.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/es3.png\" alt=\"Constants step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Next I built a step to do the analysis. This is a Node.js step with just a few lines of code:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tconst Sentiment = require('sentiment');\n\tconst sentiment = new Sentiment();\n\tthis.sentiment = sentiment.analyze(steps.trigger.event.text);\n}\n</code></pre>\n<p>Basically it just runs the analysis and exports it by saying it to the <code>this</code> scope.</p>\n<p>My next step does two things. It does a quick check to see if the sentiment is above our threshold, and if not, if formats text for mailing.</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tif(steps.analyze_text.sentiment.comparative &gt; steps.constants.THRESHOLD) $end('Not unhappy enough.');\n\n\tlet from = '';\n\tif(steps.trigger.event.from &amp;&amp; steps.trigger.event.from[0]) {\n\tfrom = steps.trigger.event.from[0].address;\n\tif(steps.trigger.event.from[0].name) from += ` (${steps.trigger.event.from[0].name})`;\n\t}\n\n\tlet subject = 'No subject';\n\tif(steps.trigger.event.subject) subject = steps.trigger.event.subject;\n\n\tthis.subject = 'Angry Email Report!';\n\tthis.body = `\n\tAngry Email Report\n\n\tSent from: ${from}\n\tSubject: ${subject}\n\tMessage Body: \n\t${steps.trigger.event.text}\n\t`\n}\n</code></pre>\n<p>The only thing probably interesting there is I do a bit of inspection of the from values in the email and try to display it a bit nicer. I also check for a subject. If it's blank I use a default.</p>\n<p>The last step is to have it email me. I configure it with the values I used earlier:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/es4.png\" alt=\"Email config step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>That just leaves testing! I sent a few angry emails (trust me, I've got some pent up quarantine rage going on) and watched as the workflow executed and processed my emails. Here's an example:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/es5.png\" alt=\"Sample email report\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Of course, for my initial testing, I did something a bit quicker than writing email, and you should definitely make note of it. Workflows have a &quot;Send Test Event&quot; button and on the right is a blue pencil icon:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/es6.png\" alt=\"\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>If you click the pencil, you can edit the test event data. I did this to modify the content of the test:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/es7.png\" alt=\"Editing test events\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This is a very cool feature. Do note though that for this particular trigger, the &quot;shape&quot; of the event data doesn't quite match what you get when you send a real email. A <a href=\"https://github.com/PipedreamHQ/roadmap/issues/424\">bug</a> has already been opened for this and it may be fixed by the time you read this post.</p>\n<p>I hope this post showed you a few new things about Pipedream and if you want to fork my workflow, you can find it here: <a href=\"https://pipedream.com/@raymondcamden/email-sentiment-warning-p_ZJC9vo/edit\">https://pipedream.com/@raymondcamden/email-sentiment-warning-p_ZJC9vo/edit</a></p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@musicfox?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">MusicFox Fx</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "Building a Reddit Workflow with Pipedream",
		"date":"Sun Apr 19 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/20/building-a-reddit-workflow-with-pipedream",
		"content":"<p>Almost four years ago I <a href=\"https://www.raymondcamden.com/2016/07/05/new-poc-dailyreddit\">blogged</a> about a demo I built using <a href=\"https://www.reddit.com/\">Reddit's</a> API. The demo was a multi-user application that made use of Mongo for persistence and Passport.js for user authentication. You would login, select subreddit's to subscribe to, and then once a day it would email you the new posts from that subreddit.  This was built in a &quot;traditional&quot; Node.js style with a server running full time to process requests. I thought it would be fun to build this again (although slightly different) using <a href=\"https://pipedream.com\">Pipedream's</a> support for working with the Reddit API. I built two different versions of a simple workflow I'd like to share below.</p>\n<p>So before I begin, how does Pipedream support Reddit? Currently Pipedream doesn't have a &quot;service explorer&quot; or a way to see what pre-built actions are available. What I've been doing is going to a test workflow I use for, well, testing, and click to add a new action. I then browse what's available. If you know what you want, you can click the name of the app to filter. Apps will be at the end of the list of actions:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit1.png\" alt=\"Action/app display\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>After you click it, the actions are then filtered to items within it. In the case of Reddit, this is quite a bit:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit2.png\" alt=\"List of actions\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can type to filter even more. For my case I knew I wanted to get new posts so typing &quot;new&quot; was enough:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit3.png\" alt=\"New\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Finally, once you select the action, note that the you probably still need to know about the API itself. Sometimes the properties are obvious, but sometimes they aren't. So in the example above, I knew what Subreddit meant but wasn't sure about the value of &quot;after&quot;:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit4.png\" alt=\"Property examples\" class=\"lazyload imgborder imgcenter\">\n<p>\n<p>So in that case, I simply used the <a href=\"https://www.reddit.com/dev/api/\">Reddit API documentation</a>.</p>\n<p>Alright, so with that out of the way, let me talk about what I built.</p>\n<h3>Reddit Demo Version One</h3>\n<p>For my first workflow, I attempted to recreate my Node POC in a simpler manner. When you add an application to your Pipedream workflow and authenticate it, it's tied to your account, so instead of trying to build something multi-user with Mongo and all that, I settled on a simpler idea.</p>\n<ul>\n<li>Get the new posts from one subreddit.</li>\n<li>Email them to me.</li>\n</ul>\n<p>My <a href=\"https://pipedream.com/@raymondcamden/daily-reddit-posts-p_dDCYOd/edit\">workflow</a> ended up with the following steps:</p>\n<ul>\n<li>A CRON trigger set to run once a day.</li>\n<li>A Node.js trigger to specify the subreddit name:</li>\n</ul>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tthis.reddit = 'Acadiana';\n})\n</code></pre>\n<ul>\n<li>Next, I used the &quot;get new&quot; Reddit action. While this supports an &quot;after&quot; filter, that relies on the ID of a post. There is no way to apply a date filter. I figured I'd fix that later. All I specified here then was the subreddit:</li>\n</ul>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit5.png\" alt=\"Configured step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<ul>\n<li>As I said above, there's no way (that I know of) to filter to today via the API. So I added a Node.js step to filter to posts no more than 24 hours old.</li>\n</ul>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\t/*\n\tDate.now is ms, for reddit posts, created_utc is seconds, so convert our value to seconds\n\t*/\n\tconst now = Date.now()/1000;\n\t// and 24 hours in seconds then is 24 * 60 * 60\n\tconst maxtime = 24 * 60 * 60;\n\tthis.currentPosts = steps.get_new.$return_value.data.children.filter(p =&gt; {\n\t\tlet diff = now - p.data.created_utc;\n\t\treturn diff &lt; maxtime;\n\t}).map(p =&gt; {\n\t\treturn p.data;\n\t});\n\tconsole.log('i now have '+this.currentPosts.length+' posts');\n})\n</code></pre>\n<p>Let me just say I'm very proud of my <code>filter</code> and <code>map</code> usage there. Almost Google tech interview quality I'd say. ;)</p>\n<ul>\n<li>The next step handles creating my value to be used in email. I used some of the logic from my <a href=\"https://www.raymondcamden.com/2016/07/05/new-poc-dailyreddit\">old post</a> in terms of handling things like recognizing when there's a proper thumbnail.</li>\n</ul>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\n\tlet dotLeft = function(s, len) {\n\tif(s.length &lt; len) return s;\n\treturn s.substring(0, len)+'...';\n\t};\n\n\tthis.subject = `Daily Reddit Report for ${steps.constants.reddit}`;\n\tthis.body = `\n\t&lt;h2&gt;Daily New Posts for ${steps.constants.reddit}&lt;/h2&gt;\n\t&lt;p/&gt;\n\t`;\n\tsteps.filter_to_today.currentPosts.forEach(p =&gt; {\n\t\t// only show thumbnails when they aren't &quot;self&quot;,&quot;default&quot;,&quot;nswf&quot;\n\t\tif(p.thumbnail === 'self' || p.thumbnail === 'default' || p.thumbnail === 'nsfw') delete p.thumbnail;\n\t\tlet text = '';\n\t\tif(p.is_self) text = dotLeft(p.selftext,200);\n\t\tthis.body += `\n\t\t&lt;p&gt;\n\t\t${ p.thumbnail ? '&lt;img src=&quot;'+p.thumbnail+'&quot; align=&quot;left&quot; style=&quot;margin-right:10px&quot;&gt;':''}\n\t\t&lt;b&gt;Title: ${p.title}&lt;/b&gt;&lt;br/&gt;\n\t\tURL: &lt;a href=&quot;${p.url}&quot;&gt;${p.url}&lt;/a&gt;&lt;br/&gt;\n\t\tAuthor: ${p.author}&lt;br/&gt;\n\t\t&lt;br clear=&quot;left&quot;&gt;\n\t\t${text}\n\t\t&lt;/p&gt;  \n\t\t`\n\t});\n\n}\n</code></pre>\n<p>Be sure to make note of that epic ternary operator in there. I'm a 10X developer, 9X minimum.</p>\n<ul>\n<li>And then finally, I added the email step. By default, Pipedream's email step requires the text of an email but makes the HTML property optional. To keep things easier, I supplied my HTML value for both, which is <em>not</em> what you would want to do. Since I know I can read HTML email, I figured that was ok.</li>\n</ul>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit6.png\" alt=\"Email step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And that was it. Now I've got a daily report for my favorite subreddit (it's for my local area) that shows up in my inbox once a day.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit7.png\" alt=\"Email example\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can view (and copy!) the complete workflow here: <a href=\"https://pipedream.com/@raymondcamden/daily-reddit-posts-p_dDCYOd/edit\">https://pipedream.com/@raymondcamden/daily-reddit-posts-p_dDCYOd/edit</a></p>\n<h3>Reddit Demo Version Two</h3>\n<p>The first iteration was nice, but a bit limited. For the second version I decided to kick it up a notch. I wanted a version where the email contained new posts from ally of my subscribed subreddits. Luckily Pipedream makes that part trivial as they have an action for that already. All I needed to do was put it together. But that raised a new issue. I knew I could take my first workflow and turn it into an API. Pass in a subreddit name and return the posts as JSON instead of emailing them.</p>\n<p>But Pipedream doesn't support the idea of &quot;loop over this array and execute a step for each&quot; - at least not yet. Given that I knew I'd have a workflow as an API, I decided to use two workflows. One for the API, and one to handle making HTTP requests to that endpoint and &quot;collect&quot; the results.</p>\n<p>Let's start with the API. I began with a HTTP trigger which gave me a URL to hit. I then added the same &quot;get new&quot; Reddit action and tied the subreddit name to the query string:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit8.png\" alt=\"Reddit step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Note that after I had tested my URL with a query string value (<code>subreddit</code>), the editor was smart enough to suggest it when I added the step. It even (although it's not in this screen shot) showed a sample value. This was freaking cool and super helpful.</p>\n<p>My next step was the &quot;filter and return&quot; step and used this code:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\t/*\n\tDate.now is ms, for reddit posts, created_utc is seconds, so convert our value to seconds\n\t*/\n\tconst now = Date.now()/1000;\n\t// and 24 hours in seconds then is 24 * 60 * 60\n\tconst maxtime = 24 * 60 * 60;\n\tlet result = steps.get_new.$return_value.data.children.filter(p =&gt; {\n\tlet diff = now - p.data.created_utc;\n\treturn diff &lt; maxtime;\n\t}).map(p =&gt; {\n\treturn p.data;\n\t});\n\n\t$respond({\n\t\tstatus: 200,\n\t\tbody: { result }, // This can be any string, object, or Buffer\n\t});\n\n}\n</code></pre>\n<p>And that's it. Now if I hit <code>myurl?subreddit=Acadiana</code> I get a JSON dump of new posts for that subreddit. I'd share a dump but it's rather large. You can view/copy this workflow here: <a href=\"https://pipedream.com/@raymondcamden/daily-reddit-api-p_WxCkrw/edit\">https://pipedream.com/@raymondcamden/daily-reddit-api-p_WxCkrw/edit</a></p>\n<p>So that's the API. To build my &quot;real&quot; workflow, the one handling gathering and emailing data, I built a new CRON-based workflow. For my second step, I used the &quot;get my subscribed subreddits&quot; action. I only needed to supply &quot;subscriber&quot; as an argument:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit9.png\" alt=\"My subs actin\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The next step is a Node one. This handles taking the results from the previous step and making the asynchronous calls to my API:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\n\tconst axios = require(&quot;axios&quot;);\n\n\t// simplify things a bit\n\tlet mysubs = steps.get_subreddits_mine_where.$return_value.data.children.map(s =&gt; {\n\treturn s.data;\n\t})\n\n\t// title, displayName\n\tlet promises = [];\n\tmysubs.forEach(sub =&gt; {\n\t\tlet url = 'https://engtbib844m2yqb.m.pipedream.net?subreddit='+sub.display_name;\n\t\tpromises.push(axios({method:'get', url}));\n\t});\n\n\tlet result = await Promise.all(promises);\n\t// global post array we can sort in a bit\n\tthis.posts = [];\n\n\tfor(let i=0;i&lt;result.length;i++) {\n\t\tthis.posts = this.posts.concat(result[i].data.result);\n\t}\n\n\tthis.posts.sort((a,b) =&gt; {\n\t\tif(a.created_utc &lt; b.created_utc) return 1;\n\t\tif(a.created_utc &gt;b.created_utc) return -1;\n\t\treturn 0;\n\t});\n\n\tconsole.log('total posts', this.posts.length);\n}\n</code></pre>\n<p>Note I also sort the posts by date. I think some people may prefer their &quot;report&quot; grouped by subreddit. I kind of liked the posts mixed up. The next step handled creating the email. I'm going to skip sharing the code because you can see it when I share the workflow and the only real change was to include the name of the subreddit. The final step was just the email action. And that's that.</p>\n<p>From my initial workflow to this one, it took me maybe one hour total. I loved that I had that flexibility and could basically just drop in steps like LEGO pieces. Here's a screen shot of the email:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit10.png\" alt=\"Final email\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can view/copy my workflow here: <a href=\"https://pipedream.com/@raymondcamden/daily-reddit-posts-2-p_ZJC9x9/edit\">https://pipedream.com/@raymondcamden/daily-reddit-posts-2-p_ZJC9x9/edit</a></p>\n<p>I hope these examples were helpful, and keep in mind I'm still a new Pipedream user so (most likely) there's nicer ways of doing what I demonstrated. Leave me a comment below if you've got any questions!</p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "Building a Google Sheets Twitter Bot with Pipedream",
		"date":"Sun Apr 26 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/27/building-a-google-sheets-twitter-bot-with-pipedream",
		"content":"<p>This is something that's been kicking around my head for a week or so and today I thought I'd try it. It ended up taking about 20 minutes total and 10 lines of code, of which 5 are a function I copied and pasted. While what I built is kind of trivial, I'm blown away by how much was done by built-in functions with Pipedream and how little work I had to do myself. In fact, most of my time was spent in setting stuff up <em>outside</em> of Pipedream itself. Alright, so what did I build?</p>\n<p>I've got a kind of fascination (ok, a problem) with building Twitter bots, especially those that share random content. Earlier this month I <a href=\"https://www.raymondcamden.com/2020/04/02/building-a-twitter-bot-in-pipedream\">created</a> a Twitter bot that uses Wikia APIs to scrape GI Joe content. One problem with my &quot;random bots&quot; is that, well, they're random, and I don't have full control over the data itself. It's possible there's something on the <a href=\"https://gijoe.fandom.com/wiki/Joepedia_-_The_G.I._Joe_Wiki\">GI Joe</a> wiki that I'm not aware of. And since it's a wiki, even if I check every single page now, in the future something may be added that I don't want my bot to pick up.</p>\n<p>So I thought - what if the random bot was tied to content that I had full control over? Also - what if the content was in an easily editable form, something a non-developer could use. It occurred to me that Google Sheets could be great for this. With that in mind,  built <a href=\"https://twitter.com/moonpicbot\">moonpicbot</a>. This is a bot that shares pictures of the moon driven by public domain NASA images.</p>\n<blockquote class=\"twitter-tweet\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">Triptych of the Moon <a href=\"https://t.co/VNCEcTwymp\">pic.twitter.com/VNCEcTwymp</a></p>&mdash; moonpicbot (@moonpicbot) <a href=\"https://twitter.com/moonpicbot/status/1254852860564520960?ref_src=twsrc%5Etfw\">April 27, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>While NASA may have an API (I'm pretty sure they do), I instead built a Google Sheet where I manually selected some pictures I thought were nice.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/moon1.png\" alt=\"Google Sheet screenshot\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I then registered my bot which is mainly painless now that I've done it multiple, multiple times. ;)</p>\n<p>With my data in place, I designed the following workflow in Pipedream:</p>\n<ol>\n<li>Use a CRON trigger to schedule the tweets. Currently mine's once every two hours.</li>\n<li>Connect and read my Google Sheet.</li>\n<li>Select a random row.</li>\n<li>Upload the image.</li>\n<li>Tweet the text and the image.</li>\n</ol>\n<p>Alright, here's comes the cool part. Pipedream handled steps 1, 2, 4, and 5. I've shown their CRON trigger before, but here's the Google Sheet action. I connected it to my app and pasted in the sheet ID:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/moon2.png\" alt=\"Google Sheet step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Make note of the range. My sheet uses two columns so my range goes from A2 in one corner (A1 is the header) to B999 in the other. That means if I ever have one thousand rows I'll need to edit the range. That will take about 5 seconds so I'm not concerned, and again, since I'm manually controlling the data for this bot, I'll know.</p>\n<p>Step 3 is where I wrote code:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tfunction getRandomIntInclusive(min, max) {\n\t\tmin = Math.ceil(min);\n\t\tmax = Math.floor(max);\n\t\treturn Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive \n\t}\n\n\tlet selectedRow = steps.get_values.$return_value.values[getRandomIntInclusive(0,steps.get_values.$return_value.values.length-1)];\n\tthis.image = 'https://' +selectedRow[0];\n\tthis.text = selectedRow[1];\n\t// hard coded for now\n\tthis.mimetype = 'image/jpeg';\n}\n</code></pre>\n<p>That's a bit over ten lines of which about half is a function to handle getting the random value. I slightly modify the image to include https (the NASA site didn't have this) and hard code a mimetype.</p>\n<p>And that's it. I'm done. I added a <code>upload_media_to_twitter</code> step and then a <code>post_tweet</code> step. I could share this sheet now with a non-technical user and they could control the bot as they see fit. You can see, and fork, the entire workflow here: <a href=\"https://pipedream.com/@raymondcamden/random-moon-p_WxC9jR/edit\">https://pipedream.com/@raymondcamden/random-moon-p_WxC9jR/edit</a></p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@sannisahil?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Sanni Sahil</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "My Tech Stack (So Far) in 2020",
		"date":"Tue Apr 28 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/04/29/my-tech-stack-so-far-in-2020",
		"content":"<p>From time to time I like to share my current tech stack, both in terms of what I use for development as well as what I use in production. It's been a while since I did this and a few days ago someone reached out and asked me about it:</p>\n<blockquote>\nHello Raymond, I've read your ColdFusion blog for a while now and found it quite helpful. Lately it seems like you have largely switched to Node and Vue for back end and front end development respectively. I wanted to ask why you picked Node and Vue rather than some of the other back end frameworks like Django, Spring, and Rails or front end frameworks Angular and React. My apologies if you have already made a post discussing this but I am very curious.\n</blockquote>\n<p>Let me start with my local development platform.</p>\n<h2>Operating System - Windows 10</h2>\n<p>I've been a Windows user for a few years now (and long ago of course). I started to get a bit dissatisfied with Apple a while ago and seeing WSL (Windows Subsystem for Linux) at a conference was all it took to push me back to it. It certainly is not perfect, but it works for me. I use the <a href=\"https://insider.windows.com/en-us/\">Windows Insider Slow Ring</a> version to preview new features and generally it's been stable. I also liked that it gave me more choices in hardware. And on that note...</p>\n<h2>Laptop - Dell XPS 15</h2>\n<p>Initially my switch back to Windows was with the Surface Book (and then the Surface Book 2). The Surface Book is an incredible machine. I used it at some conference for a few minutes and immediately fell in love with the keyboard and just dug the machine in general. While I liked it, I realized I <em>never</em> used one of the core features - separating the screen from the keyboard. I'm one of those people where if I don't have my phone/tablet in a protector of some sort, I just don't use it. I'm paranoid I'm going to drop and shatter my device. (Oddly enough, I <em>did</em> drop my Surface Book, the complete unit, and had to send it in for repairs.) Given that it felt like I was paying for functionality I didn't want, I decided to go with Dell. Before I had switched to Macs, I was primarily a Dell person and while I've had trouble with their support in the past, I generally liked their hardware.</p>\n<p>The XPS 15 is an amazingly fast machine with a great screen. My only real complaint is the sound. While I don't expect a lot from a laptop, but sounds really muffled, especially when it's on my laptop. Of course headphones remove that problem. I've also got a Dell desktop that I use when I'm not on the road, but with Corona, I've been 100% (mostly) laptop based while the kids are around. I'm going to replace that desktop with a newer version later this year.</p>\n<h2>Editor - Visual Studio Code</h2>\n<p>I've been using <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> since it first came out and honestly I'm kinda blown away by how good it is. As with Windows itself, I use the Insider version so I can get newer features sooner. In the two years (I think) I've used Insiders, I've only had to &quot;revert&quot; to the mainline Studio version once or twice which I think is a pretty amazing record.</p>\n<p>I was a huge <a href=\"http://brackets.io/\">Adobe Brackets</a> fan, but Adobe has left that to die unfortunately. They did have a recent release, but in general development has slowed to a crawl. (Looking at their blog, they had two releases in 2019. Two.)</p>\n<p>The only thing I miss about Brackets is that extension development was somewhat simpler. I do have a few extensions released for Code so it's not impossible to do at all, just not... easy. Speaking of extensions:</p>\n<h2>Editor Extensions</h2>\n<p>The extensions I use tend to fluctuate a bit, and honestly, looking at my extension list now there's some I simply forgot I installed. I'll try to list the ones I actually know I use on a semi-regular basis.</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=bungcip.better-toml\">BetterTOML</a> - literally just for when I'm editing toml files related to Netlify.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ilich8086.ColdFusion\">coldfusion</a> - for when I want to pretend it's 2005 and I still write ColdFusion. Ok, that was snarky. I do still write ColdFusion from time to time and this extension provides basic language support.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=raymondcamden.htmlescape-vscode-extension\">Escape HTML</a> - my extension! It lets you select code and will output (in a new panel) the escaped HTML version. I use this in blogging.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one\">Markdown All in One</a> - a great extension for folks who write a lot of Markdown.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock\">Peacock</a> - fun little extension that can automatically change the Window colors of your Code editor. Nice when you've got multiple windows open and need to differentiate between them.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=pnp.polacode\">Polacode</a> - I don't use this often, but it provides screenshots of code. I'll use it if I'm building with Powerpoint, but lately I've been back on the Reveal.js bandwagon.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ban.spellright\">Spell Right</a> - for spell checking. I do a <em>lot</em> of technical writing in Code. Heck, probably more than I write code.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=octref.vetur\">Vetur</a> - for Vue.js support.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=jumpinjackie.vscode-map-preview\">VSCode Map Preview</a> - for GeoJSON support in Code.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.wordcount\">Word Count</a> - for - wait for it - word counts. Again, I do a heck of a lot of technical writing.</li>\n</ul>\n<h2>Browser - Microsoft Edge</h2>\n<p>I was a Firefox user for some time (and have a huge amount of respect for Firefox) in general, but decided to give <a href=\"https://www.microsoft.com/en-us/edge\">Edge</a> a try when they switched to the Chromium engine. I was pleasantly surprised. It seems to be much nicer in terms of memory management than Chrome was (and yeah, I get that it's typically the fault of extensions, pages, etc, but still) and I just like it. Feel fresh. Ok, that's kinda lame and not very technical, but it is what it is. Initially I ran into a few bugs. For example, I couldn't paste in an image into a new tweet on TweetDeck, but that fixed itself over time. (Maybe it was an issue in TweetDeck, not Edge.) In general, everything just seems to work.</p>\n<p>Oh, and yeah, I use TweetDeck, with the Better TweetDeck extension, in &quot;install from site&quot; version. It's basically the desktop PWA so it has it's own chrome. I prefer that to it taking a tab in my browser.</p>\n<h2>Command Line - Microsoft Terminal</h2>\n<p>I <em>love</em> the new <a href=\"https://github.com/microsoft/terminal\">Windows Terminal</a> program. I was initially excited about it because it added tabs, but it's a great little app for multiple reasons. I love how easy it is to configure it, I love having WSL tabs and cmd.exe tabs in the same window, it's just great. You can find other terminal programs with tabs, but none of them felt right to me.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/stack1.png\" alt=\"Windows terminal\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I used <a href=\"https://hyper.is/\">Hyper</a> for a while, but formatting issues creeped in that never seemed to get fixed. It basically became unusable to me.</p>\n<p>So that's what I use locally, what about in production, or, as they say - the cloud....</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/stack2.jpg\" alt=\"The Cloud\" class=\"lazyload imgborder imgcenter\">\n</p>\n<h2>Static Site Generator - Eleventy</h2>\n<p>I <a href=\"https://www.raymondcamden.com/2019/10/12/why-im-digging-eleventy\">first discovered</a> Eleventy back in October, and it didn't take long for me to really like it. To the point that I <a href=\"https://www.raymondcamden.com/2020/02/27/raymondcamdencom-now-powered-by-eleventy\">switched</a> my generator for this blog to Eleventy in February. I love the flexibility and that it's built on Node. You can read more about my thoughts on Eleventy at my <a href=\"https://www.raymondcamden.com/tags/eleventy/\">tag page</a> for it. Previous generators I've used have either been too constricting (Hugo) or used tech I didn't care for (Jekyll, and in that case it was Ruby).</p>\n<h2>JavaScript Library - Vue.js</h2>\n<p>Because React and Angular suck. I'm joking, honest! OK, actually, not really. I tried React and didn't like it. It just felt weird to me, although obviously it's a successful, powerful framework and is easily the most popular one. I used to like Angular quite a bit, but it's big 2.0 shift really felt like it was poorly handled. I like the update, but everything just seemed to get messy for a while and it was a turn off.</p>\n<p>If all of this sounds personal and arbitrary, it is.</p>\n<p>I fell in love with Vue for a few reasons. The biggest is that it felt like something I could use for progressive enhancement, or to be less fancy, to just add a bit of interactivity to a web page.</p>\n<p>So remember in the days before everything was an app? Remember when someone would have an existing web page and it just needed some interactivity? I do. It feels like you don't hear people talking about that anymore. It's all about the build process and single page applications. While that's important, it's also not the only way to use client-side scripting.</p>\n<p>Vue handles both &quot;simple page interactivity&quot; and &quot;full on hard code SPA&quot; beautifully.</p>\n<p>I also just dig Vue's syntax. Being able to use a template language in HTML feels natural. The way Vue sets up an application just feels natural.</p>\n<p>Much like how ColdFusion used to feel like a great platform for people who weren't &quot;traditional&quot; developers, Vue also feels very friendly to those of us who couldn't pass a Google interview coding test on our best day.</p>\n<h2>Hosting - Netlify</h2>\n<p>Simple - <a href=\"https://www.netlify.com/\">Netlify</a> is the gold standard for hosting static web sites. It's support of the JAMstack in general is incredible and I've yet to see anything that comes even close. You've got great GitHub integration, support for form processing, post processing of CSS, analytics, and serverless functions.</p>\n<p>I use Zeit, now <a href=\"https://vercel.com/\">Vercel</a> for some projects too, and in fact, I generally prefer to put my &quot;toys&quot; up there and save Netlify for my &quot;real&quot; projects.</p>\n<p>I also use Amazon S3 and CloutFront for my images. That keeps my GitHub repo a bit smaller.</p>\n<h2>Server Side Language - Node.js</h2>\n<p>Last but not least, is Node.js for the server. While I don't build &quot;apps&quot; anymore in Node (Express was great for this), it's my language of choice for any serverless functions I need, and heck, any scripts at all I use in my development. Since I do so much client-side scripting, being able to use the same syntax on the server just &quot;flows&quot; better for me.</p>\n<p>ColdFusion treated me well for over a decade, but for a long time I've not been happy with the direction Adobe is taking the product. <a href=\"https://lucee.org/\">Lucee</a> is a great open source alternative and <a href=\"https://www.ortussolutions.com/\">Ortus Solutions</a> have some amazing products for ColdFusion development, it just doesn't fit me as a developer anymore. I would not recommend people use ColdFusion for new projects, but certainly would understand someone learning it for maintenance work.</p>\n<p>For more information about my switch to Node, see my <a href=\"https://www.raymondcamden.com/2018/08/10/nodejs-for-the-nonnodejs-developer\">article</a> from 2018 on the topic.</p>\n<h2>Misc</h2>\n<p>A few more things not really related to my job.</p>\n<ul>\n<li>I use an Pixel 3 XL for my phone as I was kinda bored with Apple devices.</li>\n<li>But I use an Apple iPad for my tablet, which honestly only gets used when I exercise or fly (in other words, it's just a media viewer for me.)</li>\n<li>I use the heck out of <a href=\"https://www.plex.tv/\">Plex</a> for my locally owned legally acquired media. It has clients for <em>everything</em> including my smart TV.</li>\n</ul>\n<p><i>Header photo by <a href=\"https://unsplash.com/@viktortalashuk?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Viktor Talashuk</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Playing with QuickChart and Vue.js",
		"date":"Sat May 02 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/03/playing-with-quickchart-and-vuejs",
		"content":"<p>A while ago my buddy <a href=\"https://recursive.codes/\">Todd Sharp</a> shared a cool resource with me, <a href=\"https://quickchart.io/\">QuickChart</a>. QuickChart is a static image only version of <a href=\"https://www.chartjs.org/docs/latest/charts/\">Chart.js</a>. By &quot;static image&quot; only I mean you can generate a chart via a URL request and get an image out, not a dynamic JavaScript-based chart. This is a good replacement for a service Google killed off about a year ago, Image Charts.</p>\n<p>Why would you go for an image-based chart instead of a dynamic one? Emails are probably the best example. Also, I think many times you do not need interactivity. If you're showing a simple chart and the user doesn't need to toggle items off and on, than there's no real point in having an interactive chart. (And as I'll show, you can still have some interactivity with this library.)</p>\n<p>QuickChart works by essentially creating a server wrapper to Chart.js. (An open source server that you could host yourself if you want, but their <a href=\"https://quickchart.io/pricing/\">free tier</a> is pretty dang good.) You craft a URL that, for the most part, matches Chart.js, and then that's it. So for example:</p>\n<pre><code class=\"language-html\">&lt;img src=&quot;https://quickchart.io/chart?c={type:'pie',options:{title:{display:true, text:'The Battle'}},data:{labels:['Knowing','Red and Blue Lasers'], datasets:[{data:[50,50]}]}}&quot;&gt;\n</code></pre>\n<p>The URL can get rather complex, but the end result is just an image.</p>\n<p>\n<img data-src=\"https://quickchart.io/chart?c={type:'pie',options:{title:{display:true, text:'The Battle'}},data:{labels:['Knowing','Red and Blue Lasers'], datasets:[{data:[50,50]}]}}\" alt=\"\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Since most of the work is done on the chart.js side, you'll want to have some basic familiarity with it before starting, but it isn't a difficult library to use. Also, QuickChart will return nice errors when you screw up. For example, I added an extra } to the URL below:</p>\n<pre><code class=\"language-html\">&lt;img src=&quot;https://quickchart.io/chart?c={type:'pie',options:{title:{display:true, text:'The Battle'}}},data:{labels:['Knowing','Red and Blue Lasers'], datasets:[{data:[50,50]}]}}&quot;&gt;\n</code></pre>\n<p>And the result:</p>\n<p>\n<img data-src=\"https://quickchart.io/chart?c={type:'pie',options:{title:{display:true, text:'The Battle'}}},data:{labels:['Knowing','Red and Blue Lasers'], datasets:[{data:[50,50]}]}}\" alt=\"\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Cool, so given that it's just simple HTML, how can we integrate Vue with it? For my first demo, I setup an image that was bound to a computed property:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;img :src=&quot;chartSrc&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n<p>The chartSrc output above the image is just there for testing. On the Vue side, I moved my chart data into Vue's data block and set up my computed property:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data: {\n    months:['January','February','March','April', 'May'],\n    cats:[100,200,300,400,500],\n    dogs: [50, 60, 70, 180, 190]\n  },\n  computed: {\n    chartSrc() {\n      // great tip for quoted array, https://stackoverflow.com/a/43651811/52160\n      let monthStr = this.months.map(x =&gt; &quot;'&quot; + x + &quot;'&quot;).toString();\n      return `https://quickchart.io/chart?width=500&amp;height=300&amp;c={type:'bar',data:{labels:[${monthStr}], datasets:[{label:'Dogs',data:[${this.dogs}]},{label:'Cats',data:[${this.cats}]}]}}`\n    }\n  }\n})\n</code></pre>\n<p>The only thing really fancy here is ensuring months is output as a quoted string. Thank you StackOverflow for having a great solution. You can play with this in my CodePen:</p>\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"light\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"YzyrEZM\" style=\"height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"QuickCharts1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/YzyrEZM\">\n  QuickCharts1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Because I've tied my QuickChart URL to data and because Vue is so awesome, as soon as my data changes, so will my chart. Now I said above, if you want interactivity you probably want the &quot;real&quot; library. But I think for some <em>simple</em> use cases, it's fine to use this approach. I modified my code to update the values every three seconds. At that speed I'd definitely use the JavaScript charts instead, but I wanted something you (my favorite reader, yes you) could easily see.</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data: {\n    months:['January','February','March','April', 'May'],\n    cats:[100,200,300,400,500],\n    dogs: [50, 60, 70, 180, 190]\n  },\n  created() {\n    setInterval(() =&gt; {\n      if(Math.random() &lt; 0.5) {\n        let idx = getRandomInt(0, this.cats.length-1);\n        this.$set(this.cats, idx, this.cats[idx] + getRandomInt(-20, 20));\n      } else {\n        let idx = getRandomInt(0, this.dogs.length-1);\n        this.$set(this.dogs, idx, this.dogs[idx] + getRandomInt(-20, 20));\n      }\n    }, 3000);\n  },\n  computed: {\n    chartSrc() {\n      // great tip for quoted array, https://stackoverflow.com/a/43651811/52160\n      let monthStr = this.months.map(x =&gt; &quot;'&quot; + x + &quot;'&quot;).toString();\n      return `https://quickchart.io/chart?width=500&amp;height=300&amp;c={type:'bar',data:{labels:[${monthStr}], datasets:[{label:'Dogs',data:[${this.dogs}]},{label:'Cats',data:[${this.cats}]}]}}`\n    }\n  }\n})\n\n// https://stackoverflow.com/a/1527820/52160\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n</code></pre>\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"light\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"dyYVZRr\" style=\"height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"QuickCharts2\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/dyYVZRr\">\n  QuickCharts2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>So what about a &quot;real&quot; example? I built a chart based on API on <a href=\"https://covidtracking.com/\">CovidTracking.com's</a> set of APIs. Specifically the data related to my home state, Louisiana. I modified my HTML a bit so as to not have the image rendered until data was ready:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;img :src=&quot;chartSrc&quot; v-if=&quot;loaded&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n<p>And then I updated my JavaScript to make use of the API:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data: {\n    loaded: false,\n    positives:[],\n    deaths:[],\n    labels:[]\n  },\n  async created() {\n    let data = await fetch('https://covidtracking.com/api/v1/states/LA/daily.json').then(res =&gt; res.json());\n    data.reverse();\n    this.positives = data.map(i =&gt; i.positive);\n    this.deaths = data.map(i =&gt; {\n      if(i.death) return i.death;\n      return 0;\n    });\n    this.labels = data.map(i =&gt; {\n      let year = i.date.toString().substring(0,4);\n      let month = i.date.toString().substring(4,6);\n      let day = i.date.toString().substring(6,8);\n      return year + '/' + month + '/' + day;\n    });\n    this.loaded = true;\n  },\n  computed: {\n    chartSrc() {\n      // great tip for quoted array, https://stackoverflow.com/a/43651811/52160\n      let dateStr = this.labels.map(x =&gt; &quot;'&quot; + x + &quot;'&quot;).toString();\n      return `https://quickchart.io/chart?width=500&amp;height=300&amp;c={type:'line',data:{labels:[${dateStr}], datasets:[{label:'Positives',data:[${this.positives}]},{label:'Deaths',data:[${this.deaths}]}]}}`\n    }\n  }\n})\n</code></pre>\n<p>In <code>created</code> I fetch my data and then immediately reverse is so the first values are the oldest. I then create an array of positives, deaths, and labels. I could then put this on a web page and every day the chart would have the freshest data, but still be just a simple image. Here's the CodePen for this version (feel free to fork and change the state):</p>\n<p class=\"codepen\" data-height=\"700\" data-theme-id=\"light\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"OJyxQvd\" style=\"height: 700px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"QuickCharts3\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/OJyxQvd\">\n  QuickCharts3</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>All in all, I think this is a pretty sweet service. As I said, crafting the URL can be a bit delicate. I'd suggest using something like Postman to test, but once that's done, it's just an image tag. If you are interesting in more information about charting and Vue, I wrote up a <a href=\"https://blog.logrocket.com/charting-with-vue-a-comparison/\">comparison</a> article a few months back you might find helpful.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@isaacmsmith?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Isaac Smith</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Modifying Prism's Copy Plugin",
		"date":"Mon May 04 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/05/modifying-prisms-copy-plugin",
		"content":"<p>This post definitely falls into the &quot;I'm Not Sure This is a Good Idea&quot; Department, but I thought I'd share on the wild chance it was useful to others. I've been using <a href=\"https://prismjs.com/index.html\">Prism</a> for source code blocks for sometime now and I like it fine enough. Recently I was working on a presentation about technical documentation. While working on the slide deck, I came across a code sample that had some line breaks in it:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/spotify.png\" alt=\"Curl example\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>In the code sample above, the curl command is broken over multiple lines. This isn't valid, but is nicely readable. Compare that to this version:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/curl.png\" alt=\"Another curl example\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This is also nicely readable, but did you know that Windows users can't use <code>\\</code> to break commands like that? The main terminal, cmd.exe, uses <code>^</code> instead. It's a minor issue, but it's something I'm cognizant of when I write docs. Developers, right or wrong, will copy and paste things as they learn and something small like this could trip them up.</p>\n<p>Ok, so back to Prism. It turns out that it has a plugin to support <a href=\"https://prismjs.com/plugins/copy-to-clipboard/\">copy to clipboard</a> support. When downloading, you simply select that plugin and it will be added to your code samples automatically. There's nothing else you need to do which is pretty nice. While this isn't a Prism tutorial, here's how the HTML looks:</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n&lt;head&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;prism.css&quot;&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;h2&gt;Test&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;\ncurl \n\t-x &quot;foo.html&quot;\n\t-z &quot;doo&quot;\n\t-B true\n\t-D {&quot;name&quot;:&quot;ray&quot;, age: 47, &quot;code&quot;:&quot;not real&quot;}\n\t&gt; output.txt\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Note, that is <em>not</em> meant to be a real example of a <code>curl</code> call. You can see a demo of this here: <a href=\"https://prismcopytest.now.sh/v1/\">https://prismcopytest.now.sh/v1/</a>.</p>\n<p>Cool. So given that Prism can add a &quot;Copy&quot; command to code blocks, can we modify it such that we can show a command line example like we have above but when put in the clipboard it's all one line? Turns out you can.</p>\n<p>The first thing I did was redownload Prism <em>without</em> the Copy plugin. The <a href=\"https://prismjs.com/plugins/copy-to-clipboard/\">docs</a> for the plugin include all the code there so I knew I could use that as a base. I did make the mistake of not including the Toolbar plugin. It's required so you need to ensure that option is checked.</p>\n<p>Next, I added the Clipboard.js CDN above my prism.js load like so:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/clipboard@2/dist/clipboard.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;prism.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>In a second you'll see the Copy plugin code and it actually supports loading this dynamically, but it felt better to include it manually.</p>\n<p>Alright, so looking at the source of the plugin, the portion that handles getting the text to copy is this:</p>\n<pre><code class=\"language-js\">var clip = new ClipboardJS(linkCopy, {\n\t'text': function () {\n\t\treturn env.code;\n\t}\n});\n</code></pre>\n<p>I surmised that <code>env.code</code> was the code block. I confirmed this by adding the plugin code to my page and just adding a console.log message above it.</p>\n<p>With that in place, I then did a quick modification:</p>\n<pre><code class=\"language-js\">var clip = new ClipboardJS(linkCopy, {\n\t'text': function () {\n\t\treturn env.code.split('\\n').join(' ').replace(/\\s+/g,' ');\n\t}\n});\n</code></pre>\n<p>Basically, split the code along new lines, join them back together in a string, and then replace whitespace with one space. And... it just plain worked. If you go to the next version (<a href=\"https://prismcopytest.now.sh/v2/\">https://prismcopytest.now.sh/v2/</a>) and click copy, you'll end up with this in the clipboard:</p>\n<pre><code>curl -x &quot;foo.html&quot; -z &quot;doo&quot; -B true -D {&quot;name&quot;:&quot;ray&quot;, age: 47, &quot;code&quot;:&quot;not real&quot;} &gt; output.txt \n</code></pre>\n<p>This would (should) work in any operating system and is nicely readable on screen. You could make the argument that a user may try to type it as they see it, which would break, hence me prefixing this entire blog entry with &quot;it may not be a good idea&quot; - but it works. Anyway, what do folks think?</p>\n<p>p.s. While I think this is a good example, I typically <em>despise</em> places that mess with the clipboard. A lot of places will prefix selected text with something like, &quot;Copied from ...&quot; which I just find incredibly annoying.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@evablue?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Eva Blue</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Looking at Pipedream's Event Sources",
		"date":"Wed May 06 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/07/looking-at-pipedreams-event-sources",
		"content":"<p>Before I begin, know that everything I'm discussing here is currently in beta form. It may, and will, change in the future so please keep that in mind if you are reading this in some post-Corona paradise where we can actually <em>do</em> things out in public. The feature I'm talking about today adds a really fascinating feature to <a href=\"https://pipedream.com/\">Pipedream</a> - Event Sources.</p>\n<p>Let me start off by explaining why this feature came about. Imagine you're building a workflow based on a RSS feed. RSS feeds contain a list of articles for a publication of some sort. Each item will contain a title, link, some content, and more properties. Let's say you want to send an email when a new item is added to the feed.</p>\n<p>Right now you would build this like so:</p>\n<ul>\n<li>Setup a CRON trigger. Your schedule would depend on the type of feed. For my blog a once a day schedule would be fine. For something like CNN, maybe once every five minutes.</li>\n<li>Parse the RSS feed. There's a RSS action that does this for you:\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/es1.png\" alt=\"RSS parser\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>By that way, it may not be obvious, but that action actually supports <em>multiple</em> feeds which is pretty bad ass.</li></p>\n<li>Then take the items and email them. This is simple enough, but you've got a few problem. How do you know what's new? Luckily you don't have to worry about that, the RSS action Pipedream supplies uses the $checkpoint feature I <a href=\"https://www.raymondcamden.com/2020/04/04/using-state-in-pipedream-workflows\">blogged</a> about last month to remember this for you. </li>\n</ul>\n<p>Cool. So that's that. But this also assumes you're ok working with multiple items at once. In the case of &quot;email me new items&quot;, that makes sense. You want one email with all the new items. The same applies to a Twitter search workflow. You want a packet of results. But what about a scenario where you want to process each item individually?</p>\n<p>Well ok, you work in a loop. For every item do - whatever. Again, for simple workflows that would be enough. But for anything complex, you may have trouble. Pipedream workflows don't support a &quot;loop this step N times&quot; type logic. I know they are considering conditional steps, but I'm not sure about looping.</p>\n<p>One solution would be to build a second workflow that takes a singular item in as input. You then have a two workflow solution. The first one is responible for gathering the data and creating a list (with optional filtering involved) and then it calls out to the second workflow which handles unique items. I used an approach like this here: <a href=\"https://www.raymondcamden.com/2020/04/20/building-a-reddit-workflow-with-pipedream\">Building a Reddit Workflow with Pipedream</a></p>\n<p>So as I said, you have solutions, and that's good, but Event Sources really make this so much simpler. At a basic level, an event source is custom code you write to handle defining a custom workflow trigger event. By default, your workflows can be trigger by time (CRON), URL, email, or the REST API. Event Sources lets you define <em>anything</em> as a source for firing workflows.</p>\n<p>Imagine you wanted workflow based on the full moon? Event sources would allow that. (Werewolves will love you.) A bit more realistically, what about a workflow that triggers on the first Monday of the month? That's not possible with CRON, but event sources would allow that as well.</p>\n<p>Event sources consist of a schedule and your code. The schedule determines how often it runs. For something like the full moon or &quot;first monday&quot; example, once a day would make sense. The code is whatever your logic is. The &quot;magic&quot; part that makes it an event source then is that it simple emits data for every instance of an event. You can find out more at the <a href=\"https://docs.pipedream.com/event-sources/\">docs</a>, but let's look at an example.</p>\n<p>Imagine our RSS scenario. Given that we can parse RSS and know what's new, our RSS event source would then emit data for every item:</p>\n<pre><code class=\"language-js\">items.forEach(item=&gt;{\n\tthis.$emit(item, {\n    \tid: this.itemKey(item),\n    \tsummary: item.title,\n        ts: item.pubdate &amp;&amp; +new Date(item.pubdate), \n    })\n})\n</code></pre>\n<p>Here's another snippet for an event source that fires on the first X of the month:</p>\n<pre><code class=\"language-js\">const currentDay = new Date().getDay(); // In UTC\n\nif (currentDay === parseInt(this.targetDayOfWeek)) {\n\tthis.$emit({\n\t\tdayOfWeek: this.targetDayOfWeek,\n\t},{ summary: &quot;First target day of the month&quot; });\n}\n</code></pre>\n<p>So how do you use it? When you create a new workflow you can now select from Event Sources as a source:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/es2.png\" alt=\"List of sources\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>In the screenshot above you'll see a number of items below SDK. Those are all <em>previous</em> event sources I've used. When you add a new event source, you configure it and name it, and it makes sense that you may want to use them again.</p>\n<p>If you click on Event Source, you then get a list of available sources. (Note that you can add a 100% customized one using the CLI. Also note that you can edit the code of an event source.)</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/es3.png\" alt=\"List of event sources\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Once you select it, you can then set up the parameters. Each event source will be different.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/es4a.png\" alt=\"Configured source\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>In this case I used Pipedream's blog's RSS feed. At the bottom (not shown on the screen shot above) is a Create Source button. After doing so, your event source is configured and ready to be used in your workflow:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/es9.png\" alt=\"New configured ES\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Well almost. By default event sources are turned off. See the little toggle on the right. I believe they do this for cases where you may want to setup your workflow first before it starts firing off events. Just don't forget.</p>\n<p>Event sources have their own administration panel at Pipedream. You can view them at <a href=\"https://pipedream.com/sources/\">https://pipedream.com/sources/</a>.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/es5.png\" alt=\"ES Editor\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>For each event source you see a history of past events, logs, and configuration. You can also modify the code which is pretty cool. When I was playing around this feature earlier this week, I needed to slightly modify the RSS event source and it took all of two minutes.</p>\n<p>This is an incredibly powerful addition to Pipedream. All of a sudden you have workflows based on any custom logic. Currently they've got event sources for Airtable, FaunaDB, Google Calendar, and more. If you go to the Event Sources &quot;admin&quot; page, <a href=\"https://pipedream.com/sources\">https://pipedream.com/sources</a> and click +, you can browse them.</p>\n<p>Also, Pipedream built a page specific for <a href=\"https://rss.pipedream.com/\">RSS-based</a> workflows that will give you some great examples. I've got a demo I've already built on this I'll be blogging about later this week.</p>\n<p>As always, I'm curious to know if any of my readers are playing with this, so let me know in a comment below if you've checked this out yet.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@tetrakiss?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Arseny Toguley</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "Notes on Upgrades to WSL2 (And Why You Should)",
		"date":"Thu May 07 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/08/notes-on-upgrades-to-wsl2-and-why-you-should",
		"content":"<p>For a few years now (well, it feels like many years), I've been singing the praises of WSL - Windows Subsystem for Linux. It's one of the biggest reasons I switched to Windows after years on OSX. (Not the only reason, but you don't want to hear me rant about Apple.) The only real issue with WSL was the slowness of file operations. There were technical reasons for this of course, but honestly it only really bugged me when doing npm operations.</p>\n<p>As you know, running <code>npm i something</code> tends to fetch an incredible amount of files. In my completely unscientific testing, I'd say these operations were 2-5X slower in WSL than in the native Windows shell. Another command that would be slow at times was <code>git status</code>. Outside of that though it was just fine. I'm no command line jedi but I definitely preferred the Unix shell to cmd.exe or Powershell.</p>\n<p>A while back Microsoft announced a major rework of WSL. You can look up the technical details if you want, but after going through the process of upgrading to WSL2 on two machines now, I can say that I'm absolutely blown away by the speed improvements.</p>\n<p>With that in mind, I wanted to share a few tips on the process and how it impacted my development. This isn't meant to be an introduction to WSL or a complete guide to using it, just what I encountered and what I changed in the process. I had some great help from Microsoft folks on Twitter so I definitely encourage you reaching out if you run into issues as well.</p>\n<p>Alright, so start off by going to the <a href=\"https://docs.microsoft.com/en-us/windows/wsl/wsl2-install\">WSL2 Install</a> guide. You'll note that you need Windows version 18917 or higher in order to use WSL2. I'm currently on the Insider Slow Ring at version 19041.208. Insider Slow Ring gives you earlier access to new Windows features and at least for me has been really stable. If you don't know what version of Windows you're on, just run winver.exe, which by the way you can do from WSL.</p>\n<p>As part of the install process, they document how to check your WSL installs. You can do this by running <code>wsl -l -v</code>:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/wsl1.png\" alt=\"wsl cli example\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>To update, you simply run <code>wsl --set-version Ubuntu 2</code> where <code>Ubuntu</code> is the name of your distro and may be different. You may get prompted to install stuff first:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/wsl2.png\" alt=\"Warning to install stuff\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I followed the directions there which basically had you copy and paste stuff into Powershell (be sure to run Powershell as an Administrator). I then ran the command again and got:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/wsl3.png\" alt=\"Even more stuff\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Once again, follow the link, do the install, and you should be good. One one machine I had to tweak my BIOS, but on the other the install was good enough.</p>\n<p>Now if you run the update command again, you should hopefully get:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/wsl4.png\" alt=\"Final update\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>On my fancy new laptop, this was rather quick, unfortunately I don't remember how long. On my older desktop, this was <em>not</em> quick. I think it took maybe 30 minutes. When done though you can quickly confirm it's been updated:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/wsl5.png\" alt=\"Confirm WSL version\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can also make WSL2 the default by doing this: <code>wsl --set-default-version 2</code>. I only run one distro on my machine so this really isn't an issue for me.</p>\n<p>Ok, done! But wait, there's some very important things to note. I did some immediate testing the first time I did an update and noticed that npm was <em>not</em> faster. I was disappointed, reached out on Twitter, and was reminded that if I'm still using the main Windows filesystem (<code>/mnt/c</code>), file IO is still going to be slow. I did some testing under <code>~/</code> and right away saw a huge boost. I typically do all my work in <code>/mnt/c/projects</code>, but simply set up <code>~/projects</code> as my new place to do crap.</p>\n<p>This then quickly led to an issue - how do I edit files there? I've got two answers to that.</p>\n<p>First, you can browse your distro file system in Explorer.exe by going to <code>\\\\wsl$</code>:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/wsl6.png\" alt=\"WSL support in Explorer\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You'll see your distros there and can work with your file system. In my testing, I've noticed that when I copy files over to Ubuntu, I <em>sometimes</em> get a copy with &quot;:Zone.Identifier&quot; in it. This is known and I believe has something to do with AV stuff. You can read more about it here: <a href=\"https://github.com/microsoft/WSL/issues/4609\">Zone.Identifier Files when copying from Windows to WSL filestructure</a>. For now I'm just deleting when I see them, typically before I do a git commit.</p>\n<p>Also, I believe I read that WSL is going to be more tightly integrated into Explorer in the future. So there's that.</p>\n<p>The next thing was getting support for Visual Studio Code. This was also pretty easy if you add the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl\">Remote-WSL</a> extension.</p>\n<p>You add that extension, then run &quot;Remote-WSL: New Window&quot;. This will open a new window and do a one time download of support stuff. For me it took about 2 minutes I think. When done, you'll have nothing in the file explorer - at first:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/wsl7.png\" alt=\"VSC File Explorer under WSL\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Note that it says &quot;Connected to remote&quot; and it has a &quot;WSL:Ubuntu&quot; marker on the lower left corner. Clicking to open a folder will bring up UI on top to browse:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/wsl8.png\" alt=\"File open UI\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This was a bit weird to me at first, but once you select a folder, everything returns to normal. So here's a screen shot of my editor right now. You can see the &quot;WSL&quot; marks so I know it's in the Ubuntu file system, but outside of that, everything is &quot;normal&quot;:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/wsl9.png\" alt=\"File UI\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>But wait - there's one more nit. I was testing with a Vue project and noticed I had &quot;lost&quot; <code>.vue</code> file support. Turns out you may have to reinstall some extensions. Basically if an extension does anything UI wise, like color schemes, it will work. Other extensions have to be installed again.</p>\n<p>This - and more - is all documented here: <a href=\"https://code.visualstudio.com/docs/remote/wsl\">Developing in WSL</a>. Honestly once I realized what was going on I didn't worry about it. VSCode makes it super easy to install extensions.</p>\n<p>So far, that's it. I absolutely recommend upgrading, but as always, do with caution. Everything I'm doing under WSL is Git-based so I could completely lose everything and not really be impacted. Enjoy!</p>\n<p>Oh, as a quick note, I strongly suggest you try out the new <a href=\"https://github.com/microsoft/terminal\">Windows Terminal</a>. It's highly configurable, open source, and works great!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@chris_reyem?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Chris Reyem</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Want to Learn Vue.js?",
		"date":"Wed May 13 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/14/want-to-learn-vuejs",
		"content":"<p>As my readers know, I'm somewhat enamored with Vue.js. My buddy Brian Rinaldi manages an online platform both presentations and virtual events called <a href=\"https://cfe.dev/\">Certified Fresh Events</a>. On June 16th, I'll be giving a three hour course on working with Vue.js:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/ray1.jpg\" alt=\"class banner\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The price is $49 USD and you can register, and find out more, here: <a href=\"https://cfe.dev/events/vue-workshop/\">https://cfe.dev/events/vue-workshop/</a>. If you have any questions about the content, feel free to leave me a comment below or reach out on Twitter. I hope to see you there!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@kochangbok?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Changbok Ko</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Let's Make Everyone a Queen!",
		"date":"Thu May 14 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/15/lets-make-everyone-a-queen",
		"content":"<p>Forgive the somewhat over the top title. For a while now I've been meaning to make an application with a nifty little JavaScript library called <a href=\"https://www.brightspiral.com/\">Tracery</a>. Tracery is a library created by <a href=\"http://www.galaxykate.com/\">Kate Compton</a>. It's a fascinating tool for generating text based on a set of inputs. I saw fascinating because sometimes it makes some pretty incredible little stories. For example:</p>\n<blockquote>\n<p>\nThis is a story about a faceless man. You know, the faceless man who hardly ever crys when they feel the forest. Well, I was listening to the faceless man, when we both saw this tree. Blinking, orange...well, more of a blueish white. We backed away because as everybody knows, trees don't exist. That was the last we saw of it. And now, the weather.\n</p>\n<p>\nMusic plays. You recall summertime and pain. You recall a lover and a friend. Operatic folk harpsichord echoes out into dissonance.\n</p>\n<p>\nYou know, I miss the tree. It was pretty terrible. I mean, really beautiful, for a tree. Eventually, I hope it comes back. We'll see it, glistening, grey...well, more of an indigoish indigo. But it'll be back. I mean, eventually. If not, it's just so bewildering.\n</p>\n</blockquote>\n<p>So yes, that's a bit crazy at times. But there's something interesting about it. If you <a href=\"https://www.brightspiral.com/\">reload the site</a> you'll see new random generated stories and I could spend <em>quite</em> a bit of time seeing what it does.</p>\n<p>I first becamse of aware of this library when I discovered [@dragonhoards](https://twitter.com/dragonhoards] on Twitter. This is a bit that makes use of the library. Here's an example tweet that's both interesting and horifying at the same time:</p>\n<blockquote class=\"twitter-tweet\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">A magical dragon lives by an enchanted lake. She estimates her hoard, which consists of a heap of memoirs, a group of pies, and an unknowable amount of corpses. She is exhausted.</p>&mdash; Dragon Hoards (@dragonhoards) <a href=\"https://twitter.com/dragonhoards/status/1261003706507628544?ref_src=twsrc%5Etfw\">May 14, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>At the simplest level, Tracery works by combining different arrays of input values. So for example, given this input:</p>\n<pre><code class=\"language-js\">let input = {\n\t&quot;sentence&quot;: [&quot;The #color# #animal# of the #natureNoun# is called #name#&quot;],\t\n\t&quot;color&quot;: [&quot;orange&quot;,&quot;blue&quot;,&quot;white&quot;,&quot;black&quot;,&quot;grey&quot;,&quot;purple&quot;,&quot;indigo&quot;,&quot;turquoise&quot;],\n\t&quot;animal&quot;: [&quot;unicorn&quot;,&quot;raven&quot;,&quot;sparrow&quot;,&quot;scorpion&quot;,&quot;coyote&quot;,&quot;eagle&quot;,&quot;owl&quot;,&quot;lizard&quot;,&quot;zebra&quot;,&quot;duck&quot;,&quot;kitten&quot;],\n\t&quot;natureNoun&quot;: [&quot;ocean&quot;,&quot;mountain&quot;,&quot;forest&quot;,&quot;cloud&quot;,&quot;river&quot;,&quot;tree&quot;,&quot;sky&quot;,&quot;sea&quot;,&quot;desert&quot;],\n\t&quot;name&quot;: [&quot;Arjun&quot;,&quot;Yuuma&quot;,&quot;Darcy&quot;,&quot;Mia&quot;,&quot;Chiaki&quot;,&quot;Izzi&quot;,&quot;Azra&quot;,&quot;Lina&quot;]\n}\n</code></pre>\n<p>You can generate a random sentence like so:</p>\n<pre><code class=\"language-js\">grammar = tracery.createGrammar(input);\nlet sentence = grammar.flatten('#origin#');\n</code></pre>\n<p>The code starts with sentence and looks for tokens. For each token it will look for a corresponding array of values and select a random one. Here's an example result:</p>\n<pre><code>The turquoise lizard of the river is called Mia\n</code></pre>\n<p>That part is relatively simple, but Tracery gets very complex. So for example, it supports picking a random animal once and re-using the same value again if you need it. Honestly the complexity goes beyond what I think I can understand currently, but she's got a great testing utility you can play with here: <a href=\"http://www.crystalcodepalace.com/traceryTut.html\">http://www.crystalcodepalace.com/traceryTut.html</a>. And of course, it's up on GitHub: <a href=\"https://github.com/galaxykate/tracery\">https://github.com/galaxykate/tracery</a>. Note that you want to make use of the <a href=\"https://github.com/galaxykate/tracery/tree/tracery2\">tracery2</a> branch, not master.</p>\n<p>Ok, so with that being said, I thought it would build a few demos with this.</p>\n<h3>The Web Site</h3>\n<p>As I said, Tracery is powerful, but complex. While I had a end game in mind (the second demo I'll be showing), I thought it would make sense to start with a web site first to keep it simple. As the title of this post suggests, it's all about making you a queen. I had my daughters in mind but anyone can be a queen if they want. Here's the end result:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/q1.png\" alt=\"Queen Of\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can demo this yourself here: <a href=\"https://queenof.netlify.app/#Lindy\">https://queenof.netlify.app/#Lindy</a> Notice I've included the name in the URL. You can change the hash mark to whatever, or just type whatever you want in the form field. The basic pattern is relatively simple: X is the queen of A, something of B, and something else of C. It's built using Vue.js because of course I'd use Vue for this. Here's the code:</p>\n<pre><code class=\"language-js\">const input = {\n\t&quot;things&quot;:[&quot;Shadows&quot;,&quot;Night&quot;,&quot;the Sea&quot;,&quot;the Moon&quot;,&quot;Stars&quot;,\n\t\t\t\t&quot;the Sun&quot;,&quot;Kittens&quot;,&quot;Fear&quot;,&quot;Courage&quot;,&quot;Dancing&quot;,\n\t\t\t\t&quot;the Internet&quot;,&quot;Unicorns&quot;,&quot;Dolphins&quot;,&quot;Mermaids&quot;,&quot;Upstairs&quot;,\n\t\t\t\t&quot;Foxes&quot;,&quot;Puppies&quot;,&quot;Chairs&quot;,&quot;Trees&quot;,&quot;Plants&quot;,\n\t\t\t\t&quot;Flowers&quot;,&quot;Music&quot;,&quot;Singing&quot;,&quot;Painting&quot;,&quot;Song&quot;,\n\t\t\t\t&quot;Sparkles&quot;,&quot;Jewels&quot;,&quot;Intelligence&quot;,&quot;Smarts&quot;,&quot;Dragons&quot;,\n\t\t\t\t&quot;Wolves&quot;,&quot;Shoes&quot;,&quot;Bravery&quot;,&quot;Honesty&quot;,&quot;Empathy&quot;,\n\t\t\t\t&quot;Compassion&quot;,&quot;Wisdon&quot;,&quot;Knowledge&quot;,&quot;Cats&quot;,&quot;Storms&quot;,\n\t\t\t\t&quot;Lightning&quot;,&quot;Thunder&quot;,&quot;Rain&quot;,&quot;Snow&quot;,&quot;Clouds&quot;,\n\t\t\t\t&quot;Wind&quot;,&quot;the Earth&quot;,&quot;the Universe&quot;,&quot;the Galaxy&quot;,&quot;the Piano&quot;,\n\t\t\t\t&quot;the Sky&quot;,&quot;the Land&quot;,&quot;the Realm&quot;,&quot;the oceans&quot;,&quot;cookies&quot;,\n\t\t\t\t&quot;cakes&quot;,&quot;pies&quot;,&quot;macarons&quot;,&quot;pizza&quot;,&quot;parties&quot;],\n\t&quot;role&quot;:[&quot;Defender&quot;,&quot;Champion&quot;,&quot;Scion&quot;,&quot;Empress&quot;,&quot;Sorceress&quot;,\n\t\t\t&quot;Master&quot;,&quot;Mistress&quot;,&quot;Boss&quot;,&quot;CEO&quot;,&quot;President&quot;,\n\t\t\t&quot;Prime Minister&quot;,&quot;DJ&quot;,&quot;Knight&quot;,&quot;Dame&quot;,&quot;Duchess&quot;,\n\t\t\t&quot;Baroness&quot;,&quot;Countess&quot;,&quot;Manager&quot;,&quot;Singer&quot;,&quot;Drummer&quot;,\n\t\t\t&quot;Muse&quot;,&quot;Siren&quot;,&quot;Painter&quot;,&quot;Crafter&quot;,&quot;Creator&quot;,\n\t\t\t&quot;Accountant&quot;,&quot;Chancellor&quot;,&quot;Jedi&quot;,&quot;Teacher&quot;,&quot;Jedi Master&quot;,\n\t\t\t&quot;Tutor&quot;],\n\t&quot;origin&quot;:[&quot; is the Queen of #things#, #role# of #things#, and #role# of #things#.&quot;]\n};\n\nconst app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tgrammar:null,\n\t\tname:'',\n\t\tresult:''\n\t},\n\tmethods:{\n\t\tmakeQueen() {\n\t\t\tif(this.name === '') return;\n\t\t\tthis.result = this.name + grammar.flatten('#origin#');\n\t\t\twindow.location.hash = this.name;\n\t\t}\n\t},\n\tmounted() {\n\t\tgrammar = tracery.createGrammar(input);\n\t\tgrammar.addModifiers(baseEngModifiers);\n\t\tif(window.location.hash &amp;&amp; window.location.hash.length &gt; 1) {\n\t\t\t//remove # \n\t\t\tthis.name = window.location.hash.substring(1);\n\t\t\tthis.makeQueen();\n\t\t}\n\t}\n});\n</code></pre>\n<p>The crucial bits are the <code>origin</code> value as that forms the basic structure of the random sentence. I leave off the beginning because that will be the name. The VUe parts then are pretty trivial. Setup Tracery and wait for you to enter a value (although note that <code>mounted</code> will notice the hash).</p>\n<p>If you want, you can peruse the entire code base here: <a href=\"https://github.com/cfjedimaster/queenof\">https://github.com/cfjedimaster/queenof</a></p>\n<h3>The Twitter Bot</h3>\n<p>So as I said, I had an endgame and mind, and that was a Twitter bot. I've got something of a problem when it comes to creating Twitter bots, but I'm sure I got stop whenever I want to. Using <a href=\"https://pipedream.com/\">Pipedream</a>, I built a Twitter bot at <a href=\"https://twitter.com/generatorqueen\">@generatorqueen</a>. She works rather simply. Send her a tweet with &quot;queen me&quot; in the text and you'll get a response within a minute.</p>\n<blockquote class=\"twitter-tweet\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">You are the Queen of the Earth, Chancellor of Smarts, and Creator of Plants.</p>&mdash; Queen Generator (@GeneratorQueen) <a href=\"https://twitter.com/GeneratorQueen/status/1261367197315686401?ref_src=twsrc%5Etfw\">May 15, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>I built this using a Pipedream workflow you can find here: <a href=\"https://pipedream.com/@raymondcamden/queen-of-bot-v2-p_MOCQen/edit\">https://pipedream.com/@raymondcamden/queen-of-bot-v2-p_MOCQen/edit</a>. Don't forget that one of the coolest features of Pipedream is that you can share workflows with others so they can fork and use for their own purposes! Let's break down the workflow bits.</p>\n<p>I began with a Twitter search event source. I <a href=\"https://www.raymondcamden.com/2020/05/07/looking-at-pipedreams-event-sources\">blogged</a> about these last week. They are a powerful way to build event driven workflows. In this case the event source is simply a Tweet that matches &quot;@generatorqueen&quot;.</p>\n<p>Next I have a custom Node.js step to do validation on the text:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tif(steps.trigger.event.full_text.indexOf('queen me') === -1) $end('queen me not in tweet');\n}\n</code></pre>\n<p>Remember that <code>$end</code> is Pipedream's way of letting you end a workflow early.</p>\n<p>The next step generates the text:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tconst tracery = require('tracery-grammar');\n\n\tconst grammar = tracery.createGrammar({\n\t\t\t&quot;things&quot;:[&quot;Shadows&quot;,&quot;Night&quot;,&quot;the Sea&quot;,&quot;the Moon&quot;,&quot;Stars&quot;,\n\t\t\t\t\t&quot;the Sun&quot;,&quot;Kittens&quot;,&quot;Fear&quot;,&quot;Courage&quot;,&quot;Dancing&quot;,\n\t\t\t\t\t&quot;the Internet&quot;,&quot;Unicorns&quot;,&quot;Dolphins&quot;,&quot;Mermaids&quot;,&quot;Upstairs&quot;,\n\t\t\t\t\t&quot;Foxes&quot;,&quot;Puppies&quot;,&quot;Chairs&quot;,&quot;Trees&quot;,&quot;Plants&quot;,\n\t\t\t\t\t&quot;Flowers&quot;,&quot;Music&quot;,&quot;Singing&quot;,&quot;Painting&quot;,&quot;Song&quot;,\n\t\t\t\t\t&quot;Sparkles&quot;,&quot;Jewels&quot;,&quot;Intelligence&quot;,&quot;Smarts&quot;,&quot;Dragons&quot;,\n\t\t\t\t\t&quot;Wolves&quot;,&quot;Shoes&quot;,&quot;Bravery&quot;,&quot;Honesty&quot;,&quot;Empathy&quot;,\n\t\t\t\t\t&quot;Compassion&quot;,&quot;Wisdon&quot;,&quot;Knowledge&quot;,&quot;Cats&quot;,&quot;Storms&quot;,\n\t\t\t\t\t&quot;Lightning&quot;,&quot;Thunder&quot;,&quot;Rain&quot;,&quot;Snow&quot;,&quot;Clouds&quot;,\n\t\t\t\t\t&quot;Wind&quot;,&quot;the Earth&quot;,&quot;the Universe&quot;,&quot;the Galaxy&quot;,&quot;the Piano&quot;,\n\t\t\t\t\t&quot;the Sky&quot;,&quot;the Land&quot;,&quot;the Realm&quot;,&quot;the oceans&quot;,&quot;cookies&quot;,\n\t\t\t\t\t&quot;cakes&quot;,&quot;pies&quot;,&quot;macarons&quot;,&quot;pizza&quot;,&quot;parties&quot;],\n\t\t\t&quot;role&quot;:[&quot;Defender&quot;,&quot;Champion&quot;,&quot;Scion&quot;,&quot;Empress&quot;,&quot;Sorceress&quot;,\n\t\t\t\t\t&quot;Master&quot;,&quot;Mistress&quot;,&quot;Boss&quot;,&quot;CEO&quot;,&quot;President&quot;,\n\t\t\t\t\t&quot;Prime Minister&quot;,&quot;DJ&quot;,&quot;Knight&quot;,&quot;Dame&quot;,&quot;Duchess&quot;,\n\t\t\t\t\t&quot;Baroness&quot;,&quot;Countess&quot;,&quot;Manager&quot;,&quot;Singer&quot;,&quot;Drummer&quot;,\n\t\t\t\t\t&quot;Muse&quot;,&quot;Siren&quot;,&quot;Painter&quot;,&quot;Crafter&quot;,&quot;Creator&quot;,\n\t\t\t\t\t&quot;Accountant&quot;,&quot;Chancellor&quot;,&quot;Jedi&quot;,&quot;Teacher&quot;,&quot;Jedi Master&quot;,\n\t\t\t\t\t&quot;Tutor&quot;],\n\t\t\t&quot;origin&quot;:[&quot;the Queen of #things#, #role# of #things#, and #role# of #things#.&quot;]\n\t});\n\n\tgrammar.addModifiers(tracery.baseEngModifiers); \n\n\tthis.sender = steps.trigger.event.user.screen_name;\n\tthis.message = '@' + this.sender + ' You are ' + grammar.flatten('#origin#');\n\tconsole.log(this.message);\n}\n</code></pre>\n<p>Now, at this point, everything's been pretty simple. In theory the next step is to just use the &quot;Post Tweet&quot; action. I've used that before and it's one of the many built in actions at Pipedream. However, my buddy <a href=\"https://twitter.com/dylansather\">Dylan Sather</a> at Pipedream noticed a potential issue with my use case. Because my bot would be replying to users, it was a potential TOS issue with Twitter's API. When you use Pipedream's Post Tweet action it's using Pipedream's application credentials for the call. It's using <em>your</em> authentication, but the lower level app itself is Pipedreams. Because of the potential for abuse, it would be problemtic to allow the Post Tweet action to &quot;at&quot; people in tweets. Luckily, the workaround was relatively simple.</p>\n<p>First, Pipedream created a new action that lets you use <em>your</em> credentials:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/q2.png\" alt=\"New action for posting tweets\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Once you've added this, you supply your own application credentials. You can get these simply enough at <a href=\"https://developer.twitter.com/en\">https://developer.twitter.com/en</a> but note! If you've just today made the account for your bot, your bot itself needs to ask for permission to create Twitter apps. Twitter is totally fine with this, but there's an approval process. Mine took seven days. It's been a while since I've done this before so I can't tell you if that's slow or fast, but if you're planning something like this, you may want to request this as soon as possible.</p>\n<p>Once you've done that then it's a simple matter of copying your keys into the Pipedream action and then specifying what to tweet. Here's how I did it. (Note, the text in white is a sample value.)</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/q3.png\" alt=\"Action values used for posting the tweet\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I believe that this is only an issue for automation of tweets that are sent <em>to</em> users but again, the Pipedream side of this was simple. The only real issue was the week delay in getting the developer account approved.</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@glencarrie?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Glen Carrie</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "pipedream",
            
            "vuejs"
            
		],
		"categories":[
            
                "serverless",
            
                "javascript"
            
		]

	},

	{
		"title": "Integrating Netlify Analytics and Eleventy",
		"date":"Sun May 17 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/18/integrating-netlify-analytics-and-eleventy",
		"content":"<p>Before I begin, know that I'm using an <em>undocumented</em> part of the <a href=\"https://open-api.netlify.com/\">Netlify API</a> so you should proceed with caution. I've been waiting for them to release the docs for sometime now (although it didn't stop me from building my own <a href=\"https://www.raymondcamden.com/2019/10/05/building-a-netlify-stats-viewer-in-vuejs\">demo</a>) and I'm not sure if it will ever happen, but in the meantime, I'll continue to play with it. Alright, so with that out of the way, this weekend I worked on a cool little thing I've added to my blog. While you can see it on the right hand side, it's this list of links here:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/pp1.png\" alt=\"List of Popular Posts\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This list was created by hitting the Netlify Analytics API for the site, getting the most viewed content in the past seven days, and then &quot;manipulated&quot; a bit before rendering. Let me describe the steps it took to get here.</p>\n<h2>Getting the Analytics</h2>\n<p>Step one was to get the raw data. First, I created a Personal Access Token. This is done under your user profile at Netlify in the Applications section:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/pp2.png\" alt=\"Applications page\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Once I had the key, I first wrote a script to get all of my sites. This was just so I could get the ID of my blog.</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\nlet token = 'my key brings all the boys to the yard';\n\n(async () =&gt; {\n\n\tlet result = await fetch(`https://api.netlify.com/api/v1/sites?access_token=${token}`);\n\tlet data = await result.json();\n\tdata.sort((a,b) =&gt; {\n\t\tif(a.name &lt; b.name) return -1;\n\t\tif(a.name &gt; b.name) return 1;\n\t\treturn 0;\n\t});\n\t\n\tdata.forEach(d =&gt; {\n\t\tconsole.log(d.name.padEnd(50, ' ') + d.site_id);\n\t});\n\n})();\n</code></pre>\n<p>With the ID, I then used the undocumented API to get pages with the most views. I filter to a date range from now till seven days ago. In case your curious, I discovered these API calls by using my browser developer tools.</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\nlet token = 'damn right its better than yours';\nlet siteId = 'the id';\n\n(async () =&gt; {\n\n\tlet today = new Date();\n\tlet lastWeek = new Date();\n\tlastWeek.setDate(today.getDate() - 7);\n\n\tlet url = `https://analytics.services.netlify.com/v1/${siteId}/pages?from=${lastWeek.getTime()}&amp;to=${today.getTime()}&amp;timezone=-0500&amp;limit=10`;\n\t\n\tlet result = await fetch(url, {\n\t\theaders: {\n\t\t\t'Authorization':`Bearer ${token}`\n\t\t}\n\t});\n\tlet dataOb = await result.json();\n\tconsole.log(dataOb.data);\t\n\n})();\n</code></pre>\n<p>This is how the result looks:</p>\n<pre><code class=\"language-js\">[\n  { path: '/', count: 19221 },\n  { path: '/recentPosts/', count: 13885 },\n  { path: '/2019/05/01/handling-errors-in-vuejs', count: 683 },\n  { path: '/2020/05/15/lets-make-everyone-a-queen', count: 619 },\n  {\n    path: '/2018/02/08/building-table-sorting-and-pagination-in-vuejs',\n    count: 591\n  },\n  { path: '/2020/05/14/want-to-learn-vuejs', count: 570 },\n  {\n    path: '/2019/08/08/drag-and-drop-file-upload-in-vuejs',\n    count: 484\n  },\n  {\n    path: '/2019/08/12/working-with-the-keyboard-in-your-vue-app',\n    count: 386\n  },\n  { path: '/2019/09/01/using-geolocation-with-vuejs', count: 370 },\n  {\n    path: '/2013/09/10/Adding-a-file-display-list-to-a-multifile-upload-HTML-control',\n    count: 366\n  }\n]\n</code></pre>\n<p>Right away you'll notice the first result is for the home page, something I'm going to ignore. The second result, <code>/recentPosts/</code>, is a result of an optimization I did for the site that I'll explain in a bit, because it comes into factor for this how I added this feature as well.</p>\n<p>Alright, let's get this into Eleventy!</p>\n<h2>Integrating with Eleventy</h2>\n<p>I began my integration with Eleventy by adding a new global data file named popularposts.js. This is - easily - one of my favorite features of Eleventy. By setting this up in my global data file I'm able to have it available for my pages later. Here is the code in the proper format with Eleventy:</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\nmodule.exports = function() {\n\n\tlet token = process.env.NETLIFY_TOKEN;\n\tlet siteId = process.env.NETLIFY_SITE_ID;\n\n\treturn new Promise(async (resolve, reject) =&gt; {\n\n\t\tlet today = new Date();\n\t\tlet lastWeek = new Date();\n\t\tlastWeek.setDate(today.getDate() - 7);\n\n\t\tlet url = `https://analytics.services.netlify.com/v1/${siteId}/pages?from=${lastWeek.getTime()}&amp;to=${today.getTime()}&amp;timezone=-0500&amp;limit=15`;\n\t\t\n\t\tlet result = await fetch(url, {\n\t\t\theaders: {\n\t\t\t\t'Authorization':`Bearer ${token}`\n\t\t\t}\n\t\t});\n\t\tlet dataOb = await result.json();\n\n\t\tlet pages = dataOb.data.filter(d =&gt; {\n\t\t\tif(d.path === '/' || d.path === '/recentPosts/') return false;\n\t\t\treturn true;\n\t\t});\n\t\tresolve(pages);\n\n\t});\n\n};\n</code></pre>\n<p>There's a few things different though. First, note that the token and siteId are loaded via environment variables. I set these up in my site settings and noticed that it didn't work with <code>netlify dev</code>. This usually does work fine so I <a href=\"https://community.netlify.com/t/access-environment-variables-outside-of-functions/14834\">posted</a> on their support forums to see what's up. In the meantime I just set the variables myself.</p>\n<p>Next, notice I added a filter to remove both <code>/</code> and <code>/recentPosts/</code>. I think most folks will need the first one, but not the second. It may have been better to use a regular expression to only match posts. Since my posts are all date based, I could have looked for /2*** for example.</p>\n<p>That worked great but then I realized a problem. While the Netlify API returned the path to the page, it didn't return the title or date of the blog post. This is where things then got a bit tricky. At the time this data file runs, you do not have access to collection information, where my posts live. That's because data <em>drives</em> the pages so it has to load first.</p>\n<p>In order to get this working, I did the following. First, here's my layout:</p>\n<pre><code class=\"language-html\">{% if popularposts %}\n&lt;section class=&quot;widget widget-recent-posts&quot;&gt;\n&lt;h2 class=&quot;widget-title&quot;&gt;Popular Posts&lt;/h2&gt;\n&lt;ul class=&quot;recent-posts&quot;&gt;\n\t{% for post in popularposts limit:5 %}\n\t\t{% assign postData = post.path | toTitle: collections.posts %}\n\t\t{% if postData.title != &quot;&quot; %}\n&lt;li class=&quot;recent-item&quot;&gt;&lt;a href=&quot;{{ site.url }}{{ post.path }}&quot;&gt;{{ postData.title }}&lt;/a&gt; &lt;span&gt; {{ postData.date | date: &quot;%B %e, %Y&quot; }}&lt;/span&gt;&lt;/li&gt;\n\t\t{% endif %}\n\t{% endfor %}\n&lt;/ul&gt;\n&lt;/section&gt;\n{% endif %}\n\n</code></pre>\n<p>I first see if I have popularposts (my data call could fail), and then loop over each result. For each, I use a filter, <code>toTitle</code>, to &quot;convert&quot; the path into page data that includes my title and date. (So <code>toTitle</code> isn't the best name.) This filter is defined in <code>.eleventy.js</code>:</p>\n<pre><code class=\"language-js\">let titlePostCache = {};\neleventyConfig.addFilter('toTitle', (p, posts) =&gt; {\n  if(titlePostCache[p]) return titlePostCache[p];\n  for(let i=0;i&lt;posts.length;i++) {\n    if(posts[i].url == p) {\n      titlePostCache[p] = { title: posts[i].data.title, date: posts[i].date};\n      return titlePostCache[p];\n    }\n  }\n  // cache that we couldn't match\n  titlePostCache[p] = { title: ''};\n  return titlePostCache;\n});\n</code></pre>\n<p>For each path, I loop over the posts collection, look for a match, and reutrn the title and date if so. Notice I use a cache for performance.</p>\n<p>This worked well, but when I initially put in my template, it required a rebuild of every single page in the site when run. Because of that I employed the same technique I used for my last five posts content. I put them both in a single file template (<code>/recentPosts/</code>) that's loaded via a quick jQuery call:</p>\n<pre><code class=\"language-js\">$('#recentPosts').load('/recentPosts/');\n</code></pre>\n<p>I don't even use JSON, I just load the raw HTML right into the DOM on the side there.</p>\n<p>And that's it. Now, one thing you'll probably notice is that this data is only generated when I built the site. I can easily address that by scheduling a daily build. But as I blog once or twice a week <em>very</em> consistently and since this isn't &quot;business crucial&quot; information, I'm fine with it updating whenever I post a new blog entry (or make another tweak, like to my <a href=\"/speaking\">speaking</a> page. If you want to see more of the code behind this, you can find it at the repo for this blog: <a href=\"https://github.com/cfjedimaster/raymondcamden2020\">https://github.com/cfjedimaster/raymondcamden2020</a>.</p>\n<p>p.s. I'm also planning on looking at a Google Analytics version of this. They've got an <a href=\"https://developers.google.com/analytics/devguides/reporting/core/v3/reference\">API</a> so if I get time this week, I'll post a follow up!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@isaacmsmith?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Isaac Smith</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Updating my Reddit Workflow with Pipedream",
		"date":"Mon May 18 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/19/updating-my-reddit-workflow-with-pipedream",
		"content":"<p>This was originally just going to be a tweet, but then I realized I wanted a bit more space to talk about it and figured I'd write it up as a post. And since this is my blog and I can do what I want to, you get to enjoy this little nugget of information.</p>\n<p>Back almost exactly a month ago, I <a href=\"https://www.raymondcamden.com/2020/04/20/building-a-reddit-workflow-with-pipedream\">blogged</a> about using Pipedream to build a Reddit email report. The idea was that I wanted a daily email of posts from my subscribed subreddits for the past 24 hours of content. The implementation was a bit complex. I used one workflow to handle &quot;get a days worth of content from subreddit&quot; as a general &quot;API&quot; and another workflow connected to my authentication. It handles getting my subscriptions, hitting the API, and then generating the email. Here's an example of how that looked:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/04/reddit10.png\" alt=\"Email report\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This worked well, but after a while of actually <em>getting</em> the email, I noticed some problems. The email takes all of the posts from all of my subscriptions and sorts them together. I thought this made sense to me, but I noticed it made it harder to actually read the content. Sometimes I don't care about a subreddit and mentally it just felt weird going from the movies subreddit to the Acadiana one. Also, some subreddits get a <strong>huge</strong> amount of traffic in a day. The email was hard to read and just too long.</p>\n<p>So I decided to fix that. I didn't want to edit my original workflow because I wanted it to still be a reference for the older post. Luckily Pipedream makes that simple. I turned off the CRON schedule on the workflow and just used the copy command.</p>\n<p>Next, I edited the Node.js code step that combines and sorts my data. This:</p>\n<pre><code class=\"language-js\">for(let i=0;i&lt;result.length;i++) {\n\tthis.posts = this.posts.concat(result[i].data.result);\n}\n\nthis.posts.sort((a,b) =&gt; {\n\tif(a.created_utc &lt; b.created_utc) return 1;\n\tif(a.created_utc &gt;b.created_utc) return -1;\n\treturn 0;\n});\n</code></pre>\n<p>Became this:</p>\n<pre><code class=\"language-js\">for(let i=0;i&lt;result.length;i++) {\n  this.posts = this.posts.concat(result[i].data.result.slice(0,10));\n}\n</code></pre>\n<p>No more sorting together and I'm only getting the first ten entries from each subreddit. (Those posts should be date sorted already. Should be.)</p>\n<p>Then I modified the step that formats the email. I added in code to notice when a new subreddit start and added HTML to make it more visibly separated.</p>\n<pre><code class=\"language-js\">let dotLeft = function(s, len) {\n  if(s.length &lt; len) return s;\n  return s.substring(0, len)+'...';\n};\n\nlet lastSub = '';\n\nthis.subject = `Daily Reddit Report`;\nthis.body = `\n&lt;h1&gt;Daily New Posts for Your Reddit Subscriptions&lt;/h1&gt;\n&lt;p/&gt;\n`;\nsteps.get_and_sort.posts.forEach(p =&gt; {\n  // only show thumbnails when they aren't &quot;self&quot;,&quot;default&quot;,&quot;nswf&quot; - or more broadly, not a url\n  if(p.thumbnail.indexOf('http') === -1) delete p.thumbnail;\n  let text = '';\n  if(p.is_self) text = dotLeft(p.selftext,200);\n  if(p.subreddit !== lastSub) {\n    this.body += `&lt;hr/&gt;&lt;h2&gt;${p.subreddit}&lt;/h2&gt;`;\n    lastSub = p.subreddit;\n  }\n  this.body += `\n&lt;p&gt;\n${ p.thumbnail ? '&lt;img src=&quot;'+p.thumbnail+'&quot; align=&quot;left&quot; style=&quot;margin-right:10px&quot;&gt;':''}\n&lt;b&gt;Title: ${p.title}&lt;/b&gt;&lt;br/&gt;\nURL: &lt;a href=&quot;${p.url}&quot;&gt;${p.url}&lt;/a&gt;&lt;br/&gt;\nReddit URL: &lt;a href=&quot;https://www.reddit.com${p.permalink}&quot;&gt;https://www.reddit.com${p.permalink}&lt;/a&gt;&lt;br/&gt;\nAuthor: ${p.author}&lt;br/&gt;\n&lt;br clear=&quot;left&quot;&gt;\n${text}\n&lt;/p&gt;  \n  `\n});\n</code></pre>\n<p>Basically - notice when the subreddit changes and add a horizontal rule and header. Also notice I modified my code on when to show images. This seems to work much better.</p>\n<p>And that's it. My new workflow may be found here: <a href=\"https://pipedream.com/@raymondcamden/daily-reddit-posts-3-p_PAC9DV/edit?e=1c8nZNETuFxToNCya2eVCafjVAu\">https://pipedream.com/@raymondcamden/daily-reddit-posts-3-p_PAC9DV/edit?e=1c8nZNETuFxToNCya2eVCafjVAu</a> I'm trying my best to make good use of the <a href=\"https://pipedream.com/@raymondcamden/daily-reddit-posts-3-p_PAC9DV/readme\">Readme</a> feature to document what I've done.</p>\n",
		"tags":[
	        
            "pipedream"
            
		],
		"categories":[
            
                "serverless",
            
                "javascript"
            
		]

	},

	{
		"title": "Integrating Google Analytics with Eleventy",
		"date":"Wed May 20 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/21/integrating-google-analytics-with-eleventy",
		"content":"<p>Before I begin, this article is <em>not</em> about adding Google Analytics to your site. Google provides a HTML/JS snippet you can just copy and paste into your code and that's about as simple as you can get. For Eleventy, you would do this in your main layout file so it's include everywhere. There ya go, if that's what you wanted, you can stop reading. ;) This article is about how to integrate Google Analytics <em>data</em> into your site, and is a followup to the <a href=\"https://www.raymondcamden.com/2020/05/18/integrating-netlify-analytics-and-eleventy\">blog post</a> I did earlier this week demonstrating how to do that with Netlify Analytics.</p>\n<p>Hopefully you've read that previous article as this one will follow a similar pattern. As with most things Google API related, I spent a huge amount of time with authentication and authorization issues and much less time using their API. It's gotten a point where I dread working with their APIs. Not because their APIs don't work well, but because authentication seems to be so difficult, especially if you're not using OAuth. Alright, enough of a rant, let's do this.</p>\n<h2>Getting the Analytics</h2>\n<p>Google Analytics has a <a href=\"https://developers.google.com/analytics/devguides/reporting/core/v4\">REST API</a> that lets you get any reporting information out via API calls that you would have available via the dashboard. Using it in a Node.js environment requires you to first create a service account. Generate the JSON key for that account and save it to your file system. (I'll use the file system for this information in the first portion of the article, and then talk about how to move away from that.)</p>\n<p>Next, you'll want to install the <code>googleapis</code> package. This contains wrappers for all of their supported APIs.</p>\n<p>Now for the crucial part. When you create a service account, it will include an email address in the data. It will look something like this:</p>\n<pre><code class=\"language-js\">&quot;client_email&quot;: &quot;damnga@myprojectname.iam.gserviceaccount.com&quot;,\n</code></pre>\n<p>Yes, &quot;damnga&quot; is &quot;damn google analytics&quot; - I was frustrated. Copy the email address, go to your Google Analytics dashboard, and add it as a user to the property your working with. This can be done via the Admin link.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/ga1.png\" alt=\"View User Management\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>All it needs is &quot;Read &amp; Analyze&quot; permissions. While in your dashboard, also click the &quot;View Settings&quot; link and get your View ID:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/ga2.png\" alt=\"View ID\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Alright, once you've done that, let's look at the code, bit by bit at first. Start off initializing the library:</p>\n<pre><code class=\"language-js\">const {google} = require('googleapis');\nlet creds = require('./credentials4.json');\n\n\nconst auth = new google.auth.GoogleAuth({\n\tcredentials:creds,\n\tscopes: ['https://www.googleapis.com/auth/analytics.readonly']\n});\n\nconst ap = google.analyticsreporting({\n\tversion:'v4',\n\tauth:auth\n});\n</code></pre>\n<p>Now you're ready to make reports. The API supports batching so you can ask for multiple things at once. In general most Google APIs are simple once you've gotten past the auth part, but the Analytics API is rather complex. I wanted a report over the past seven days of page views. Here's how I did it:</p>\n<pre><code class=\"language-js\">const res = await ap.reports.batchGet({\nrequestBody: {\n\treportRequests: [\n\t{\n\t\tviewId: '73496341',\n\t\tdateRanges: [\n\t\t{\n\t\t\tstartDate: '7daysAgo',\n\t\t\tendDate: 'yesterday',\n\t\t},\n\t\t],\n\t\tdimensions:[\n\t\t{ &quot;name&quot;: 'ga:pagePath' },\n\t\t],\n\t\tmetrics: [\n\t\t{\n\t\t\texpression: 'ga:pageviews',\n\t\t},\n\t\t],\n\t\torderBys:[\n\t\t{ fieldName: &quot;ga:pageviews&quot;, sortOrder:'DESCENDING' }\n\t\t],\n\t\tpageSize:10\n\t},\n\t],\n},\n});\n</code></pre>\n<p>From what I can gather, <code>metrics</code> is what you are asking for and <code>dimensions</code> is what you want back, in this case a report of the path that generated the page views. I do sorting and limiting as well. The result data is complex as well. I'll share it here but feel free to skim it:</p>\n<pre><code class=\"language-js\">{\n\t&quot;rows&quot;: [\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/article/perform-date-manipulations-based-on-adding-or-subtracting-time/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;153&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;41&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/article/create-a-random-nonce-string-using-javascript/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;16&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/all/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;8&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/article/traversing-dom-subtrees-with-recursive-walk-the-dom-function/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;7&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/article/check-if-a-value-is-an-array/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;5&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/tag/array/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;5&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/article/map-a-nodelist-to-an-array-of-properties/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;3&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/submit/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;3&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;dimensions&quot;: [\n\t\t\t\t&quot;/tag/math/&quot;\n\t\t\t],\n\t\t\t&quot;metrics&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;values&quot;: [\n\t\t\t\t\t\t&quot;3&quot;\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t&quot;totals&quot;: [\n\t\t{\n\t\t\t&quot;values&quot;: [\n\t\t\t\t&quot;275&quot;\n\t\t\t]\n\t\t}\n\t],\n\t&quot;rowCount&quot;: 30,\n\t&quot;minimums&quot;: [\n\t\t{\n\t\t\t&quot;values&quot;: [\n\t\t\t\t&quot;1&quot;\n\t\t\t]\n\t\t}\n\t],\n\t&quot;maximums&quot;: [\n\t\t{\n\t\t\t&quot;values&quot;: [\n\t\t\t\t&quot;153&quot;\n\t\t\t]\n\t\t}\n\t]\n}\n</code></pre>\n<p>I turned this into simpler data like so:</p>\n<pre><code class=\"language-js\">let report = res.data.reports[0].data;\nlet data = report.rows.map(r =&gt; {\nreturn { path: r.dimensions[0], views: r.metrics[0].values[0]};\n});\n</code></pre>\n<p>Which gives me the simpler:</p>\n<pre><code class=\"language-js\">[\n\t{\n\t\t&quot;path&quot;: &quot;/article/perform-date-manipulations-based-on-adding-or-subtracting-time/&quot;,\n\t\t&quot;views&quot;: &quot;153&quot;\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/&quot;,\n\t\t&quot;views&quot;: &quot;41&quot;\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/article/create-a-random-nonce-string-using-javascript/&quot;,\n\t\t&quot;views&quot;: &quot;16&quot;\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/all/&quot;,\n\t\t&quot;views&quot;: &quot;8&quot;\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/article/traversing-dom-subtrees-with-recursive-walk-the-dom-function/&quot;,\n\t\t&quot;views&quot;: &quot;7&quot;\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/article/check-if-a-value-is-an-array/&quot;,\n\t\t&quot;views&quot;: &quot;5&quot;\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/tag/array/&quot;,\n\t\t&quot;views&quot;: &quot;5&quot;\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/article/map-a-nodelist-to-an-array-of-properties/&quot;,\n\t\t&quot;views&quot;: &quot;3&quot;\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/submit/&quot;,\n\t\t&quot;views&quot;: &quot;3&quot;\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/tag/math/&quot;,\n\t\t&quot;views&quot;: &quot;3&quot;\n\t}\n]\n</code></pre>\n<p>Woot. That worked, now let's get this into Eleventy!</p>\n<h2>Integrating with Eleventy</h2>\n<p>As with my <a href=\"https://www.raymondcamden.com/2020/05/18/integrating-netlify-analytics-and-eleventy\">previous demo</a>, I moved my Node code into an Eleventy <code>_data</code> file called <code>popularpages.js</code>. Here it is:</p>\n<pre><code class=\"language-js\">require('dotenv').config();\n\nconst {google} = require('googleapis');\nlet creds = JSON.parse(process.env.GOOGLE_AUTH);\n\nconst auth = new google.auth.GoogleAuth({\n\tcredentials:creds,\n\tscopes: ['https://www.googleapis.com/auth/analytics.readonly']\n});\n\nconst ap = google.analyticsreporting({\n\tversion:'v4',\n\tauth:auth\n});\n\nmodule.exports = function() {\n\n\treturn new Promise(async (resolve, reject) =&gt; {\n\n\t\tconst res = await ap.reports.batchGet({\n\t\t\trequestBody: {\n\t\t\treportRequests: [\n\t\t\t\t{\n\t\t\t\tviewId: '73496341',\n\t\t\t\tdateRanges: [\n\t\t\t\t\t{\n\t\t\t\t\tstartDate: '7daysAgo',\n\t\t\t\t\tendDate: 'yesterday',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdimensions:[\n\t\t\t\t\t{ &quot;name&quot;: 'ga:pagePath' },\n\t\t\t\t],\n\t\t\t\tmetrics: [\n\t\t\t\t\t{\n\t\t\t\t\texpression: 'ga:pageviews',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\torderBys:[\n\t\t\t\t\t{ fieldName: &quot;ga:pageviews&quot;, sortOrder:'DESCENDING' }\n\t\t\t\t],\n\t\t\t\tpageSize:10\n\t\t\t\t},\n\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\tlet report = res.data.reports[0].data;\n\t\tlet data = report.rows.map(r =&gt; {\n\t\t\treturn { path: r.dimensions[0], views: r.metrics[0].values[0]};\n\t\t}).filter(d =&gt; {\n\t\t\tif(d.path.indexOf('article') === -1) return false;\n\t\t\treturn true;\n\t\t});;\n\n\t\tresolve(data);\n\n\t});\n\n};\n</code></pre>\n<p>Outside of &quot;shaping&quot; it into the format Eleventy wants, there's two main changes. First, I load in my Google auth via an environment variable. I took the JSON, removed the line breaks, and set it as an environment variable locally and as an environment variable in my Netlify site settings.</p>\n<p>The second change is the <code>filter</code> call. For the site in question (<a href=\"https://www.javascriptcookbook.com\">JavaScript Cookbook</a>), I only wanted to show popular articles and not include tag pages or other pages. As with the last example, this is the part you would want to tweak for your own needs.</p>\n<p>Then I put it on my home page.</p>\n<pre><code class=\"language-html\">&lt;h3&gt;Popular Articles&lt;/h3&gt;\n\n{% for article in popularpages limit:5 %}\n\t{% assign articleData = article.path | toData: collections.articles %}\n\t&lt;a href=&quot;{{article.path}}&quot;&gt;{{articleData.title}}&lt;/a&gt; - {% dateFormat articleData.published %}&lt;br/&gt;\n{% endfor %}\n</code></pre>\n<p>The <code>toData</code> filter there is how I &quot;translate&quot; a path into the proper Eleventy data including the title and publication date. While the filter is pretty much the same as my previous example, here it is:</p>\n<pre><code class=\"language-js\">let titleArticleCache = {};\neleventyConfig.addFilter('toData', (p, articles) =&gt; {\n\tif(titleArticleCache[p]) return titleArticleCache[p];\n\tfor(let i=0;i&lt;articles.length;i++) {\n\t\tif(articles[i].url == p) {\n\t\ttitleArticleCache[p] = { title: articles[i].data.title, published: articles[i].data.published};\n\t\treturn titleArticleCache[p];\n\t\t}\n\t}\n\t// cache that we couldn't match\n\ttitleArticleCache[p] = { title: ''};\n\treturn titleArticleCache[p];\n});\n</code></pre>\n<p>And here's how it looks:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/ga3.png\" alt=\"Example output\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can see it live at the <a href=\"https://www.javascriptcookbook.com/\">JavaScript Cookbook</a> and the complete code at the GitHub repo: <a href=\"https://github.com/cfjedimaster/javascriptcookbookstatic\">https://github.com/cfjedimaster/javascriptcookbookstatic</a></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Enhancing Your Netlify Build Notifications",
		"date":"Thu May 28 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/05/29/enhancing-your-netlify-build-notifications",
		"content":"<p>One of the features Netlify supports is sending an email to you on various events. One of them is a successful build. Here's what it looks like:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/netlify1.png\" alt=\"\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Short and sweet. But I really want a bit more information about the build, specifically how long it took. Netlify is quick, but my site is rather large. Every now and then I screw things up and one of the ways I can quickly tell is by seeing how long a build took. All of this information is available and I can go to the Netlify site to get those details, but it would be nice if my email simply passed that along.</p>\n<p>Luckily, Netlify supports <a href=\"https://docs.netlify.com/functions/trigger-on-events/#available-triggers\">triggers</a> that let you fire off calls to serverless functions based on various events. Right now the details of the information sent isn't documented, so my initial work was just setting up a function (properly named, Netlify uses the name to associate it with the event) and using console.log to look at the payload. While kinda spelled out in the text, but not made clear, this data will be in your <code>event.body</code> value passed to the function and will be a JSON string. To look at the payload, I used this:</p>\n<pre><code class=\"language-js\">let pubData = JSON.parse(event.body).payload;\nconsole.log(pubData);\n</code></pre>\n<p>There's no way to retrieve logs from functions via the CLI so I used the Function tab in my Netlify site to view the output. It's hard to read so I literally copied it to my browser console, re-parsed it (it was in string form in the log of course), copied to my clipboard, and pasted it into my editor. Here's what payload looks like. There are a few values I think may be sensitive so I've replaced them with the name of my favorite character from My Little Pony.</p>\n<pre><code class=\"language-js\">&quot;payload&quot;: {\n\t&quot;id&quot;: &quot;juniper montage&quot;,\n\t&quot;site_id&quot;: &quot;9727f051-52fd-4ae7-9128-a0812610ca69&quot;,\n\t&quot;build_id&quot;: &quot;5ed1214aa9b8d70007a87964&quot;,\n\t&quot;state&quot;: &quot;ready&quot;,\n\t&quot;name&quot;: &quot;raymondcamden&quot;,\n\t&quot;url&quot;: &quot;https://www.raymondcamden.com&quot;,\n\t&quot;ssl_url&quot;: &quot;https://www.raymondcamden.com&quot;,\n\t&quot;admin_url&quot;: &quot;https://app.netlify.com/sites/raymondcamden&quot;,\n\t&quot;deploy_url&quot;: &quot;http://master--raymondcamden.netlify.app&quot;,\n\t&quot;deploy_ssl_url&quot;: &quot;https://master--raymondcamden.netlify.app&quot;,\n\t&quot;created_at&quot;: &quot;2020-05-29T14:50:50.922Z&quot;,\n\t&quot;updated_at&quot;: &quot;2020-05-29T14:56:14.401Z&quot;,\n\t&quot;user_id&quot;: &quot;juniper montage&quot;,\n\t&quot;error_message&quot;: null,\n\t&quot;required&quot;: [],\n\t&quot;required_functions&quot;: [],\n\t&quot;commit_ref&quot;: &quot;b10e3145baf01f900cd3376257102ee89c5a1c3e&quot;,\n\t&quot;review_id&quot;: null,\n\t&quot;branch&quot;: &quot;master&quot;,\n\t&quot;commit_url&quot;: &quot;https://github.com/cfjedimaster/raymondcamden2020/commit/b10e3145baf01f900cd3376257102ee89c5a1c3e&quot;,\n\t&quot;skipped&quot;: null,\n\t&quot;locked&quot;: null,\n\t&quot;log_access_attributes&quot;: {\n\t\t&quot;type&quot;: &quot;firebase&quot;,\n\t\t&quot;url&quot;: &quot;https://juniper montage&quot;,\n\t\t&quot;endpoint&quot;: &quot;https://netlify-builds3.firebaseio.com&quot;,\n\t\t&quot;path&quot;: &quot;/builds/juniper montage/log&quot;,\n\t\t&quot;token&quot;: &quot;juniper montage&quot;\n\t},\n\t&quot;title&quot;: &quot;testing func3&quot;,\n\t&quot;review_url&quot;: null,\n\t&quot;published_at&quot;: &quot;2020-05-29T14:56:14.166Z&quot;,\n\t&quot;context&quot;: &quot;production&quot;,\n\t&quot;deploy_time&quot;: 319,\n\t&quot;available_functions&quot;: [\n\t\t{\n\t\t&quot;n&quot;: &quot;deploy-succeeded&quot;,\n\t\t&quot;d&quot;: &quot;09b55bccc9cbe877bd6bc34eee1dc6f5bc75f332b531edca34e636cff2557e76&quot;,\n\t\t&quot;id&quot;: &quot;d80076a174194017b771fccf6e9aebefbcf1265780b86010282d6d3e38bcca75&quot;,\n\t\t&quot;a&quot;: &quot;998805804580&quot;,\n\t\t&quot;c&quot;: &quot;2020-05-29T14:52:59.641Z&quot;,\n\t\t&quot;r&quot;: &quot;nodejs12.x&quot;,\n\t\t&quot;s&quot;: 563\n\t\t}\n\t],\n\t&quot;summary&quot;: {\n\t\t&quot;status&quot;: &quot;ready&quot;,\n\t\t&quot;messages&quot;: [\n\t\t{\n\t\t\t&quot;type&quot;: &quot;info&quot;,\n\t\t\t&quot;title&quot;: &quot;2 new files uploaded&quot;,\n\t\t\t&quot;description&quot;: &quot;2 assets changed.&quot;,\n\t\t\t&quot;details&quot;: null\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;info&quot;,\n\t\t\t&quot;title&quot;: &quot;89 redirect rules processed&quot;,\n\t\t\t&quot;description&quot;: &quot;All redirect rules deployed without errors.&quot;,\n\t\t\t&quot;details&quot;: &quot;&quot;\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;info&quot;,\n\t\t\t&quot;title&quot;: &quot;No header rules processed&quot;,\n\t\t\t&quot;description&quot;: &quot;This deploy did not include any header rules. [Learn more about headers](https://www.netlify.com/docs/headers-and-basic-auth/).&quot;,\n\t\t\t&quot;details&quot;: &quot;&quot;\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;info&quot;,\n\t\t\t&quot;title&quot;: &quot;All linked resources are secure&quot;,\n\t\t\t&quot;description&quot;: &quot;Congratulations! No insecure mixed content found in your files.&quot;,\n\t\t\t&quot;details&quot;: null\n\t\t}\n\t\t]\n\t},\n\t&quot;screenshot_url&quot;: null,\n\t&quot;site_capabilities&quot;: {\n\t\t&quot;title&quot;: &quot;Netlify Team Premium&quot;,\n\t\t&quot;asset_acceleration&quot;: true,\n\t\t&quot;form_processing&quot;: true,\n\t\t&quot;cdn_propagation&quot;: &quot;partial&quot;,\n\t\t&quot;build_gc_exchange&quot;: &quot;buildbot-global-gc&quot;,\n\t\t&quot;build_node_pool&quot;: &quot;buildbot-global&quot;,\n\t\t&quot;domain_aliases&quot;: true,\n\t\t&quot;secure_site&quot;: true,\n\t\t&quot;prerendering&quot;: true,\n\t\t&quot;proxying&quot;: true,\n\t\t&quot;ssl&quot;: &quot;custom&quot;,\n\t\t&quot;rate_cents&quot;: 0,\n\t\t&quot;yearly_rate_cents&quot;: 0,\n\t\t&quot;ipv6_domain&quot;: &quot;global.netlify.com&quot;,\n\t\t&quot;branch_deploy&quot;: true,\n\t\t&quot;managed_dns&quot;: true,\n\t\t&quot;geo_ip&quot;: true,\n\t\t&quot;split_testing&quot;: true,\n\t\t&quot;role_access_control&quot;: true,\n\t\t&quot;cdn_fanout&quot;: &quot;global.netlify.com&quot;,\n\t\t&quot;account_audit&quot;: true,\n\t\t&quot;site_global_access_controls&quot;: true,\n\t\t&quot;id&quot;: &quot;nf_team_business&quot;,\n\t\t&quot;cdn_tier&quot;: &quot;custom&quot;,\n\t\t&quot;analytics&quot;: {\n\t\t&quot;pageviews&quot;: {\n\t\t\t&quot;unlimited&quot;: true,\n\t\t\t&quot;unit&quot;: &quot;pageviews&quot;\n\t\t}\n\t\t},\n\t\t&quot;forms&quot;: {\n\t\t&quot;submissions&quot;: {\n\t\t\t&quot;unlimited&quot;: true,\n\t\t\t&quot;unit&quot;: &quot;submissions&quot;\n\t\t},\n\t\t&quot;storage&quot;: {\n\t\t\t&quot;unlimited&quot;: true,\n\t\t\t&quot;unit&quot;: &quot;bytes&quot;\n\t\t},\n\t\t&quot;use_functions&quot;: true\n\t\t},\n\t\t&quot;functions&quot;: {\n\t\t&quot;invocations&quot;: {\n\t\t\t&quot;unlimited&quot;: true,\n\t\t\t&quot;unit&quot;: &quot;requests&quot;\n\t\t},\n\t\t&quot;runtime&quot;: {\n\t\t\t&quot;unlimited&quot;: true,\n\t\t\t&quot;unit&quot;: &quot;seconds&quot;\n\t\t}\n\t\t}\n\t},\n\t&quot;committer&quot;: &quot;cfjedimaster&quot;,\n\t&quot;skipped_log&quot;: null,\n\t&quot;manual_deploy&quot;: false,\n\t&quot;file_tracking_optimization&quot;: true,\n\t&quot;plugin_state&quot;: &quot;success&quot;\n}\n</code></pre>\n<p>That's a lot of data, but I can see what I need, published_at and deploy_time. I also think the summary messages are useful too. With that in mind, I built this relatively simple function to email me those details:</p>\n<pre><code class=\"language-js\">const SG_KEY = process.env.SENDGRID;\n\nconst helper = require('sendgrid').mail;\n\nexports.handler = async (event, context) =&gt; {\n  try {\n\n    console.log('deploy succeeded run!');\n    let pubData = JSON.parse(event.body).payload;\n    let body = `\nDeploy Succeeded for ${pubData.name} (${pubData.url})\n\nBuild Title: ${pubData.title}\nFinished:    ${pubData.published_at}\nDuration:    ${toMinutes(pubData.deploy_time)}\n    `;\n\n    if(pubData.summary &amp;&amp; pubData.summary.messages) {\n      body += `\nMessages:`;\n      pubData.summary.messages.forEach(msg =&gt; {\n        body += `\n\n[${msg.type}] ${msg.title}\n${msg.description}`;\n      });\n    }\n\n    await sendEmail(body, 'Netlify Build Succeeded', 'raymondcamden@gmail.com', 'raymondcamden@gmail.com');\n\n  } catch (err) {\n    console.log('error handler for function ran', err.toString());\n    return { statusCode: 500, body: err.toString() }\n  }\n}\n\nfunction toMinutes(s) {\n\tif(s &lt; 60) return `${s} seconds`;\n\tlet minutes = (s - (s % 60)) / 60;\n\treturn `${minutes}m ${s%60}s`;\n}\n\nasync function sendEmail(body, subject, from, to) {\n  let mailContent = new helper.Content('text/plain', body);\n  let from_email = new helper.Email(from);\n  let to_email = new helper.Email(to);\n  let mail = new helper.Mail(from_email, subject, to_email, mailContent);\n  let sg = require('sendgrid')(SG_KEY);\n\n  let request = sg.emptyRequest({\n    method: 'POST',\n    path: '/v3/mail/send',\n    body: mail.toJSON()\n  });\n\n  return new Promise((resolve, reject) =&gt; {\n    sg.API(request, function(error, response) {\n      resolve(true);\n      if(error) {\n        console.log(JSON.stringify(error.response));\n        reject(error.response.body);\n      }\n    });\n  });\n}\n</code></pre>\n<p>I start off creating a <code>body</code> string that includes the bits I care about. I wrote a <code>toMinutes</code> function that pretty much mimics how Netlify itself renders build durations. I then pass this off to SendGrid to handle the mail. One thing I wish Netlify has that <a href=\"https://pipedream.com\">Pipedream</a> does is a simple way to &quot;mail the owner&quot;. Ie I would love to do:</p>\n<pre><code class=\"language-js\">$mail(body);\n</code></pre>\n<p>And it would simply send it to the email address on file for the current site. And here's an example of the result:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/05/netlify2.png\" alt=\"Email sample\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>By the way, &quot;Build Title&quot; is driven by the Git commit message and will be &quot;null&quot; in a manual build. I could support that in my email so it looks nicer, but I'm fine with &quot;null&quot;.  You can find the code for the function, and the rest of my site, up on GitHub: <a href=\"https://github.com/cfjedimaster/raymondcamden2020\">https://github.com/cfjedimaster/raymondcamden2020</a>.</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "serverless",
            
                "static sites"
            
		]

	},

	{
		"title": "Building a Dual Selects Control in Vue.js",
		"date":"Sun Jun 07 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/06/08/building-a-dual-selects-control-in-vuejs",
		"content":"<p>Earlier this week, an old friend of mine and all around good/smart guy Ben Nadel wrote up his experience on building a &quot;dual select&quot; control in AngularJS: <a href=\"https://www.bennadel.com/blog/3841-managing-selections-with-a-dual-select-control-experience-in-angular-9-1-9.htm\">&quot;Managing Selections With A Dual-Select Control Experience In Angular 9.1.9&quot;</a>. If you aren't aware, a &quot;dual select&quot; control is one where two vertical columns of information are presented and the user can move items from one side to another. Ben had a great animated GIF on his blog entry that he was cool with me sharing:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/06/ds.gif\" alt=\"Animated gif showing how a dual select works\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I've built these types of controls before but had not yet attempted to build it in Vue.js. With that mind, this weekend I worked on an example of it - both in a simple Vue.js application and also as a component version. While I'm sure this could be done differently (and I'd love to see examples in the comments below!), here's how I built it.</p>\n<h3>Version One</h3>\n<p>As stated above, I built my first version in a simple application. For thise I made use of <a href=\"https://codepen.io/\">CodePen</a> which has recently added Vue SFC (Single File Component) support to their site. While not necessary for my demo I thought I'd give it a try for this first example. I began by building out my HTML. I knew I'd need two select controls with the <code>multiple</code> attribute and two buttons between them. One to move items to the right and one to move them back to the left.</p>\n<p>My initial demo data consisted of an array of users, but to be clear this was arbitrary:</p>\n<pre><code class=\"language-js\">leftUsers: [\n\t&quot;Raymond Camden&quot;,\n\t&quot;Lindy Camden&quot;,\n\t&quot;Jacob Camden&quot;,\n\t&quot;Lynn Camden&quot;,\n\t&quot;Jane Camden&quot;,\n\t&quot;Noah Camden&quot;,\n\t&quot;Maisie Camden&quot;,\n\t&quot;Carol Camden&quot;,\n\t&quot;Ashton Roberthon&quot;,\n\t&quot;Weston Camden&quot;\n],\n</code></pre>\n<p>I rendered the left select like so:</p>\n<pre><code class=\"language-html\">&lt;h2&gt;Possible Users&lt;/h2&gt;\n&lt;select multiple v-model=&quot;leftSelectedUsers&quot; @dblclick=&quot;moveRight&quot;&gt;\n\t&lt;option v-for=&quot;user in leftUsers&quot;&gt;\n\t\t{{ user }}\n\t&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n<p>Note that my option tags are iterating over my data but my v-model is connected to another value, <code>leftSelectedUsers</code>. The point of that is to let me have an array of &quot;initial&quot; data and an array representing values selected in the control. That value will be an array whether I pick one or more options.</p>\n<p>The right side looks pretty similar:</p>\n<pre><code class=\"language-html\">&lt;h2&gt;Selected Users&lt;/h2&gt;\n&lt;select multiple v-model=&quot;rightSelectedUsers&quot; @dblclick=&quot;moveLeft&quot;&gt;\n&lt;option v-for=&quot;user in rightUsers&quot;&gt;\n\t{{ user }}\n&lt;/option&gt;\n</code></pre>\n<p>My two buttons in the middle simply fired off respective calls to move data:</p>\n<pre><code class=\"language-html\">&lt;button @click=&quot;moveRight&quot;&gt;=&amp;gt;&lt;/button&gt;\n&lt;button @click=&quot;moveLeft&quot;&gt;&amp;lt;=&lt;/button&gt;\n</code></pre>\n<p>You'll notice I also use the &quot;double click&quot; event. This makes it easier to move one item quickly by just quickly clicking on an individual user. Alright, let's check out the JavaScript:</p>\n<pre><code class=\"language-js\">export default {\n  data() {\n    return {\n\t\t\tleftSelectedUsers:[],\n\t\t\tleftUsers: [\n\t\t\t\t&quot;Raymond Camden&quot;,\n\t\t\t\t&quot;Lindy Camden&quot;,\n\t\t\t\t&quot;Jacob Camden&quot;,\n\t\t\t\t&quot;Lynn Camden&quot;,\n\t\t\t\t&quot;Jane Camden&quot;,\n\t\t\t\t&quot;Noah Camden&quot;,\n\t\t\t\t&quot;Maisie Camden&quot;,\n\t\t\t\t&quot;Carol Camden&quot;,\n\t\t\t\t&quot;Ashton Roberthon&quot;,\n\t\t\t\t&quot;Weston Camden&quot;\n\t\t\t],\n\t\t\trightSelectedUsers:[],\n\t\t\trightUsers:[]\n    };\n  },\n  methods: {\n\t\tmoveLeft() {\n\t\t\tif(!this.rightSelectedUsers.length) return;\n\t\t\tconsole.log('moveLeft',this.rightUsers);\n\t\t\tfor(let i=this.rightSelectedUsers.length;i&gt;0;i--) {\n\t\t\t\tlet idx = this.rightUsers.indexOf(this.rightSelectedUsers[i-1]);\n\t\t\t\tthis.rightUsers.splice(idx, 1);\n\t\t\t\tthis.leftUsers.push(this.rightSelectedUsers[i-1]);\n\t\t\t\tthis.rightSelectedUsers.pop();\n\t\t\t}\n\t\t},\n\t\tmoveRight() {\n\t\t\tif(!this.leftSelectedUsers.length) return;\n\t\t\tconsole.log('moveRight', this.leftSelectedUsers);\n\t\t\tfor(let i=this.leftSelectedUsers.length;i&gt;0;i--) {\n\t\t\t\tlet idx = this.leftUsers.indexOf(this.leftSelectedUsers[i-1]);\n\t\t\t\tthis.leftUsers.splice(idx, 1);\n\t\t\t\tthis.rightUsers.push(this.leftSelectedUsers[i-1]);\n\t\t\t\tthis.leftSelectedUsers.pop();\n\t\t\t}\n\t\t}\n  }\n};\n</code></pre>\n<p>In both cases, I check first to see if anything has been selected. If so, I consider it an array and loop from the end of the array to the beginning. I do this because I'm going to be removing items from the array as I process them. The logic basically boils down to - for each of the selected items, I remove them from one array and add them to the other. Honestly that one part was the hardest for me. But that's it, and you can see it working below:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"GRoJvvg\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Duel Select\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/GRoJvvg\">\n  Vue Duel Select</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h3>Version Two</h3>\n<p>Alright, so for the second version, I wanted to turn the above into a proper Vue component. I could have gone crazy with the number of options and arguments it took to allow for deep customization, but I decided to keep things simple and limit your options to:</p>\n<ul>\n<li>The name of the left column.</li>\n<li>The data in the left column.</li>\n<li>The name of the right column.</li>\n<li>The data in the right column.</li>\n</ul>\n<p>Because CodePen can't (as far as I know) work with multiple SFCs in one pen, I decided to switch to <a href=\"https://codesandbox.io/\">CodeSandbox</a>. On their platform, I created my component and set it up to support the parameters above. Here it is in it's entirety.</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div id=&quot;app&quot; class=&quot;container&quot;&gt;\n    &lt;div&gt;\n      &lt;h2&gt;{{leftLabel}}&lt;/h2&gt;\n      &lt;select multiple v-model=&quot;leftSelectedData&quot; @dblclick=&quot;moveRight&quot;&gt;\n        &lt;option v-for=&quot;item in leftData&quot;&gt;{{ item }}&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/div&gt;\n\n    &lt;div class=&quot;middle&quot;&gt;\n      &lt;button @click=&quot;moveRight&quot;&gt;=&amp;gt;&lt;/button&gt;\n      &lt;button @click=&quot;moveLeft&quot;&gt;&amp;lt;=&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div&gt;\n      &lt;h2&gt;{{rightLabel}}&lt;/h2&gt;\n      &lt;select multiple v-model=&quot;rightSelectedData&quot; @dblclick=&quot;moveLeft&quot;&gt;\n        &lt;option v-for=&quot;item in rightData&quot;&gt;{{ item }}&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      leftSelectedData: [],\n      rightSelectedData: []\n    };\n  },\n  props: {\n    leftLabel: {\n      type: String,\n      required: true\n    },\n    rightLabel: {\n      type: String,\n      required: true\n    },\n    leftData: {\n      type: Array,\n      required: true\n    },\n    rightData: {\n      type: Array,\n      required: true\n    }\n  },\n  methods: {\n    moveLeft() {\n      if (!this.rightSelectedData.length) return;\n      for (let i = this.rightSelectedData.length; i &gt; 0; i--) {\n        let idx = this.rightData.indexOf(this.rightSelectedData[i - 1]);\n        this.rightData.splice(idx, 1);\n        this.leftData.push(this.rightSelectedData[i - 1]);\n        this.rightSelectedData.pop();\n      }\n    },\n    moveRight() {\n      if (!this.leftSelectedData.length) return;\n      for (let i = this.leftSelectedData.length; i &gt; 0; i--) {\n        let idx = this.leftData.indexOf(this.leftSelectedData[i - 1]);\n        this.leftData.splice(idx, 1);\n        this.rightData.push(this.leftSelectedData[i - 1]);\n        this.leftSelectedData.pop();\n      }\n    }\n  }\n};\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.container {\n  display: grid;\n  grid-template-columns: 30% 10% 30%;\n  align-items: center;\n}\n\n.container select {\n  height: 200px;\n  width: 100%;\n}\n\n.container .middle {\n  text-align: center;\n}\n\n.container button {\n  width: 80%;\n  margin-bottom: 5px;\n}\n&lt;/style&gt;\n</code></pre>\n<p>It's roughly the same as what I showed above (although this time you can see my lovely CSS styling), but with variables names that are a bit more abstract. Also note the use of the four props to pass in data. This then allows me to do this in a higher level component:</p>\n<pre><code class=\"language-html\">&lt;DualSelects\n\tleftLabel=&quot;Available Users&quot;\n\trightLabel=&quot;Chosen Users&quot;\n\t:leftData=&quot;leftUsers&quot;\n\t:rightData=&quot;rightUsers&quot;\n&gt;&lt;/DualSelects&gt;\n</code></pre>\n<p>Which frankly I think is freaking cool. By binding the data I can now simply set/get the left and right side at will and let the user customize whats in each list. Here's the CodeSandbox version:</p>\n<iframe\n     src=\"https://codesandbox.io/embed/duel-select-demo-ewsc9?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"duel select demo\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>As I said above, I'm <em>sure</em> there is a nicer way to build this and I absolutely wouldn't mind seeing examples below, and finally, thank you again Ben for the inspiration!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@levi_stute_cinematography?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Levi Stute</a> on Unsplash</i></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Testing Netlify's Proxy Support for API Hiding",
		"date":"Tue Jun 09 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/06/10/testing-netlifys-proxy-support-for-api-hiding",
		"content":"<p>For my blog post today I want to play with another Netlify feature, <a href=\"https://docs.netlify.com/routing/redirects/rewrites-proxies/#proxy-to-another-service\">creating a proxy</a> to another service. This is one of those simple things that just plain works. The docs are clear and to the point. That being said, I really wanted to see this for myself in action.</p>\n<p>In a nutshell, Netlify lets you define a URL route for your site that will map to an external site. So for example, I can say a request for <code>/cat</code> will map to <code>htts://thecatapi.com</code>. That by itself isn't necessarily rocket science, but if you tell Netlify to use a 200 status code on the redirect, the network connection will be done entirely on Netlify's side and the end user never sees the redirect.</p>\n<p>This means a lot of things. If you were using serverless functions just to hide an API key, you don't need to anymore. If you were using serverless functions to create an abstraction (in case you move from remote service A to remote service B), you may not need to do that anymore. While certainly not applicable to every case, it does mean that for simple key hiding and the such you don't have to write a lick of code.</p>\n<p>As I said, this was documented well but I wanted to see it for myself. For my test, I decided to create a proxy to HERE's (my employer!) <a href=\"https://developer.here.com/products/geocoding-and-search\">Geocoding and Search API</a>. Now before I go any further, note that the keys you create for our services <em>absolutely 100%</em> allow you to use them in client-side applications and you can (<strong>should</strong>) use the host name restriction feature to ensure they can only be used in one place. My demo was simple - on load, make a request for places near a hard coded location within a hard coded category (food places). I live in Louisiana so I knew this would return upwards of three to four million results or so.</p>\n<p>Here's how it looks in client-side code:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tresults:null\n\t},\n\tasync created() {\n\t\tlet result = await fetch('/geosearch?at=30.22,-92.02&amp;cat=101-070');\n\t\tlet data = await result.json();\n\t\tthis.results = data.items;\n\t}\n});\n</code></pre>\n<p>Note that the hard coded values for <code>at</code> and <code>cat</code> could absolutely be dynamic. I was testing Netlify here, not our API. When run in the browser, you see this in network tools:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/06/nr1.png\" alt=\"Network request\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>If you dig into the headers and such nothing there will reveal what the destination is either. To make this work, I added a file, <code>_redirects</code>, which this:</p>\n<pre><code>/geosearch/* at=:at cat=:cat https://browse.search.hereapi.com/v1/browse?apiKey=H2HPEplnWZvYwdCxIeyaFJf_RhOLUMzQXip2ADBNupY&amp;at=:at&amp;categories=:cat 200\n</code></pre>\n<p>As I said, the docs were good, but it did take me a minute or two to wrap my head around how query string parameters work. You do <em>not</em> include them in the route itself, but they after in a space delimited format. Order does not matter. I then map everything to the destination URL. Finally, I add the status code. Technically you don't need it if you aren't concerned with folks seeing the destination path. Why would you bother then? Because this will <strong>also</strong> fix cases where CORS isn't setup. I've often used the <a href=\"https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/\">iTunes Search API</a> in demos but stopped because <em>some</em> of the machines in their cluster don't support CORS. This would correct it.</p>\n<p>So why <em>wouldn't</em> you use this versus a serverless function? If I use a serverless function I have more control over the data that's returned. An API might return 10-20 values where my code only needs 2-3. I can return a smaller subset and reduce the network traffic. I can also transform values if the API is, well, weird. Maybe it returns XML because it thinks we're still in the 90s. You get the idea. In these cases, a serverless function lets me massage the data before my front end works with it. Best of all, if I switch providers, I can take their data and reformat it to match the last provider. Of course, you could use the simple redirect feature for now and switch to serverless later using the same path!</p>\n<p>If you want to see my simple demo in action, go to <a href=\"https://netlifydemos.netlify.app/test_proxy.html\">https://netlifydemos.netlify.app/test_proxy.html</a> and you can see the complete source over at <a href=\"https://github.com/cfjedimaster/NetlifyTestingZone\">https://github.com/cfjedimaster/NetlifyTestingZone</a>.</p>\n<p>Oh, a quick note. Obviously a public GitHub repo is going to contain your <code>_redirects</code> file. In that case you would need to use a private repository instead. You could also deploy from the CLI, but than you use the CI/CD setup that Netlify shines at. If you really want a public GitHub repo than you'll need to use a serverless function and environment variable instead. (Not much work at all!)</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@martino_pietropoli?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Martino Pietropoli</a> on Unsplash</i></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "serverless",
            
                "static sites"
            
		]

	},

	{
		"title": "Determining Food Popularity By Location",
		"date":"Mon Jun 22 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/06/23/determining-food-popularity-by-location",
		"content":"<p>This is typically the kind of post I've write up on <a href=\"https://developer.here.com/blog\">HERE's blog</a>, but as I haven't blogged here in nearly two weeks, I figured I'm past due to share some content. As it stands, this is yet another one of my lame demos and nothing really serious, but I had fun building it and thought I'd share.</p>\n<p>One of the API's that HERE provides is involves <a href=\"https://developer.here.com/products/geocoding-and-search\">searching</a> for POIs (points of interest) at a location. We provide two basic APIs for that. The first, <a href=\"https://developer.here.com/documentation/geocoding-search-api/dev_guide/topics/endpoint-discover-brief.html\">Discover</a> is useful for text queries, so for example, you remember dining at a place named &quot;Bob's&quot; something and you want to figure out exactly what it was. The other API, <a href=\"https://developer.here.com/documentation/geocoding-search-api/dev_guide/topics/endpoint-browse-brief.html\">Browse</a>, is better suited to category based searches, for example, finding all the banks near your current location.</p>\n<p>One of the things I really like about our search APIs is the <em>incredibly deep</em> <a href=\"https://developer.here.com/documentation/geocoding-search-api/dev_guide/topics-places/introduction.html\">categorization feature</a>. It's split into two versions, one that's generic and one that's based on types of food. The &quot;generic&quot; category API system goes very deep. So you can ask for &quot;nightlife-entertainment&quot; POIs, or more specifically a &quot;gambling, lottery, or betting&quot; establishment, or very precisely a casino.</p>\n<p>That type of specificity also exists on the food types side. You can go from Asian, to Chinese, to over <em>ten</em> types of different Chinese cuisine. I thought I was pretty familiar with Chinese food, but I was blown away by the different types of Chinese food I had never known even existed.</p>\n<h3>The First Demo</h3>\n<p>So given all of this, I thought it would be kind of food to examine the types of food options available to you. For my first demo, I used Geolocation to determine your position, and then I asked for 100 restaurants near you. From that, I aggregated the types of restaurants as well as the food types and built a report. Here's how I built it. First, the front end:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;div v-if=&quot;message&quot;&gt;\n    {{message}}\n  &lt;/div&gt;\n  &lt;div v-if=&quot;types&quot;&gt;\n    &lt;h2&gt;Types of Restaurants&lt;/h2&gt;\n    &lt;ul&gt;\n       &lt;li v-for=&quot;type of types&quot;&gt;\n         {{ type.name }} - {{ type.value }}\n      &lt;/li&gt;\n  &lt;/div&gt;\n  &lt;div v-if=&quot;foodTypes&quot;&gt;\n    &lt;h2&gt;Types of Food&lt;/h2&gt;\n    &lt;ul&gt;\n       &lt;li v-for=&quot;type of foodTypes&quot;&gt;\n         {{ type.name }} - {{ type.value }}\n      &lt;/li&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>This is fairly simple as all it does is show a loading message and then displays the food reports when done. The real magic is in the JavaScript. I'm going to share the entire CodePen below, so let me focus in on the important bits. First, my <code>created</code> event hook:</p>\n<pre><code class=\"language-js\">  async created() {\n    this.message = 'Fetching location...';\n    this.location = await this.getLocation();\n    this.message = null;\n    this.results = await this.getFoodOptions();\n    this.types = this.sortToArray(this.generateRestaurantTypes(this.results));\n    this.foodTypes = this.sortToArray(this.generateFoodTypes(this.results));\n    console.log('got '+this.results.length+' items');\n\n  },\n</code></pre>\n<p>I get the user's location (just using the browser's geolocation API) and then start working on my data. Next, I fetch all of my restaurant options:</p>\n<pre><code class=\"language-js\">async getFoodOptions() {\n\tthis.message = 'Getting food data for your location.';\n\tlet url = `https://discover.search.hereapi.com/v1/browse?apikey=${apikey}&amp;at=${this.location.latitude},${this.location.longitude}&amp;categories=100-1000-0000&amp;limit=100`;\n\tlet resp = await fetch(url);\n\tlet data = await resp.json();\n\tthis.message = '';\n\n\treturn data.items.map(m =&gt; {\n\tlet open = '';\n\tlet openHours = '';\n\tif(m.openingHours &amp;&amp; m.openingHours.length &gt;= 1) {\n\t\topen = m.openingHours[0].isOpen;\n\t\topenHours = m.openingHours[0].text;\n\t}\n\treturn {\n\t\ttitle:m.title,\n\t\taddress:m.address,\n\t\tposition:m.position,\n\t\tcontacts:m.contacts,\n\t\topen:open,\n\t\topenHours:openHours,\n\t\tcategories:m.categories,\n\t\tfoodTypes:m.foodTypes\n\t}\n\t});\n},\n</code></pre>\n<p>For the most part, this is mainly just a call to the Browse API passing in the category ID we use for restaurants. Once I have my data I do a bit of manipulation and simplification. For example, setting up a top level <code>open</code> property. This comes from code I used in another demo and technically isn't even used in this demo.</p>\n<p>Once I have my data, I then build my two reports. First, on restaurant types:</p>\n<pre><code class=\"language-js\">generateRestaurantTypes(items) {\n\tlet result = {};\n\tfor(i of items) {\n\t\tfor(c of i.categories) {\n\t\t//ignore the generic\n\t\tif(c.id !== '100-1000-0000') {\n\t\t\tif(!result[c.name]) result[c.name] = 0;\n\t\t\tresult[c.name]++;\n\t\t}\n\t\t}\n\t}\n\treturn result;\n},\n</code></pre>\n<p>You'll notice I ignore the top level type so I can focus on more specific types. Then I get my food types:</p>\n<pre><code class=\"language-js\">generateFoodTypes(items) {\n\tlet result = {};\n\tfor(i of items) {\n\t\tif(i.foodTypes) {\n\t\tfor(c of i.foodTypes) {\n\t\t\t//only do the primary\n\t\t\tif(c.primary) {\n\t\t\tif(!result[c.name]) result[c.name] = 0;\n\t\t\tresult[c.name]++;\n\t\t\t}\n\t\t}\n\t\t}\n\t}\n\treturn result;\n\t\n},\n</code></pre>\n<p>You'll notice I look for a <code>primary</code> flag on the data. Any restaurant returned will have multiple food types, but only one will be marked as primary. I can totally see removing this restriction as it may provide better, or at least different results.</p>\n<p>Both of the previous functions return simple JavaScript objects with the keys representing the name of the restauarant or food type and the value as the count. Both of these are passed to a simple utility function to return a sorted array.</p>\n<p>The final result, for my location:</p>\n<ul>\n<li>American - 24</li>\n<li>Pizza - 7</li>\n<li>Seafood - 6</li>\n<li>International - 5</li>\n<li>Italian - 5</li>\n<li>Sandwich - 5</li>\n<li>American - Cajun - 4</li>\n<li>American - Barbecue/Southern - 3</li>\n<li>Greek - 3</li>\n<li>Burgers - 3</li>\n<li>American - Californian - 2</li>\n<li>Thai - 2</li>\n<li>Bistro - 2</li>\n<li>Chicken - 2</li>\n<li>Chinese - 2</li>\n<li>Mexican - 2</li>\n<li>Natural/Healthy - 2</li>\n<li>Ice Cream - 2</li>\n<li>Brunch - 1</li>\n<li>Japanese - Sushi - 1</li>\n<li>Breakfast - 1</li>\n<li>Asian - 1</li>\n<li>French - 1</li>\n<li>Pastries - 1</li>\n</ul>\n<p>Some of this isn't surprising. While I live in the &quot;heart&quot; of the Cajun area, it's rare to find a proper &quot;Cajun&quot; restaurant. A lot of places will serve Cajun dishes, but not as their main attraction. I do think the Asian/Chinese numbers though are a bit low, as I can think of at least 5 off the top of my head.</p>\n<p>Check out the complete demo below:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"XWXpWme\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Food Report 1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/XWXpWme\">\n  Food Report 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h3>Demo the Second</h3>\n<p>For the second demo, I wanted to kick it up a notch, mainly by making it easy to see what the food types look like in other areas. I start off with a full map of America (and that's my bias, I could use geolocation here and center on your location):</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/06/ft1.jpg\" alt=\"Map centered on America\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>If you click on a location, I then get the data and report it.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/06/ft2.jpg\" alt=\"Food report for Bellingham, WA\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>For the most part, this code isn't too difficult, except that I removed Vue.js and kept it vanilla. The front end is rather bare so I'll skip it (will share full code in a bit), so let's focus on the JavaScript. I begin with code handling displaying the map:</p>\n<pre><code class=\"language-js\">// Obtain the default map types from the platform object:\nvar defaultLayers = platform.createDefaultLayers();\n\nvar map = new H.Map(\n\tdocument.getElementById('mapContainer'),\n\tdefaultLayers.vector.normal.map,\n\t{\n\t\tzoom: 5,\n\t\tcenter: { lat: 35.22, lng: -92.02 },\n\t\tpixelRatio: window.devicePixelRatio || 1\n\t}\n);\n\nvar behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));\n\nvar ui = H.ui.UI.createDefault(map, defaultLayers);\n</code></pre>\n<p>This centers the map, sets a zoom, and adds touch support and basic UI controls. Next, I get some handlers to the DOM:</p>\n<pre><code class=\"language-js\">let instructions = document.querySelector('#instructions');\nlet result = document.querySelector('#result');\n</code></pre>\n<p>Now I add a touch handler for the map. It needs to figure out where you are and then get the data:</p>\n<pre><code class=\"language-js\">map.addEventListener('tap', async evt =&gt; {\n\n\t\t// hide once tapped\n\t\tinstructions.style.display = 'none';\n\n\t\tlet geom = map.screenToGeo(evt.currentPointer.viewportX, evt.currentPointer.viewportY);\n\t\tlet address = await reverseGeocode(geom);\n\t\tconsole.log('address is '+address);\t\n\t\tlet restaurants = await getRestaurants(geom);\n\t\t//console.log('restaurants', restaurants);\n\t\t//Note, we are NOT reporting on types in this demo, but I may bring it back.\n\t   \tlet types = sortToArray(generateRestaurantTypes(restaurants));\n\t    let foodTypes = sortToArray(generateFoodTypes(restaurants));\n\t\tconsole.log(foodTypes);\n\t\tlet html = `\n&lt;h3&gt;Location: ${address}&lt;/h3&gt;\n\n&lt;b&gt;Most Popular Food Types:&lt;/b&gt;\n&lt;ul&gt;\n\t\t`;\n\t\tfor(let i=0;i&lt;Math.min(foodTypes.length,10);i++) {\n\t\t\thtml += `\n\t\t\t&lt;li&gt;${foodTypes[i].name}&lt;/li&gt;\n\t\t\t`;\n\t\t};\n\t\thtml += '&lt;/ul&gt;';\n\t\tresult.innerHTML = html;\n\t});\n}\n</code></pre>\n<p>The tap event is passed location information which let's me use our <a href=\"https://developer.here.com/documentation/geocoding-search-api/dev_guide/topics/endpoint-reverse-geocode-brief.html\">Reverse Geocode API</a> to translate it into a proper named location. I just use this for the display.</p>\n<p>I then ask for my data. As the comment says, I did do reporting on types of restaurants like my first demo, but ended up not rendering it. I should remove it I guess. Both functions called here haven't changed. I then write out the report, maxed to ten entries.</p>\n<p>You can demo this here: <a href=\"https://cfjedimaster.github.io/heredemos/mapsjs/food.html\">https://cfjedimaster.github.io/heredemos/mapsjs/food.html</a>. The full source code may be found here: <a href=\"https://github.com/cfjedimaster/heredemos/blob/master/mapsjs/food.js\">https://github.com/cfjedimaster/heredemos/blob/master/mapsjs/food.js</a>.</p>\n<p>I've spent some time clicking around and I've got to say I find the results pretty fascinating. Let me know what you think by leaving me a comment below!</p>\n<p><i>Header photo by <a href=\"https://unsplash.com/@foodiesfeed?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jakub Kapusnak</a> on Unsplash</i></p>\n<p>cat food, this text is just here while I test some Algolia stuff. you may ignore. :)</p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Adding Algolia Search to Eleventy and Netlify",
		"date":"Tue Jun 23 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/06/24/adding-algolia-search-to-eleventy-and-netlify",
		"content":"<p>Before I begin, a quick warning. I got things working, but I honestly cannot say this is the best way to do it. I'm still learning and my goal is to add Algolia to my site here, but I failed in that attempt. (I'll explain why after the main tutorial.) I first wrote about <a href=\"https://www.stackbit.com/blog/jamstack-search/\">search and the Jamstack</a> earlier this year, and one of the first comments I got was about why I had not covered <a href=\"https://www.algolia.com/\">Algolia</a>. At the time, I didn't have a good answer outside of &quot;I just haven't tried it yet.&quot; Over the past week I've played with it off and on and I have to say I'm incredibly impressed even after a brief foray into it. As I said, what follows is rough, and just my first attempt, but I hope it helps others.</p>\n<p>I also want to note that my approach is pretty specific to Eleventy and Netlify. You'll see why Netlify was important but any Jamstack host that has support for &quot;run this on a build&quot; (for example, via a webhook) would be able to achieve similar results.</p>\n<p>Before I begin, note that Algolia is a commercial service with multiple <a href=\"https://www.algolia.com/pricing/\">pricing tiers</a>. The free tier allows for 50K operations and 10K records. That's <em>incredibly</em> generous but did cause a problem with my blog. (Again though, I'm holding off until the end.)</p>\n<p>At a high level, Algolia is very similar to Verity and Lucene. I don't hear people talk about either of these anymore, but I spent many years using them with ColdFusion. You start off by defining your bucket of data that will be searched. Algolia refers to this as an index. Indexes have data as well as many options, for example, specifying how some properties may be more important than others. You can even do cool things like custom synonyms relevant to your data.</p>\n<p>The index is a mirror of your data which is an important thing to keep in mind. Every time you add, edit, or delete data from your site you need to update the index to reflect that change. In an app server type site, that's trivial. On the Jamstack, it's a bit more complex. Here's how I solved it in a simple Eleventy application.</p>\n<p>I began by creating a boring blog in Eleventy. One home page, a posts folder and a couple of markdown files. Nothing else really.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/06/ag1.png\" alt=\"Screenshot of Blog\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I'm not going to show the code for this part as I'm assuming you already have a basic understanding of Eleventy, but everything's in my GitHub repo I'll share at the end.</p>\n<p>For my search, I decided to index the posts. These are all markdown files available to Eleventy as <code>collections.posts</code>. Algolia supports seeding your index with a JSON file, so I built the following:</p>\n<pre><code class=\"language-html\">---\npermalink: /algolia.json\n---\n\n{% assign posts = collections.posts | reverse %}\n[\n{% for post in posts %}\n\t{\n\t\t&quot;title&quot;: {{post.data.title | jsonify}},\n\t\t&quot;date&quot;:&quot;{{ page.date }}&quot;,\n\t\t&quot;url&quot;:&quot;{{ post.url | prepend: site.url }}&quot;,\n\t\t&quot;content&quot;:{{ post.templateContent | algExcerpt | jsonify }}\n\t}{% unless forloop.last %},{% endunless %}\n{% endfor %}\n]\n</code></pre>\n<p>The output of this will be a JSON collection of all my posts. I include the title, date, url, and content. (I'll explain the filters in a second.) I could also include post categories and other information. Algolia lets you index anything and you've got control over what's searched, which means you can include data you want to return in searches but not actually search against. You can see this live here: <a href=\"https://eleventyalgolia.netlify.app/algolia.json\">https://eleventyalgolia.netlify.app/algolia.json</a> By the way, the reverse sort was just a way for me to see if it was updating properly with a large amount of data.</p>\n<p>So there's two filters for my content, <code>algExcerpt</code> and <code>jsonify</code>. <code>jsonfify</code> just does a JSON stringify on the data. <code>algExcerpt</code> is a bit more complex:</p>\n<pre><code class=\"language-js\">// Remove &lt;code&gt;.*&lt;/code&gt;, remove HTML, then with plain text, limit to 5k chars\neleventyConfig.addFilter('algExcerpt', function (text) {\n\t//first remove code\n\ttext = text.replace(/&lt;code class=&quot;language-.*?&quot;&gt;.*?&lt;\\/code&gt;/sg, '');\n\t//now remove html tags\n\ttext = text.replace(/&lt;.*?&gt;/g, '');\n\t//now limit to 5k\n\treturn text.substring(0,5000);\n});\n</code></pre>\n<p>As the comment says, I wanted to remove code blocks, and the text inside them, and HTML. Also, Algolia has a max record size limit on the free tier (10k). I figured 5k was enough to get the point across. I also decided it made sense to get rid of code as if I blog about code feature <code>foo</code> I'm probably going to mention <code>foo</code> more than once in the regular text of the post. Obviously these are a bit arbitrary. Also, I don't think Algolia has a problem with HTML, but I figured it would make the size a bit smaller. (On reflection, this may be even be a mistake. Algolia may recognize text in a <code>h1</code> as being more important than a <code>p</code> tag.)</p>\n<p>With that file generated, I manually uploaded it to Algolia and tested. Their dashboard is <em>damn</em> well done and really helpful. One of the best features is that you can search right away:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/06/ag2.png\" alt=\"Algolia dashboard\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Ok, so technically, if you don't mind some manual work, you're done. You could simply reupload the JSON file every time you generate your site. And I know that sounds lame, but I can totally see people building a site that potentially gets updated pretty rarely. In that case it may be worth the (relatively minor) hassle.</p>\n<p>But what if you <em>do</em> want to automate it? Here's where things get a bit... interesting. I knew that Algolia had REST APIs I could use. I also knew that Netlify has a <code>deploy-succeeded</code> event you can write custom code for. (See my <a href=\"https://www.raymondcamden.com/2020/05/29/enhancing-your-netlify-build-notifications\">blog post</a> from last month on it.) My first issue was trying to determine how I'd know what changed since my last build. I couldn't really use the file system as Netlify checks stuff out to their system and the last modified values wouldn't match what I would expect. I toyed with the idea of using the date of my posts to grab the last new post. But this wouldn't handle edits to old posts. I then thought about adding new front matter, <code>lastEdited</code>, and then simply merging the last few posts and the last few edited posts. I say &quot;few&quot; because my assumption is that I may push a few files at once to GitHub.</p>\n<p>All of this felt possible... but daunting. I was talking about this on Twitter when a few folk came out to help me. One of them, <a href=\"https://twitter.com/pixelastic\">Tim Carry</a> shared that he had a cool project that would help, <a href=\"https://github.com/pixelastic/algolia-indexing\">algolia-indexing</a>. It took all of the complexity away and basically reduced it to a few lines:</p>\n<pre><code class=\"language-js\">const indexing = require('algolia-indexing');\n\nconst credentials = { appId: 'XXX', apiKey: 'YYY', indexName: 'my_index' };\nconst records = [{ foo: 'bar' }];\nconst settings = { searchableAttributes: ['foo'] };\n\nawait indexing.fullAtomic(credentials, records, settings);\n</code></pre>\n<p>It handles comparing your old data to your new and figuring out what needs to update. It's still in beta (his words), but in my testing it's worked really well so far. I created this <code>deploy-succeeded.js</code> serverless function on Netlify.</p>\n<pre><code class=\"language-js\">const indexing = require('algolia-indexing');\nconst algCredentials = { appId: process.env.ALG_APP_ID, apiKey: process.env.ALG_API_KEY, indexName: 'eleventy_test' };\n\nconst fetch = require('node-fetch');\n\nexports.handler = async (event, context) =&gt; {\n\n  try {\n\n    /// HANDLE ALOGLIA\n    // first, get my index\n    let dataResp = await fetch('https://eleventyalgolia.netlify.app/algolia.json');\n\n    let data = await dataResp.json();\n    console.log('Successfully got the data, size of articles '+data.length, data[0].title);\n\n    indexing.verbose();\n\n    const settings = { };\n    try {\n      await indexing.fullAtomic(algCredentials, data, settings);\n    } catch(e) {\n      console.log('error in fullAtomic', e);\n    };\n    console.log('Algolia indexing updated. Hopefully.');\n    \n\n    return { statusCode: 200, body: 'I\\'m done with this shit...' }\n\n  } catch (err) {\n    console.log('error handler for function ran', err.toString());\n    return { statusCode: 500, body: err.toString() }\n  }\n\n}\n</code></pre>\n<p>Probably the weirdest line is this:</p>\n<pre><code class=\"language-js\">let dataResp = await fetch('https://eleventyalgolia.netlify.app/algolia.json');\n</code></pre>\n<p>Even though my serverless functions are in the same repository as the rest of my site, they aren't on the file system. When deployed, it can't just read the JSON file Eleventy created. That means I need to retrieve it via HTTP. Once done, I just pass it to his library and that's it. I tested this a few times by writing new blog posts, committing to GitHub, and then seeing the index update automatically when the build was done.</p>\n<p>Woot! Now I needed to actually add a search to my site. This is the only thing I really found awkward with Algolia. (To be clear, not wrong, just... awkward.) In the Algolia docs, they have a section titled &quot;Building Search UI&quot;. Going there leads you to their <a href=\"https://www.algolia.com/doc/guides/building-search-ui/what-is-instantsearch/js/\">InstantSearch.js</a> product. This looks to be a cool library for working with their search, but it's more than I wanted really. It felt like a solution for people not as familiar with JavaScript. Or folks who wanted more of the UI built out automatically for them. That's fine, but what I really wanted was a simple <code>.search</code> method I could use where I'd handle all the UI.</p>\n<p>I had to search a bit, but I did find their more basic APIs, and a <a href=\"https://www.algolia.com/doc/api-client/getting-started/what-is-the-api-client/javascript/?language=javascript\">JavaScript version</a> that was exactly what I was looking for. I built a simple search interface with Vue.js and their library. First, the layout:</p>\n<script src=\"https://gist.github.com/cfjedimaster/c3d7f2d605ba3d458b7b8579eb63637a.js\"></script>\n<p>By the way, when using Liquid and Vue in Eleventy, don't forget you need to <a href=\"https://www.raymondcamden.com/2020/04/03/quick-tip-on-using-vue-with-eleventy\">escape the Vue tokens</a> in order for it to work. That's why I used a Gist for this part.</p>\n<p>Then the JavaScript:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tsearch:'',\n\t\talgolia_client:null,\n\t\talgolia_index:null,\n\t\tresults:null,\n\t\tnumResults:null\n\t},\n\tcreated() {\n\t\tthis.client = algoliasearch('WFABFE7Z9Q', 'd1c88c3f98648a69f11cdd9d5a87de08');\n\t\tthis.index = this.client.initIndex('eleventy_test');\n\t},\n\tmethods: {\n\t\tasync doSearch() {\n\t\t\tthis.results = null;\n\t\t\tif(this.search === '') return;\n\t\t\tconsole.log('search for '+this.search);\n\t\t\tlet resultsRaw = await this.index.search(this.search,{\n\t\t\t\tattributesToRetrieve:['title', 'url']\n\t\t\t});\n\t\t\tconsole.log('results', resultsRaw);\n\t\t\tthis.results = resultsRaw.hits;\n\t\t\tthis.numResults = resultsRaw.nbHits;\n\t\t}\n\t}\n})\n</code></pre>\n<p>As you can see, the Algolia aspect is simple. Do note that when you define the <code>algoliasearch</code> object you should use a <code>search</code> only key so that it's safe to be in client-side code. Also note that when I did my search, I specified the attributes to return because I didn't want <code>content</code> being sent back. The search API supports paging and more stuff too, but I kept it simple. Heck, I just realized I never actually displayed the number of results, but I could add that in if I need.</p>\n<p>Here's my incredibly beautiful search engine:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/06/ag3.png\" alt=\"Search form and results\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Yes, I could do a <em>heck</em> of a lot more to make this nicer looking. They even return information to let you highlight results too. Just please don't judge Algolia by my pretty basic demo here. :)</p>\n<p>So hopefully you've followed along so far. You can see the entire site here: <a href=\"https://eleventyalgolia.netlify.app\">https://eleventyalgolia.netlify.app</a>. Just click the Search link in the top nav to test it out. Also note that if my blog had a search field in the layout itself that POSTed or GETed to my search template, I could sniff that data on page load and do a search immediately.</p>\n<p>The entire code base for this project may be found here: <a href=\"https://github.com/cfjedimaster/eleventy_algolia\">https://github.com/cfjedimaster/eleventy_algolia</a></p>\n<h3>So What Went Wrong?</h3>\n<p>Alright, so as I said, my initial idea for all of this was to use it on my site. I currently use a Google Custom Search Engine, but would like to have more control over the setup and would like to get rid of the ads. Algolia requires you to add a message saying the results came from them, but they don't serve up advertising in the results.</p>\n<p>The free tier has a limit of 10k entries and I'm currently at 6,119, but if you look at my <a href=\"https://www.raymondcamden.com/stats\">stats</a>, a majority of that was in the first ten years of me blogging. I could probably go another decade before I hit that limit and at that point I'd either cough up the bucks for an upgrade or figure out something else.</p>\n<p>So I built, on my blog, basically what you see above. The first issue I ran into was the <code>deploy-succeeded</code> function took too long to run. Netlify limits you to 10 seconds per function. I asked for more time, and they responded super quick, but they only go up to 20.</p>\n<p>I then thought - why not use <a href=\"https://pipedream.com/\">Pipedream</a>? There's nothing specific about my logic that has to be on the Netlify server. They support webhooks so I could use that to fire off the Pipedream webhook. I rebuilt my logic there (it took about three minutes, I'm a huge Pipedream fan!), but then ran into another issue.</p>\n<p>As part of how <code>algolia-indexing</code> works, it has to duplicate your index and work on a copy. My index was over 6k and when it tried to duplicate it, that brought me over the 10k limit. I've reached out to Tim to see if there's a way around that, but for now I'm kinda stuck. I'm still going to work on it and hopefully I can get it in here soon.</p>\n<p>Anyway, I'd love to hear from others using Algolia and the Jamstack. Leave me a comment below describing your implementation!</p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Adding Algolia Search to Eleventy and Netlify - Part Two",
		"date":"Tue Jun 30 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/07/01/adding-algolia-search-to-eleventy-and-netlify-part-two",
		"content":"<div style=\"background-color:#c0c0c0; padding: 10px\">\n<p><strong>Important Update: May 18, 2021</strong></p>\n<p>\nRecently I noticed that my search feature wasn't working. When I checked my index, it was empty. I wasn't able to replicate\nit consistently so I reached out to Algolia's support. Turns out, the `clear` API call I was doing was *not* synchronous. I don't mean the HTTP aspect. That was obvious and I was doing an await on it. But the actual operation itself wasn't complete when the HTTP call was done. This meant that my next operation, where I added 6k objects, would fail as it put me over the max for my free tier. \n</p>\n<p>\nYou'll notice that Haroen in the comments below suggested using the SDK. So did support. And that helped right away. I'm not sure why I was opposed to using the SDK, maybe I just didn't want another dependency, but I wish I had just used it as it makes the code quite a bit simpler. So for example, I now do: <code>let clearResult = await index.clearObjects().wait();</code> to handle the clear and wait for it to finish. Much easier. \n</p>\n<p>\nYou can see the code in my deploy-succeeded serverless function here: <a href=\"https://github.com/cfjedimaster/raymondcamden2020/blob/master/.functions/deploy-succeeded/deploy-succeeded.js\">github.com/cfjedimaster/raymondcamden2020/blob/master/.functions/deploy-succeeded/deploy-succeeded.js</a> Sorry for the mistake folks!\n</p>\n</div>\n<p>This will be a quick update as I'm on vacation and should be busy playing XBox, but I've got an update to my\npost on <a href=\"https://www.raymondcamden.com/2020/06/24/adding-algolia-search-to-eleventy-and-netlify\">using Algolia with Eleventy</a>. Please read it first as this post won't make much sense without it. In that post, I described a way to use <a href=\"https://www.algolia.com/\">Algolia</a> with <a href=\"https://www.11ty.dev/\">Eleventy</a>. The process was basically:</p>\n<ul>\n<li>Generate a JSON index of your content.</li>\n<li>Push the index to Algolia</li>\n<li>Use their JavaScript library to add a search</li>\n</ul>\n<p>The second bullet point was the crucial one. I made use of <a href=\"https://github.com/pixelastic/algolia-indexing\">algolia-indexing</a> to handle updating my index. This utility created a copy of your index, did atomic updates focusing only on what changed, and then copied back your index. This utility was super cool, but it wouldn't work for me. Algolia has a max of 10k records per index on their free tier, which is a very generous amount, but my blog has a bit over six thousand posts.</p>\n<p>I was prepared to &quot;give up&quot; when Algolia, just yesterday morning, <a href=\"https://blog.algolia.com/introducing-algolias-most-customer-friendly-pricing/\">announced</a> friendlier pricing. Follow that link for details, but the part that was most important to me was that indexing operations (adding, updating, and removing records) was now free. That means I could adapt a &quot;delete everything and re-upload data&quot; approach for my site.</p>\n<p>Now to be clear, this means that for a few seconds, my search index is blank. I'm ok with that. Heck, as far as I can tell I'm the only one who actually uses my <a href=\"/search\">search</a> page. But you do want to keep that in mind before you consider using the approach I describe below. If you're below 5K records, I'd definitely suggest using <a href=\"https://github.com/pixelastic/algolia-indexing\">algolia-indexing</a> instead.</p>\n<p>Ok, so with that in mind, here's what I'm using on the blog.</p>\n<pre><code class=\"language-js\">/// HANDLE ALOGLIA\n// first, get my index\nlet dataResp = await fetch('https://www.raymondcamden.com/algolia.json');\n\nlet data = await dataResp.json();\nconsole.log('Successfully got the data, size of articles '+data.length, data[0].title);\n\nlet host = `https://${algCredentials.appId}.algolia.net`;\n\n//first clear\nlet resp = await fetch(host + `/1/indexes/${algCredentials.indexName}/clear`, {\n\tmethod:'POST',\n\theaders: {\n\t'X-Algolia-Application-Id':algCredentials.appId,\n\t'X-Algolia-API-Key':algCredentials.apiKey\n\t}\n});\nlet result = await resp.json();\nconsole.log('clear result is '+JSON.stringify(result));\n\nlet batch = {\n\t&quot;requests&quot;:[]\n};\n\ndata.forEach(d =&gt; {\n\tbatch.requests.push({\n\t'action':'addObject',\n\t'body':d\n\t})\n});\nconsole.log('batch data done');\n\n//then batch\nresp = await fetch(host + `/1/indexes/${algCredentials.indexName}/batch`, {\n\tmethod:'POST',\n\tbody: JSON.stringify(batch),\n\theaders: {\n\t'X-Algolia-Application-Id':algCredentials.appId,\n\t'X-Algolia-API-Key':algCredentials.apiKey\n\t}\n});\n\nresult = await resp.json();\nif(result.objectIDs) console.log(`i had ${result.objectIDs.length} objects added`);\n</code></pre>\n<p>As I described in my last post, I generate a JSON file representing all my content. In my Netlify `deploy-succeeded' function, I fetch that file so I can use it for my updates.</p>\n<p>The first thing I do is use the <code>clear</code> endpoint on my index, which does what you would assume, empty the index. Then I use the <code>batch</code> endpoint to add all my data. Notice I have to 'reshape' the JSON into an array of commands (<code>addObject</code>). I kinda wish Algolia had a &quot;addAll&quot; type endpoint that just took an array of objects. That would make the POST a bit smaller too. But it wasn't a big deal to create that data for the batch call.</p>\n<p>Speaking of time - Netlify has a limit of 10 seconds for serverless function executions. While trying to get Algolia working on my site last month I asked for an extension and got the max, 20 seconds. In my testing locally, I saw the duration typically take around 8 seconds, but sometimes it took 11. Most of the time spent was in network calls, so I don't believe it's going to be an issue when running on Netlify's CDNs, but it's something to keep in mind while testing on your local machine. The <code>netlify dev</code> command will enforce a 10 second limit so you may get errors there that you would not get in production.</p>\n<p>I think you could also argue that it doesn't make sense to re-index your data in every build, especially since you may update your site in a way that doesn't impact content (like changing a header graphic for example), but I'm ok with this for now.</p>\n<p>Of course, I also had to update my <a href=\"/search\">search</a> page as well. In my <a href=\"https://www.raymondcamden.com/2020/06/24/adding-algolia-search-to-eleventy-and-netlify\">last post</a> I explained how I used the JavaScript wrapper to build a simple search interface with Vue.js. For my site, I made it a bit nicer. Here's the method I use for my search:</p>\n<pre><code class=\"language-js\">async doSearch() {\n\tthis.results = null;\n\tif(this.search === '') return;\n\tthis.searching = true;\n\tthis.noResults = false;\n\tconsole.log('search for '+this.search);\n\tlet resultsRaw = await this.index.search(this.search,{\n\t\tattributesToRetrieve:['title', 'url','date'],\n\t\tattributesToSnippet:['content'],\n\t\thitsPerPage: 50\n\t});\n\n\tlet options = { year: 'numeric', month: 'long', day: 'numeric' };\n\tlet formatter = new Intl.DateTimeFormat('en-US',options);\n\tresultsRaw.hits.forEach(h =&gt; {\n\t\th.date = formatter.format(new Date(h.date));\n\t});\n\tthis.results = resultsRaw.hits;\n\tthis.numResults = resultsRaw.nbHits;\n\tthis.searching = false;\n\tthis.noResults = this.results.length === 0;\n}\n</code></pre>\n<p>A few things. First, notice I'm asking for <code>date</code> in the results. Showing the date for my results is important so I can see which results are more recent. Next, I ask for a snippet of the <code>content</code> property, this lets me display part of the content in the result. Finally, I make use of the <code>Intl</code> API to format the dates returned in my results. I'd normally use a Vue filter for that, but as they are deprecated in Vue 3, I'm trying to wean myself off of them. Here's a screen shot of how my search page renders:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/alg1.jpg\" alt=\"An example of search results\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Let me be clear - this could look nicer. Blame me, not Algolia. But I'm incredibly happy to be able to rip out Google (and their ads) and replace it with a simpler, nicer system! You can find all the code for my implementation here: <a href=\"https://github.com/cfjedimaster/raymondcamden2020\">https://github.com/cfjedimaster/raymondcamden2020</a> As always, questions and comments are welcome!</p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "How to Enable your Jamstack Site to have a \"Rain Day\"",
		"date":"Sun Jul 05 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/07/06/how-to-enable-your-jamstack-site-to-have-a-rain-day",
		"content":"<p>So this is perhaps a bit of an edge case, but I was thinking about it this weekend and decided to build a quick demo of it just to see if it would actually work. Imagine a simple Jamstack site for a farmer's market. Now imagine that this particular market is closed when there is bad weather. What if we could build a Jamstack site that checked the weather in the morning and added a warning to the site that they may be closed due to rain? Here's how I implemented this idea.</p>\n<p>First, I began with an incredibly simple one page site built with <a href=\"https://www.11ty.dev/\">Eleventy</a>. You can see the site in all it's glory at <a href=\"https://weather-demo.netlify.app/\">https://weather-demo.netlify.app/</a>. Here's how it renders normally:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/w1.jpg\" alt=\"Website with no weather warning\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Now here is what it does when it thinks it may close due to weather:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/w2.jpg\" alt=\"Website with weather warning\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The giant red arrow is there just to point out the change. My CSS isn't quite good enough to do something like that. ;) So how did I build this?</p>\n<p>First, I found a weather API. It just so happens, my employer HERE has a <a href=\"https://developer.here.com/documentation/destination-weather/dev_guide/topics/overview.html\">Weather API</a>. Obviously anyone would do, but I like ours so I used it. The API basically supports two formats - an observation (what's going on now) and a forecast. The observation also reports on future weather so I went with that. A basic API request could look like so:</p>\n<pre><code>https://weather.ls.hereapi.com/weather/1.0/report.json?apiKey=${HERE_KEY}&amp;product=observation&amp;name=YOUR+LOCATION&amp;metric=false\n</code></pre>\n<p>Where the key needs to be supplied and a location of some sort. You can also use a latitude and longitude pair or zip code if you like. Also, the last bit disables that crazy metric thing that probably won't go anywhere. Hitting this returns data for the location and possible alternatives, but if we focus on one report, the first one returned, we see the following detailed weather data:</p>\n<pre><code class=\"language-js\">{\n  daylight: 'D',\n  description: 'Scattered clouds. Warm.',\n  skyInfo: '9',\n  skyDescription: 'Scattered clouds',\n  temperature: '82.90',\n  temperatureDesc: 'Warm',\n  comfort: '88.75',\n  highTemperature: '83.48',\n  lowTemperature: '74.48',\n  humidity: '72',\n  dewPoint: '73.00',\n  precipitation1H: '*',\n  precipitation3H: '*',\n  precipitation6H: '*',\n  precipitation12H: '*',\n  precipitation24H: '*',\n  precipitationDesc: '',\n  airInfo: '*',\n  airDescription: '',\n  windSpeed: '5.75',\n  windDirection: '310',\n  windDesc: 'Northwest',\n  windDescShort: 'NW',\n  barometerPressure: '29.97',\n  barometerTrend: '',\n  visibility: '10.00',\n  snowCover: '*',\n  icon: '2',\n  iconName: 'mostly_sunny',\n  iconLink: 'https://weather.ls.hereapi.com/static/weather/icon/2.png',\n  ageMinutes: '10',\n  activeAlerts: '0',\n  country: 'United States',\n  state: 'Louisiana',\n  city: 'Lafayette',\n  latitude: 30.2241,\n  longitude: -92.0198,\n  distance: 2.32,\n  elevation: 11,\n  utcTime: '2020-07-06T12:38:00.000-05:00'\n}\n</code></pre>\n<p>That's a <em>lot</em> of data, and sadly 82 degrees is nice compared to what it would normally be without all the cloud cover. You can check the <a href=\"https://developer.here.com/documentation/destination-weather/dev_guide/topics/resource-response-type-report.html\">API reference</a> for detailed information about each part, but for my use I thought the <code>precipitation12H</code> would be useful. I figured if I checked this in the morning, it would be a good way to see if the market may need to close that day. I built the following in <code>_data/weather.js</code>. For folks who don't know Eleventy, this will create data my pages can use at build time. In this case, the data will be available as a variable named <code>weather</code>.</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\n// used to auth with HERE API\nconst HERE_KEY = 'c1LJuR0Bl2y02PefaQ2d8PvPnBKEN8KdhAOFYR_Bgmw';\n// used for location of the market\nconst LOC = 'Lafayette, LA';\n\nmodule.exports = async function() {\n\tlet url = `https://weather.ls.hereapi.com/weather/1.0/report.json?apiKey=${HERE_KEY}&amp;product=observation&amp;name=${encodeURIComponent(LOC)}&amp;metric=false`;\n\t\n\tlet resp = await fetch(url);\n\tlet data = await resp.json();\n\tlet report = data.observations.location[0].observation[0];\n\tconsole.log(report);\n\n\t// Add a simplification\n\treport.rainWarning = (report.precipitation12H !== '*' &amp;&amp; report.precipitation12H &gt; 0.02);\n\n\treturn report;\n\n}\n</code></pre>\n<p>You can see where I make the fetch to the API as well as where I grab the first location and observation. Finally, I add a &quot;simplification&quot; of my &quot;will be possibly close&quot; logic in the <code>rainWarning</code> value. What's cool is that if I switch to another provide for my weather data, I can just preserve this logic in the data file and my template won't need to worry. Speaking of the template, this is how I handled it:</p>\n<pre><code class=\"language-html\">---\nlayout: main\ntitle: Camden Farmer's Market\n---\n\n&lt;section class=&quot;hero&quot;&gt;\n\t&lt;div class=&quot;hero-inner&quot;&gt;\n\t\t&lt;h1&gt;Camden Farmer's Market&lt;/h1&gt;\n\t&lt;/div&gt;\n&lt;/section&gt;\n\n&lt;main&gt;\n\t&lt;div class=&quot;content&quot;&gt;\n\t&lt;p&gt;\n\tWelcome to Camden Farmer's Market. We are located at 311 Elmondia Falling Street, Lafayette, LA 70508.\n\t&lt;/p&gt;\n\n\t&lt;p&gt;\n\tOur hours are 7 days a week, 6AM to 4PM, except for federal and local holidays. &lt;strong&gt;Closed during inclement weather!&lt;/strong&gt;\n\t&lt;/p&gt;\n\t\n\t{% if weather.rainWarning %}\n\t&lt;p&gt;\n\t\t&lt;strong&gt;WARNING - The weather report has predicted rain and it is likely we will be closed.&lt;/strong&gt;\n\t&lt;/p&gt;\n\t{% endif %}\n\n\t\t\n\t&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@gndclouds?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;William Felker&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/farmers-market?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;\n\n\t&lt;/div&gt;\n&lt;/main&gt;\n</code></pre>\n<p>Just a basic IF check and nothing more. I could go more complex, but for a simple site like this, it's enough of a warning. And speaking of that warning, that brings up an interesting issue. How do we add this when our site is static?</p>\n<p>Well first off, we could simply use JavaScript in the browser and hit the API when the client visits the site. This particular API does not support CORS but does support JSONP. However, that means every hit to the page will hit the API. HERE has an incredibly generous free tier, but I'd still like to avoid that. In this particular case, a market that opens at 6AM, I could simply check the weather at 5AM. How? I'm hosting the site on Netlify, and they support a unique build URL that you can hit to generate a new build. You can find this in your &quot;Build hooks&quot; setting for your site:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/w3.jpg\" alt=\"Build hook\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Next I needed a way to run this on a schedule. For this I decided to use <a href=\"https://pipedream.com/\">Pipedream</a>. It may be overkill, but I created a quick Workflow that used a CRON source and a &quot;send http request&quot; step.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/w4.jpg\" alt=\"Pipedream workflow to automate building the site\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>By the way, I totally suck at CRON so I used <a href=\"https://crontab.guru/\">crontab.guru</a> to help me write the expression.</p>\n<p>So just to recap:</p>\n<ul>\n<li>My Jamstack site, on build, will check the weather report and see if rain is coming in the next 12 hours.</li>\n<li>My home page looks for this boolean and adds a warning when it's true.</li>\n<li>Pipedream will call the Netlify Build webhook daily at 5AM to refresh the site.</li>\n</ul>\n<p>And that's it. Obviously not perfect, but also automated so hopefully less work for the poor soul running a market at 6AM!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@gndclouds?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">William Felker</a> on <a href=\"https://unsplash.com/@gndclouds?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Building a Vue Application with Serverless on Netlify",
		"date":"Mon Jul 06 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/07/07/building-a-vue-application-with-serverless-on-netlify",
		"content":"<p>This is something that is - surely - documented in a thousand other blog posts, but it's not something I've tried yet\nwith Netlify so I thought I'd give it a go. It was this or watch another episode of &quot;Unsolved Mysteries&quot; on Netflix and obviously I chose this instead. I'm glad I did because it worked surprisingly well with no real hiccups. I just needed to\n&quot;see&quot; it myself at least once to be sure it worked.</p>\n<p>Alright, so as the title says, how would you deploy a Vue.js application to Netlify while also making use of their serverless platform? Here's how I did it.</p>\n<p>First, I made the Vue application:</p>\n<pre><code>vue create vue-netlify-demo -b\n</code></pre>\n<p>If you've not seen the <code>-b</code> option before, it means &quot;bare&quot; and generates a much smaller Vue application with less boilerplate text. (In my opinion it could be even more bare, but I'll take what I can get.) I didn't change any options because I wasn't worried about testing Vuex or the router.</p>\n<p>I then fired up the application with <code>npm run serve</code> and confirmed it worked.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/vn1.jpg\" alt=\"Vue bare app\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Next, I started using the <code>netlify dev</code> command. This enables you to test local applications as if they were running on the Netlify platform. I noticed that <code>netlify dev</code> ran <code>npm run serve</code>, but I don't remember that being documented. It was the first script defined in my package.json file and so maybe that's why it fired, but I went with a more specific command: <code>netlify dev -c &quot;npm run serve&quot;</code>. The <code>-c</code> flag specifies the command for the CLI to run.</p>\n<p>I noticed that the output that was much more verbose when running via <code>netlify dev</code>. When you use <code>npm run serve</code>, there's a lot of webpack related messages that gets output to one line, constantly being overwritten. It's a lot of noise so I'm fine with that. But when running via <code>netlify dev</code>, they all get output to the screen. This is fine, but you may miss the message stating that the server is up and running:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/vn2.jpg\" alt=\"Netlify dev message hidden amongst log messages\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Once I saw this message and opened my browser to localhost:8888 I didn't worry about it again. Cool, now let's go serverless.</p>\n<p>First, I added a <code>netlify.toml</code> file to my project to specify my functions folder:</p>\n<pre><code>[build]\n\tfunctions = &quot;.functions&quot;\n</code></pre>\n<p>I then used the CLI to scaffold a hello-world function: <code>netlify functions:create</code>. This laid down this file in <code>.functions/hello-world/hello-world.js</code>:</p>\n<pre><code class=\"language-js\">// Docs on event and context https://www.netlify.com/docs/functions/#the-handler-method\nexports.handler = async (event, context) =&gt; {\n  try {\n    const subject = event.queryStringParameters.name || 'World'\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ message: `Hello ${subject}` }),\n      // // more keys you can return:\n      // headers: { &quot;headerName&quot;: &quot;headerValue&quot;, ... },\n      // isBase64Encoded: true,\n    }\n  } catch (err) {\n    return { statusCode: 500, body: err.toString() }\n  }\n}\n</code></pre>\n<p>The Netlify Dev environment supports testing serverless functions locally so I modified my little one page Vue application like so:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;h1&gt;Welcome to Your Vue.js App&lt;/h1&gt;\n    &lt;p&gt;\n\tMessage from severless function: {{ msg }}\n    &lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      msg:''\n    }\n  },\n  async created() {\n    let resp = await fetch('/.netlify/functions/hello-world?name=ray');\n    this.msg = (await resp.json()).message;\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>All I've done here is fire off a call to the function (the <code>.netlify/functions</code> path is how you &quot;address&quot; serverless functions on Netlify) and displayed the result. Here's how it looks:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/vn3.jpg\" alt=\"Vue application calling the function\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Beautiful, right? Now to get it live. First, I made a new repo for it: <a href=\"https://github.com/cfjedimaster/vue-netlify-demo\">https://github.com/cfjedimaster/vue-netlify-demo</a>. Then I made a Netlify site tied to the GitHub repo. I specified <code>npm run build</code> to generate the Vue production version of the app and entered <code>dest</code> for the folder to use as the site source.</p>\n<p>And that was it. You can see it running here: <a href=\"https://vue-netlify-demo.netlify.app/\">https://vue-netlify-demo.netlify.app/</a>. And don't forget I linked to the repo right above.</p>\n<p>So all in all - no surprises - it just plain worked - which is exactly what I want!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@jplenio?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Johannes Plenio</a> on <a href=\"https://unsplash.com/s/photos/view?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript",
            
                "serverless"
            
		]

	},

	{
		"title": "Review: The Bard's Tale IV",
		"date":"Sat Jul 11 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/07/12/review-the-bards-tale-iv",
		"content":"<iframe style=\"width:120px;height:240px;float:left;margin-right:10px\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" src=\"//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=tf_til&ad_type=product_link&tracking_id=raymondcamd06-20&marketplace=amazon&region=US&placement=B07TPVN3RR&asins=B07TPVN3RR&linkId=83b5fb2a2046991ad92824c0c7b431c6&show_border=true&link_opens_in_new_window=true&price_color=333333&title_color=0066c0&bg_color=ffffff\">\n</iframe>\n<p>It's been sometime since I've posted a video game review. (My last one was a <a href=\"https://www.raymondcamden.com/2018/11/09/a-review-of-my-arcade1up-machine\">review</a> of my Arcade1Up machine and I still love it!) As I'm spending a lot more times indoors lately (thank you Corona!) I've had a chance to play quite a bit more and I figured it couldn't hurt to start up the review process again. I first ran across &quot;Bards Table IV&quot; (BT4 from now on) while perusing the list of games available on XBox Game Pass. This is their &quot;Netflix-style&quot; service that offers a library of games you can play for a monthly fee. At first, I thought it was a different game.</p>\n<p>You see, first there was BT1. I cut my teeth on that game as a kid, drawing maps out on hex paper and actually learning hex so I could edit my save games and cheat. I played it, and BT2 and 3, on an Apple 2+ in glorious green monochrome colors. A few months back, I discovered there was a remastered collection available on XBox. I gave it a try and really enjoyed it. The graphics are updated, the UX remodelled for a controller in a really sensible manner, and, thank god, automapping. I played all of BT1 and a bit of BT2.</p>\n<p>Anyway, when I saw the entry on Game Pass, I actually mistook it for <a href=\"https://en.wikipedia.org/wiki/The_Bard%27s_Tale_(2004_video_game)\">&quot;The Bards Tale&quot;</a>, which was made a decade ago and has nothing to do with the original trilogy. Rather, this game is a proper entry in the earlier trilogy. It's a bit old now (Game Pass generally has older games, but sometimes will have new releases) but as I had recently enjoyed playing the updated older trilogy, I figured I'd give it a shot.</p>\n<p>I'm now roughly 50 hours or so in. Normally I try to wait till I finish a game before I review it, but I'm not sure if I will or rage-quit. Because here's the thing... the game is really interesting. It's got some really cool mechanics. But for every aspect I think is neat, it's got a corresponding aspect that bugs the hell out of me. I almost quit today and I'm glad I didn't, but overall it feels like a game that is <em>real</em> close to greatness but just has too many issues to really be great.</p>\n<p>Let's start with that's good. Character creation, and setup, is uniquely different compared to BT1-3. You pick a base character type, like bard, fighter, practioner (magic class), and then use skills to customize your character. The skill tree is varied (and beautifully designed too) and lets you have very different characters with the same archetype. This is especially true of the magic users as you can focus on the style of magic you think is best. For example, I ignored the summoning skills. Similarly, for my rogue I avoided poisons and traps and focused more on theft and arrows.</p>\n<p>Combat is also updated. While still turn based, it takes place on a 8x8 grid (2 rows of 4 on each side) where position is much more important than it was in earlier games. To be honest this really threw me at first but once I got the hang of it, I rather enjoyed it. You also get hints before you engage an enemy. These hints let you know if you're ready to take them on of if you should haul ass and turn around. You can also also wait for enemies to turn around to attack them and get initiative. While not an action RPG by any means, this does give a small taste of one.</p>\n<p>And speaking of combat, it's a minor thing, but actually <em>seeing</em> my spells, spells I first used thirty plus years ago playing BT1, was pure joy.</p>\n<p>There's a crafting aspect that's really well done. You heal, mainly, by eating, and you can craft different types of food with different healing qualities while traveling. You can also craft potions and equipment. I made my bard focus on that aspect. Speaking of bards, I absolutely love mine in game. She has the best skill I've ever seen in a game - mean drunk. Every time she drinks (bards drink for spells), she'll throw her tankard at the enemy for a small amount of damage. It never takes out an enemy but it makes me laugh every time I use it.</p>\n<p>There's other nice things too. Interesting &quot;puzzle weapons&quot;, a really good soundtrack at times, and more. But... now for the bad.</p>\n<p>First, the game is incredibly stingy. So remember that skill tree I mentioned? You've got something like 12+ or more skills related to armor. That means that even if your fighter picks up a piece or armor, there's a strong change she won't have the skill for it. And to be clear, I'm not talking skills in light, medium, and heavy armor, but as I said, 12+ (ok, maybe not that many, but it's close). This wouldn't be so bad if it was easier to buy equipment, but not only are shops slow to become available, you will rarely have the money to actually buy anything. And when you do have the money, they won't have what you need.</p>\n<p>Time and time I'd come across a treasure chest, open it up, and find... wood. Yes, wood. This is used in the crafting aspect so it's not a waste, but seriously, wood in a treasure chest? The first twenty plus hours of the game felt like I was being rewarded with absolute craft. Now that I'm 40 hours in, I finally feel like I'm slowly getting nice equipment, but the game is just plain miserly when it comes to rewards. I've got enough gold now to buy anything, but the shops don't sell anything I need now.</p>\n<p>This also impacts your leveling in general. There's no random encounters so if you want to grind to beat a tough boss, you're out of luck. Now to be fair, BT1 had way too many random encounters, to the point where the game actually pokes fun at itself about it. But with all the other aspects (not enough gold, loot, too many skills needed etc), the fact that I can't even do a bit of grinding to level up is frustrating as heck.</p>\n<p>There's also multiple things in the game that are poorly explained, if at all. I've had to use Google many times just to figure out how something is supposed to work. Heck, there's still things in the game I'm not sure how to work with.</p>\n<p>Another good/bad thing I'll share are the puzzles. The game has a few unique, never seen before puzzle types, like fairy golf (yes, seriously), but they repeat these puzzles again and again to the point of frustration. On other hand though, there's a cheat you can enable that literally lets you sing a song (&quot;Struggler's Lament&quot;) and skip those puzzles. That's a nice tough I appreciate.</p>\n<p>All in all... I want to love this game. I definitely want to finish it. But I feel like I'm one more frustration away from quitting it for good. It's rather cheap now so if this review actually convinced you to spend a few bucks, hit the link above and I'll get a small referral fee. If you've played it, let me know what you think and leave a comment below!</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "video games"
            
		]

	},

	{
		"title": "Testing Vue.js Application Files That Aren't Components",
		"date":"Thu Jul 16 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/07/17/testing-vuejs-application-files-that-arent-components",
		"content":"<p>Ok, before I begin, a <em>huge</em> disclaimer. My confidence on this particular tip is hovering around 5% or so. Alright, so some context. I'm working on a game in Vue.js. Surprise surprise. It probably won't ever finish, but I'm having some fun building small parts of it here and there. The game is an RPG and one of the first things I built was a basic dice rolling utility.</p>\n<p>In my Vue application, I created a <code>utils</code> folder and made a file <code>dice.js</code>. I used this setup because I wasn't building a component, but rather a utility that my Vue components could load and use. My dice utility takes strings like this - <code>2d6</code> - which translate to &quot;roll a six sided die 2 times&quot;. It even supports <code>2d6+2</code> which means to &quot;roll a six sided die 2 times and 2 to the final result&quot;. It's rather simple string parsing, but here's the entirety of it:</p>\n<pre><code class=\"language-js\">export const dice = {\n\n\troll(style) {\n\t\tlet bonus=0, total=0;\n\t\tif(style.indexOf('+') &gt; -1) {\n\t\t\t[style, bonus] = style.split('+');\n\t\t} \n\t\t\n\t\tlet [rolls, sided] = style.split('d');\n\t\t\n\t\t//console.log(rolls, sided);\n\t\tfor(let i=0;i&lt;rolls;i++) {\n\t\t\ttotal += getRandomIntInclusive(1, sided);\n\t\t}\n\t\ttotal += parseInt(bonus);\n\t\treturn total;\n\t}\n}\n\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive \n}\n</code></pre>\n<p>In one of my Vue components, I use it like so:</p>\n<pre><code class=\"language-js\">import { dice } from '@/utils/dice';\n\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tnewName:'gorf',\n\t\t\tstr: '',\n\t\t\tdex: '',\n\t\t\tint: ''\n\t\t}\n\t}, \n\tcreated() {\n\t\tthis.reroll();\n\t},\n\tcomputed: {\n\t\tcantContinue() {\n\t\t\treturn this.newName == ''\n\t\t}\n\t},\n\tmethods: {\n\t\treroll() {\n\t\t\tthis.str = dice.roll('3d6');\n\t\t\tthis.dex = dice.roll('3d6');\n\t\t\tthis.int = dice.roll('3d6');\n\t\t},\n\t\tstart() {\n\t\t\tthis.$store.commit('player/setName', this.newName);\n\t\t\tthis.$store.commit('player/setStats', { str: this.str, dex: this.dex, int: this.int });\n\t\t\tthis.$router.replace('game');\n\t\t}\n\t}\n}\n</code></pre>\n<p>I import the dice code and then can make calls to it for my UI. Nothing too crazy here, but I ran into an interesting issue today. My initial version of <code>dice.js</code> didn't support the &quot;+X&quot; syntax. I wanted to add it, but also wanted a quick way to test it.</p>\n<p>So I could have simply gone into my Vue component and add some random tests to the <code>created</code> block, something like:</p>\n<pre><code class=\"language-js\">console.log(dice.roll('2d6+2'));\n</code></pre>\n<p>And that would work, but as I developed, I'd have to wait for Vue to recompile and reload my page. In general that's pretty speedy, but what I really wanted to do was write a quick Node script and run some tests at the CLI. To be clear, not unit tests, just literally a bunch of console logs and such. That may be lame, but I thought it might be quick and simple.</p>\n<p>However... it wasn't. If you look back at the source of dice.js, you'll see it's <em>not</em> using <code>module.exports</code> but just a regular export.  This was my test:</p>\n<pre><code class=\"language-js\">import { dice } from '../src/utils/dice'\n\n// just some random rolls\nfor(let i=1;i&lt;4;i++) {\n\tfor(let k=3;k&lt;10;k++) {\n\t\tlet arg = i+'d'+k;\n\t\tconsole.log('input = '+arg, dice.roll(arg));\n\t}\n}\n\nconsole.log(dice.roll('2d6+2'));\n</code></pre>\n<p>And this was the result:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/vrpg1.jpg\" alt=\"Error output from script\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Ok, so an admission. I'm still a bit hazy on the whole module thing in Node, and JavaScript in general. I've used require, imports, exports, but I wouldn't pass a technical interview question on them. I hope you don't think less of me. Honestly.</p>\n<p>That being said, the error kinda made sense, but I didn't want to use the <code>.mjs</code> extension because I didn't know if that would break what the Vue CLI does.</p>\n<p>I was about to give up and was actually considering adding a route to my Vue application just for debugging.</p>\n<p>Thankfully, StackOverflow came to the rescue. I found <a href=\"https://stackoverflow.com/a/54090097/52160\">this solution</a> which simply required me adding <code>esm</code> and then running my code like so: <code>node -r esm testDice.js</code>.  It worked perfectly! And because my memory is crap, I added this to the top of the file:</p>\n<pre><code class=\"language-js\">/*\nRay, run with: node -r esm test.js\n*/\n</code></pre>\n<p>Yes, I write notes to myself in comments. You do too, right?</p>\n<p>Anyway, I hope this helps others, and I'm more than willing to be &quot;schooled&quot; about how this could be done better. Just leave me a comment below!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@seven_77?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Nancy Yang</a> on <a href=\"https://unsplash.com/s/photos/cats-sleeping?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript",
            
                "serverless"
            
		]

	},

	{
		"title": "Making Monsters with JavaScript",
		"date":"Sat Jul 18 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/07/19/making-monsters-with-javascript",
		"content":"<p>A few days ago I <a href=\"https://www.raymondcamden.com/2020/07/17/testing-vuejs-application-files-that-arent-components\">blogged</a> about how I had started on a Vue.js RPG game a while ago and never got around to putting more work into it. This may be hard to believe, but building games is pretty hard! I realized though that the parts I most looked forward too, the more creative parts, were things that I could work on and just stop worrying about actually finishing the game.</p>\n<p>That realization was incredibly freeing. It also immediately started the creative juices flowing. While walking my dog a few days ago (another activity that really improves my creativity) I formulated a good plan to build random monsters. One of the staples of many RPGs are random encounters. Your character, or party, is wondering the wilderness and all of a sudden they find themselves under attack.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/bt1.gif\" alt=\"Screen shot from Bards Tale 1\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The idea I had took a base set of monsters and then applied various modifiers and randomness to them. The idea being that you could have a small of monsters that would &quot;scale up&quot; to many more unique ones. Now, by &quot;unique&quot; I mean something like comparing a blue gremlin to a red gremlin. Many old games would take a base monster, apply a color shift to it, and call it done. Here's the basic flow of what I built.</p>\n<p>First - define an array of monsters. For now, I just have five:</p>\n<pre><code class=\"language-js\">const baseMonsters = [\n\t{\n\t\tname: &quot;rat&quot;, \n\t\tstr: &quot;1d3&quot;, \n\t\tdex: &quot;1d4&quot;,\n\t\tint: &quot;1d3&quot;, \n\t\thp: &quot;1d4&quot;\n\t},\n\t{\n\t\tname: &quot;pig&quot;,\n\t\tstr: &quot;1d4&quot;, \n\t\tdex: &quot;1d3&quot;, \n\t\tint: &quot;1d6&quot;, \n\t\thp: &quot;1d4&quot;\n\t}, \n\t{\n\t\tname: &quot;gremlin&quot;, \n\t\tstr: &quot;1d3&quot;, \n\t\tdex: &quot;1d4&quot;, \n\t\tint: &quot;1d4&quot;, \n\t\thp: &quot;1d4&quot;\n\t}, \n\t{\n\t\tname: &quot;skeleton&quot;, \n\t\tstr: &quot;1d6&quot;, \n\t\tdex: &quot;1d6&quot;, \n\t\tint: &quot;1d4&quot;, \n\t\thp: &quot;1d6+2&quot;\n\t},\n\t{\n\t\tname: &quot;flying lizard&quot;, \n\t\tstr: &quot;2d6&quot;, \n\t\tdex: &quot;2d6&quot;, \n\t\tint: &quot;1d6&quot;, \n\t\thp: &quot;2d6&quot;\n\t}\n];\n</code></pre>\n<p>Each monster has a name, three attributes related to how well they fight (my game only has strength, dexterity, and intelligence) and their hit points. For each stat I assign dice rolls applicable for their respective strength as a creature. This was kinda arbitrary of course. I gave rats higher (possible) dexterity because I figured they were quick. I gave gremlins higher intelligence because, well, gremlins.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/gremlin.jpg\" alt=\"Gremlin from the old movie\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>So the first step is to select one and then run the dice rolls for each stat. Next, there is a chance that a monster has a boon. A boon is a positive or negative change to one part of their stats. The chance for this change is based on a constant:</p>\n<pre><code class=\"language-js\">const boonChance = 20;\n</code></pre>\n<p>This is out of a 100, but I also make it a bit higher if the monster is scaled higher. I haven't mentioned scales yet but I will in a second. Here's the function that determines if the monster has a boon:</p>\n<pre><code class=\"language-js\">/*\nAs described above, it's the boonChance, which is kinda low, but the higher the scale, the higher\nthe change of a boon. Right now its boonChance + 2*scale\n*/\nfunction hasBoon(scale) {\n\tlet chance = boonChance + (2*scale);\n\treturn (misc.getRandomIntInclusive(0, 100) &lt; chance);\n}\n</code></pre>\n<p>If true, I then flip a coin to see if it's a good or bad one:</p>\n<pre><code class=\"language-js\">let positive = 1;\nif(misc.getRandomIntInclusive(0,100) &gt; 50) positive = -1;\n</code></pre>\n<p>Now I figure out what stat is changed by just picking a number from 1 to 3 (ok technically 0 to 2):</p>\n<pre><code class=\"language-js\">let boonType = misc.getRandomIntInclusive(0, 2);\n</code></pre>\n<p>Now I have an if statement and based on boonType, either change STR, DEX, or INT. The boon does two things. It adds, or subtracts, a 1D6 value (roll a six sided die one time). For example:</p>\n<pre><code class=\"language-js\">monster.str += positive * dice.roll('1d6');\nif(monster.str &lt; 1) monster.str = 1;\n</code></pre>\n<p>Notice I also ensure the value doesn't go below 1. Next, I wanted a way to let the player know that there's something special about this creature. I created a list of &quot;titles&quot; for each stat and each type of boon, as well as whether they were positive or negative.</p>\n<pre><code class=\"language-js\">const boons = {\n\tstr: {\n\t\tpositive: [&quot;strong&quot;, &quot;ripped&quot;, &quot;beefy&quot;], \n\t\tnegative: [&quot;weak&quot;, &quot;wimpy&quot;, &quot;pushover&quot;, &quot;meek&quot;]\n\t}, \n\tdex: {\n\t\tpositive: [&quot;quick&quot;, &quot;nimble&quot;, &quot;spry&quot;, &quot;dexterous&quot;], \n\t\tnegative: [&quot;clumsy&quot;, &quot;fumbly&quot;]\n\t}, \n\tint: {\n\t\tpositive: [&quot;smart&quot;, &quot;brilliant&quot;, &quot;intelligent&quot;],\n\t\tnegative: [&quot;slow&quot;, &quot;dumb&quot;, &quot;dull&quot;]\n\t}\n}\n</code></pre>\n<p>At this point, we've got a random monster, with random stats, although stats that make sense for how strong they are in general, and a potential boon that impacts their name, so for example, if face a clumsy pig, you may know this means their dexterity is lower than normal.</p>\n<p>Alright, the final part comes in the scale I previously mentioned. In most RPGs, the monsters closer to you when you start out or relatively easy to take on. The farther you move away from the starting point, the stronger they get. My utility takes a scale argument. This scale can be any number. For example, a scale of 1.2 means a monster bit higher than normal. The scale does two things.</p>\n<p>First, it improves every stat:</p>\n<pre><code class=\"language-js\">monster.str = Math.floor(scale * monster.str);\nmonster.dex = Math.floor(scale * monster.dex);\nmonster.int = Math.floor(scale * monster.int);\nmonster.hp = Math.floor(scale * monster.hp);\n</code></pre>\n<p>And remember, this is done after a boon. So a monster that got a bonus to strength will be incredibly strong after the scaling. Next, I created a set of titles that helped reflect the higher scale.</p>\n<pre><code class=\"language-js\">const scaledTitles = [\n\t[&quot;experienced&quot;, &quot;tough&quot;],\n\t[&quot;expert&quot;, &quot;trained&quot;, &quot;veteran&quot;],\n\t[&quot;elite&quot;, &quot;master&quot;, &quot;powerful&quot;, &quot;lord&quot;],\n\t[&quot;epic&quot;, &quot;god-like&quot;, &quot;super-powered&quot;]\n];\n</code></pre>\n<p>Scale titles are only used when the scale is above 2. A scale of 2.0 to 2.9 will use a random title from the first index of scaledTitles, and so forth. If you pass a scale of 5 or 6, it uses the highest tier.</p>\n<pre><code class=\"language-js\">if(scale &gt;= 2) {\n\tscale = Math.floor(scale);\n\tscale -= 2;\n\tif(scale &gt; scaledTitles.length-1) scale = scaledTitles.length-1;\n\tlet picked = misc.getRandomIntInclusive(0, scaledTitles[scale].length-1);\n\tmonster.name =  scaledTitles[scale][picked]+ ' ' + monster.name;\n}\n</code></pre>\n<p>So just to recap - while I only have 5 monsters now, the total number of variations is really high. And even better, to improve the set of possibilities, I can add a new base monster, add new boon titles, new scaled titles, as they come to me. Every single addition is a multiplicative change. I'll be honest, the actual is probably so so in terms of quality. I don't care. What excites me is that as soon as I get a creative idea, it's an incredible simple change!</p>\n<p>Following the tip I <a href=\"https://www.raymondcamden.com/2020/07/17/testing-vuejs-application-files-that-arent-components\">previously posted</a> about, I wrote a quick test script:</p>\n<pre><code class=\"language-js\">/*\nRay, run with: node -r esm test.js\n*/\n\nimport { monsterMaker } from '../src/utils/monsterMaker'\n\n\nconsole.log('no scale');\nconsole.log(monsterMaker.create());\n\nconsole.log('\\nscale 1.5');\nconsole.log(monsterMaker.create(1.5));\n\nconsole.log('\\nscale 2');\nconsole.log(monsterMaker.create(2));\n\nconsole.log('\\nscale 3');\nconsole.log(monsterMaker.create(3));\n\nconsole.log('\\nscale 4');\nconsole.log(monsterMaker.create(4));\n\nconsole.log('\\nscale 5');\nconsole.log(monsterMaker.create(5));\n\nconsole.log('\\nscale 6');\nconsole.log(monsterMaker.create(6));\n</code></pre>\n<p>And here's some results:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/monsters.jpg\" alt=\"List of resulting monsters\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can find this repo at <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/grpg\">https://github.com/cfjedimaster/vue-demos/tree/master/grpg</a>. Feel free to make PRs to add new monsters and titles.</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@polarmermaid?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Anne Nygård</a> on <a href=\"https://unsplash.com/s/photos/monsters?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building a Twitter Scheduling System with Pipedream and Google Sheets",
		"date":"Mon Jul 27 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/07/28/building-a-twitter-scheduling-system-with-pipedream-and-google-sheets",
		"content":"<p>A few months ago, I <a href=\"https://www.raymondcamden.com/2020/04/27/building-a-google-sheets-twitter-bot-with-pipedream\">blogged</a> about how I used <a href=\"https://pipedream.com\">Pipedream</a> and Google Sheets to create a Twitter bot. The idea was simple - read a sheet - select a random row - and use that as the source of a new Tweet. I was thinking about this recently and how useful Google Sheets can be as a &quot;light weight CMS&quot; and figured out another interesting use case - Twitter scheduling.</p>\n<p>So let me be clear that I know that Twitter already lets you schedule tweets. So does Tweetdeck, my preferred way of using Twitter. But I wanted to investigate how a different workflow could be used. Google Sheets provide a simple Excel-like editing experience that may be more friendly to non-developers. Also, maybe the user wants to work on a Tweet for next week, but edit it before then to make changes. To be honest, I'm not even sure if this makes sense, but I gave it a shot and I can share the results below.</p>\n<p>First off though - I can say I spent much more time thinking about the process than I did in implementation. The final workflow is a grand total of six steps. I wrote a little over thirty lines of code total and if we ignore some of the dumb coding mistakes I made, my total development time was probably around ten minutes. That's really bad ass. I did - though - spend a lot of time thinking about how it would work and specifically made choices to simplify the process a bit. My final workflow isn't perfect, but it works.</p>\n<p>Alright, let's start by looking at the Google Sheet:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/gs1.png\" alt=\"Google Sheet\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I've got a simple header and two columns, one for the text and one for the date. For the text, I found a cool <a href=\"https://webapps.stackexchange.com/questions/76174/how-to-limit-the-length-of-data-in-a-cell-in-google-sheets\">StackOverflow post</a> that described how to limit the size of text in a cell. I used this to prevent the user from typing too much in the text cell.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/gs2.png\" alt=\"Limited size of cell\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>What you can't see in the screenshot above is that it actually edited my text after I entered it to reduce the total number of characters. I didn't even know about the &quot;note&quot; feature of cells, but that worked pretty well!</p>\n<p>For the date column I applied date validation. Nice and simple.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/gs3.png\" alt=\"Date validation on the cell\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>All in all, I've made the sheet such that the writer should be guided to enter appropriate data. It isn't a web form with fancy hipster JavaScript, but it works.</p>\n<p>Now for the Pipedream part. Here is how my workflow works.</p>\n<ol>\n<li>First, get the entire sheet.</li>\n<li>Filter to tweets in the past, and remember the oldest one.</li>\n<li>Tweet that one.</li>\n<li>Delete that one.</li>\n</ol>\n<p>So pay attention to step 2. I may have multiple tweets in the past, but I only tweet the oldest one. My thinking was that the user would be scheduling, at most, a few per day, and typically not ones very close to others. Also, I can set up the CRON schedule of the workflow to check more often if I'm worried about having things be late. My assumption is that if the user schedules for 3PM and I'm checking every 10 minutes, that it's ok to be a few minutes late. Obviously that may be a problem and you could increase the the frequency if you wanted.</p>\n<p>Another reason I like this is that I could - if I choose, pause the workflow and enable it later, knowing that it will &quot;catch up&quot; on Tweets it missed. Now for the some details.</p>\n<p>The first step in the workflow is the CRON trigger. As all of this is just a test mine is still turned off, but it would be simple to pick a good schedule:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/gs4.png\" alt=\"CRON trigger\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>For my second step, I use a trick I learned from Pipedreamer (that's not really a word) <a href=\"https://twitter.com/DylanSather\">Dylan Sathar</a> - a Node step that sets constants for use later in the workflow. My code is just this:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\treturn {\n  \t\tgoogle_sheet_id: &quot;1y7sW4Qv9xHIA9tOXhgOtIB6yN1LegSMmf0GrlbHsSRk&quot;\n\t}\n}\n</code></pre>\n<p>Because my workflow needs to read and write to the sheet in multiple steps, I wanted to abstract out the ID of my sheet.</p>\n<p>My next sheet reads the data. Since my first row is a header, I skip that in my range:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/gs5.png\" alt=\"Read Google Sheet step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>To be clear, that was zero code on my part.</p>\n<p>My next step is the &quot;find earliest&quot; part. I wrote this code perfectly the first time and absolutely didn't make a bunch of stupid logical issues that would be clear to anyone with average intelligence.</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\n// loop over all cells, if any, and filter to those before now\nlet earliest = new Date(3000,1,1);\nlet now = new Date();\n\nlet selected = -1;\nlet cells = steps.get_values.$return_value.values;\nif(!cells) $end('No content from sheet.');\n\ncells.forEach((v,i) =&gt; {\n  let thisDate = new Date(v[1]);\n  \n  if(thisDate &lt; now &amp;&amp; thisDate &lt; earliest) {\n    earliest = thisDate;\n    selected = i;\n  }\n});\n\nif(selected &gt;= 0) {\n  // why the plus one? we start reading at the second row\n  return {\n    index: selected+1, \n    indexPlusOne: selected+2,\n    text: cells[selected][0]\n  };\n} else $end('No values to select.');\n\n</code></pre>\n<p>Notice the two <code>$end</code> calls here to possibly end the workflow early. Outside of that it's just a loop over the values. Also note that I remember the row I selected. I need to know this to delete it later. Also note that since my selection of cells began on row 2 (1 on the API side), I need to add one to my value otherwise it will be too low.</p>\n<p>The next step posts the tweet. No code, took two seconds to type in the paramater:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/gs6.png\" alt=\"Tweet step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The next step removes the row. Again, no code, took four seconds to get it working, much longer than the previous step, because I didn't notice I needed to pass a sheet ID along with the spreadhseet ID.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/07/gs7.png\" alt=\"Remove row from Google Sheets step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And that's it! You can see the entire workflow yourself here: <a href=\"https://pipedream.com/@raymondcamden/scheduled-tweet-manager-p_jmCyaa/\">https://pipedream.com/@raymondcamden/scheduled-tweet-manager-p_jmCyaa/</a>. Don't forget you can fork this and play with it yourself if you want. Let me know if you've got any questions or suggestions by leaving me a comment below!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@arlandscape?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Harald Arlander</a> on <a href=\"https://unsplash.com/s/photos/cells?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "pipedream"
            
		],
		"categories":[
            
                "serverless",
            
                "javascript"
            
		]

	},

	{
		"title": "Sharing Your Movies with Pipedream and Letterboxd",
		"date":"Mon Aug 03 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/08/04/sharing-your-movies-with-pipedream-and-letterboxd",
		"content":"<p>I recently discovered <a href=\"https://letterboxd.com/\">Letterboxd</a> via a cool example of integrating it's data with Eleventy (<a href=\"https://smithtimmytim.com/blog/2020/create-a-film-diary-with-eleventy-and-letterboxd/\">&quot;Show Off Your Letterboxd Film Diary with Eleventy&quot;</a>). Letterboxd is a site (and app) that lets you track the movies you've watched and give reviews and ratings. I'm a huge fan of <a href=\"https://www.goodreads.com/\">GoodReads</a> for keeping track of the books I've read and I'm going to give Letterboxd a try as well. My wife and I are both huge movie nerds so I thought it would be kind of cool to have a list of movies I've watched when the year finally ends.</p>\n<p>While there isn't a proper API yet (apparently it's in <a href=\"https://letterboxd.com/api-beta/\">beta now</a>), every account has an RSS feed setup. Here's mine: <a href=\"https://letterboxd.com/raymondcamden/rss/\">https://letterboxd.com/raymondcamden/rss/</a></p>\n<p>While we all know what RSS looks like (ok, maybe it's just me), Letterboxd has quite a few extensions to the specification that provide additional data about your films. Here's one entry (which is all I've got for now - I've told the site about a bunch of old movies I've watched but have only &quot;logged&quot; one review so far):</p>\n<pre><code class=\"language-xml\">&lt;item&gt;\n&lt;title&gt;John Mulaney: Kid Gorgeous at Radio City, 2018 - ★★★★&lt;/title&gt;\n&lt;link&gt;https://letterboxd.com/raymondcamden/film/john-mulaney-kid-gorgeous-at-radio-city/&lt;/link&gt;\n&lt;guid isPermaLink=&quot;false&quot;&gt;letterboxd-watch-117795457&lt;/guid&gt;\n&lt;pubDate&gt;Wed, 5 Aug 2020 08:40:48 +1200&lt;/pubDate&gt;\n&lt;letterboxd:watchedDate&gt;2020-08-03&lt;/letterboxd:watchedDate&gt;\n&lt;letterboxd:rewatch&gt;No&lt;/letterboxd:rewatch&gt;\n&lt;letterboxd:filmTitle&gt;John Mulaney: Kid Gorgeous at Radio City&lt;/letterboxd:filmTitle&gt;\n&lt;letterboxd:filmYear&gt;2018&lt;/letterboxd:filmYear&gt;\n&lt;letterboxd:memberRating&gt;4.0&lt;/letterboxd:memberRating&gt;\n&lt;description&gt;&lt;![CDATA[ &lt;p&gt;&lt;img src=&quot;https://a.ltrbxd.com/resized/film-poster/4/5/0/3/1/5/450315-john-mulaney-kid-gorgeous-at-radio-city-0-500-0-750-crop.jpg?k=1f94664287&quot;/&gt;&lt;/p&gt; &lt;p&gt;Watched on Monday August 3, 2020.&lt;/p&gt; ]]&gt;&lt;/description&gt; &lt;dc:creator&gt;Raymond Camden&lt;/dc:creator&gt;\n&lt;/item&gt;\n</code></pre>\n<p>Everything with the <code>letterboxd:</code> prefix is a namespaced set of data that they've added to provide more information to the feed. Looking at this, and the blog entry I shared earlier, it occurred to me that it would be easy to build an integration between this and <a href=\"https://pipedream.com\">Pipedream</a>. I got this working and you can see it below.</p>\n<blockquote class=\"twitter-tweet\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">I just watched John Mulaney: Kid Gorgeous at Radio City and rated it a 4.0. See my <br>review at <a href=\"https://t.co/4sPdaLTFeJ\">https://t.co/4sPdaLTFeJ</a>.</p>&mdash; moonpicbot (@moonpicbot) <a href=\"https://twitter.com/moonpicbot/status/1290761974893219842?ref_src=twsrc%5Etfw\">August 4, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Notice - when I &quot;play&quot; like this, I use one of my bot accounts, not my main account. If I continue to use Letterboxd I'll update my workflow to post to my main account. Alright, so how was this built?</p>\n<p>The first step of my workflow was an RSS event source. I first wrote about Pipedream's <a href=\"https://www.raymondcamden.com/2020/05/07/looking-at-pipedreams-event-sources\">event sources</a> back in May. It's a powerful way to build workflows built on custom events. One of the events built in is an RSS feed parser that runs every fifteen minutes and on a new RSS entry will emit an event. With this as the source of my workflow I've got a serverless function that will execute automatically whenever I do a new movie review. (Well, within fifteen minutes.)</p>\n<p>The next step was a custom Node step. I did two things in here. First, I wanted to get the URL of the image for the movie. In that blog entry I shared earlier, they used a npm package called <a href=\"https://www.npmjs.com/package/letterboxd\">letterboxd</a>. This is a cool little package that abstracts away the complete logic of reading and parsing the RSS feed. But for me, the RSS feed was already parsed, I just needed the &quot;find the image logic&quot;.</p>\n<p>I went to the GitHub repo, opened up <a href=\"https://github.com/zaccolley/letterboxd/blob/master/index.js\">index.js</a>, and found the <code>getImage</code> function. I took the logic from there and incorporated it into my Node step:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\tconst cheerio = require('cheerio');\n\n\t/*\n\tThis logic taken from the https://github.com/zaccolley/letterboxd package. The package assumes it is doing\n\tall the network stuff and I just needed the image parsing part.\n\t*/\n\tgetImage = function(description) {\n\t\tvar $ = cheerio.load(description);\n\n\t\t// find the film poster and grab it's src\n\t\tvar image = $('p img').attr('src');\n\n\t\t// if the film has no image return no object\n\t\tif (!image) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn {\n\t\t\ttiny: image.replace('-0-150-0-225-crop', '-0-35-0-50-crop'),\n\t\t\tsmall: image.replace('-0-150-0-225-crop', '-0-70-0-105-crop'),\n\t\t\tmedium: image,\n\t\t\tlarge: image.replace('-0-150-0-225-crop', '-0-230-0-345-crop')\n\t\t};\n\t}\n\n\tlet imgdata = getImage(steps.trigger.event.description);\n\tlet text = `\nI just watched ${steps.trigger.event['letterboxd:filmtitle']['#']} and rated it a ${steps.trigger.event[&quot;letterboxd:memberrating&quot;][&quot;#&quot;]}. See my \nreview at ${steps.trigger.event.link}.\n\t`;\n\n\treturn {\n\t\ttext, imgdata\n\t};\n\n}\n</code></pre>\n<p>The second thing I did was to simply write up the text I wanted to tweet. I used the custom values from the RSS feed to get the title and rating.</p>\n<p>By the way, make note of the use of <a href=\"https://www.npmjs.com/package/cheerio\">cheerio</a> package. This is an awesome implementation of jQuery on the server and works really darn well for cases where you need to parse HTML as a string.</p>\n<p>So at this point, I've got images (multiple to pick from) and text. My plan was to tweet with the image so to do that you first need to upload the image. I picked the pre-built <code>upload_media_to_twitter</code> step where all I did was plugin my URL param: <code>steps.parseEntry.$return_value.imgdata.medium</code>.</p>\n<p>Lastly, I used the <code>post_tweet</code> step with two params: status was <code>steps.parseEntry.$return_value.text</code> and media ids was <code>steps.upload_media_to_twitter.$return_value</code>.</p>\n<p>And that's it. You can see the complete workflow here: <a href=\"https://pipedream.com/@raymondcamden/letterboxd-to-twitter-p_V9CVvK/\">https://pipedream.com/@raymondcamden/letterboxd-to-twitter-p_V9CVvK/</a> As I mention every time, don't forget you can copy this workflow to your own Pipedream account and use it as you will. Enjoy!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@felixmooneeram?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Felix Mooneeram</a> on <a href=\"https://unsplash.com/s/photos/movie-theater?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "pipedream"
            
		],
		"categories":[
            
                "serverless",
            
                "javascript"
            
		]

	},

	{
		"title": "Migrating from Node and Express to the Jamstack - Part 1",
		"date":"Wed Aug 05 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/08/06/migrating-from-node-and-express-to-the-jamstack-part-1",
		"content":"<p>Welcome to the first of a series of some unknown length. For the past year or so (seriously), I've been looking at an old Node.js project I have and thinking about how I could update to it. I have to be a bit vague because it's a secret project I'm doing with some friends but it involved a number of features:</p>\n<ul>\n<li>MongoDB for storage</li>\n<li>Auth0 for identity</li>\n<li>Stripe for ecommerce</li>\n</ul>\n<p>I used <a href=\"https://expressjs.com/\">Express.js</a> for the framework. The front end used a bit of JavaScript, but not much. Auth0 was used for login and registration with <a href=\"http://www.passportjs.org/\">Passport.js</a> being used as well. Ecommerce was done via <a href=\"https://stripe.com/\">Stripe</a> and a simple checkout modal. This was followed by a POST handler in Node to record the order.</p>\n<p>The site itself was fairly small. A few pages that were just text and a set of dynamic pages representing the main content. As I have to be a bit vague, let's pretend for now it is a movie site with the ability to load information about a movie via a path like so: <code>/movie/urlslug</code>, so for example: <code>/movie/the-force-awakens</code>.</p>\n<p>While the site worked, the service it was on was moving past Node.js hosting and while I could find another, I thought it might be time to look into a Jamstack solution. As I said though, this has been on my mind for about a year now. While I feel really comfortable with the Jamstack, I just struggled with how to convert this existing site over, especially with the Mongo, login, and ecommerce aspects. I knew there were solutions for all of that, but again, I just struggled with the particulars.</p>\n<p>Finally last weekend I decided to take a stab at it. I made some progress and after talking with some friends, I think I know how to proceed. While I can't show a &quot;before&quot; and &quot;after&quot; demo, I am working on a new demo that mimics some of the existing site. I'm not necessarily saying this is the best conversion, but I had to start somewhere. As always, I'd <em>love</em> your feedback in the comments below. With that out of the way, let me begin by covering what the features of this demo site are and the technology stack.</p>\n<ul>\n<li>\n<p>The site in question will be a film site. You'll hit the home page, see a list of films, and can click for details. You can optionally login to post comments and there will be a page that lists every comment you wrote.</p>\n</li>\n<li>\n<p>I had to decide between a Single Page Application written in Vue and a Jamstack site written in <a href=\"https://www.11ty.dev/\">Eleventy</a>. Since the site is so simple, I decided to go with Eleventy. I'm still using Vue a bit on the front end, but I wanted static files backed by serverless functions as my core architecture.</p>\n</li>\n<li>\n<p>I'm using <a href=\"https://www.mongodb.com/\">Mongo</a> for data storage. It's what I used for the Node site and I see no reason to change that. Previously I used Mongoose as a wrapper for Mongo but I'll be dropping that for now. I haven't used Mongo seriously in a while, but I was really impressed with how much it's improved and how quick it was to setup. Im also now using their Compass application for local editing.</p>\n</li>\n<li>\n<p>I'll be using Netlify for the site, because of couse I am.</p>\n</li>\n<li>\n<p><a href=\"https://auth0.com/\">Auth0</a> will be used for identity. I wanted to use <a href=\"https://docs.netlify.com/visitor-access/identity/\">Netlify Identity</a>, but they only support Google for social login (and a few others that none of our users will recognize). I need Twitter and Facebook support as well. I'm really surprised this hasn't been added to Netlify Identity yet. I raised it on the forums as a request for now.</p>\n</li>\n<li>\n<p>My &quot;dynamic&quot; content will be split between &quot;kinda&quot; dynamic and really dynamic. This is an important point. I wanted a real file for every film. For that I used Eleventy's pagination support. That means when a new film is added, a site build has to happen. Since this can be automated and is quick, I was fine with that. Also, in the context of this demo, films are added only so often. At the same time, every film has data that does change often, namely comments. So when you hit the film page, a serverless function will &quot;enhance&quot; the page by fetching that additional data. I'm also tracking the total number of film puchases so that will be fetched as well. (See bullet point below.)</p>\n</li>\n<li>\n<p>To post comments, you have to login. The site knows you are logged in as you go from page to page. This has to work even though I'm using static pages and not a SPA. This was a big deal because nearly every demo I saw of this assumed a SPA. I've got a good friend who works at Auth0 and he helped me out. I'm going to wait to the next post though before I show that.</p>\n</li>\n<li>\n<p>Finally, you can buy a film. Ok, that doesn't necessarily make sense, but I need to have ecommerce in the demo. Stripe will process the payment and serverless functions will be used to record the order. It has to know who did it (via Auth0) and what film was purchased.</p>\n</li>\n</ul>\n<p>So that's nearly a thousand words, and I still don't feel like I've quite nailed it down precisely, but my entire reason for building this blog was to work through things that confused me (and excited me) and share them. I've got the first phase done so let me share what I did.</p>\n<p>I began with an existing MongoDB database. (Actually it was on a service called mLab and I had to migrate it. That went painlessly.) MongoDB gave me my connection string information which I knew was going to be sensitive, so step one was adding it to my Netlify site an environment variable.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/08/sj1.jpg\" alt=\"Netlify environemnt settings\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I then switched to Eleventy. My first page us a list of films and to get that, I'm using a global data file. Here it is:</p>\n<pre><code class=\"language-js\">const MongoClient = require('mongodb').MongoClient;\nconst url = process.env.MONGO_URL;\n\n\nmodule.exports = async function() {\n    let films = await getFilms();\n    return films;\n}\n\nasync function getFilms() {\n\n\tconst client = new MongoClient(url, { useUnifiedTopology: true });\n  \tawait client.connect();\n  \tconst db = client.db('eleventy_demo');\n  \tconst films = db.collection('films');\n\n\tconst query = { &quot;public&quot;: true };\n\tconst filmArray = await films.find(query).toArray();\n\tawait client.close();\n\treturn filmArray;\n}\n</code></pre>\n<p>There's a couple of things that are important here. First, I get my Netlify environment variable like any other, but for this to work I need to use <code>ntl dev</code> to run my site and not <code>eleventy --serve</code>. Technically <code>ntl dev</code> is doing that anyway, but don't forget. This is what will &quot;inject&quot; the environment variable. You can see it in your console:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/08/sj2.jpg\" alt=\"ntl dev output\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Although crucial aspect? Closing the Mongo connection. That's huge and cost me two days of trying to figure out why it could run locally but never built on Netlify. Huge thanks go to <a href=\"https://daverupert.com/\">Dave Rupert</a> for finding this issue and even submitting a PR so I could fix it in one click.</p>\n<p>Notice that I'm doing a filter on &quot;public&quot; films. That was me replicating a feature of the 'real' site, the ability to have content that wasn't published yet.</p>\n<p>So this gives me a list of films. I could then list them in my home page:</p>\n<pre><code class=\"language-html\">&lt;ul&gt;\n{% for film in films %}\n\t&lt;li&gt;&lt;a href=&quot;films/{{film.title | slug }}/&quot;&gt;{{film.title}}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}\n\n&lt;/ul&gt;\n</code></pre>\n<p>Next I needed to build one page per film. I did that like so:</p>\n<pre><code class=\"language-html\">\n---\nlayout: main\npagination:\n   data: films\n   alias: film\n   size: 1\npermalink: &quot;/films/{{ film.title | slug }}/index.html&quot;\n---\n\n&lt;h2&gt;{{ film.title }}&lt;/h2&gt;\n\n&lt;p&gt;\n\t{{ film.description }}\n&lt;/p&gt;\n\n</code></pre>\n<p>This creates one page per film using a &quot;slugged&quot; version of the title. I mentioned earlier that I need to use Ajax to get additional data on films that needs to be &quot;live&quot;, but I'll get to that later in the process.</p>\n<p>I know this isn't a post just specifically about Eleventy, but I freaking love Eleventy.</p>\n<p>Anyway, at this point I've got a static site driven by data in a MongDB database. It requires a rebuild on data editing, but for now it's got all the benefits of my older Node site (well, with a few features built) and zero need for a live server. Technically I'm running my MongoDB server 24/7, but I'm <em>well</em> within a free tier and the fine folks at MongoDB are handling the server. I trust them to handle that part.</p>\n<p>You can see this running live here: <a href=\"https://hardcore-curie-802f8f.netlify.app/\">https://hardcore-curie-802f8f.netlify.app/</a>. And the GitHub repo is at: <a href=\"https://github.com/cfjedimaster/eleventy-auth0-serverless-mongo\">https://github.com/cfjedimaster/eleventy-auth0-serverless-mongo</a></p>\n<p>That's it for now. The next version will implement Auth0 for login. It's going to be in the top nav and as you navigate, will remember that you're logged in. The code for that is done (again, via a friend of mine at Auth0), but it may be a few days. Again, if you have any comments, or if you've done this process yourself, please drop me a comment below!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@7bbbailey?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Barth Bailey</a> on <a href=\"https://unsplash.com/s/photos/migrate?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "serverless",
            
                "javascript"
            
		]

	},

	{
		"title": "Hiding Future Content with Eleventy",
		"date":"Thu Aug 06 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/08/07/hiding-future-content-with-eleventy",
		"content":"<p>Here's a quick tip for something that's been on my mind lately with <a href=\"https://www.11ty.dev\">Eleventy</a> - hiding content so that it's published but not linked. What do I mean by that? Eleventy doesn't support the idea of &quot;drafts&quot; such that you can have content locally but not in production. You can use <code>permalink: false</code> (documented <a href=\"https://www.11ty.dev/docs/permalinks/#disable-templating-in-permalinks\">here</a>) to stop a page from being output, but it will still exist in collections. I thought a more useful case may be the ability to publish content for the future such that they are not listed in collections until their publish date has come to pass. This has the benefit of letting you see the content if you know the URL. This lets you write a post for next week, publish, and share the URL with a reviewer. In order for this to be effective though you need to have builds scheduled on a regular basis. It would be simple to schedule a daily, or even hourly, build on Netlify and other platforms (let me know if you want to see an example of that!). Let's consider a simple example.</p>\n<p>First, I build an Eleventy site that contained one index page:</p>\n<pre><code class=\"language-html\">\n&lt;h2&gt;Posts&lt;/h2&gt;\n\n&lt;ul&gt;\n\n{% for post in collections.posts  %}\n\t&lt;li&gt;&lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.data.title }}&lt;/a&gt; - {{ post.date }}&lt;/li&gt;\n{% endfor %}\n\n&lt;/ul&gt;\n</code></pre>\n<p>I then added a <code>posts</code> subdirectory with three blog posts. Each blog post had front matter like so:</p>\n<pre><code class=\"language-html\">---\ntitle: Alpha Post\ntags: posts\ndate: 2020-08-02\n---\n</code></pre>\n<p>Notice the date. For my three posts I picked two dates in the past and one in the future.</p>\n<p>My first attempt at hiding the future post was via <a href=\"https://www.11ty.dev/docs/filters/#universal-filters\">universal filter</a>:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter(&quot;released&quot;, posts =&gt; {\n\tlet now = new Date().getTime();\n\treturn posts.filter(p =&gt; {\n\t\tif(now &lt; p.date.getTime()) return false;\n\t\treturn true;\n\t});\n});\n</code></pre>\n<p>Basically I take the current time (which remember will be build time, hence my warning above about having a scheduled build process) and compare it to the post time. To use this in my index page, I just did this:</p>\n<pre><code class=\"language-html\">&lt;h2&gt;Posts&lt;/h2&gt;\n\n\n&lt;ul&gt;\n{% for post in posts  %}\n\t&lt;li&gt;&lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.data.title }}&lt;/a&gt; - {{ post.date }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>And that worked like a charm. But in order for it to be effective I'd have to ensure I used the filter everywhere I get content. Another option would be to use a <a href=\"https://www.11ty.dev/docs/collections/\">custom collection</a>. I've used this before but only via the glob option. Being able to build a collection on another collection is sweet:</p>\n<pre><code class=\"language-js\">eleventyConfig.addCollection(&quot;releasedPosts&quot;, function(collectionApi) {\n\n\treturn collectionApi.getFilteredByTag(&quot;posts&quot;).filter(p =&gt; {\n\t\tlet now = new Date().getTime();\n\t\tif(now &lt; p.date.getTime()) return false;\n\t\treturn true;\n\t});\n});\n</code></pre>\n<p>Now I can change my home page to iterate over the new collection:</p>\n<pre><code class=\"language-html\">&lt;ul&gt;\n{% for post in collections.releasedPosts  %}\n\t&lt;li&gt;&lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.data.title }}&lt;/a&gt; - {{ post.date }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>It's a small change I suppose but feels a bit safer. Both solutions also leave us open to changing the logic at some later time. For example, maybe I want to use another piece of front matter, like <code>hide: true</code>, instead.</p>\n<p>Again, this does <em>not</em> stop Eleventy from publishing the URL, but with nothing linking too it it's going to be (mostly) safe. Certainly safe enough for the process of having someone take a look at a post for review, or heck, even just to have it published later. Anyway, I hope this helps, and you can get the source for this here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/hide_tests\">https://github.com/cfjedimaster/eleventy-demos/tree/master/hide_tests</a></p>\n<p><span>Photo by <a href=\"https://unsplash.com/@michaelwb?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Michael Browning</a> on <a href=\"https://unsplash.com/s/photos/hidden?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Migrating from Filters in Vue 3",
		"date":"Wed Aug 12 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/08/13/migrating-from-filters-in-vue-3",
		"content":"<p>I've been holding off on learning (and playing) with Vue 3 until it's gotten closer to release, but with Vue 3 in RC it feels like an appropriate time to start digging into it. The <a href=\"https://v3.vuejs.org/\">docs</a> are in a pretty good state and there is a <em>really</em> well done <a href=\"https://v3.vuejs.org/guide/migration/introduction.html\">migration guide</a> that clearly defines the changes and how to update your code.</p>\n<p>One of the changes that I'm not a fan of is the removal of filters. Filters provide a way to format text in your display and were one of my favorite Vue.js features. (To be fair, I've got more than one &quot;favorite&quot; Vue feature. ;) In case you haven't seen this feature yet, let's look at a quick example.</p>\n<p>First, I set up an application with data:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app', \n  data: {\n    bio: 'This is a very long line of text that will go on and on and not really be helpful to anyone reading it outside of possibly boring them inti some stupified zombie-like trance which may be desirable in these trying times.'\n  }\n})\n</code></pre>\n<p>In my DOM, I want to display the bio, but I want to limit the size of it. I can add this to my Vue application:</p>\n<pre><code class=\"language-js\">filters: {\n\ttrim(s) {\n\t\tif(s.length &lt; 50) return s;\n\t\treturn s.substring(0,50-3) + '...';\n\t}\n}\n</code></pre>\n<p>Which then allows this syntax in my DOM:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n My Bio: {{ bio | trim }}\n&lt;/div&gt;\n</code></pre>\n<p>Now maybe it's my experience with HTML template languages, but that pipe syntax looks completely natural to me. Here's a complete CodePen of this in play:</p>\n<p class=\"codepen\" data-height=\"393\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"gOrPGLo\" style=\"height: 393px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Filter 1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/gOrPGLo\">\n  Filter 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Filters also support optional arguments allowing for syntax like so:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  My Bio: {{ bio | trim(10) }}\n&lt;/div&gt;\n</code></pre>\n<p>The filter has to be updated of course:</p>\n<pre><code class=\"language-js\">trim(s,len) {\n\tif(!len) len = 50;\n\tif(s.length &lt; len) return s;\n\treturn s.substring(0,len-3) + '...';\n}\n</code></pre>\n<p>Here's another CodePen for you to play with:</p>\n<p class=\"codepen\" data-height=\"393\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"jOqWGVX\" style=\"height: 393px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Filter 2\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/jOqWGVX\">\n  Filter 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>So as I said - I dig this! But it's being removed from Vue 3. Why? The migration guide says this:</p>\n<blockquote>\nWhile this seems like a convenience, it requires a custom syntax that breaks the assumption of expressions inside of curly braces being \"just JavaScript,\" which has both learning and implementation costs.\n</blockquote>\n<p>This makes sense. I don't like filters going away as a feature, but I can see the logic in this decision. To keep using this logic in a Vue 3 application, you can simply move the filter to a method. Here's how it looks in a Vue 3 application:</p>\n<pre><code class=\"language-js\">const app = {\n\tdata() {\n\t\treturn {\n\t\t\tbio: 'This is a very long line of text that will go on and on and not really be helpful to anyone reading it outside of possibly boring them inti some stupified zombie-like trance which may be desirable in these trying times.'\n\t\t}\n\t},\n\tmethods: {\n\t\ttrim(s,len) {\n\t\t\tif(!len) len = 50;\n\t\t\tif(s.length &lt; len) return s;\n\t\t\treturn s.substring(0,len-3) + '...';\n\t\t}\n\t}\n};\n\nVue.createApp(app).mount('#app')\n</code></pre>\n<p>You have to change the DOM of course:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  My Bio: {{ trim(bio) }}\n&lt;/div&gt;\n</code></pre>\n<p>And here's an example with a custom length:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  My Bio: {{ trim(bio, 12) }}\n&lt;/div&gt;\n</code></pre>\n<p>The end result is the same of course. You can see it here:</p>\n<p class=\"codepen\" data-height=\"398\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"YzqwrVQ\" style=\"height: 398px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"non filter filter\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/YzqwrVQ\">\n  non filter filter</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>What happens if you forget and use the pipe operator? Vue 3 treats it as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">bitwise OR</a> operator leading to unexpected results.</p>\n<p>This isn't the only way to move from filters of course. If you knew for a fact that you were always displaying the bio value in a trimmed fashion, you could trim it when the value is retrieved. In my example the value is hard coded, but typically it would be dynamic. Of course, having the original value lets you do things like displaying it in a trimmed fashion and letting the user click to expand.</p>\n<p>Be sure to check the <a href=\"https://v3.vuejs.org/guide/migration/filters.html#filters\">Vue 3 migration guide on Filters</a> for more examples and I'll be blogging more about Vue 3 as I start playing with it more.</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@nate_dumlao?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Nathan Dumlao</a> on <a href=\"https://unsplash.com/s/photos/filter?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Migrating from Node and Express to the Jamstack - Part 2",
		"date":"Fri Aug 14 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/08/15/migrating-from-node-and-express-to-the-jamstack-part-2",
		"content":"<p>Welcome to the second part of my series where I look at migrating an &quot;older&quot; style Node/Express web application to the Jamstack and serverless. If you haven't done so yet, please be sure to read <a href=\"https://www.raymondcamden.com/2020/08/06/migrating-from-node-and-express-to-the-jamstack-part-1\">part one</a> as it goes into detail the kind of site I'm building and the design decisions I've made. This part was somewhat difficult to get to and I didn't progress as far as I wanted, but there's a lot of stuff swirling around in my head and if I don't get down on paper, well electronic paper, than I'm afraid I'll forget.</p>\n<p>The focus of this particular sprint in development was on user authentication. The site I'm building lets anyone view the content, but you have to be logged in to &quot;purchase&quot; films and leave comments.</p>\n<p>My original plan was to use <a href=\"https://auth0.com/\">Auth0</a> for user authentication and authorization. My former coworker and all-around smart friend <a href=\"https://iamnotmyself.com/\">Bobby Johnson</a> built me some excellent sample code that demonstrated Auth0 integration in a &quot;simple&quot; Jamstack application. I say &quot;simple&quot; because many demos seem to assume a SPA application and that's not what I'm building.</p>\n<p>However, I decided to take another look at <a href=\"https://docs.netlify.com/visitor-access/identity/\">Netlify Identity</a>. This is a feature that I've been meaning to dig into for a while now. Every time I had taken a look before it had been a bit overwhelming and not something I could pick up a few minutes. That's not a complaint per se, and the fact that security isn't incredibly simple should be obvious.</p>\n<p>I wanted to give Netlify Identity a fair chance because I'm already committed to using Netlify for the site and because of how it integrated automatically into serverless functions as well. I knew that if I needed to build an end point and require a user be logged in, it would be trivial. I also knew it had various client-side libraries to support the login flow. Auth0 does all of this too, but again, the idea of keeping it all &quot;in house&quot; for a Netlify project was compelling.</p>\n<p>Ok, so that's a lot of preamble. I did get things working. I struggled with the docs towards the end. But I got it working. I still have questions, but I think I'm headed in the right direction. Let's start by talking about the high level aspects of whats in the site now.</p>\n<ol>\n<li>Every page needed a way to login, signup, or logout. In the nav obviously.</li>\n<li>I wanted to support &quot;regular&quot; and social login.</li>\n<li>I wanted to know who my users were. Why? Well when a comment is posted, it needs to know who posted it, ditto for film purchases.</li>\n<li>Eventually (and this isn't done yet) - support posting of comments, support getting comments for a film and show who wrote what, and let people buy films (the ecommerce part)</li>\n</ol>\n<p>Let me break down I accomplished the first three parts (maybe two and a half to be honest). First, Identity is a feature you have to enable to use first. This is done in your site settings:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/08/nla1.png\" alt=\"UI for enabling Identity\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>That's the easy part. Next, you need to provide a way to let users login, signup, and logout. The docs suggest either the <a href=\"https://github.com/netlify/netlify-identity-widget\">Identity widget</a> or a custom solution with <a href=\"https://github.com/netlify/gotrue-js\">gotrue-js</a>. My initial assumption was that the widget would be 'cute' but probably not customizable for my needs. I decided to try it anyway and I'm glad I did as it worked just fine.</p>\n<p>I began by adding two buttons to my site. I'm using Bootstrap so the classes you see come from that:</p>\n<pre><code class=\"language-html\">&lt;button class=&quot;btn btn-success&quot; id=&quot;loginBtn&quot;&gt;Login or Signup&lt;/button&gt;\n&lt;button class=&quot;btn btn-success d-none&quot; id=&quot;logoutBtn&quot;&gt;Logout&lt;/button&gt;\n</code></pre>\n<p>The <code>d-none</code> there is a way for Bootstrap to hide the button. Basically I'm assuming the user is not logged in on hitting the site. Alright, now lets look at the JavaScript.</p>\n<p>First, you initialize the widget:</p>\n<pre><code class=\"language-js\">netlifyIdentity.init({\n\tcontainer: '#loginBtn' // defaults to document.body,\n});\n</code></pre>\n<p>The <code>container</code> field links back to the login button. To enable the button to fire the UI, I then used this:</p>\n<pre><code class=\"language-js\">loginBtn.addEventListener('click', () =&gt; {\n\tnetlifyIdentity.open();\n}, false);\n</code></pre>\n<p>Clicking the button opens up this dialog:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/08/nla2.png\" alt=\"Login widget\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Notice the social login provider there - Google. Unfortunately, this is the only &quot;regular&quot; social login provider that is supported. By regular I mean I'm ignoring developer-centric ones like GitHub. About two weeks ago I <a href=\"https://community.netlify.com/t/add-additional-social-logon-providers/20125\">posted</a> a request on the Netlify forums asking for more support, specifically Twitter and Facebook. I got a response that said such support would have to come from the <a href=\"https://github.com/netlify/gotrue\">gotrue</a> project. So I went to the project and discovered that a <a href=\"https://github.com/netlify/gotrue/pull/111\">pull request</a> from almost two years ago added Facebook support. The PR says that there's a ToDo for Netlify Identity to work with the provider which implies the impetus is on Netlify to add it. Unfortunately I haven't gotten a response yet on the forum thread.</p>\n<p>The UI nicely handles logging in and signup, with email confirmation built in. In the code I can respond to login like so:</p>\n<pre><code class=\"language-js\">netlifyIdentity.on('login', user =&gt; {\n\tconsole.log('login', user);\n\tloginBtn.classList.add('d-none');\n\tlogoutBtn.classList.remove('d-none');\n});\n</code></pre>\n<p>Logout works pretty much the same, here's the click event and handler:</p>\n<pre><code class=\"language-js\">logoutBtn.addEventListener('click', () =&gt; {\n\tnetlifyIdentity.logout();\n}, false);\n\nnetlifyIdentity.on('logout', () =&gt; {\n\tconsole.log('Logged out')\n\tlogoutBtn.classList.add('d-none');\n\tloginBtn.classList.remove('d-none');\n});\n\n</code></pre>\n<p>And that's pretty much it for the login/logout functionality on the client-side. Here's where things got a bit more tricky.</p>\n<p>In the original Node/Express application, whenever you login I check to see if you are a 'known' user in my Mongo collection and if not, add you. I started to investigate how that would work here. I mean, the actual code itself to work with Mongo woul be easy, but specifically the &quot;recognize the login on the server&quot; part.</p>\n<p>So - the cool thing I discovered was that Netlify has <a href=\"https://docs.netlify.com/visitor-access/identity/registration-login/#trigger-serverless-functions-on-identity-events\">serverless events</a> tied to login. Basically &quot;if you name a function X, I'll run it for you&quot; type stuff, like they have for form submissions and deploy events. There's three events:</p>\n<blockquote>\n<ul>\n<li>identity-validate: Triggered when an Identity user tries to sign up via Identity.</li>\n<li>identity-signup: Triggered when an Identity user signs up via Netlify Identity. (Note: this fires for only email+password signups, not for signups via external providers e.g. Google/GitHub)</li>\n<li>identity-login: Triggered when an Identity user logs in via Netlify Identity.</li>\n</ul>\n</blockquote>\n<p>So there's a few things to chew on here. First, validate versus signup isn't terribly clear. I <a href=\"https://community.netlify.com/t/questions-about-netlify-identity-serverless-functions/20755/5\">posted</a> on the forum about this and got an incredible amount of help from another community member, <a href=\"https://jon.fm/\">Jon Sullivan</a>. Based on his research, what we figured out is that validate is called when a user signs up, but before they've confirmed via email. Given that signup doesn't work for social login, my thought was to use validate.</p>\n<p>In theory it would mean I'd log a new user before they confirmed, but I was ok with that. However, in my testing, social signups did <em>not</em> fire this serverless event. A regular signup would.</p>\n<p>In talking with Jon, the best we could gather is that sign the user was already signed up at Google, and already logged in, these events wouldn't fire with Netlify. (To be clear, this is what he figured out via other posts and such. I have not gotten a response from Netlify on the post.) I can see that thinking, but I disagree. Yes, I am a signed up user with Google. But I am <em>not</em> a user on the site. In fact, Netlify lets you view users, and it shows my name after I sign up via Google. So <em>something</em> on the Netlify recognizes that I just signed up via a social platform. Therefore, the serverless functions <em>should</em> fire.</p>\n<p>Alright, now for the fun part, and by fun, I mean really frustrating. I was talking about my issues on a Slack group and a Netlify developer, Gerald Onyango, asked: &quot;are you using a named function or a webhook&quot;. My response was - um - what webhooks?</p>\n<p>Guess what?</p>\n<p>If you go to your site settings, Identiy, settings again, and scroll down, you find this section:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/08/nla3.png\" alt=\"Oh yeah, those webhooks\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>As you can see, there's webhook settings for Identity that correspond to the three events. And here's the fun part. They work for social login. I shared this all on the forum post but it looks like two serious bugs. One, the serverless function isn't working the same as the webhook, and two, the docs don't mention these webhooks anywhere. (Oh, and like every other serverless event the 'shape' of the data isn't documented, and that's known now for a few years. I did discover something interesting there that I'll share at the end of the post.)</p>\n<p>Ok, so at this point, I could go ahead and write my logic of &quot;here is a user, see if she is new, and if so, store her in Mongo&quot;. But in talking with Jon more, he pointed out that you can use API calls to work with user data. It's complex so I'd suggest checking out the <a href=\"https://community.netlify.com/t/questions-about-netlify-identity-serverless-functions/20755/5\">post</a>, but basically in my (eventual) serverless function to get comments and get names of each user, I could combine a Mongo call (for the comment data) with calls to the Netlify API to get user information. As discussed in the thread, I could also just store user names and such in my comments and have some duplication of data too. As Jon suggested, I could notice if a name is changed and then update the data then.</p>\n<p>That's where I am now. My next sprint will be to add the &quot;addComment&quot; function and I'll decide then if I store just a user foreign key or if I do that <em>and</em> contextual data about the user.</p>\n<p>You can find the repository for this project here - <a href=\"https://github.com/cfjedimaster/eleventy-auth0-serverless-mongo\">https://github.com/cfjedimaster/eleventy-auth0-serverless-mongo</a>. Note that I should probably consider renaming it since I'm not using Auth0 anymore, but I'm not too concerned about it. You can also demo it live here: <a href=\"https://hardcore-curie-802f8f.netlify.app/\">https://hardcore-curie-802f8f.netlify.app/</a>. Please do and let me know how it works for you.</p>\n<p>All in all... this is a damn good feature hindred a bit by docs that could use even just a bit of clarification. I feel confident I made the right decision using this instead of Auth0 and I'm looking forward to the next part.</p>\n<p>p.s. Ok, this is technically off topic for the post but it really merits a quick mention. As I mentioned above, the data that gets passed to the serverless functions isn't documented. I have feelings about this but whatever. Randomly I discovered something interesting in the CLI. If you run <code>ntl functions --help</code>, you see this gem:</p>\n<pre><code>functions:invoke  Trigger a function while in netlify dev with simulated data, good for testing function calls including Netlify's Event Triggered Functions\n</code></pre>\n<p>Holy smokes! That's awesome. One of the things <code>ntl dev</code> can't do is simular those events. I've had to test these in production and it's a bit of a pain. I'll use console.log, have a tab open to my Netlify app's function page, reload, and so forth. This looks like the perfect solution. If you run the help command on this feature, you see a lot of cool stuff. You can specify a function (if you don't, the CLI knows your function list and will prompt you). You can specify a payload of data. Even better, you can simulate sending authentication information. I haven't written my serverless functions yet but this sounds perfect. I tested with the serverless function for login and saw that it sent mock data. Woot!</p>\n<p>Unfortunately, identity is the only feature you can mock. If you try to mock a form submission for example, nothing is sent. If you check out the <a href=\"https://github.com/netlify/cli/blob/908f285fb80f04bf2635da73381c94387b9c8b0d/src/commands/functions/invoke.js\">source</a> for this feature you can see it written up like so:</p>\n<pre><code class=\"language-js\">body.payload = {\n\tTODO: 'mock up payload data better',\n}\nbody.site = {\n\tTODO: 'mock up site data better',\n}\n</code></pre>\n<p>This is something I'd be happy to file a PR on... as soon as Netlify officially documents the shape of the data however.</p>\n<p>That being said, this is rather cool. And not just for serverless events, but regular serverless functions too. I'll leave one more tip as it confused me. I noticed that when I ran this CLI feature, I only got the result back, not any <code>console.log</code> messages. Stupid me - the messages were simply in my other terminal tab where I was running <code>ntl dev</code>.</p>\n<p>Anyway, I hope this two thousand plus set of words are helpful!</p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "serverless",
            
                "javascript"
            
		]

	},

	{
		"title": "Migrating from Node and Express to the Jamstack - Part 3",
		"date":"Sat Aug 15 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/08/16/migrating-from-node-and-express-to-the-jamstack-part-3",
		"content":"<p>Ok, so I know I just posted <a href=\"https://www.raymondcamden.com/2020/08/15/migrating-from-node-and-express-to-the-jamstack-part-2\">part two</a> yesterday (and don't forget to check out <a href=\"https://www.raymondcamden.com/2020/08/06/migrating-from-node-and-express-to-the-jamstack-part-1\">part one</a>) but I was feeling inspired this morning so I made a bit more progress. Also, I forgot something I wanted to cover in yesterday's post and I didn't want more time to pass without me talking about. Let's get started!</p>\n<h3>Recognizing Login State</h3>\n<p>In yesterday's post I described how to add the login and logut functionality to the Jamstack. What I forgot to mention was how I'd recognize your current login state on page load. Inside the same method I wrote that fires on <code>DOMContentLoaded</code> and initializes <code>netlifyIndentity</code>, I have this block:</p>\n<pre><code class=\"language-js\">user = netlifyIdentity.currentUser();\n\nif(user) {\n\tloginBtn.classList.add('d-none');\n\tlogoutBtn.classList.remove('d-none');\n}\n</code></pre>\n<p>Basically, if there's a current user, hide the login button and reveal the logout button. What does <code>user</code> look like?</p>\n<pre><code class=\"language-js\">{\n\t&quot;api&quot;: {\n\t\t&quot;apiURL&quot;: &quot;/.netlify/identity&quot;,\n\t\t&quot;_sameOrigin&quot;: true,\n\t\t&quot;defaultHeaders&quot;: {\n\t\t\t&quot;X-Use-Cookie&quot;: &quot;1&quot;\n\t\t}\n\t},\n\t&quot;url&quot;: &quot;/.netlify/identity&quot;,\n\t&quot;token&quot;: {\n\t\t&quot;access_token&quot;: &quot;long token here&quot;,\n\t\t&quot;expires_in&quot;: &quot;3600&quot;,\n\t\t&quot;refresh_token&quot;: &quot;short token here&quot;,\n\t\t&quot;token_type&quot;: &quot;bearer&quot;,\n\t\t&quot;expires_at&quot;: 1597606688000\n\t},\n\t&quot;id&quot;: &quot;1f4331df-61e3-4cd8-a1ee-46d57b6d97ca&quot;,\n\t&quot;aud&quot;: &quot;&quot;,\n\t&quot;role&quot;: &quot;&quot;,\n\t&quot;email&quot;: &quot;raymondcamden@gmail.com&quot;,\n\t&quot;confirmed_at&quot;: &quot;2020-08-14T14:30:44Z&quot;,\n\t&quot;app_metadata&quot;: {\n\t\t&quot;provider&quot;: &quot;google&quot;\n\t},\n\t&quot;user_metadata&quot;: {\n\t\t&quot;avatar_url&quot;: &quot;https://lh3.googleusercontent.com/a-/AOh14GiKTiig0ZyRUyhy6GGRJU5-Q2ubQmOPJWSUSueGiTQ&quot;,\n\t\t&quot;full_name&quot;: &quot;Raymond Camden&quot;\n\t},\n\t&quot;created_at&quot;: &quot;2020-08-14T14:30:43Z&quot;,\n\t&quot;updated_at&quot;: &quot;2020-08-14T14:30:43Z&quot;,\n\t&quot;_fromStorage&quot;: true\n}\n</code></pre>\n<p>Notice the <code>_fromStorage</code> bit? You can see this information stored in LocalStorage if you open up your devtools.</p>\n<p>This works really well, but you may notice a &quot;flicker&quot; in the UI of the login button switching to the logout one. I think it would be better to hide both buttons and only enable the proper one. My demo site definitely has some less than optimal design choices but as it's not really my focus for this series, I'm ok with it. Just keep in mind that the fault is mine, not Netlify's.</p>\n<h3>Secured Serverless Functions</h3>\n<p>The first new feature in this series is the addition of a serverless function to post comments. Netlify does a good job of documenting this here: <a href=\"https://docs.netlify.com/functions/functions-and-identity\">Functions and Identity</a>. I designed a serverless function that would accept two paremeters - the ID of the film being commented on and the comment text. I didn't pass the user information as Netlify provides that for me.</p>\n<pre><code class=\"language-js\">const MongoClient = require('mongodb').MongoClient;\nconst url = process.env.MONGO_URL;\n\nexports.handler = async (event, context) =&gt; {\n\n  const {identity, user} = context.clientContext;\n\n  if(!user) {\n    return {\n      statusCode: 500,\n      body:'Unauthenticated call to function.'\n    }\n  };\n\n  const comment = JSON.parse(event.body);\n\n  try {\n\n  \tconst client = new MongoClient(url, { useUnifiedTopology: true });\n  \tawait client.connect();\n  \tconst db = client.db('eleventy_demo');\n  \tconst comments = db.collection('comments');\n\n    let commentOb = {\n      text: comment.text, \n      film: comment.film, \n      user: {\n        email: user.email, \n        name: user.user_metadata.full_name\n      },\n      posted: new Date()\n    }\n\n    let r = await comments.insertOne(commentOb);\n    await client.close();\n\n    return {\n      statusCode: 204\n    }\n  } catch (err) {\n    return { statusCode: 500, body: err.toString() }\n  }\n}\n</code></pre>\n<p>I pretty much just used the sample code they provided and then added the Mongo code to record a new comment. If you remember in the last post I had some concern about how I was going to &quot;connect&quot; users to comments. I took an easy route out. I have access to the email and name of the user and just stored it in the comment. In theory, a user associated with an email address may change their name, but I figure that's unlikely. I could handle that in a &quot;user profile system&quot; if I wanted to build one and handle updating related content then.</p>\n<p>The function to get comments doesn't require security and is much simpler:</p>\n<pre><code class=\"language-js\">const MongoClient = require('mongodb').MongoClient;\nconst url = process.env.MONGO_URL;\n\n\nexports.handler = async (event, context) =&gt; {\n  let film = event.queryStringParameters.film;\n  if(!film) {\n    return {\n      statusCode: 500,\n      body:'Missing film id'\n    }\n  }\n\n  try {\n\n    const client = new MongoClient(url, { useUnifiedTopology: true });\n    await client.connect();\n    const db = client.db('eleventy_demo');\n    const comments = db.collection('comments');\n\n    const query = { &quot;film&quot;: film };\n    const commentArray = await comments.find(query).sort({posted:1}).toArray();\n\n    await client.close();\n    return {\n      statusCode: 200,\n      body: JSON.stringify(commentArray)\n    };\n\n\n  } catch (err) {\n    return { statusCode: 500, body: err.toString() }\n  }\n}\n</code></pre>\n<p>This is the back end work - the front end work is mainly a bunch of messy JavaScript. I didn't use Vue.js for this project as I wanted to keep things simple with so many moving parts already. Each film page now renders comments and includes a form for adding a new one.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/08/nla10.png\" alt=\"Film page\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Instead of sharing my ugly code, I'll just say that I added a form to the films page and if you are logged in, you can submit it. I've got some UI manipulation I'll skip for now, but here's how I call my serverless function in a secure manner:</p>\n<pre><code class=\"language-js\">let resp = await fetch('/.netlify/functions/postComment', {\n\tmethod:'post',\n\theaders: {\n\t\t'Authorization':'Bearer ' + user.token.access_token\n\t},\n\tbody: JSON.stringify(commentOb)\n});\n</code></pre>\n<p>Basically I just use an <code>access_token</code> value from the user in my header. You can see the complete front end (and all the source code) over on the repo: <a href=\"https://github.com/cfjedimaster/eleventy-auth0-serverless-mongo\">https://github.com/cfjedimaster/eleventy-auth0-serverless-mongo</a>. Again though keep in mind that the JavaScript isn't the most optimized, clean version.</p>\n<p>You can, if you wish, actually test this. I'm probably going to regret it, but it's live up on <a href=\"https://hardcore-curie-802f8f.netlify.app/\">https://hardcore-curie-802f8f.netlify.app/</a>. Hit the site, login, and post a comment. Please don't curse or spam. I can clean them up with my MongoDB client but I'd rather not have to. ;)</p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "serverless",
            
                "javascript"
            
		]

	},

	{
		"title": "Designing Random Encounters for my Vue RPG",
		"date":"Tue Aug 18 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/08/19/designing-random-encounters-for-my-vue-rpg",
		"content":"<p>So I'm still piddling away at my RPG in Vue.js. To be clear, I'm never going to finish it. But you can read about it here (<a href=\"https://www.raymondcamden.com/2020/07/17/testing-vuejs-application-files-that-arent-components\">Testing Vue.js Application Files That Aren't Components</a>) and here (<a href=\"https://www.raymondcamden.com/2020/07/19/making-monsters-with-javascript\">Making Monsters with JavaScript</a>). Over the past few months I've been slowly reading an incredible book for RPG lovers, <a href=\"https://www.amazon.com/gp/product/1999353307/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1999353307&amp;linkCode=as2&amp;tag=raymondcamd06-20&amp;linkId=077052bcad5a83b2c2d8292cc5b61619\">The CRPG Book</a>. It's a review of over 400 games over the past 40 years of computer role-playing.</p>\n<p>While reading the book, I'm discovering some cool features that older games had and that I missed while growing up. (Or possibly just don't remember.) A few games have mentioned using encounters with simple &quot;Choose Your Own Adventure&quot; logic. Basically, you are presented with something and given a choice of options. No combat, just simple choices.</p>\n<p>The more I thought about this the more I thought it could be an interesting part of my game. If you imagine that there's a random chance of combat as you walk around (part of the core gameplay I want to have), then there could be a smaller chance of a simple encounter. I'd imagine these happening maybe once or twice per gameplay so somewhat rare, but they would be a break from the typical combat encounter.</p>\n<p>I designed my system with the following features:</p>\n<ul>\n<li>Encounters are in an array, randomly chosen.</li>\n<li>Each encounter has hard coded text and is static.</li>\n<li>Each enouncter has hard coded options.</li>\n<li>However, each option has random results.</li>\n<li>Results can impact player stats, for example, draining health or giving your gold.</li>\n<li>Finally, each encounter has an optional &quot;prereq&quot;. This is a 'safety' check to make things a bit easier for results. So if a result drains 10 gold, I don't want to have to worry about negative balances. Ditto for death. While I'm fine with an encounter harming you, I didn't want it to kill you. I can say this point is one I'm reconsidering and may roll back. For gold, I could simply let it take all your gold and leave you at 0, and for harmful encounters, it may be kinda fun if some could actually kill you.</li>\n</ul>\n<p>My data structure than looks like so:</p>\n<ul>\n<li>prereq: If passed, a string that is evaluated against player data, like \"hp>10\". If false, this encounter can't happen.</li>\n<li>text: The text of the encounter.</li>\n<li>options: An array of options where:\n<ul>\n<li>text: The text of the option</li>\n<li>results: An array of results based on this option where one is randomly selected. Each result has:\n<ul>\n<li>text: The text describing the result.</li>\n<li>effect: An effect, if any, on the player, also a string that is evaluated, like gold+=10.</li>\n</ul>\n</ul>\n</li>\n</ul>\n<p>Here's an example:</p>\n<pre><code class=\"language-js\">{\n\tprereq:'gold&gt;0 &amp;&amp; hp&gt;0',\n\ttext:'You meet a beggar who asks for help. He looks desperate.',\n\toptions: [\n\t\t{\n\t\t\ttext: 'Give a gold coin to him.',\n\t\t\tresults:[\n\t\t\t\t{ text: 'The beggar thanks you!', effect:'gold--' }, \n\t\t\t\t{ text: 'The beggar thanks you, winks, and dissappears.', effect:'gold += 300'}, // it was a god or whatever in disguise\n\t\t\t\t{ text: 'The beggar smirks and punches you!', effect:'hp--' }\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttext: 'Walk away.',\n\t\t\tresults:[\n\t\t\t\t{ text: 'The beggar spits at you!', effect:'' }, // no effect\n\t\t\t\t{ text: 'The beggar growls and punshes you!', effect:'hp--' }\n\t\t\t]\n\t\t},\n\n\t]\n},\n</code></pre>\n<p>The JavaScript utility has two main methods. The first returns a random encounter that's filtered by prereqs. A player object is passed in (I'm not using TypeScript so what I really mean is a &quot;simple object representation&quot; of the player). The next method takes a player object, an encounter, and a selected option. It figures out the random result and applies the effect. Here's the entire utility.</p>\n<pre><code class=\"language-js\">import { misc } from './misc'\n\nconst data = [\n\t{\n\t\tprereq:'gold&gt;0 &amp;&amp; hp&gt;0',\n\t\ttext:'You meet a beggar who asks for help. He looks desperate.',\n\t\toptions: [\n\t\t\t{\n\t\t\t\ttext: 'Give a gold coin to him.',\n\t\t\t\tresults:[\n\t\t\t\t\t{ text: 'The beggar thanks you!', effect:'gold--' }, \n\t\t\t\t\t{ text: 'The beggar thanks you, winks, and dissappears.', effect:'gold += 300'}, // it was a god or whatever in disguise\n\t\t\t\t\t{ text: 'The beggar smirks and punches you!', effect:'hp--' }\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: 'Walk away.',\n\t\t\t\tresults:[\n\t\t\t\t\t{ text: 'The beggar spits at you!', effect:'' }, // no effect\n\t\t\t\t\t{ text: 'The beggar growls and punshes you!', effect:'hp--' }\n\t\t\t\t]\n\t\t\t},\n\n\t\t]\n\t},\n\t{\n\t\tprereq:'hp&gt;0',\n\t\ttext:'You hear a growl from behind you.',\n\t\toptions: [\n\t\t\t{\n\t\t\t\ttext: 'Put on a brave face.',\n\t\t\t\tresults:[\n\t\t\t\t\t{ text: 'You seem to have scared off whatever was stalking you.', effect:'exp+=100' }\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: 'Run away',\n\t\t\t\tresults:[\n\t\t\t\t\t{ text: 'You run until your out of breath.' , effect:'' }, // no effect\n\t\t\t\t\t{ text: 'You run, but trip and sprain your ankle!', effect:'hp--' }\n\t\t\t\t]\n\t\t\t},\n\n\t\t]\n\t}\n]\nexport const encounterMaker = {\n \n\t// given a player ob, find an encounter they can do\n\tselect(player) {\n\t\tlet possibleEncounters = data.filter(d =&gt; {\n\t\t\tif(!d.prereq) return true;\n\t\t\tlet prereq = fixEvalString(d.prereq);\n\t\t\treturn eval(prereq);\n\t\t});\n\t\tif(possibleEncounters.length === 0) return null;\n\t\treturn possibleEncounters[misc.getRandomIntInclusive(0, possibleEncounters.length-1)];\n\t},\n\tresolve(player, encounter, choice) {\n\t\tif(choice &gt;= encounter.options.length) choice = 0;\n\t\tlet selected = encounter.options[choice];\n\t\tlet result = selected.results[misc.getRandomIntInclusive(0, selected.results.length-1)];\n\t\tconsole.log('result for '+choice, result);\n\t\tif(result.effect != '') {\n\t\t\tconsole.log(player);\n\t\t\teval(fixEvalString(result.effect));\n\t\t\tconsole.log(player);\n\t\t}\n\t\treturn player;\n\t}\n\n}\n\n// utility function to fix eval string to include player\nfunction fixEvalString(str) {\n\tstr = str.replace(/gold/g, 'player.gold');\n\tstr = str.replace(/hp/g, 'player.hp');\n\tstr = str.replace(/exp/g, 'player.exp');\n\treturn str;\n}\n</code></pre>\n<p>The two methods I described above are defined as <code>select</code> and <code>resolve</code>. Notice that I wrote a function, <code>fixEvalString</code>, that can be used by my prereqs and effects to modify the player. This feels like bad code. I mean, eval is bad in general. Given that I know the &quot;shape&quot; of my player data I could switch to another way of doing this, but I'll worry about that when I finish the game, which is, you know, never.</p>\n<p>I did build a utility to help test this, and here's what it looks like:</p>\n<pre><code class=\"language-js\">/*\nRay, run with: node -r esm test.js\n*/\n\nimport { encounterMaker } from '../src/utils/encounterMaker'\n\nconsole.log('basic player');\nconsole.log(encounterMaker.select({\n\tgold:10,\n\thp:10\n}));\n\nconsole.log('poor player');\nconsole.log(encounterMaker.select({\n\tgold:0,\n\thp:10\n}));\n\nconsole.log('dead player');\nconsole.log(encounterMaker.select({\n\tgold:10,\n\thp:0\n}));\nconsole.log('---------------------------------');\nconsole.log('basic player resolve');\nlet player = {\n\tgold:10, hp: 10, exp:200\n};\nlet enc = encounterMaker.select(player);\nconsole.log('chosen enc', enc);\nplayer = encounterMaker.resolve(player, enc, 0);\nconsole.log('Player at end', player);\nplayer = encounterMaker.resolve(player, enc, 1);\nconsole.log('Player at end2', player);\n</code></pre>\n<p>As you can see, I've got a few <code>select</code> calls and a few <code>resolve</code> ones. The output looks like so:</p>\n<pre><code>basic player\n{\n  prereq: 'hp&gt;0',\n  text: 'You hear a growl from behind you.',\n  options: [\n    { text: 'Put on a brave face.', results: [Array] },\n    { text: 'Run away', results: [Array] }\n  ]\n}\npoor player\n{\n  prereq: 'hp&gt;0',\n  text: 'You hear a growl from behind you.',\n  options: [\n    { text: 'Put on a brave face.', results: [Array] },\n    { text: 'Run away', results: [Array] }\n  ]\n}\ndead player\nnull\n---------------------------------\nbasic player resolve\nchosen enc {\n  prereq: 'gold&gt;0 &amp;&amp; hp&gt;0',\n  text: 'You meet a beggar who asks for help. He looks desperate.',\n  options: [\n    { text: 'Give a gold coin to him.', results: [Array] },\n    { text: 'Walk away.', results: [Array] }\n  ]\n}\nresult for 0 { text: 'The beggar thanks you!', effect: 'gold--' }\n{ gold: 10, hp: 10, exp: 200 }\n{ gold: 9, hp: 10, exp: 200 }\nPlayer at end { gold: 9, hp: 10, exp: 200 }\nresult for 1 { text: 'The beggar spits at you!', effect: '' }\nPlayer at end2 { gold: 9, hp: 10, exp: 200 }\n</code></pre>\n<p>You can find the complete repo at <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/grpg\">https://github.com/cfjedimaster/vue-demos/tree/master/grpg</a>. I think next I'm going to take a stab and creating a map. I've been hashing around some ideas for a few weeks now and I think I'm ready to put pen to paper so to speak.</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@ttoommy?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Tommy Tang</a> on <a href=\"https://unsplash.com/s/photos/encounter?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Supporting Multiple Authors in an Eleventy Blog",
		"date":"Sun Aug 23 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/08/24/supporting-multiple-authors-in-an-eleventy-blog",
		"content":"<p>Here's a quick tip on how you could build an <a href=\"https://www.11ty.dev/\">Eleventy</a> blog supporting multiple authors. By that I mean have a blog where every post\nis assigned an author with links to a unique profile page. If you just want to see the final result, the repository is here (<a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/multiauthor\">https://github.com/cfjedimaster/eleventy-demos/tree/master/multiauthor</a>) and the live demo is here - <a href=\"https://admiring-fermi-e83d2d.netlify.app/\">https://admiring-fermi-e83d2d.netlify.app/</a>.</p>\n<p>Alright, so let's start off with a simple Eleventy blog. It's got a home page that lists items from a post collection:</p>\n<pre><code class=\"language-html\">---\nlayout: main\n---\n\n&lt;h1&gt;Posts&lt;/h1&gt;\n\n&lt;ul&gt;\n{% for post in collections.post %}\n&lt;li&gt;&lt;a href=&quot;{{post.url}}&quot;&gt;{{post.data.title}}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>And is driven by four blog posts that look basically like this:</p>\n<pre><code class=\"language-html\">---\ntitle: Alpha Post\nlayout: main\ndate: 2020-08-02\ntags: post\n---\n\nThis is Alpha\n</code></pre>\n<p>I'll skip sharing the layout as it's a basic Bootstrap template. But this is enough to get started. I can hit the home page and click to visit any of the four posts. Now let's start talking about author support.</p>\n<p>I began by creating a new file in my <code>_data</code> folder named <code>authors.json</code>. For my demo, I decided each author would have:</p>\n<ul>\n<li>A name (self-explanatory)</li>\n<li>A bio (text about the author)</li>\n<li>A link to their website</li>\n<li>A link to their photo</li>\n<li>Their Twitter username</li>\n</ul>\n<p>Certainly more could be done, like including a GitHub profile or LinkedIn. I also realized I was going to need a way to link posts to individual authors. While most likely the name values would be unique, I wanted to make it simpler. So for each author I defined a <code>key</code> value that was simply a unique code based on their name. Here's the data I'm using for my demo.</p>\n<pre><code class=\"language-js\">[\n\t{\n\t\t&quot;key&quot;:&quot;rcamden&quot;,\n\t\t&quot;name&quot;:&quot;Raymond Camden&quot;,\n\t\t&quot;bio&quot;: &quot;Raymond likes cats.&quot;,\n\t\t&quot;website&quot;:&quot;https://www.raymondcamden.com&quot;,\n\t\t&quot;photo&quot;:&quot;https://static.raymondcamden.com/images/ray2019c.jpg&quot;,\n\t\t&quot;twitter&quot;:&quot;raymondcamden&quot;\n\t},\n\t{\n\t\t&quot;key&quot;:&quot;brinaldi&quot;,\n\t\t&quot;name&quot;:&quot;Brian Rinaldi&quot;,\n\t\t&quot;bio&quot;:&quot;Brian something something or another.&quot;,\n\t\t&quot;website&quot;:&quot;https://remotesynthesis.com/&quot;,\n\t\t&quot;photo&quot;:&quot;https://miro.medium.com/fit/c/400/400/2*k9h7ypAlAlA7PvOUjwbejA.jpeg&quot;,\n\t\t&quot;twitter&quot;:&quot;remotesynth&quot;\n\t}\n]\n</code></pre>\n<p>Cool, so this gives us access to author data in our Eleventy pages. I want to include the author on blog posts as well as create unique author pages. Let's first get the blog posts updated. To keep it simple, I built a new layout file for my blog posts and switched all of them to use this in their front matter:</p>\n<pre><code>layout: post\n</code></pre>\n<p>The <code>post</code> layout looks like so:</p>\n<pre><code class=\"language-html\">---\nlayout: main\n---\n\n&lt;h2&gt;{{ title }}&lt;/h2&gt;\n{% if author %}\n\t{% assign myAuthor = authors | getAuthor: author %}\n\n\t&lt;p&gt;\n\tWritten by &lt;a href=&quot;/authors/{{ author }}&quot;&gt;{{ myAuthor.name }}&lt;/a&gt;\n\t&lt;/p&gt;\n{% endif %}\n\n{{ content }}\n</code></pre>\n<p>Notice that I don't assume every post has an author, and it's feasible that on a site with many authors some posts may be more 'housekeeping' in nature and not really attributed to a specific person. If I do have an author value, I need to get information about the author. To do so, I created a filter, <code>getAuthor</code>, that accepts two parameters - all of the authors and the key. Why do I have to pass authors in? Because Eleventy custom filters don't have access either global data or collection values. Here's how the filter is defined in <code>.eleventy.js</code>:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter(&quot;getAuthor&quot;, (authors,label) =&gt; {\n\tlet author = authors.filter(a =&gt; a.key === label)[0];\n\treturn author;\n});\n</code></pre>\n<p>As this returns the entire author object, I can use it in the text of my post layout. I use the key as a URL safe destination for the profile page and then display their name. This creates the link you see here:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/08/eam1.png\" alt=\"A blog post with the author name and link.\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>For the author pages, I used the incredibly awesome Eleventy feature that lets you create <a href=\"https://www.11ty.dev/docs/pages-from-data/\">pages from data</a>. I defined my author page like so:</p>\n<pre><code class=\"language-html\">---\nlayout: main\npagination:\n   data: authors\n   size: 1\n   alias: author\npermalink: &quot;/authors/{{author.key}}/&quot;\neleventyComputed:\n   title: &quot;{{author.name}}&quot;\n---\n\n&lt;h2&gt;{{ author.name }}&lt;/h2&gt;\n\n&lt;p&gt;\nWebsite: &lt;a href=&quot;{{author.website}}&quot; target=&quot;_new&quot;&gt;{{author.website}}&lt;/a&gt;&lt;br/&gt;\nTwitter: &lt;a href=&quot;https://twitter.com/{{author.twitter}}&quot; target=&quot;_new&quot;&gt;@{{author.twitter}}&lt;/a&gt;\n&lt;/p&gt;\n\n&lt;img src=&quot;{{author.photo}}&quot; style=&quot;float:left; max-height: 300px; padding-right: 10px&quot;&gt;\n&lt;p&gt;\n{{author.bio}}\n&lt;/p&gt;\n\n&lt;br clear=&quot;left&quot; /&gt;\n\n&lt;h2&gt;Posts by Author&lt;/h2&gt;\n\n{% assign posts = collections.post | getPostsByAuthor: author.key %}\n&lt;ul&gt;\n{% for post in posts %}\n\t&lt;li&gt;&lt;a href=&quot;{{post.url}}&quot;&gt;{{post.data.title}}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>From the top, you'll see the pagination aspect handles making one page per author. Next, I specify the permalink to match what I was using in the post layout. The next part may be a weird looking, but in order to get Eleventy to set page data that's dynamic based on the pagination, I have to use <code>eleventyComputed</code>. To be honest that feature still kinda confuses me but I only ever run into needing it in cases like this.</p>\n<p>After the front matter I simply display the author (using all of my fine design skills) and then list out their posts. To get them, I use another filter, <code>getPostsByAuthor</code>. You can see it here:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter(&quot;getPostsByAuthor&quot;, (posts,author) =&gt; {\n\treturn posts.filter(a =&gt; a.data.author === author);\n});\n</code></pre>\n<p>Here's a sample author page:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/08/eam2.png\" alt=\"A sample author page showing their info, picture, and lists of poss\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And that's it. You could certainly do more. Don't forget that front matter supports setting multiple values for a particular key, so you could even support posts written by more than one author. You could also build out individual RSS feeds for unique authors if you choose. Again, the repository for this demo is at <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/multiauthor\">https://github.com/cfjedimaster/eleventy-demos/tree/master/multiauthor</a> and the live version may be visited at <a href=\"https://admiring-fermi-e83d2d.netlify.app/\">https://admiring-fermi-e83d2d.netlify.app/</a>. Let me know if you have any questions, or suggestions, about this approach!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@hudsonhintze?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Hudson Hintze</a> on <a href=\"https://unsplash.com/s/photos/group-of-people?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "An Experiment with Vue Components",
		"date":"Thu Aug 27 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/08/28/an-experiment-with-vue-components",
		"content":"<p>I really enjoy <a href=\"https://vuejs.org/v2/guide/components.html\">components</a> in Vue.js as they feel very nicely done in terms of functionality and usage. Like most of Vue, you can use them simply to abstract away some UI logic or get very complex. Part of why I love Vue is that it feels like it excels at working at multiple levels - from the &quot;I'm just playing around&quot; to &quot;I'm building the Next Big Thing.&quot; Recently I started thinking about a particular component use case. Imagine the following:</p>\n<pre><code class=\"language-html\">&lt;slides&gt;\n\t&lt;slide&gt;\n\tThis is a slide.\n\t&lt;/slide&gt;\n\n\t&lt;slide&gt;\n\tThis is another slide.\n\t&lt;/slide&gt;\n\n\t&lt;slide&gt;\n\tThis is a &lt;strike&gt;slide&lt;/strike&gt;cat! Fooled ya!\n\t&lt;/slide&gt;\n&lt;/slides&gt;\n</code></pre>\n<p>What I've described above is an imaginary slide show. It's built with a parent <code>&lt;slides&gt;</code> tag and each individual <code>&lt;slide&gt;</code> component represents one particular slide. When displayed in the browser, it should render some basic slide show controls and render one slide at a time. Seems simple enough, right?</p>\n<p>Turns out it's a bit difficult. Let me break down how I solved this (and what I learned). When I'm done, I'll show you how some friends on Twitter did it <em>much</em> better than me so be sure to read the entire post.</p>\n<p>Alright, so let's start off by focusing on the core feature which is to display one slide at a time. We can start off by simply hiding slides. So <code>&lt;slide&gt;</code> could look a bit like so:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div v-if=&quot;currentSlide&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &quot;Slide&quot;,\n  props: {\n  },\n  computed: {\n    currentSlide() {\n\t\treturn false;\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>That immediately hides all the slides. But how will the slide know when it's visible? The parent, <code>&lt;slides&gt;</code>, can keep track of a <code>currentSlide</code> value which will change whenever a person advances the slide show. But how would the child tag know about the change? Normally a parent can pass a value to a child like so:</p>\n<pre><code class=\"language-html\">&lt;someComponent :value=&quot;someVariable&quot;&gt;&lt;/someComponent&gt;\n</code></pre>\n<p>But I wanted to keep my slide show simple. Notice how easy it was to type each slide? I wanted to keep that simplicity if I could. Turns out, child components can <em>reach out</em> to parents by using this.$parent. You can read more about that <a href=\"https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Parent-Component-Instance\">here</a> and be sure to note the warning that basically boils down to &quot;This is usually a bad idea.&quot; In my case I was ok with it. It <em>does</em> mean my slide show will break if some other component wraps <code>&lt;slide&gt;</code>, but I'm ok with that. Here's the updated code:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div v-if=&quot;currentSlide&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &quot;Slide&quot;,\n  props: {\n  },\n  data() {\n    return {\n    }\n  },\n  computed: {\n    currentSlide() {\n      return this.$parent.currentSlide === 1;\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>Notice the updated <code>currentSlide</code> computed property. We're still not done yet. Instead of checking for <code>=== 1</code>, what I really need is: &quot;If the current active slide number equal to <em>my</em> number.&quot; What number? The number of the slide based on where it comes in play. This was a tough nut to crack. One &quot;quick fix&quot; would have been to simply hard code it:</p>\n<pre><code class=\"language-html\">&lt;slides&gt;\n\t&lt;slide num=1&gt;\n\tThis is a slide.\n\t&lt;/slide&gt;\n\n\t&lt;slide num=2&gt;\n\tThis is another slide.\n\t&lt;/slide&gt;\n\n\t&lt;slide num=3&gt;\n\tThis is a &lt;strike&gt;slide&lt;/strike&gt;cat! Fooled ya!\n\t&lt;/slide&gt;\n&lt;/slides&gt;\n</code></pre>\n<p>But again, I was trying to keep things as simple as possible for the person building the slides. Plus, as every experience presenter knows, you often end up moving slides around and those numbers would quickly get hard to maintain. So how would slide N <em>know</em> that it is slide N?</p>\n<p>Turns out that along with with <code>this.$parent</code>, there's a <code>this.$children</code> as well. So in my <code>&lt;slides&gt;</code> tag, I added this:</p>\n<pre><code class=\"language-js\">mounted() {\n  for(let i=0;i&lt;this.$children.length;i++) {\n    //https://stackoverflow.com/a/41121306/52160\n    if(this.$children[i].$options.name === 'Slide') this.$children[i].yourIndex = i;\n  }\n  this.totalSlides = this.$children.length;\n},\n</code></pre>\n<p>Basically, iterate over the children, ensure they are a Slide, and then manually set data upon them to assign them a <code>yourIndex</code> value. Basically slide N will be told it is in position N. I also keep track of the total number of slides so I can use than in navigation later.</p>\n<p>Back to <code>Slide</code>, I now have this:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div v-if=&quot;currentSlide&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &quot;Slide&quot;,\n  props: {\n    yourIndex:-1\n  },\n  data() {\n    return {\n    }\n  },\n  computed: {\n    currentSlide() {\n      return this.$parent.currentSlide === (this.yourIndex+1);\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>I'm using a 1-based index for the currentSlide so I need to add 1 to yourIndex, but hopefully it makes sense. And really that was it. Here's the final <code>&lt;Slides&gt;</code> component with navigation tools built in:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=&quot;previousSlide&quot;&gt;Previous&lt;/button&gt; / &lt;button @click=&quot;nextSlide&quot;&gt;Next&lt;/button&gt;\n    &lt;p/&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &quot;Slides&quot;,\n  data() {\n    return {\n      currentSlide:1,\n      totalSlides:null\n    }\n  },\n  props: {\n  },\n  mounted() {\n    console.log('Slides created');\n    for(let i=0;i&lt;this.$children.length;i++) {\n      //https://stackoverflow.com/a/41121306/52160\n      if(this.$children[i].$options.name === 'Slide') this.$children[i].yourIndex = i;\n    }\n    this.totalSlides = this.$children.length;\n  },\n  methods: {\n    nextSlide() {\n      if(this.currentSlide &lt; this.totalSlides) this.currentSlide++;\n    },\n    previousSlide() {\n      if(this.currentSlide &gt; 1) this.currentSlide--;\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>It could be a lot fancier of course. You can demo this yourself below:</p>\n<iframe src=\"https://codesandbox.io/embed/component-test-gi61v?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"component test\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>All in all... I kinda dig this. It does feel a bit brittle with the $parent and $children connections, but I dig it. Of course, I've got smart friends who did it better. First up is <a href=\"https://alex.party/\">Alex Riviere</a> who made use of <code>provide</code> and <code>inject</code>. This is an <a href=\"https://v3.vuejs.org/guide/component-provide-inject.html\">advanced component</a> feature that aims to make it easier to work with parent/child tags. Specifically, it lets a top level parent &quot;provide&quot; data that any child, no matter how deep it is, can &quot;receive&quot; by using &quot;inject&quot;. Sorry for all the quotes - this is still kind of new to me. ;)</p>\n<p>In this version, the parent tag <em>provides</em> access to values related to what the current slide is as well as a method that lets the child slide &quot;register&quot; itself and gets its position. Here's his <code>&lt;slides&gt;</code> component:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=&quot;previousSlide&quot;&gt;Previous&lt;/button&gt; /\n    &lt;button @click=&quot;nextSlide&quot;&gt;Next&lt;/button&gt;\n    &lt;p/&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nlet SLIDE_COUNTER = 0;\n\nexport default {\n  name: &quot;Slides&quot;,\n  data() {\n    return {\n      currentSlide: 1,\n      slides: []\n    };\n  },\n  props: {},\n  methods: {\n    register() {\n      const ID = SLIDE_COUNTER;\n      SLIDE_COUNTER++;\n      this.slides.push(ID);\n      return ID;\n    },\n    getIndex(id) {\n      return this.slides.indexOf(id);\n    },\n    unregister(id) {\n      const index = this.getIndex(id);\n      this.slides.splice(index, 1);\n    },\n    getCurrentSlide() {\n      return this.currentSlide;\n    },\n    nextSlide() {\n      if (this.currentSlide &lt; this.slides.length) this.currentSlide++;\n    },\n    previousSlide() {\n      if (this.currentSlide &gt; 1) this.currentSlide--;\n    }\n  },\n  provide() {\n    return {\n      register: this.register,\n      getIndex: this.getIndex,\n      unregister: this.unregister,\n      getCurrentSlide: this.getCurrentSlide\n    };\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>And then his updated <code>&lt;slide&gt;</code>:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div v-if=&quot;currentSlide&quot;&gt;\n    debug: slide, currentSlide, {{currentSlide}}\n    &lt;br&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &quot;Slide&quot;,\n  data() {\n    return {\n      slideID: -1\n    };\n  },\n  inject: [&quot;register&quot;, &quot;getIndex&quot;, &quot;unregister&quot;, &quot;getCurrentSlide&quot;],\n  created() {\n    this.slideID = this.register();\n  },\n  beforeDestroy() {\n    this.unregister(this.slideID);\n  },\n  mounted() {\n    console.log(&quot;mySlide:&quot;, this.currentSlide);\n  },\n  computed: {\n    currentSlide() {\n      return this.getCurrentSlide() === this.getIndex(this.slideID) + 1;\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>This feels a bit &quot;safer&quot; compared to my version and definitely would better handle <code>&lt;slide&gt;</code> tag that are grandchildren, not children. Here's his version:</p>\n<iframe src=\"https://codesandbox.io/embed/component-test-forked-p1vef?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"component test (forked)\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>Another person also came in with a solution. <a href=\"https://www.jbakebwa.dev/\">Jonathan Bakebwa</a> came up with a solution making use vnodes. VNodes, or virtual nodes, are how Vue handle making changes to the DOM in an efficient manner. I've never worked with them (directly) before so this particular solution is <em>way</em> beyond my skill level! Check it out below:</p>\n<iframe src=\"https://codesandbox.io/embed/slides-slide-compound-component-qj0ln?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"slides-slide-compound-component\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>All in all, this was pretty fun to dig into and I'm not surprised that Vue allowed what I wanted to work in <em>multiple</em> different ways. If you've done this yourself, please share your experience by leaving me a comment below!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@matthewhenry?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Matthew Henry</a> on <a href=\"https://unsplash.com/s/photos/slides?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Vue Quick Shot - Using Page Visibility",
		"date":"Wed Sep 02 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/09/03/vue-quick-shot-using-page-visibility",
		"content":"<p>Back in March I did a week of quick Vue tips (you can see them all <a href=\"https://www.raymondcamden.com/tags/vue+quick+shot/\">here</a>). I really enjoyed that set of blog posts as it let me show some quick and simple &quot;X with Vue.js&quot; examples. To be honest, I haven't really thought about them for a while, but earlier this week a reader posted a comment on one of them and for some reason, that got the creative juices flowing again. With that in mind - I'm happy to share another Vue Quick Shot - using the Page Visibility API.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\">Page Visibility API</a> is a way to determine when a page becomes hidden based on user interaction. You can then use as a way to tell your code to stop any logic that may be particularly intensive or battery draining. Or heck, even if it's not intensive, if there's no need for it run while the user isn't looking, you should probably pause it anyway. <a href=\"https://caniuse.com/#feat=pagevisibility\">Browser support</a> is <em>really</em> good with near 100% coverage, and of course, this is yet another thing that you can add to your site without impacting any browser that doesn't support it. (And yes, even Safari supports it - thank you New IE6!)</p>\n<p>While the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\">MDN Docs</a> on the API go really deep, at a simple level you can start using it by listening for the <code>visibilitychange</code> event:</p>\n<pre><code class=\"language-js\">document.addEventListener('visibilitychange', e =&gt; {\n\t// cool logic here\n}, false);\n</code></pre>\n<p>Inside your event, you can check for <code>document.hidden</code>, which will be true if - wait for it - the content is hidden.</p>\n<p>Before we continue - a very important note. This API will notice when you minimize your browser or change tabs. It will <em>not</em> notice when you take another application and &quot;cover&quot; the web page. It would be cool if it did, but there's probably good reasons for it not supporting that. Ok, so how can we use it in Vue? First, you can add a listener when the Vue application starts:</p>\n<pre><code class=\"language-js\">created() {\n\tdocument.addEventListener('visibilitychange', this.visibilityChange, false);\n},\n</code></pre>\n<p>In this case, I'm running a method named <code>visibilityChange</code>:</p>\n<pre><code class=\"language-js\">methods: {\n    visibilityChange(e) {\n      console.log('vis change',document.hidden);\n\t}\n}\n</code></pre>\n<p>You can see a somewhat boring example of this here:</p>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"dark\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"ExKbZyy\" style=\"height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Visibility Change 1\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/ExKbZyy\">\n  Vue Visibility Change 1</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>To test, switch to another tab and then come back, and you'll see a text message in the output above. Two actually - one when you hid the tab and one when you came back. (Please come back.) So how about a slightly more realistic example?</p>\n<p>I built a Vue application that makes use of an <code>audio</code> tag and an MP3 file. I added a button to control it myself:</p>\n<pre><code class=\"language-html\">&lt;audio src=&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3&quot; loop ref=&quot;audio&quot;&gt;&lt;/audio&gt;\n&lt;button @click=&quot;play&quot;&gt;Play&lt;/button&gt;\n</code></pre>\n<p>To control playback, I made it such that when you click play, it starts the audio. Notice it uses the <code>loop</code> attribute, that will make it last forever. To pause, you click the button again. Here's that logic:</p>\n<pre><code class=\"language-js\">data:{\n\tisplaying:false\n},\nmethods: {\n\tplay() {\n\t\tif(this.isplaying) {\n\t\t\tthis.$refs.audio.pause();\n\t\t\tthis.isplaying = false;\n\t\t} else{\n\t\t\tthis.$refs.audio.play();\n\t\t\tthis.isplaying = true;\n\t\t}\n\t},\n}\n</code></pre>\n<p>If I wanted to, I could switch the text on the button to make it more obvious, but as it stands it's workable. If you click play, the MP3 will start and keep playing. (And I apologize, it's kind of an annoying sound.) Now let's add logic to notice when the page is hidden. First, a listener in <code>created</code>:</p>\n<pre><code class=\"language-js\">created() {\n  document.addEventListener('visibilitychange', this.visibilityChange, false);\n},\n</code></pre>\n<p>Then the method:</p>\n<pre><code class=\"language-js\">visibilityChange(e) {\n  console.log('vis change ',document.hidden);\n  if(document.hidden &amp;&amp; this.isplaying) {\n    this.$refs.audio.pause();\n    this.isplaying = false;\n  }\n}\n</code></pre>\n<p>Notice I'm only pausing, not playing. I could start it up again, I'd need another variable to remember that the audio was playing, but I kinda figure the user can decide if they want the music to return hen they tab back in. (But if folks want to see that, let me know!) Here's a complete CodePen:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"YzqEpoQ\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Visibility Change 2\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/YzqEpoQ\">\n  Vue Visibility Change 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>I hope you found this useful. If you did, or have any questions, leave me a comment below!</p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Vue Quick Shot - Fullscreen API",
		"date":"Thu Sep 03 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/09/04/vue-quick-shot-fullscreen-api",
		"content":"<p>After yesterday's <a href=\"https://www.raymondcamden.com/2020/09/03/vue-quick-shot-using-page-visibility\">quick shot</a>, today's should be simpler - using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\">Fullscreen API</a>. This is one of the simplest and most useful API's out there. If a browser supports it (currently at near <a href=\"https://caniuse.com/#feat=fullscreen\">100%</a>) than all you need to enable fullscreen on your web page is the <code>requestFullscreen</code> DOM method.</p>\n<p>For example:</p>\n<pre><code class=\"language-js\">document.querySelector('#myCat').requestFullScreen();\n</code></pre>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\">API</a> supports more options (events and exiting fullscreen mode via code), but let's look at a simple example with Vue.js.</p>\n<p>Let's begin with our HTML. I'm going to include an image and a button to enable fullscreen access. The button will only show up if the Fullscreen API is enabled. Note the use of <code>ref</code> on the image so I can grab it easier via Vue later.</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;h2&gt;Cats&lt;/h2&gt;\n  &lt;img src=&quot;https://placekitten.com/400/200&quot; ref=&quot;catpic&quot;&gt;&lt;br/&gt;\n  &lt;button v-if=&quot;showFSButton&quot; @click=&quot;fullscreenCats&quot;&gt;Full Screen Cats&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Now let's look at the JavaScript:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data: {\n    showFSButton:false\n  },\n  created() {\n    if(document.fullscreenEnabled) this.showFSButton = true;\n  },\n  methods:{\n    fullscreenCats() {\n      this.$refs.catpic.requestFullscreen();\n    }\n  }\n})\n</code></pre>\n<p>So my data just includes the boolean for whether or not the button will show up. My <code>created</code> method checks if the feature exists and if so will set the value to true.</p>\n<p>Finally, the button's click event uses the API to open the image in fullscreen mode. And that's it! Here's a full demo in CodePen, and yes the button works in the embed.</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"oNxoQEG\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue + Fullscreen\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/oNxoQEG\">\n  Vue + Fullscreen</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>As always, let me know if this helps you!</p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building a Traffic-Based Workflow in Pipedream",
		"date":"Sat Sep 05 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/09/06/building-a-traffic-based-workflow-in-pipedream",
		"content":"<p>A few months ago I <a href=\"https://www.raymondcamden.com/2020/05/07/looking-at-pipedreams-event-sources\">wrote</a> about working with event sources in Pipedream. The folks at Pipedream have continued to work on the feature and have been making it easier to build them with a new command line tool. At the time I'm writing this, unfortunately, Windows support is not ready yet. While typically a show stopper for me, I was given a temporary build of the command line tool for Windows to help test. (You can follow <a href=\"https://github.com/PipedreamHQ/pipedream/issues/89\">this issue</a> for more information.) Normally I don't like to blog about stuff that isn't generally available to all, but as it <em>will</em> be available sometime soon, I decided to go ahead anyway. And I built something really cool I want to share so that's another reason to talk about this now!</p>\n<p>To begin, take a look at the <a href=\"https://github.com/PipedreamHQ/pipedream/blob/master/QUICKSTART.md\">Quickstart</a> guide for using the CLI. You can use the CLI to deploy and update code for event sources which lets you use your <a href=\"https://code.visualstudio.com\">preferred editor</a> for development. At a high level, an event source kinda looks like this:</p>\n<pre><code class=\"language-js\">module.exports = {\n\tname: 'name of the event source', \n\tprops: {\n\t\t// things the ES will need, also how you set how it runs\n\t}, \n\tasync run() {\n\t\t// the actual logic of the thing\n\t}\n}\n</code></pre>\n<p>Essentially metadata and your logic in one file. It gets a bit more complex than that depending on what you're doing, but after writing a few samples it began to make sense to me. The CLI process is a bit clunky now in terms of what you use to deploy versus update versus other items and I've passed this feedback on to the team, but it's still Alpha so you can expect this to change.</p>\n<p>I thought I'd take a stab at building something real. My local city has a website, <a href=\"http://lafayette911.org/\">http://lafayette911.org/</a>, that publishes &quot;live&quot; traffic incidents.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/laf1.jpg\" alt=\"View of traffic reports\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>It's an old site, one I've built demos on in the past past, but it works. Using devtools, I was able to see that it's making a POST request to https://apps.lafayettela.gov/L911/Service2.svc/getTrafficIncidents. The result is:</p>\n<pre><code class=\"language-js\">{&quot;d&quot;:&quot; &lt;center&gt;&lt;a href=\\&quot;#KEY\\&quot;&gt;KEY&lt;\\/a&gt;&lt;table border=0 bgcolor=\\&quot;white\\&quot;&gt;&lt;tr bgcolor=\\&quot;blue\\&quot;&gt;&lt;td&gt;&lt;font color=\\&quot;white\\&quot;&gt;&lt;b&gt;Located At&lt;\\/font&gt;&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;font color=\\&quot;white\\&quot;&gt;&lt;b&gt;Due To&lt;\\/font&gt;&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;&lt;font color=\\&quot;white\\&quot;&gt;Reported At&lt;\\/font&gt;&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;font color=\\&quot;white\\&quot;&gt;&lt;b&gt;Assisting&lt;\\/b&gt;&lt;\\/font&gt;&lt;\\/td&gt;&lt;\\/tr&gt;&lt;tr bgcolor=\\&quot;#FFFF99\\&quot;&gt;&lt;td&gt;&lt;b&gt;&amp;nbsp;&lt;a href='http:\\/\\/maps.google.com\\/maps?q=103++SHADYSIDE+AVE+,LAFAYETTE+LA' target='_new'&gt;103  SHADYSIDE AV&lt;\\/a&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;LAFAYETTE,LA&amp;nbsp;&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;Vehicle Accident&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;09\\/08\\/2020 - 10:21 AM&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;P &lt;\\/b&gt;&lt;\\/td&gt;&lt;\\/tr&gt;&lt;tr bgcolor=\\&quot;#99FF99\\&quot;&gt;&lt;td&gt;&lt;b&gt;&amp;nbsp;&lt;a href='http:\\/\\/maps.google.com\\/maps?q=611++LINDEN+LEWIS+ROAD+,LAFAYETTE+LA' target='_new'&gt;611  LINDEN LEWIS RD&lt;\\/a&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;LAFAYETTE,LA&amp;nbsp;&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;Road Hazard&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;09\\/08\\/2020 - 10:07 AM&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;S &lt;\\/b&gt;&lt;\\/td&gt;&lt;\\/tr&gt;&lt;tr bgcolor=\\&quot;#FFFF99\\&quot;&gt;&lt;td&gt;&lt;b&gt;&amp;nbsp;&lt;a href='http:\\/\\/maps.google.com\\/maps?q=+BONIN+ROAD+%26+E+MILTON+AVE+,YOUNGSVILLE+LA' target='_new'&gt;BONIN RD &amp; E MILTON AV&lt;\\/a&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;YOUNGSVILLE,LA&amp;nbsp;&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;Traffic Control&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;09\\/08\\/2020 - 09:24 AM&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;S &lt;\\/b&gt;&lt;\\/td&gt;&lt;\\/tr&gt;&lt;tr bgcolor=\\&quot;#99FF99\\&quot;&gt;&lt;td&gt;&lt;b&gt;&amp;nbsp;&lt;a href='http:\\/\\/maps.google.com\\/maps?q=254++EDGEWOOD+DR+,LAFAYETTE+LA' target='_new'&gt;254  EDGEWOOD DR&lt;\\/a&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;LAFAYETTE,LA&amp;nbsp;&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;Vehicle Accident&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;09\\/08\\/2020 - 09:14 AM&lt;\\/b&gt;&lt;\\/td&gt;&lt;td&gt;&lt;b&gt;P &lt;\\/b&gt;&lt;\\/td&gt;&lt;\\/tr&gt;&lt;\\/table&gt;&lt;small&gt;Data Updated at 09\\/08\\/2020 - 10:27:37 AM &lt;\\/small&gt;&lt;\\/center&gt;&lt;script&gt;$('dateline').innerHTML = '09\\/08\\/2020 - 10:27:37 AM'; &lt;\\/script&gt;&quot;}\n</code></pre>\n<p>Basically an object of one key, <code>d</code>, that is HTML which is just then dropped on the page. I knew that I could use <a href=\"https://www.npmjs.com/package/cheerio\">Cheerio</a> to parse this HTML so I began by working on a test script to see how well it could be done. Cheerio is, for all intents and purposes, jQuery for Node.js. It's really powerful, but I had a bit of trouble as I don't really use jQuery anymore! Here is that initial script:</p>\n<pre><code class=\"language-js\">const cheerio = require('cheerio');\nconst $ = cheerio.load(&quot; &lt;center&gt;&lt;a href=\\&quot;#KEY\\&quot;&gt;KEY&lt;/a&gt;&lt;table border=0 bgcolor=\\&quot;white\\&quot;&gt;&lt;tr bgcolor=\\&quot;blue\\&quot;&gt;&lt;td&gt;&lt;font color=\\&quot;white\\&quot;&gt;&lt;b&gt;Located At&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;font color=\\&quot;white\\&quot;&gt;&lt;b&gt;Due To&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;&lt;font color=\\&quot;white\\&quot;&gt;Reported At&lt;/font&gt;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;font color=\\&quot;white\\&quot;&gt;&lt;b&gt;Assisting&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr bgcolor=\\&quot;#FFFF99\\&quot;&gt;&lt;td&gt;&lt;b&gt;&amp;nbsp;&lt;a href='http://maps.google.com/maps?q=101++I10+WESTBOUND+MM101+HIGHWAY+,LAFAYETTE+LA' target='_new'&gt;101  I10 WESTBOUND MM101 HW&lt;/a&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;LAFAYETTE,LA&amp;nbsp;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Stalled Vehicle&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;09/05/2020 - 1:24 PM&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;P &lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr bgcolor=\\&quot;#99FF99\\&quot;&gt;&lt;td&gt;&lt;b&gt;&amp;nbsp;&lt;a href='http://maps.google.com/maps?q=+ERASTE+LANDRY+ROAD+%26++AMBASSADOR+CAFFERY+PKWY+,LAFAYETTE+LA' target='_new'&gt;ERASTE LANDRY RD &amp;  AMBASSADOR CAFFERY PW&lt;/a&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;LAFAYETTE,LA&amp;nbsp;&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Vehicle Accident&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;09/05/2020 - 12:49 PM&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;P &lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;small&gt;Data Updated at 09/05/2020 - 1:34:34 PM &lt;/small&gt;&lt;/center&gt;&lt;script&gt;$('dateline').innerHTML = '09/05/2020 - 1:34:34 PM'; &lt;/script&gt;&quot;);\n\nlet rows = $('table tr');\n\n// calling this events and not incidents cuz i dont like spelling it :)\nlet events = [];\n\nif(rows.length &gt; 1) {\n\tfor(let i=1;i&lt;rows.length;i++) {\n\t\tlet row = $(rows.get(i));\n\t\tconsole.log(i+' === ' +row.text());\n\t\tconsole.log('\\n');\n\t\tlet cells = $('td', row);\n\t\t/*\n\t\tcell[0] should be street, \n\t\tcell[1] what\n\t\tcell[2] when\n\t\tcell[3] = who, F-Fire M-Medical S-Sheriff/Local Police P-Lafayette Police\n\t\t*/\n\t\tif(cells.length === 4) {\n\t\t\tevents.push({\n\t\t\t\taddress:$(cells[0]).text().trim(),\n\t\t\t\twhat:$(cells[1]).text().trim(),\n\t\t\t\twhen:$(cells[2]).text().trim(),\n\t\t\t\twho: $(cells[3]).text().trim()\n\t\t\t});\n\t\t}\n\t}\n}\n\nconsole.log('EVENTS\\n', events);\n</code></pre>\n<p>To let it run quicker and be more consistent, I used one hard coded result of the API and just got to work parsing it. I knew the shape of the table an what each column represented, so from this I was able to get an array of objects representing the traffic incidents being reported by the API.</p>\n<p>Ok, so with that working, I then began working on the Pipedream version. It needed to be rewritten in the right &quot;form&quot; for Pipedream and obviously switch to using a network call instead of hard coded data. Here's that event stream:</p>\n<pre><code class=\"language-js\">const cheerio = require('cheerio');\nconst fetch = require('node-fetch');\n\nmodule.exports = {\n  name: &quot;Lafayette Traffic Incidents&quot;,\n  description: &quot;Based on API at http://lafayette911.org/&quot;,\n  props: {\n\ttimer: {\n\t\ttype:&quot;$.interface.timer&quot;,\n\t\tdefault: {\n\t\t\tintervalSeconds: 60 * 10\n\t\t}\n\t}\n  },\n  dedupe: &quot;unique&quot;,\n  async run() {\n\tconsole.log('run on laffy traffic called');\n\tlet resp = await fetch('https://apps.lafayettela.gov/L911/Service2.svc/getTrafficIncidents', { method: 'POST' });\n\tlet data = await resp.json();\n\tlet $ = cheerio.load(data.d);\n\tconsole.log('data.d', data.d);\n\n\tlet rows = $('table tr');\n\n\tif(rows.length &gt; 1) {\n\t\tfor(let i=1;i&lt;rows.length;i++) {\n\t\t\tlet row = $(rows.get(i));\n\t\t\tlet cells = $('td', row);\n\t\t\t/*\n\t\t\tcell[0] should be street, \n\t\t\tcell[1] what\n\t\t\tcell[2] when\n\t\t\tcell[3] = who, F-Fire M-Medical S-Sheriff/Local Police P-Lafayette Police\n\t\t\t*/\n\t\t\tif(cells.length === 4) {\n\t\t\t\tlet event = {\n\t\t\t\t\taddress:$(cells[0]).text().trim(),\n\t\t\t\t\twhat:$(cells[1]).text().trim(),\n\t\t\t\t\twhen:$(cells[2]).text().trim(),\n\t\t\t\t\twho: $(cells[3]).text().trim()\n\t\t\t\t};\n\n\t\t\t\t//construct id based on address and when\n\t\t\t\tlet id = event.address + ' ' + event.when;\n\n\t\t\t\tthis.$emit(event, {\n\t\t\t\t\tsummary:event.what + ' at ' + event.address,\n\t\t\t\t\tid:id\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n  }\n}\n</code></pre>\n<p>While most of this is the same, there's some crucial differences. First, note the use of the timer on top. That sets up how often the event source will run and should be set whatever makes sense for your data. While the website refreshes every fifteen seconds, I didn't think it was necessary to run this code that quickly. Ten minutes seemed sensible so I went with that.</p>\n<p>The next important change is how the code reports data. So in my test script, I just output an array of events. For Pipedream, you need to use <code>this.$emit</code> instead. Now for the truly cool part. How do we know a new traffic incident versus an existing one? Pipedream has built in for support with this using 2 settings.</p>\n<p>First, I added <code>dedupe: &quot;unique&quot;,</code>. This tells Pipedream to filter out any output from the code and ensure it's unique. How does it determine uniqueness? Via the <code>id</code> value. You can see me emit that towards the end of the file. I generate an id by using the traffic incident address and time. It's absolutely possible to have multiple accidents at the same location, but probably very rarely will they be at the same time. I could make this a better perhaps by looking at the <code>what</code> and <code>who</code> values but that felt like overkill.</p>\n<p>I deployed this and then started testing. On the Pipedream website, I can see my events as well as a graph over time:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/laf2.jpg\" alt=\"Pipedream event report\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>What may not be terribly obvious is that you can see a &quot;spike&quot; in the incidents. I'm writing this at around 10 in the morning so it makes sense that more reports would come in with the morning traffic.</p>\n<p>What's truly cool though - and I feel like a bit of a broken record when it comes to Pipedream - is that all of this complexity (and honestly it wasn't too complex) is <em>completely</em> hidden from anyone who wants to use it. So for example, want to get an email everytime an accident happens?</p>\n<p>Make a workflow - select this event source - and then add the email step:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/laf3.jpg\" alt=\"Traffic email workflow\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>As you can see, this one's already disabled as it got too noisy too quickly, but with zero code, I've got a working notifier about accidents in my city.</p>\n<p>Don't want email? I can send an SMS instead using a variety of options:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/laf4.jpg\" alt=\"SMS options\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>It really doesn't matter. If you just want to do X when there's a new accident, the support is there. What you actually do with the data is up to you. And this is why I love Pipedream. By making it easy to build the event source, it then makes it easier to build multiple different workflows. I took what was basically a simple API endpoint and turned it into an entirely new feature. (Although honestly I didn't actually ask anyone if I could do this so be sure to use with caution!)</p>\n<p>Take it for a spin yourself and let me know if you build anything fun with it!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@michaeljinphoto?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Michael Jin</a> on <a href=\"https://unsplash.com/s/photos/accident?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "javascript",
            
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "Vue Quick Shot - Form Field Character Counters",
		"date":"Sun Sep 13 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/09/14/vue-quick-shot-form-field-character-counters",
		"content":"<p>A common user interface feature you'll see on sites is a counter by form fields to let you know how much you've typed. Typically this is when a certain minimum or maximum number of characters are required. Instead of simply displaying an error (&quot;You haven't typed enough, dangit!&quot;), this feature will give you a &quot;live&quot; update as you type of how many characters have been typed so far. Here's a quick example of how to do this in Vue.js.</p>\n<p>First, let's consider a use case where we require a certain number of characters. You can start with a simple HTML field:</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;text&quot; v-model=&quot;description&quot; minlength=10&gt;\n</code></pre>\n<p>Even though I'm not going to do a traditional form submission, I wanted to use <code>minlength</code> anyway as it's a well-supported feature of HTML forms. I've bound the field to a Vue data value named <code>description</code>. Now let's show the field with the rest of the layout.</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  Enter a minimum of 10 characters please:\n  &lt;input type=&quot;text&quot; v-model=&quot;description&quot; minlength=10&gt;\n   characters\n&lt;/div&gt;\n</code></pre>\n<p>I've added a bit of descriptive text to clearly tell the user what they need to do but I've also added a character counter after the field itself. Now let's look at the JavaScript:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data:{\n    description:''\n  },\n  computed: {\n    currentLength() {\n      return this.description.length;\n    }\n  }\n})\n</code></pre>\n<p>As you can see <code>description</code> is just simple data, but <code>currentLength</code> is a computed property based on the field itself.</p>\n<p>And that's it. Simple. But let's make it a bit more fancy.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/fancycat.jpg\" alt=\"Fancy cat is fancy\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Here I've modified the character count to add a span with some classes applied:</p>\n<pre><code class=\"language-html\">&lt;span class=&quot;count&quot; :class=&quot;{bad:isBad}&quot;&gt;\n{{ currentLength }} characters\n&lt;/span&gt;\n</code></pre>\n<p>Notice that the <code>bad</code> class is only applied when <code>isBad</code> is true. Here's the CSS I used:</p>\n<pre><code class=\"language-css\">.count {\n  font-style: italic;\n}\n\n.bad {\n  color: red;\n}\n</code></pre>\n<p>And my new computed property:</p>\n<pre><code class=\"language-js\">isBad() { return this.currentLength &lt; 10; }\n</code></pre>\n<p>Now when the user has less than ten characters, the <code>bad</code> class is applied and clearly signifies that the data isn't ready yet. You can play with the completed version below:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"MWyBEVa\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Char Count (minimum)\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/MWyBEVa\">\n  Char Count (minimum)</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Now let's flip it and write count that flags a maximum number of characters. First, the HTML:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  Enter a maximum of 100 characters please:\n  &lt;input type=&quot;text&quot; v-model=&quot;description&quot; maxlength=100&gt;\n  &lt;span class=&quot;count&quot; :class=&quot;{bad:isBad}&quot;&gt;\n   characters\n  &lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Note the help text and the use of <code>maxlength</code>. Unlike <code>minlength</code> which won't have any impact unless the user submits the form, this time the user will immediately be stopped typing when they hit the max. So while most of the code is the same, I modified <code>isBad</code> like so:</p>\n<pre><code class=\"language-js\">isBad() { return this.currentLength &gt; 90; }\n</code></pre>\n<p>Now it returns true when the length is greater than 90. Instead of being a flag of &quot;you have incorrect data&quot;, it's more of a warning that you're about to hit your max. Here's a demo of that version:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"PoNBJRX\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Char Count (maximum)\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/PoNBJRX\">\n  Char Count (maximum)</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Hooking Up FaunaDB to Eleventy",
		"date":"Mon Sep 14 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/09/15/hooking-up-faunadb-to-eleventy",
		"content":"<p>As a <em>very</em> new user of <a href=\"https://dashboard.fauna.com/accounts/register?utm_source=DevTo&amp;utm_medium=referral&amp;utm_campaign=WritewithFauna_Hooking-upto-Eleventy_RCamden\">FaunaDB</a>, I'm pretty impressed by how easy it was to setup and start using, both from the server as well as the browser. I decided to take a quick look at how FaunaDB could be integrated with my favorite static site generator, <a href=\"https://www.11ty.dev/\">Eleventy</a>. Eleventy (aka 11ty) is one of the many options developers have for working with the Jamstack (JavaScript, APIs, and Markup) and is known both for it's speed as well as it's flexibility. I've been using Eleventy pretty exclusively now and it's easily become my preferred way to build static sites. While I won't be giving an introduction to Eleventy here, be sure to read the <a href=\"https://www.11ty.dev/docs/\">docs</a> for more information and if you would like an introduction, check out this great one by Gift Egwuenu, <a href=\"https://dev.to/lauragift21/getting-started-with-eleventy-4ofg\">&quot;Getting Started with Eleventy&quot;</a>.</p>\n<p>So given that a Jamstack site is static by it's very nature, how can we incorporate FaunaDB data into it? For my experiment, I began by creating a database of products.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/img1.png\" alt=\"Dashboard view of Products\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Each product had a pretty simple structure:</p>\n<ul>\n<li>Name</li>\n<li>Price</li>\n<li>Description</li>\n<li>shippingTimeInDays</li>\n</ul>\n<p>I made a few random products using the dashboard and employed all of my creativity for the names and descriptions.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/img2.png\" alt=\"One example product\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Alright - so I have data. Not a lot of it, but enough for a demo. How to get it into Eleventy? One of the more interesting features of Eleventy are <a href=\"https://www.11ty.dev/docs/data-global/\">global data files</a>. These are files that provide data to the rest of the site. So for example, you could build a hard coded like of products and name it products.json:</p>\n<pre><code class=\"language-js\">[\n\t{ &quot;name&quot;: &quot;foo&quot;, &quot;price&quot;: 2.99, &quot;description&quot;: &quot;something&quot;, &quot;shippingTimeInDays&quot;:9 },\n\t{ &quot;name&quot;: &quot;goo&quot;, &quot;price&quot;: 9.99, &quot;description&quot;: &quot;something else&quot;, &quot;shippingTimeInDays&quot;:8 },\n\t{ &quot;name&quot;: &quot;zoo&quot;, &quot;price&quot;: 1.50, &quot;description&quot;: &quot;something more&quot;, &quot;shippingTimeInDays&quot;:10 },\n]\n</code></pre>\n<p>Once saved in a special folder (<code>_data</code>), Eleventy templates can make use of it. Another strength of Eleventy is the large amount of different template engines it supports. My personal favorite is Liquid so I'll be using that, but note that Eleventy also supports Handlebars, Jade, and more. Here's a simple Liquid template that makes use of this data:</p>\n<pre><code class=\"language-html\">&lt;h2&gt;Our Products&lt;/h2&gt;\n\n&lt;ul&gt;\n{% for product in products %}\n&lt;li&gt;{{ product.name }} costs ${{ product.price }} and ships in {{ shippingTimeInDays }} days.&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>When Eleventy runs, it reads in the hard coded JSON file, makes it available as a <code>products</code> variable (this is because of the filename, if you had used something like <code>prods.json</code>, the variable would be <code>prods</code>), and then Liquid can loop over the product and output values.</p>\n<p>Static data can be useful, but obviously we want to be able to use our FaunaDB data. While plain JSON files work as global data in Eleventy, you can also use JavaScript files. These files will be executed when Eleventy creates a static build of your site and can perform any logic necessary, including integrating with FaunaDB! Here's an example where I fetch my data from FaunaDB:</p>\n<pre><code class=\"language-js\">const faunadb = require('faunadb'),\n  q = faunadb.query;\n\nmodule.exports = async function() {\n\tconst client = new faunadb.Client({ secret: process.env.FAUNADB })\n\n\tlet productObs = await client.query(\n\t\tq.Map(\n\t\t\tq.Paginate(q.Documents(q.Collection('products'))),\n\t\t\tq.Lambda(x =&gt; q.Get(x))\n\t\t)\n\t);\n\tlet data = productObs.data.map(po =&gt; {\n\t\treturn po.data;\n\t});\n\tconsole.log(data.length + ' products loaded from Fauna');\n\treturn data;\n\n}\n</code></pre>\n<p>I'm using the <code>faunadb</code> npm library and ask for my products. For each object I really only want the data so after fetching the information from FaunaDB I return an array of product values. The <code>console.log</code> message will get displayed locally while I build and helps me see that things are working.</p>\n<p>Next, I built a home page for my site that loops over the products. Here's that template:</p>\n<pre><code class=\"language-html\">---\nlayout: main\ntitle: Products\n---\n\n&lt;h2&gt;Products&lt;/h2&gt;\n\n&lt;ul&gt;\n{% for product in products %}\n\t&lt;li&gt;&lt;a href=&quot;/product/{{product.name | slug}}&quot;&gt;{{product.name}}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>The portion you see on top is front matter, a common way in Jamstack programs to set metadata for web pages. In this case I'm specifying a layout file for the page as well as a title. Layout files simply take the content of the current page and insert them inside some markup. (See the Eleventy <a href=\"https://www.11ty.dev/docs/layouts/\">layout</a> docs for more information.)</p>\n<p>The code loops over each product and creates a link to a product detail page I'll share in a moment. This portion, <code>{{product.name | slug}}</code>, demonstrates a filter. It takes input, like &quot;Raymond Camden&quot;, and creates a filename safe version of it: &quot;raymond-camden&quot;. The end result is a set of links and names based on my data in FaunaDB:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/img3.png\" alt=\"List of products\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Notice that the products are sorted based on how the FaunaDB code returned it. I could have sorted it there, or I could sort it in Eleventy. In my case I'm happy with the default sort. Now lets look at the product pages.</p>\n<p>Eleventy supports the ability to <a href=\"https://www.11ty.dev/docs/pagination/\">paginate</a> data. It will take a large list of data and let you create pages of them dynamically. It also supports taking a list of data and creating <a href=\"https://www.11ty.dev/docs/pages-from-data/\">one page each</a>. This is perfect for our needs here. This is how I defined a product template.</p>\n<pre><code class=\"language-html\">---\nlayout: main\npagination:\n   data: products\n   size: 1\n   alias: product\npermalink: &quot;/product/{{product.name | slug}}/&quot;\neleventyComputed:\n   title: &quot;{{product.name}}&quot;\n---\n\n&lt;h2&gt;{{ product.name }}&lt;/h2&gt;\n\n&lt;p&gt;\n{{product.description}}\n&lt;/p&gt;\n\n&lt;p&gt;\nIt costs ${{product.price}} and ships in {{product.shippingTimeInDays}} days.\n&lt;/p&gt;\n\n</code></pre>\n<p>The frontmatter on top is a bit more complex here, but hopefully understandable. I've defined a pagination of 1, basically one page product. I've specified a permalink for each product (where to save the file) that matches how I linked to them from the index page. The last part, <code>eleventyComputed</code>, is a workaround for specifying custom values in front matter based on pagination. Basically it just ensures the title value is based on the current product being generated.</p>\n<p>After front matter I simply display the product. After saving this, Eleventy generates one page per product:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/img4.png\" alt=\"Product file output\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And if we return to the index page, we can click to load one of the products:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/img5.png\" alt=\"One product page\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And voila, we're done! (You can demo this version here: <a href=\"https://faunadbv1.vercel.app/\">https://faunadbv1.vercel.app/</a>) But while this may make you incredibly happy, you probably realize an important issue. Eleventy will only load the products from FaunaDB when the site is built. What if your products change?</p>\n<p>Luckily we have some options. First, many Jamstack services provide a simple way to trigger builds. <a href=\"https://www.netlify.com/\">Netlify</a>, for example, lets you expose a hidden URL that you can hit programatically to start a new build. Whatever process you use to edit your products could also fire off a request to start a new build.</p>\n<p>You could also schedule this on a periodic basis. If you know, for example, that your logistics department updates shipping times once a day, you can simply automate the rebuild to also run once a day. But let's consider another approach.</p>\n<p>FaunaDB provides both a server-side library to work with data as well as a client-side side one. We've got Eleventy loading products at build time and generating pages for each one. What if we assume some of that data is pretty static (products are probably rarely added or removed) and some is very dynamic? Let's update the site such that the <code>shippingTimeInDays</code> value is loaded on the client and is <em>always</em> up to date.</p>\n<p>To get started, I first modified my data file to copy the ID of each product:</p>\n<pre><code class=\"language-js\">\nconst faunadb = require('faunadb'),\n  q = faunadb.query;\n\nmodule.exports = async function() {\n\tconst client = new faunadb.Client({ secret: process.env.FAUNADB })\n\n\tlet productObs = await client.query(\n\t\tq.Map(\n\t\t\tq.Paginate(q.Documents(q.Collection('products'))),\n\t\t\tq.Lambda(x =&gt; q.Get(x))\n\t\t)\n\t);\n\tlet data = productObs.data.map(po =&gt; {\n\t\tlet result = po.data;\n\t\t//add the id\n\t\tresult.id = po.ref.id;\n\t\treturn result;\n\t});\n\tconsole.log(data.length + ' products loaded from Fauna');\n\treturn data;\n\n}\n</code></pre>\n<p>You can see me grabbing <code>ref.id</code> in the loop and assigning it the <code>id</code> property. Now let's look at the product template.</p>\n<pre><code class=\"language-html\">---\nlayout: main\npagination:\n   data: products\n   size: 1\n   alias: product\npermalink: &quot;/product/{{product.name | slug}}/&quot;\neleventyComputed:\n   title: &quot;{{product.name}}&quot;\n---\n\n&lt;h2&gt;{{ product.name }}&lt;/h2&gt;\n\n&lt;p&gt;\n{{product.description}}\n&lt;/p&gt;\n\n&lt;p&gt;\nIt costs ${{product.price}}.\n&lt;/p&gt;\n\n&lt;p&gt;\nAvailability: &lt;span id=&quot;availabilityText&quot;&gt;&lt;i&gt;Fetching...&lt;/i&gt;&lt;/span&gt;\n&lt;/p&gt;\n\n&lt;script src=&quot;//cdn.jsdelivr.net/npm/faunadb@latest/dist/faunadb-min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\nconst pid = '{{product.id}}';\n\ndocument.addEventListener('DOMContentLoaded', async () =&gt; {\n   let availabilityText = document.querySelector('#availabilityText');\n\n   console.log('product page, load '+pid);\n   let client = new faunadb.Client({ secret: 'fnAD0SNbNaACE9yDvC7hoFJRJQR35uwJZOjl2qpa' });\n   let q = faunadb.query;\n\n   let result = await client.query(\n      q.Get(q.Ref(q.Collection('products'), pid))\n   );\n   let product = result.data;\n   console.log(product);\n   availabilityText.innerHTML = `Ships in ${product.shippingTimeInDays} days.`;\n\n}, false);\n&lt;/script&gt;\n</code></pre>\n<p>I've modified the HTML to remove the hard coded availability value and replaced it with a &quot;Fetching&quot; message. This value is going to be updated via JavaScript. For simplicity sake I've put the code on the page itself. This isn't an Eleventy requirement and I could, and should, absolutely put this on it's own file. That being said, the code is rather simple. The ID value is generated when the site is built. Each product page will have a different value for <code>pid</code>. I use the FaunaDB client-side library to retrieve just the one product and once I have it, I update my HTML with the result. Note - the key I've used here is a &quot;read only&quot; key generated in the FaunaDB dashboard. As it can't modify data it's safe to use in my JavaScript.</p>\n<p>Here's an example:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/img6.png\" alt=\"Static+Dynamic product info\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Now I've got the best of both worlds. I've got a static site driven by dynamic content that will load incredibly fast but can still include up to date shipping estimates for my users. (You can demo this version here: <a href=\"https://faunadbv2.vercel.app/\">https://faunadbv2.vercel.app/</a>)</p>\n<p>I hope this quick look at FaunaDB and Eleventy has gotten you excited about the Jamstack in general. You can learn more about the Jamstack at <a href=\"https://jamstack.org/\">https://jamstack.org/</a>. Also, you can get the demo files for this post here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/fauna_test/\">https://github.com/cfjedimaster/eleventy-demos/tree/master/fauna_test/</a></p>\n<p><span>Photo by <a href=\"https://unsplash.com/@worldsbetweenlines?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Patrick Hendry</a> on <a href=\"https://unsplash.com/s/photos/fauna?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy",
            
            "faunadb"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Vue Quick Shot - Uploading a File",
		"date":"Sat Sep 19 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/09/20/vue-quick-shot-uploading-a-file",
		"content":"<p>Welcome to the last Vue <a href=\"https://www.raymondcamden.com/tags/vue+quick+shot/\">Quick Shot</a>, and when I say last, I mean the last one I've got in my queue of blog ideas. Today's tip demonstrates how a Vue application can upload a file via a form post operation. I started off with an incredibly simple form - one text field and one file field.</p>\n<pre><code class=\"language-html\">&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; action=&quot;https://postman-echo.com/post&quot;&gt;\n\tText field: &lt;input type=&quot;text&quot; name=&quot;something&quot;&gt;&lt;br/&gt;\n\tFile field: &lt;input type=&quot;file&quot; name=&quot;fileToUpload&quot;&gt;&lt;br/&gt;\n\t&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n</code></pre>\n<p>How can we convert this to let Vue take over and do the post for us?</p>\n<p>First, I did some modifications to the HTML:</p>\n<pre><code class=\"language-html\">&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; \n      @submit.prevent=&quot;upload&quot;&gt;\n\tText field: &lt;input type=&quot;text&quot; v-model=&quot;something&quot;&gt;&lt;br/&gt;\n\tFile field: &lt;input type=&quot;file&quot; ref=&quot;fileToUpload&quot;&gt;&lt;br/&gt;\n\t&lt;input type=&quot;submit&quot; :disabled=&quot;uploading&quot;&gt;\n&lt;/form&gt;\n</code></pre>\n<p>First, I specified a submit action as well as ensure it prevented the default behavior. I then changed the text field to use v-model. I did not do the same for the file type because file types are a bit special when it comes to Vue. Instead of using v-model, I used the <code>ref</code> attribute so I could read the data manually later. (Basically, you can't use v-model because Vue, or JavaScript in general, can't write to a file field type for security reasons.) The last change was to add a <code>disabled</code> attribute so I can prevent multiple submissions of the form while data is uploading.</p>\n<p>Now let's look at the Vue side. Here's the entire script:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data: {\n    uploading:false,\n    something:'',\n    result:null\n  },\n  methods: {\n    async upload() {\n      \n      this.uploading = true;\n      let data = new FormData();\n      data.append(&quot;something&quot;, this.something);\n      if(this.$refs.fileToUpload.files.length) {\n        data.append(&quot;fileToUpload&quot;, this.$refs.fileToUpload.files[0]);\n      }\n \n      let resp = await fetch('https://23198ad96949.ngrok.io/', {\n        method: 'POST',\n        body: data\n      });\n      this.result = await resp.json();\n      this.uploading = false;\n    }\n  }\n})\n</code></pre>\n<p>For data, I've got one data value for the text field, a boolean to flag when uploading, and a result value. The <code>upload</code> method makes use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">Fetch</a> API and FormData. Fetch makes it super easy to different types of network calls and FormData makes it easy to build a form post request. The only weird thing possibly is how I address the file field: <code>this.$refs.fileToUpload.files[0]</code>. The <code>this.$refs.fileToUplaod</code> part simply connects to the file field in the DOM. The <code>files[0]</code> aspect handles references selected files in the field. It's an array because you can add <code>multiple</code> to a file field and then the user can select multiple files.</p>\n<p>I post to a local Node server I had running via <a href=\"https://ngrok.com/\">ngrok</a>, a super-useful tool that lets you expose servers running on your local development machine. Because this is a temporary tunnel, my code will not actually work for you, so please keep that in mind when playing with my CodePen below.</p>\n<p>My Node server simply echoes data back that I render as is in the template. Here's an example of how that looks:</p>\n<pre><code class=\"language-js\">{ \n\t&quot;fields&quot;: { &quot;something&quot;: &quot;p&quot; }, \n\t&quot;files&quot;: { &quot;fileToUpload&quot;: \n\t\t{ &quot;size&quot;: 515954, \n\t\t\t&quot;path&quot;: &quot;/tmp/upload_390d2c9ac7149c559f85ba934f996dde&quot;, \n\t\t\t&quot;name&quot;: &quot;Untitled.png&quot;, \n\t\t\t&quot;type&quot;: &quot;image/png&quot;, \n\t\t\t&quot;mtime&quot;: &quot;2020-09-19T17:29:44.644Z&quot; \n\t\t} \n\t} \n}\n</code></pre>\n<p>In a real application you wouldn't do that of course. In the end though, Fetch and FormData do all the heavy work for us! Here's the complete application below, and please remember that you won't be able to actually submit.</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"GRZYBMw\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue File Upload Test\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/GRZYBMw\">\n  Vue File Upload Test</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Tracking Posts by Week in Eleventy",
		"date":"Tue Sep 29 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/09/30/tracking-posts-by-week-in-eleventy",
		"content":"<p>I've been running a &quot;successful&quot; blog for about seventeen years now. I say &quot;successful&quot; as the measure of success has certainly changed over the years. My posts used to get near five hundred page views each, and that's even with me blogging quite a bit more than I do now. Of course, I started blogging before Twitter existed and a lot of my posts were merely short informational notices for my readers. Nowadays the traffic isn't nearly as good and comments are way down. Some days I even want to quit. But I enjoy building things and writing about them so I'm not going to stop yet.</p>\n<p>One of the ways I try to make my blog successful is by having a consistent schedule. I used to blog every week day. That's not really doable these days so instead I try to do at least one blog post a week. I wanted an easy way to see how well I was doing with that schedule so I decided to hack up a quick addition to my <a href=\"/stats\">stats</a> page.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/09/ppw.jpg\" alt=\"Posts poer weeks stat\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This new information looks at the last eight weeks and reports on how many total posts I wrote. As of the day I'm writing this, it looks like I've got two weeks where I &quot;failed&quot; but honestly I'm fine with that. So, how did I build it?</p>\n<p>Let me start off by saying that I built my <a href=\"/stats\">stats</a> page based on what I thought was important. With that being said, it's an incredibly messy bit of EJS-driven JSON (you can see the <a href=\"https://github.com/cfjedimaster/raymondcamden2020/blob/master/stats.ejs\">raw code</a> and the <a href=\"https://www.raymondcamden.com/stats.json\">output</a>) and an <a href=\"https://github.com/cfjedimaster/raymondcamden2020/blob/master/stats.html\">HTML page</a> that uses Vue.js to render the stats.</p>\n<p>To build this new stat, I used the following logic. First, create an array of 8 &quot;weeks&quot; which are objects containing the Sunday and Saturday of the week:</p>\n<pre><code class=\"language-js\">/*\nI just create an array where [0].start is the Sunday of last week, [0].end is the Saturday.\nI generate 8 of these with 0 being last week, 1 the week before, and so forth. \nMy solution uses code from: https://stackoverflow.com/a/13682133/52160\nAlso https://stackoverflow.com/a/13682065/52160\n*/\nfunction generateWeekData() {\n    let weeks = [];\n    for(let i=0;i&lt;8;i++) {\n\n        let d = new Date();\n\n        // set to Monday of this week\n        d.setDate(d.getDate() - (d.getDay() + 6) % 7);\n\n        // set to previous Monday\n        d.setDate(d.getDate() - (7*(i+1)));\n\n        // create new date of day before\n        let sunday = new Date(d.getFullYear(), d.getMonth(), d.getDate() - 1);\n        let saturday = new Date(sunday.getFullYear(), sunday.getMonth(), sunday.getDate()+6);\n\n        weeks.push({sunday, saturday, hits:0});\n    }\n    return weeks;\n}\n</code></pre>\n<p>As you can see, I store the two date values along with a <code>hits</code> variable set to 0.</p>\n<p>The next part is where it gets messy. My EJS stats file creates an array of dates for every single blog post I've created. For my blog this is a rather large array but when I tested the size in the resulting JSON file, it seemed acceptable. (And again, my stats page is mainly for me!) So given that I have an array of dates, this is what I did.</p>\n<pre><code class=\"language-js\">//generate 8 weeks of weeks\nlet weekData = generateWeekData();\n// get the earliest day\nlet earliest = weekData[weekData.length-1].sunday;\n// loop from last date until a post is before earliest\nlet curr = dates.length-1;\nlet thisDate = new Date(dates[curr]);\nconsole.log('earliest is '+earliest+' and thisDate is '+thisDate);\nwhile(thisDate &amp;&amp; thisDate.getTime() &gt; earliest.getTime()) {\n\tconsole.log('thisDate',thisDate);\n\t// loop over our weeks and if im inside, hits++\n\tweekData.forEach(w =&gt; {\n\t\tif(w.sunday.getTime() &lt; thisDate.getTime() &amp;&amp; thisDate.getTime() &lt; w.saturday.getTime()) w.hits++;\n\t});\n\n\tthisDate = new Date(dates[--curr]);\n}\n//copy it over now that we're done with it, don't like this I think\nthis.weekData = weekData;\n</code></pre>\n<p>Essentially - loop from the end of the date array and continue down until we start seeing dates before the earliest of my week ranges. For each date, I see if it falls inside one of the week ranges and if so, I increment hits.</p>\n<p>The last part is simply outputting the array in my DOM and the only thing I do special there is format it with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\">Intl.DateTimeFormat</a>.</p>\n<p>As always, my entire blog is up on GitHub (<a href=\"https://github.com/cfjedimaster/raymondcamden2020\">https://github.com/cfjedimaster/raymondcamden2020</a>) and folks are free to take from it what they need!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@andrewtneel?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Andrew Neel</a> on <a href=\"https://unsplash.com/s/photos/week?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Another Netlify Analytics Hack - Stats Per URL",
		"date":"Wed Oct 07 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/10/08/another-netlify-analytics-hack-stats-per-url",
		"content":"<p>I've blogged a few times on the Netlify Analytics API (<a href=\"https://www.raymondcamden.com/2019/10/05/building-a-netlify-stats-viewer-in-vuejs\">&quot;Building a Netlify Stats Viewer in Vue.js&quot;</a>) and <a href=\"https://www.raymondcamden.com/2020/05/18/integrating-netlify-analytics-and-eleventy\">&quot;Integrating Netlify Analytics and Eleventy&quot;</a>) and today I've got some more code to share. Now - every time I do this - I remind folks that there is <em>not</em> a published doc for the Netlify Analytics API. That is still the case. Today I'll also add that what I'm sharing is <em>very</em> rough. It worked for me and it's up on GitHub (<a href=\"https://github.com/cfjedimaster/netlify-analytics-api\">repo</a>), but just keep in mind that I wrote this as a tool for myself. If it can help you too, great!</p>\n<p>For a while now I've wished I had a way to get analytics about a particular blog post. Netlify's analytics for page views are all date-based. I can easily tell what pages were viewed over a time period. But what I really wanted was the ability to see page views for a post over <em>all</em> time.</p>\n<p>I decided to take a crack at it with some Node.js scripts. Why Note and not a client-side application? In order to get my stats, I'd need access to <em>all</em> of my data. Technically not everything for a recent blog post, but if I wanted to search more generically, like <code>/2020</code> to see page views for my content this year, I'd need analytics from the beginning of the year. Therefore I took this approach:</p>\n<ol>\n<li>First, I wrote a script that gets data for one specific data. It stores this in a folder.</li>\n<li>I wrote a script that takes the saved data from a cache and creates one array of URL and view counts.</li>\n<li>I built a Vue app that sucks in the resulting JSON and let's me do a quick filter.</li>\n</ol>\n<p>Let's take a look at these - and again - remember this is rough code. Let's call it - organic, farm fed, all-natural code. First up is <code>get.js</code>, which, as you can guess, sucks in data.</p>\n<pre><code class=\"language-js\">require('dotenv').config();\nconst fetch = require('node-fetch');\nconst fs = require('fs');\n\nconst token = process.env.NETLIFY_TOKEN;\nconst siteId = process.env.NETLIFY_SITEID;\n\n// Earliest will be documented\nlet earliest = new Date(2019,10,1);\n\n/*\nto do, determine START DATE\nlook at cache and see what's done\ndo last+1 day + X more, probably 10\n*/\n\n/*\nlet begin = new Date(2019,10,1);\nlet end = new Date(begin);\nend.setDate(begin.getDate() + 1);\nconsole.log(begin, end);\n*/\nasync function getForDay(from, siteId, token) {\n\t\n\tlet to = new Date(from);\n\tto.setDate(from.getDate()+1);\n\n\tlet url = `https://analytics.services.netlify.com/v1/${siteId}/pages?from=${from.getTime()}&amp;to=${to.getTime()}&amp;timezone=-0500&amp;limit=99999`;\n\t\n\tlet result = await fetch(url, {\n\t\theaders: {\n\t\t\t'Authorization':`Bearer ${token}`\n\t\t}\n\t});\n\treturn (await result.json()).data;\n\n}\n\n/*\nI look at my cache folder and see which files exist. Each file is\nYYYY-MM-DD.json\nand from this, I can figure out my most recent time\n*/\nfunction getLastCacheDate() {\n\tlet files = fs.readdirSync('./cache');\n\tif(files.length === 0) return;\n\tlet latest = new Date(1980,0,1);\n\tfiles.forEach(f =&gt; {\n\t\tlet d = f.split('.')[0];\n\t\tlet [y,m,dom] = d.split('-');\n\t\tlet date = new Date(y, m-1, dom);\n\t\tif(date.getTime() &gt; latest.getTime()) {\n\t\t\tlatest = date;\n\t\t}\n\t});\n\treturn latest;\n}\n\n(async () =&gt; {\n\tfor(let i=0;i&lt;1;i++) {\n\t\tlet latest = getLastCacheDate();\n\t\tlet begin = earliest;\n\t\tif(latest) {\n\t\t\tbegin = new Date(latest);\n\t\t\tbegin.setDate(latest.getDate()+1);\n\t\t} \n\n\t\tconsole.log('Fetch for '+begin);\n\t\tlet data = await getForDay(begin, siteId, token);\n\t\tconsole.log(`Data loaded, ${data.length} items`);\n\t\tlet fileName = `./cache/${begin.getFullYear()}-${(begin.getMonth()+1)}-${begin.getDate()}.json`;\n\t\tfs.writeFileSync(fileName, JSON.stringify(data), 'utf-8');\n\t\tconsole.log(`${fileName} written.`);\n\t}\n})();\n</code></pre>\n<p>From the top, I begin by using two env variables. The token is a personal access token as I described in my <a href=\"https://www.raymondcamden.com/2020/05/18/integrating-netlify-analytics-and-eleventy\">last post</a>. The site ID represents my blog, where you are right now. This part:</p>\n<pre><code class=\"language-js\">// Earliest will be documented\nlet earliest = new Date(2019,10,1);\n</code></pre>\n<p>Comes from the fact that the analytics API returns data about how long it's been generating logs:</p>\n<pre><code class=\"language-js\">ingestion: {\n    status: 'current',\n    ingestion_start: 1575158400000,\n    ingestion_end: 1602014400000\n}\n</code></pre>\n<p>I converted <code>ingestion_start</code> to a date to get what you see in earliest. You could pick any date really. The <code>getForDay</code> function handles actually hitting the API and that's actually the simplest part of this whole script.</p>\n<p>If you scroll down into the main block, you'll first see an odd loop, from 0 to 1. Once I got my code working, I was sucking down 25 days at a time. I felt like that was safe and not abusive to Netlify's API. However, I never wrote code to &quot;stop&quot; at the current day. So as I got close to October 6th (the last time I played with this I believe), I simply reduced the counter by hand. Hack.</p>\n<p>Next, <code>getLastCacheDate</code> looks at my cache folder to figure out when I last ran the code. My cache files are named YYYY-MM-DD to make it easier to work with dates, but I still screwed this up a few times. I'm actually running this in the loop which is a bit wasteful, but I'm ok with that.</p>\n<p>Finally, I take the resulting data and just store it. The results look like this:</p>\n<pre><code class=\"language-js\">[\n\t{\n\t\t&quot;path&quot;: &quot;/2015/05/17/a-simple-cordova-task-runner-for-visual-studio-code/&quot;,\n\t\t&quot;count&quot;: 4\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2006/03/30/Soundings-ColdFusion-Survey-Update-151&quot;,\n\t\t&quot;count&quot;: 4\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2004/11/15/3D322D18-EEB5-E4F3-C9B08B0042A17015&quot;,\n\t\t&quot;count&quot;: 4\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2017/03/23/check-out-paveai-for-analytics/&quot;,\n\t\t&quot;count&quot;: 4\n\t},\n\t// LOTS MORE ROWS!\n]\n</code></pre>\n<p>My next script, <code>read.js</code>, handles combining these files:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\nlet files = fs.readdirSync('./cache');\nlet fileData = {};\n\nfiles.forEach(f =&gt; {\n\tlet data = JSON.parse(fs.readFileSync('./cache/'+f, 'UTF-8'));\n\tdata.forEach(i =&gt; {\n\t\tif(!fileData[i.path]) fileData[i.path]=0;\n\t\tfileData[i.path] += parseInt(i.count,10);\n\t});\n});\n\nlet keys = Object.keys(fileData);\nkeys = keys.sort((a,b) =&gt; {\n\tif(fileData[a] &lt; fileData[b]) return 1;\n\tif(fileData[a] &gt; fileData[b]) return -1;\n\treturn 0;\n});\n\n\nlet sorted = [];\n\nkeys.forEach(k =&gt; {\n\tsorted.push({path:k, views:fileData[k]});\n\t//console.log(k.padEnd(80)+' '+fileData[k]);\n});\nconsole.log(JSON.stringify(sorted));\n</code></pre>\n<p>I read them all, create one big array, sort it such that the highest viewed pages are on top, and then output it. Here's another snippet:</p>\n<pre><code class=\"language-js\">[\n\t{\n\t\t&quot;path&quot;: &quot;/&quot;,\n\t\t&quot;views&quot;: 68778\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/recentPosts/&quot;,\n\t\t&quot;views&quot;: 46738\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2016/09/28/some-quick-nativescript-tips/&quot;,\n\t\t&quot;views&quot;: 44004\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2017/06/29/handling-sms-with-openwhisk-ibm-watson-and-twilio/&quot;,\n\t\t&quot;views&quot;: 37420\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2017/07/07/handling-sms-with-openwhisk-ibm-watson-and-twilio-an-update/&quot;,\n\t\t&quot;views&quot;: 26174\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2018/02/08/building-table-sorting-and-pagination-in-vuejs&quot;,\n\t\t&quot;views&quot;: 6219\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2019/05/01/handling-errors-in-vuejs&quot;,\n\t\t&quot;views&quot;: 3015\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/olddemos&quot;,\n\t\t&quot;views&quot;: 2769\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2019/08/08/drag-and-drop-file-upload-in-vuejs&quot;,\n\t\t&quot;views&quot;: 2685\n\t},\n\t{\n\t\t&quot;path&quot;: &quot;/2020/09/04/vue-quick-shot-fullscreen-api&quot;,\n\t\t&quot;views&quot;: 2499\n\t},\n\t//LOTS MORE ROWS!\n]\n</code></pre>\n<p>To be honest, I was really surprised to see NativeScript as my number one post. It's also incredibly depressing to see how many pages get just around a hundred views of so. Of course, my blog was up for a roughly 16 years before I enabled Netlify Analytics so I'm going to worry most about my most recent content.</p>\n<p>I ran <code>read.js</code> and saved the output to <code>output.json</code>. I then built this horribly simple Vue app:</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n&lt;head&gt;\n&lt;style&gt;\ninput {\n\twidth:400px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n\t&lt;input v-model=&quot;search&quot; type=&quot;search&quot; placeholder=&quot;Enter a search term here (3 char min)&quot;&gt;\n\t&lt;span v-if=&quot;results&quot;&gt;Total for this search: &lt;/span&gt;\n\t&lt;table v-if=&quot;results&quot;&gt;\n\t\t&lt;thead&gt;\n\t\t\t&lt;tr&gt;\n\t\t\t\t&lt;th&gt;Path&lt;/th&gt;\n\t\t\t\t&lt;th&gt;Views&lt;/th&gt;\n\t\t\t&lt;/tr&gt;\n\t\t&lt;/thead&gt;\n\t\t&lt;tr v-for=&quot;result in results&quot;&gt;\n\t\t\t&lt;td&gt;&lt;/td&gt;\n\t\t\t&lt;td&gt;&lt;/td&gt;\n\t\t&lt;/tr&gt;\n\t&lt;/table&gt;\n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\nconst app = new Vue({\n\tel:'#app',\n\tdata:{\n\t\tdata:null,\n\t\tsearch:''\n\t},\n\tasync created() {\n\t\tlet resp = await fetch('./output.json');\n\t\tconsole.log('test');\n\t\ttry {\n\t\t\tthis.data = await resp.json();\n\t\t} catch(e) {\n\t\t\tconsole.log('wtf');\n\t\t\tconsole.error(e);\n\t\t}\n\t},\n\tcomputed: {\n\t\tresults() {\n\t\t\tif(this.search.length &lt; 3 || !this.data) return;\n\t\t\treturn this.data.filter(d =&gt; {\n\t\t\t\treturn d.path.indexOf(this.search) &gt;= 0;\n\t\t\t});\n\t\t},\n\t\ttotal() {\n\t\t\tif(!this.results || this.results.length === 0) return 0;\n\t\t\treturn this.results.reduce((prev,curr) =&gt; {\n\t\t\t\treturn prev + curr.views;\n\t\t\t}, 0);\n\t\t}\n\t}\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Which basically has a form field on top and a table of results:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/10/a1.jpg\" alt=\"Table of results\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>64K page views on my vue content is pretty nice. I can also search by year since my pages follow a date based path system:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/10/a2.jpg\" alt=\"Using /2020 as the path\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Not bad for a year that is totally insane and hellish, right?</p>\n<p>And that's it. Again, you can grab the code at the <a href=\"https://github.com/cfjedimaster/netlify-analytics-api\">repo</a> if you wish and if folks have some ideas for improvements, I'm all ears. For now my plan is to update my cache every now and then, take a look, and carry on writing blog posts a few people read. :)</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@mrthetrain?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Joshua Hoehne</a> on <a href=\"https://unsplash.com/s/photos/cache?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "javascript"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Vue Quick Shot - Warn Before Leaving a Form",
		"date":"Wed Oct 14 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/10/15/vue-quick-shot-warn-before-leaving-a-form",
		"content":"<p>Welcome to another <a href=\"https://www.raymondcamden.com/tags/vue+quick+shot/\">Vue Quick Shot</a> - my series of posts of quick (kinda) solutions for common web development issues with Vue.js. Today's Quick Shot is an interesting one. First off, I'm not entirely sure what I'm sharing makes sense. I always encourage folks to leave comments with their suggestions but even more so for today's post - if what I'm sharing is problematic, I really want to know.</p>\n<p>The tip today is how to warn a user before they leave a form that hasn't been submitted. So imagine a form where a user has entered some data, but then they get distracted.</p>\n<p style=\"text-align: center\">\n<img data-src=\"https://static.raymondcamden.com/images/2020/10/cat1.jpg\" alt=\"Real picture of me being distrated\" class=\"lazyload imgborder imgcenter\">\n<i>Real picture of Raymond being distracted.</i>\n</p>\n<p>Instead of submitting the form, they instead hit some other link on your site, leaving the form without realizing that they forgot to finish what they had started. So how can we handle this?</p>\n<p>Modern browsers support an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload\">onbeforeunload</a> event, which as you can imagine is fired before the current page is unloaded, either via navigation or reload. According to MDN, your handler should look as follows:</p>\n<pre><code class=\"language-js\">window.addEventListener('beforeunload', function (e) {\n  // Cancel the event\n  e.preventDefault(); // If you prevent default behavior in Mozilla Firefox prompt will always be shown\n  // Chrome requires returnValue to be set\n  e.returnValue = '';\n});\n</code></pre>\n<p>As you can see, you prevent the default behavior as well as set a <code>returnValue</code> property for just Chrome. In theory, <code>returnValue</code> lets you specify a message to show to the user, but since this can be abused badly, many browsers will ignore the value set here and just use a default. But the existence of the value is enough to trigger what you want - prompting before the user leaves. Just to be clear, you can't stop the user (which is a good thing), but you get to throw up a prompt to at least let them know.</p>\n<p>While this seems simple enough (kinda), now we have to figure out another problem. When do we use this? We need a way to determine when a form is &quot;dirty&quot; and has edited values. Here's what I figured out.</p>\n<p>First, I began with a form:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;form&gt;\n    &lt;p&gt;\n    &lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt;\n    &lt;input type=&quot;text&quot; id=&quot;name&quot; v-model=&quot;name&quot;&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n    &lt;label for=&quot;comments&quot;&gt;Comments&lt;/label&gt;\n    &lt;textarea id=&quot;comments&quot; v-model=&quot;comments&quot;&gt;&lt;/textarea&gt;\n    &lt;/p&gt;\n    \n    &lt;p&gt;\n      &lt;input type=&quot;submit&quot;&gt;\n    &lt;/p&gt;\n  &lt;/form&gt;\n  \n  &lt;p&gt;\n    &lt;a href=&quot;https://www.starwars.com&quot;&gt;StarWars.com&lt;/a&gt;\n  &lt;/p&gt;\n  \n&lt;/div&gt;\n</code></pre>\n<p>The form consists of two fields, a submit button, and then I include a link as a way for a user to skip out of submitting the form. Now let's look at the code:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst app = new Vue({\n  el:'#app',\n  data:{\n    name:'',\n    comments:'',\n    handler:null\n  },\n  created() {\n    this.$watch(function() { return this.name + this.comments }, function(newVal,oldVal) {\n      //do we need to add?\n      if(oldVal === '' &amp;&amp; newVal !== '') {\n        this.handler =  function (e) {\n          // Cancel the event\n          e.preventDefault(); \n          // Chrome requires returnValue to be set\n          e.returnValue = '';\n        };\n        window.addEventListener('beforeunload',this.handler);\n        console.log('add watcher'); \n      } else if(newVal === '' &amp;&amp; oldVal !== '') {\n        window.removeEventListener('beforeunload',this.handler);\n        this.handler = null;\n        console.log('remove watcher');\n      }\n    });\n  }\n})\n</code></pre>\n<p>In my <code>created</code> function, I use <code>$watch</code> instead of <code>watchers</code> because I want to define my own function for recognizing a change. In my case, I create a string version of all the form fields and append them together. If you change anything in any field, it will fire off the watcher value.</p>\n<p>Inside the watcher handler, I then have to handle two cases:</p>\n<ul>\n<li>Our form did not have content, and now it does.</li>\n<li>Our form had content, and now it doesn't.</li>\n</ul>\n<p>The first part of the <code>if</code> block handlers going from no content to some content. I create the handler in the <code>this</code> scope so I can use it later. Later is the <code>else</code> block where I remove the handler.</p>\n<p>Now technically, a form could <em>default</em> to having values and you may edit it to be blank. In that case you could determine an initial value on load and compare the new values against that.</p>\n<p>There's one last aspect we have to handle. When you submit the form, the <code>beforeunload</code> event is going to fire. To handle that, can we listen for the submit button click event. First, we'll add a handler to the HTML:</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;submit&quot; @click=&quot;removeHandler&quot;&gt;\n</code></pre>\n<p>And then our code:</p>\n<pre><code class=\"language-js\">methods:{\n\tremoveHandler() {\n\t\tif(this.handler) window.removeEventListener('beforeunload',this.handler);\n\t\treturn true;\n\t}\n}\n</code></pre>\n<p>Basically - if we setup the handler, remove it. Now, in theory, if you edit the form and try to leave via the link, you'll get a prompt:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/10/cat2.jpg\" alt=\"Prompt before leaving web page\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This is certainly not a perfect solutio, but it may help prevent a user from accidentally losing changes. If you've done this better (most likely!), please share your solution below! Here's a CodePen with the entire solution.</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"VwjeqPp\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Warn on Page Leave\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/VwjeqPp\">\n  Warn on Page Leave</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Review: Learning Progressive Web Apps by John Wargo",
		"date":"Tue Oct 20 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/10/21/review-learning-progressive-web-apps-by-john-wargo",
		"content":"<iframe style=\"width:120px;height:240px;margin-right: 10px; margin-bottom:10px;float:left\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" src=\"//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=tf_til&ad_type=product_link&tracking_id=raymondcamd06-20&marketplace=amazon&region=US&placement=0136484220&asins=0136484220&linkId=29eff65342dc4695c0d2a68faa15ae91&show_border=true&link_opens_in_new_window=true&price_color=333333&title_color=0066c0&bg_color=ffffff\"></iframe> \n<p>\nNormally a book review goes like this. I get the book. I read it. I write up a summary of my thoughts, grab the Amazon Affiliate link (I've made almost four dollars this year, folks!), and then post it. Typically all within a month or two. Again, that's the *normal* process. This year has been... somewhat far removed from normal which I'm going to use for my excuse when I try to explain why a book I read near the end of last year and was released in March is just now getting up on my blog in late October. \n</p>\n<p>Today I'd like to introduce you both to &quot;Learning Progressive Web Apps&quot; and it's author, <a href=\"https://johnwargo.com/\">John Wargo</a>. I don't remember exactly when I first met John, but it was sometime during the heyday of PhoneGap and Cordova. I absolutely loved being a part of that project and met some really incredibly, really smart, people while building hybrid mobile apps.</p>\n<p>But as was predicted in the very beginning with PhoneGap, the need for solutions like PhoneGap has mostly come to an end. (Mostly, I can spend a lot of time talking about iOS and it's shameful impact on the web.) With the lightspeed improvement in web standards (even on iOS) and the rise of &quot;PWA&quot;, the need for hybrid mobile apps has (again, mostly) passed.</p>\n<p>The web community has been talking about PWAs for about five years now, which means it's mostly spread out from the nerds like us who get paid to explore and build fun demos and hit the developers who actually have to get things done. Right now is a <em>really</em> good time to start looking at PWAs and learning about the technology. While things are still in flux (they always are), PWAs have great support and browsers have really developer tool support as well.</p>\n<p>Wargo's &quot;Learning Progressive Web Apps&quot; does an incredibly good job of introducing you to PWAs and going deep into the technologies, everything from service workers and offline support to background sync, a topic I don't see a lot of people talking about yet.</p>\n<p>He also spends time talking about related but critical tools like Lighthouse. One thing I always worried about when talking about PWAs is that it's important to remember that nearly everything that's found in a typical PWA would be useful in a &quot;non-app&quot; web site. Even if you're just using progressive enhancement to improve a small part of your site, you can find a lot of what's covered in this book very useful as well.</p>\n<p>The book clocks in at 272 pages. Here's the table of contents:</p>\n<ul>\n<li>Introducing Progressive Web Apps</li>\n<li>Web App Manifest Files</li>\n<li>Service Workers</li>\n<li>Resource Caching</li>\n<li>Going the Rest of the Way Offline with Background Sync</li>\n<li>Push Notifications</li>\n<li>Passing Data between Service Workers and Web Applications</li>\n<li>Assessment, Automation, and Deployment (an especially awesome chapter covering Lighthouse and PWABuilder)</li>\n<li>Automating Service Workers with Google Workbox (absolutely recommended, Workbox makes things <em>incredibly</em> easier)</li>\n</ul>\n<p>I definitely recommend picking it up (and ordering via the link above will net me a few more cents in my Amazon fund) and if you do, please drop me a line below in the comments to let me know what you think.</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@the_roaming_platypus?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">timJ</a> on <a href=\"https://unsplash.com/s/photos/progressive?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "pwa"
            
		],
		"categories":[
            
                "development",
            
                "books"
            
		]

	},

	{
		"title": "Selecting Random Posts in Eleventy",
		"date":"Sun Oct 25 2020 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2020/10/26/selecting-random-posts-in-eleventy",
		"content":"<p>This is something that's been kicking around in my head for a few weeks and I finally found some time to build a demo of what I was thinking about. When working with a blog in Eleventy, what if you could direct folks to other blog posts once they've finished reading one? In this post, I'll demonstrate three different ways to link to random(ish) other posts in an Eleventy blog.</p>\n<p>Alright, so let's look at the site before adding in the randomness. My Eleventy blog consists of a subdirectory of posts. This directory contains each blog post. Here's a sample one, alpha.md:</p>\n<pre><code class=\"language-html\">---\nlayout: post\ntitle: Alpha Post\ntags: posts\ndate: 2020-10-01 12:00:00\n---\n\nThis is the Alpha post.\n</code></pre>\n<p>I've got four posts total with each post using similar content. My home page renders the posts, newest to oldest:</p>\n<pre><code class=\"language-html\">---\ntitle: Home Page for Blog\nlayout: layout\n---\n\n&lt;h2&gt;Blog Demo&lt;/h2&gt;\n\n&lt;p&gt;\nThis folder is meant to be used as a basic blog that I will copy to use in &lt;i&gt;other&lt;/i&gt; demos.\n&lt;/p&gt;\n\n&lt;h2&gt;Posts&lt;/h2&gt;\n\n&lt;ul&gt;\n{% for post in collections.posts reversed %}\n  &lt;li&gt;&lt;a href=&quot;{{post.url}}&quot;&gt;{{ post.data.title }}&lt;/a&gt; ({{ post.date | dtFormat }})&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>Not that it's relevant, but my <code>dtFormat</code> filter makes use of Intl support in Node.js. Here's the relevant function in my <code>.eleventy.js</code> file:</p>\n<pre><code class=\"language-js\">const english = new Intl.DateTimeFormat('en');\n\neleventyConfig.addFilter(&quot;dtFormat&quot;, function(date) {\n\treturn english.format(date);\n});\n</code></pre>\n<p>That could be a lot fancier, but I love how it nice and simple. Now, let's look at the <code>post</code> layout:</p>\n<pre><code class=\"language-html\">---\nlayout: layout\n---\n\n&lt;h2&gt;{{ title }}&lt;/h2&gt;\n&lt;p&gt;&lt;i&gt;Published {{ date | dtFormat }}&lt;/i&gt;&lt;/p&gt;\n\n{{ content }}\n\n&lt;p&gt;\n&lt;hr/&gt;\n&lt;/p&gt;\n\n{% assign randomPost = collections.posts | getRandom %}\n&lt;p&gt;\nYou may also enjoy: &lt;a href=&quot;{{randomPost.url}}&quot;&gt;{{ randomPost.data.title }}&lt;/a&gt;\n&lt;/p&gt;\n\n</code></pre>\n<p>The top half of the post just renders the title, date, and content of the post. The bottom is where I include a link to another random post. Let's look at that filter:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter(&quot;getRandom&quot;, function(items) {\n\tlet selected = items[Math.floor(Math.random() * items.length)];\n\treturn selected;\n});\n</code></pre>\n<p>Nice and simple. It could be even shorter, I don't need to have two lines, but I kept it like that as I knew I was going to build better versions. Here's an example of how this renders:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/10/r1.jpg\" alt=\"Blog post with random link at the bottom\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Cool! Except that it's entirely possible that the random post selected would be the same as the current one. Especially while the blog is just starting and only has a few entries. So I then created a new filter, <code>getRandom2</code>. This one expects the current page as an argument. Here's how I called it in the template:</p>\n<pre><code class=\"language-html\">{% assign randomPost = collections.posts | getRandom2: page %}\n&lt;p&gt;\nYou may also enjoy (avoid same url): &lt;a href=&quot;{{randomPost.url}}&quot;&gt;{{ randomPost.data.title }}&lt;/a&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And here's the filter:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter(&quot;getRandom2&quot;, function(items,avoid) {\n\t/*\n\tthis filter assumes items are pages\n\twe need to loop until we don't pick avoid, \n\t*/\n\tif(!items.length || items.length &lt; 2) return;\n\t\n\tlet selected = items[Math.floor(Math.random() * items.length)];\n\twhile(selected.url === avoid.url) {\n\t\tselected = items[Math.floor(Math.random() * items.length)];\n\t}\n\treturn selected;\n});\n</code></pre>\n<p>First, I ensure that I have at least two or more items. If I have one, or zero (which doesn't make sense as I'm calling it from a blog post, but whatever), then I return nothing. To get my random post that isn't my current post, I select a random one and loop until it's url does not match the current page's url. A while loop may not be best here. I could have made a new array with the current item filtered out and then selected randomly from there. As always - multiple ways to skin the cat.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/10/r2.jpg\" alt=\"Skin the cat?!?!?\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I was going to wrap it up here, but then I thought of yet another version. While random selections are fine, it would be cool to perhaps select a random post in the same category. My sample post above didn't have categories, so for each post I added one:</p>\n<pre><code class=\"language-html\">---\nlayout: post\ntitle: Alpha Post\ntags: posts\ndate: 2020-10-01 12:00:00\ncategories: sports\n---\n</code></pre>\n<p>My sample blog has four posts. For three of them I used a value of <code>sports</code> and the last one used <code>music</code>. Now I want logic that follows this logic:</p>\n<ul>\n<li>If my category has 2 or more items, select one from that list and still bypass the current post.</li>\n<li>If I'm a category of one, select a random from all the rest, again ignoring the current post.</li>\n</ul>\n<p>I added yet another link to my template (which you would't do on a real site, you would just use one):</p>\n<pre><code class=\"language-html\">{% assign randomPost = collections.posts | getRandom3: page, categories %}\n&lt;p&gt;\nYou may also enjoy (try same category, not same url): &lt;a href=&quot;{{randomPost.url}}&quot;&gt;{{ randomPost.data.title }}&lt;/a&gt;\n&lt;/p&gt;\n\n</code></pre>\n<p>Note I'm now passing two arguments to a filter - both the current page as well as the current categories value. A quick note - I'm using the plural &quot;categories&quot;, but for this demo I'm assuming only one category per post. So here's the filter:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter(&quot;getRandom3&quot;, function(items,avoid,category) {\n\t/*\n\tthis filter tries to match to categories\n\t*/\n\tif(!items.length || items.length &lt; 2) return;\n\n\tlet myItems = items.filter(i =&gt; {\n\t\treturn (i.data.categories === category) &amp;&amp; (i.url !== avoid.url);\n\t});\n\n\tif(myItems.length === 0) {\n\t\tmyItems = items.filter(i =&gt; {\n\t\t\treturn i.url !== avoid.url;\n\t\t});\n\t}\n\n\tif(myItems.length === 0) return;\n\treturn myItems[Math.floor(Math.random() * myItems.length)];\n});\n</code></pre>\n<p>The filter begins by creating a new list of posts that filters out posts that don't match the category or have the same URL. If that list is blank, we create another list of posts that don't have the same URL. We do a final check to ensure we've got <em>something</em> left, and if so, return a random item.</p>\n<p>If you find this interesting, you can check out the repository here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/randompost\">https://github.com/cfjedimaster/eleventy-demos/tree/master/randompost</a>. I also created a very simple &quot;blog&quot; project that I used as a seed for this demo. I'm not sure if that's going to be useful but you can find that here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/basicblog\">https://github.com/cfjedimaster/eleventy-demos/tree/master/basicblog</a></p>\n<p>Finally, if you want to see an example of the output - you can do so here: <a href=\"https://eleventyrandom.vercel.app/\">https://eleventyrandom.vercel.app/</a> Obviously it isn't random in the built version, but every time a new post is added and the site is rebuilt, the links would change completely. Let me know what you think by leaving me a comment below!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@brett_jordan?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Brett Jordan</a> on <a href=\"https://unsplash.com/s/photos/random?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Adding Your Netlify Build Status to Your Site",
		"date":"Tue Nov 03 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/11/04/adding-your-netlify-build-status-to-your-site",
		"content":"<p>One of the cool little features Netlify has is the ability to add a &quot;build status&quot; graphic to your site. You can find this by logging on to your Netlify admin, going to your site settings, and scrolling to status badges:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/ntl1.jpg\" alt=\"Netlify instructions for adding a status badge\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And here's a live example, right in my blog post:</p>\n<p><a href=\"https://app.netlify.com/sites/raymondcamden/deploys\"><img src=\"https://api.netlify.com/api/v1/badges/9727f051-52fd-4ae7-9128-a0812610ca69/deploy-status\" alt=\"Netlify Status\"></a></p>\n<p>This works well, but I was curious what it would take to have a more controlled way of displaying the build status. There's an API for returning build information: <a href=\"https://open-api.netlify.com/?_ga=2.224975322.1597224312.1604327763-452716213.1587404636#operation/listSiteDeploys\">listSiteDeploys</a>. You can use this API with either a site ID or site domain, which means I can get a list of my deploys at this location:</p>\n<pre><code>https://api.netlify.com/api/v1/sites/www.raymondcamden.com/deploys\n</code></pre>\n<p>This returns an array of deploy results with the most recent being first. Here's an example of how that result looks (taken from their docs):</p>\n<pre><code class=\"language-js\">[\n  {\n    &quot;id&quot;: &quot;string&quot;,\n    &quot;site_id&quot;: &quot;string&quot;,\n    &quot;user_id&quot;: &quot;string&quot;,\n    &quot;build_id&quot;: &quot;string&quot;,\n    &quot;state&quot;: &quot;string&quot;,\n    &quot;name&quot;: &quot;string&quot;,\n    &quot;url&quot;: &quot;string&quot;,\n    &quot;ssl_url&quot;: &quot;string&quot;,\n    &quot;admin_url&quot;: &quot;string&quot;,\n    &quot;deploy_url&quot;: &quot;string&quot;,\n    &quot;deploy_ssl_url&quot;: &quot;string&quot;,\n    &quot;screenshot_url&quot;: &quot;string&quot;,\n    &quot;review_id&quot;: 0,\n    &quot;draft&quot;: true,\n    &quot;required&quot;: [\n      &quot;string&quot;\n    ],\n    &quot;required_functions&quot;: [\n      &quot;string&quot;\n    ],\n    &quot;error_message&quot;: &quot;string&quot;,\n    &quot;branch&quot;: &quot;string&quot;,\n    &quot;commit_ref&quot;: &quot;string&quot;,\n    &quot;commit_url&quot;: &quot;string&quot;,\n    &quot;skipped&quot;: true,\n    &quot;created_at&quot;: &quot;string&quot;,\n    &quot;updated_at&quot;: &quot;string&quot;,\n    &quot;published_at&quot;: &quot;string&quot;,\n    &quot;title&quot;: &quot;string&quot;,\n    &quot;context&quot;: &quot;string&quot;,\n    &quot;locked&quot;: true,\n    &quot;review_url&quot;: &quot;string&quot;,\n    &quot;site_capabilities&quot;: {\n      &quot;large_media_enabled&quot;: true\n    }\n  }\n]\n</code></pre>\n<p>So to get the current deploy status, you need logic to get the deploys and simply return the first item in the array. I build a serverless function called <code>deploy-status</code> that does this:</p>\n<pre><code class=\"language-js\">const siteId = 'www.raymondcamden.com';\nconst token = process.env.NETLIFY_TOKEN;\nconst fetch = require('node-fetch');\n\nconst handler = async (event) =&gt; {\n  try {\n\n    let endpoint = `https://api.netlify.com/api/v1/sites/${siteId}/deploys`;\n    let result = await fetch(endpoint, {\n      headers: {\n        'Authorization':`Bearer ${token}`\n      }\n    });\n    \n    let data = await result.json();\n    // first entry is last deploy\n    let lastDeploy = data[0];\n    // it contains a lot more info then we need\n    let deploy = {\n      state: lastDeploy.state, \n      created_at: lastDeploy.created_at, \n      updated_at: lastDeploy.updated_at, \n      error_message: lastDeploy.error_message,\n      published_at: lastDeploy.published_at,\n      deploy_time: lastDeploy.deploy_time,\n      screeenshot_url: lastDeploy.screeenshot_url\n    };\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(deploy),\n    }\n  } catch (error) {\n    return { statusCode: 500, body: error.toString() }\n  }\n}\n\nmodule.exports = { handler }\n</code></pre>\n<p>As you can see, I hit the endpoint and pass in my security token (you can get this from your Netlify profile page, I've set it up as an environment variable). I get the latest deploy, and then I made some decisions about what to return. I felt like there was some sensitive information in the status result as well as stuff I just didn't think I needed. Therefore I create a new variable of the &quot;important&quot; stuff from the status and return that. You can see this right now on my site if you go here:</p>\n<p><a href=\"https://www.raymondcamden.com/.netlify/functions/deploy-status\">https://www.raymondcamden.com/.netlify/functions/deploy-status</a></p>\n<p>Here's an example result:</p>\n<pre><code class=\"language-js\">{\n  &quot;state&quot;: &quot;ready&quot;,\n  &quot;created_at&quot;: &quot;2020-11-03T19:31:05.661Z&quot;,\n  &quot;updated_at&quot;: &quot;2020-11-03T19:38:16.374Z&quot;,\n  &quot;error_message&quot;: null,\n  &quot;published_at&quot;: &quot;2020-11-03T19:38:13.380Z&quot;,\n  &quot;deploy_time&quot;: 425\n}\n</code></pre>\n<p>Cool! So at this point you can do just about anything. For me, I decided to add information about my build status to my <a href=\"/stats\">stats</a> page. I added two new fields to the data I display. First is the build status. If the result of the call is <code>ready</code>, then it means <code>published</code>. If my build is published, then I render the <code>published_at</code> result. You can get the complete source of my stats page (along with the rest of the site) on my <a href=\"https://github.com/cfjedimaster/raymondcamden2020\">GitHub</a> repo for the site, but here's the simple Vue.js code I'm using in my <code>create</code> method:</p>\n<pre><code class=\"language-js\">// new work to show build status\nlet buildReq = await fetch('/.netlify/functions/deploy-status');\nlet buildData = await buildReq.json();\nif(buildData.state === 'ready') {\n\tthis.buildStatus = 'Published';\n\tthis.buildTime = buildData.published_at;\n\tthis.buildPublished = true;\n} else this.buildStatus = buildData.state;\n</code></pre>\n<p>As I said, you can see this on my <a href=\"/stats\">stats</a> page if you're curious. I hope this little example is useful. Most of my Netlify API posts relate to analytics which are <em>not</em> officially supported, but this time everything I've shown is safe to use. Enjoy!</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "Adding a Warning for Old Posts to Your Jamstack Site",
		"date":"Sun Nov 08 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/11/09/adding-a-warning-for-old-posts-to-your-jamstack-site",
		"content":"<p>While doing some important research this past weekend (yes, it was research), I ran into something interesting on a Forbes article:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/forbes.jpg\" alt=\"Forbes article with a header saying the post is older than two years.\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Look at that warning on the bottom. This is an incredibly useful warning for readers to let them know the content may be out of date. And while the topic here was a video game, you can imagine this being even more useful on a technical blog. I thought this was such a good idea I went ahead and implemented it here:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/old.jpg\" alt=\"A picture demonstrating a post saying that it is more than two years old.\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>So how did I do it? I'm using <a href=\"https://www.11ty.dev/\">Eleventy</a> for my Jamstack framework and <a href=\"https://shopify.github.io/liquid/\">Liquid</a> for my template language, but this could be implemented anywhere.</p>\n<p>First, I needed to figure out what would be considered &quot;old&quot;. I decided to follow Forbes' lead here and use two years as a delineation. In theory then my code would be something along the lines of this pseudo-code:</p>\n<pre><code>if post's date more than 365*2 days ago\n   add warning\nend if\n</code></pre>\n<p>Liquid doesn't have a &quot;age in days&quot; function built in. This <a href=\"https://stackoverflow.com/questions/37340705/shopify-liquid-find-number-of-days-between-two-dates\">StackOverflow</a> post demonstrates how to do it in &quot;in the template&quot;, but I thought a filter would be a bit simpler. Here's the template code I used:</p>\n<pre><code class=\"language-html\">{% assign age = date | ageInDays %}\n{% assign twoyears = 365 | times: 2 %}\n{% if age &gt; twoyears %}&lt;p class=&quot;oldPost&quot;&gt;This post is more than 2 years old.&lt;/p&gt;{% endif %}\n</code></pre>\n<p>I begin by getting the &quot;age&quot; of the post. This is done by passing in the <code>date</code> value which is driven by the post. The result is how many days old the post is. I then create a variable for the number of days in two years. Yes, I could have simply used 730, but I like having it spelled out like that. Finally, I do a simple condition.</p>\n<p>Here's my filter:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter('ageInDays', d =&gt; {\n\tlet date = new Date(d);\n\tlet now = new Date();\n\tlet diff = now.getTime() - date.getTime();\n\tlet day_diff = Math.floor(diff / (1000 * 3600 * 24)); \n\treturn day_diff;\n});\n</code></pre>\n<p>This is pretty typical JavaScript date math. I didn't bother with a library like Moment.js nor do I check to see if a post is in the future. I know my content and I know I don't do that (i.e., write posts for future publication). If you implement this in your site though you may want to take that into consideration. Also, I use <code>Math.floor</code> and I could see people using <code>round</code> instead. Since I know I'm doing a check for two years, I wasn't too concerned.</p>\n<p>And that's it. Now, there is one more issue to consider. This condition is only executed when the site is built. That means if I don't run a site build every day, it's possible some articles will &quot;age out&quot; and not be properly marked. This is a common thing to consider in the Jamstack. Given that content is only as fresh as it's build time, you may need to consider automating your build process to a certain schedule. As with most things in development, &quot;it depends.&quot; For me, I know I try to post once or twice a week, so I know the number of items not properly marked will get taken care of fairly shortly.</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@aussieactive?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">AussieActive</a> on <a href=\"https://unsplash.com/s/photos/ancient-egypt?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "The Jamstack Book - Early Access Release",
		"date":"Wed Nov 11 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/11/12/the-jamstack-book-early-access-release",
		"content":"<p>I've already mentioned this on Twitter and LinkedIn, but this week the Manning Early Access Program (MEAP) version of the new book I'm writing with <a href=\"https://remotesynthesis.com/\">Brian Rinaldi</a> has gone live - The Jamstack Book.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/jamstackbook.png\" alt=\"The Jamstack book cover\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This book is a <em>much</em> updated version of our earlier book on static site generators. It covers everything from why you would consider Jamstack to when you would not. It shows you multiple different examples of static site generators, from simple blogs to ecommerce sites, and goes into how you move to production and integrate APIs and serverless.</p>\n<p>Right now it's in &quot;early access&quot; which means you can buy it now and get updates as the book is updated. There are ten planned chapters with four released now, and I know we've got two more coming soon. Here's the table of contents, subject to change of course:</p>\n<ul>\n<li>Chapter 1 - Why JamStack?</li>\n<li>Chapter 2 - Building a Basic Jamstack Site</li>\n<li>Chapter 3 - Building a Blog</li>\n<li>Chapter 4 - Building a Documentation Site</li>\n<li>Chapter 5 - Building an Ecommerce Site with Gatsby</li>\n<li>Chapter 6 - Deployment</li>\n<li>Chapter 7 - Adding Dynamic Elements</li>\n<li>Chapter 8 - Working with Serverless</li>\n<li>Chapter 9 - Adding a CMS</li>\n<li>Chapter 10 - Migrating to the Jamstack</li>\n</ul>\n<p>You can order the book right now at <a href=\"https://www.manning.com/books/the-jamstack-book\">https://www.manning.com/books/the-jamstack-book</a></p>\n<p>But wait! If you use the super-secret hidden code below, you get it for 50% off the current price.</p>\n<p>Not yet - keep going down...</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/cat0.jpg\" alt=\"Cat\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Nope, more to go...</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/cat1.jpg\" alt=\"More Cat\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Almost there, honest!</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/cat2.jpg\" alt=\"Even More Cat\" class=\"lazyload imgborder imgcenter\">\n</p>\n<h2>Here it is: mlcamden2</h2>\n<p>Enjoy, and please let me know what you think!</p>\n<p>Photo Credits: <span>Photo by <a href=\"https://unsplash.com/@jdk4lyfe?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jeanie de Klerk</a> on <a href=\"https://unsplash.com/s/photos/cats?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span> / <span>Photo by <a href=\"https://unsplash.com/@alvannee?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Alvan Nee</a> on <a href=\"https://unsplash.com/s/photos/cats?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span> / <span>Photo by <a href=\"https://unsplash.com/@whatisdelirium?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Nadi Whatisdelirium</a> on <a href=\"https://unsplash.com/s/photos/cats?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Vue Quick Shot - Preventing Multiple Form Submissions",
		"date":"Mon Nov 16 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/11/17/vue-quick-shot-preventing-multiple-form-submissions",
		"content":"<p>Good morning! Before I begin, a quick note. I was about to write this post yesterday when I discovered that it was actually very close to another one I wrote a few months back, which was my very first <a href=\"https://www.raymondcamden.com/tags/vue+quick+shot\">Vue Quick Shot</a> - <a href=\"https://www.raymondcamden.com/2020/03/02/vue-quick-shot-disabling-a-submit-button-while-waiting-for-an-ajax-call\">&quot;Vue Quick Shot - Disabling a Submit Button While Waiting for an Ajax Call&quot;</a>.</p>\n<p>In that post, I describe how to modify a form that performs a network call to an API such that you can't submit the request until the first request is done. Today's post is very similar. I was inspired by a post earlier this week on the topic, <a href=\"https://www.bram.us/2020/11/04/preventing-double-form-submissions/\">&quot;HTML Forms: How (and Why) to Prevent Double Form Submissions&quot;</a>.</p>\n<p>In today's post, the difference is rather slight. Instead of a form used to collect data before making an Ajax call, it's going to be a &quot;regular&quot; form that just posts to an action, leaving the current page completely. The solution is incredibly similar, but as it's my blog I figure I'm allowed to do that. ;)</p>\n<p>I also want to point out that if this is the <em>only</em> thing you're doing on a page, Vue's going to be overkill. Just use vanilla JS instead (and see my note at the end). But if you're already using Vue,perhaps for some complex client-side validation, then the following tip will help.</p>\n<p>I started off building a <a href=\"https://pipedream.com/@raymondcamden/slow-html-form-test-p_LQCq6z/edit\">Pipedream workflow</a> that merely outputs HTML after a four second wait. This You can test this yourself if you view it yourself: <a href=\"https://enz7ceue7sb4c7j.m.pipedream.net\">https://enz7ceue7sb4c7j.m.pipedream.net</a>. I'm not doing any form validation or handling, I'm just waiting four seconds and responding.</p>\n<p>I then built a simple form:</p>\n<pre><code class=\"language-html\">&lt;form action=&quot;https://enz7ceue7sb4c7j.m.pipedream.net/&quot; method=&quot;post&quot;&gt;\n  &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;\n  &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot;&gt;\n  &lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n</code></pre>\n<p>And then I submitting the form, clicking rapidly to send multiple requests. Pipedream records executions of workflows, and I could see multiple firing at once:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/pd1.png\" alt=\"List of multiple executions\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>So let's fix it! Again, I want to stress that if this is the only thing you're doing on a page, Vue is going to be overkill. First, I modified the HTML a bit:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  \n  &lt;form action=&quot;https://enz7ceue7sb4c7j.m.pipedream.net/&quot; method=&quot;post&quot; @submit=&quot;setSubmitting&quot;&gt;\n    &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;\n    &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot;&gt;\n    &lt;input type=&quot;submit&quot; :disabled=&quot;submitting&quot;&gt;\n  &lt;/form&gt;\n  \n&lt;/div&gt;\n</code></pre>\n<p>I've got a <code>submit</code> handler on the form and my submit button has a <code>disabled</code> property tied to a variable. And then here's the simple Vue.js code:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app',\n  data:{\n    submitting:false\n  },\n  methods: {\n    setSubmitting() { \n      this.submitting = true; \n    }\n  }\n})\n</code></pre>\n<p>Yeah, pretty trivial. But effective. Test it out here:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"html,result\" data-user=\"cfjedimaster\" data-slug-hash=\"QWEoBpX\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Block Multiple Submission\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/QWEoBpX\">\n  Block Multiple Submission</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building a Web App Powered by Google Forms and Sheets",
		"date":"Thu Nov 19 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/11/20/building-a-web-app-powered-by-google-forms-and-sheets",
		"content":"<p>This past week I've been working on a project that had an interesting requirement. We needed a way for the public to submit information and then we needed to display that information, once curated, in a web application. This is a fairly typical web application and something I've been doing for nearly twenty years now. But what we were curious about was whether or not this could be done without using any kind of server-side processing. We ended up going a different way for the project, but not before I had built out a fully working process using Google Forms and Sheets. How did it work?</p>\n<p>I began by building a <a href=\"https://forms.google.com\">Google Form</a>. I've used their form builder before and I knew it &quot;just worked&quot;, but I got to say I was blown away by how incredibly easy it was to use. It's got many different options for how to build your form, but what impressed me the most was how it intelligently parsed your questions. For an example, if you asked a question that seemed like it would need a yes or no answer, Google would default the type to a multiple choice and suggest both Yes and No and answers. If you picked Yes to add it as an option, it would then present No as the next suggestion. Time and time again it would guess right based on my questions which made working with it easy.</p>\n<p>Google lets you direct form answers to a Google Sheet. And here's where things got cool. Your form answers can be put in a sheet that is modified to have additional columns. This is how we did our curation. Since I knew I was going to be driving a web application with the data, I didn't want spammers to attack the form. By adding a simple &quot;Approved&quot; column to the sheet, I was able to write my code such that only approved rows of data would be rendered. It would still be possible for a person to discover the original data and see spam, but only if they went looking for it.</p>\n<p>Let's check out a demo of this in action. First, I built a form:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/forma1.jpg\" alt=\"Three question form\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>My form has three questions, all required. Obviously you can have more, have optional questions, and so forth. You can view this form here: <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfYL868eNC-iWLVI50EvsPHtIVwfCIReMrBkbkZGiL_xd81sA/viewform\">https://docs.google.com/forms/d/e/1FAIpQLSfYL868eNC-iWLVI50EvsPHtIVwfCIReMrBkbkZGiL_xd81sA/viewform</a></p>\n<p>I set up the form to save to a Google Sheet (that isn't the default), and then once in the sheet, I added a new column, Approved. I set it to be a checkbox so it was quick to use:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/form2.jpg\" alt=\"Spreedsheet\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Notice that Google has also added a timestamp. I don't need that but it's handy information. Now for the fun part. My sheet is only editable by me, but the public has the ability to store data in it via the form. But only I can edit the additional columns.</p>\n<p>I then published my sheet to the web. As I said above, this is where spam can come into play, but as I said, it's only going to be visible by curious web developers who look at my code and open up the sheet directly. You can see this yourself here: <a href=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vQLVvd7h1zohI2GTCI4GPEVNEn_9t9qqtW-YJK4FKgv7p98d1PkLuMyAawF_uoLYulyzcqmJ301BDlF/pubhtml\">https://docs.google.com/spreadsheets/d/e/2PACX-1vQLVvd7h1zohI2GTCI4GPEVNEn_9t9qqtW-YJK4FKgv7p98d1PkLuMyAawF_uoLYulyzcqmJ301BDlF/pubhtml</a>.</p>\n<p>So how do I get this into a web app? You can modify the URL to output both CSV and JSON. I'm going to use CSV since there is a great library for it, <a href=\"https://www.papaparse.com/\">Papa Pare</a>. To get the CSV output, you change the URL to this: <a href=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vQLVvd7h1zohI2GTCI4GPEVNEn_9t9qqtW-YJK4FKgv7p98d1PkLuMyAawF_uoLYulyzcqmJ301BDlF/pub?output=csv\">https://docs.google.com/spreadsheets/d/e/2PACX-1vQLVvd7h1zohI2GTCI4GPEVNEn_9t9qqtW-YJK4FKgv7p98d1PkLuMyAawF_uoLYulyzcqmJ301BDlF/pub?output=csv</a> If you open that URL your browser should download the raw CSV.</p>\n<p><strong>Edit:</strong> Note that enabling remote access takes one step. When you publish to the web, it defaults to web. If you switch to CSV, you actually get the link shared above, but it does <em>not</em> work for anonymous requests, the user has to sign in. I also needed to get a shareable link, viewer only. The link did not need to be used and the URL itself isn't important. I shared the document that way too, opened it at least once, and then went back to to test my CSV link. At that point it worked. Long story short, you need to do both, and confirm your link works in an incognito browser before you try to use it in JavaScript.</p>\n<p>So how do I use it in a web app?</p>\n<p>I began by building a simple Vue.js application. I didn't have to use Vue but I had to use Vue, know what I mean? I started off with a simple layout:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Name&lt;/th&gt;\n        &lt;th&gt;Gender&lt;/th&gt;\n        &lt;th&gt;Age&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n\n      &lt;tr v-for=&quot;cat in cats&quot;&gt;\n        &lt;td&gt;{{cat.name}}&lt;/td&gt;\n        &lt;td&gt;{{cat.gender}}&lt;/td&gt;\n        &lt;td&gt;{{cat.age}}&lt;/td&gt;\n      &lt;/tr&gt;\n    \n\t&lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;div v-if=&quot;loadingCats&quot;&gt;Loading cats - please stand by...&lt;/div&gt;\n  &lt;div v-else&gt;Add your cat &lt;a :href=&quot;formURL&quot; target=&quot;_new&quot;&gt;here&lt;/a&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>I've got a table to iterate over my awesome cats. Beneath that, I either show a loading message, or provide a link for folks to add their own cats. Now the JavaScript:</p>\n<pre><code class=\"language-js\">Vue.config.productionTip = false;\nVue.config.devtools = false;\n\nconst formURL = 'https://docs.google.com/forms/d/e/1FAIpQLSfYL868eNC-iWLVI50EvsPHtIVwfCIReMrBkbkZGiL_xd81sA/viewform?usp=sf_link';\n\nconst sheetURL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQLVvd7h1zohI2GTCI4GPEVNEn_9t9qqtW-YJK4FKgv7p98d1PkLuMyAawF_uoLYulyzcqmJ301BDlF/pub?output=csv';\n\nconst app = new Vue({\n  el:'#app',\n  data:{\n    cats:[],\n    loadingCats:true,\n\tformURL:formURL\n  },\n  created() {\n    \n   Papa.parse(sheetURL, {\n       download:true,\n       header:true,\n       skipEmptyLines:'greedy',\n       transformHeader: name =&gt; {\n         switch(name) {\n           case 'Approved': { return 'approved'; break; }\n           case 'How old is your cat?': { return 'age'; break; }\n           case 'What is your cat\\'s name?': { return 'name'; break; }\n           case 'What is your cat\\'s gender?': { return 'gender'; break; }\n         }\n       },\n       complete:res =&gt; {\n         this.cats = res.data.filter(f =&gt; {\n           return f.approved === 'TRUE';\n         });\n         this.loadingCats = false;\n       }\n   })\n  }\n})\n</code></pre>\n<p>If you don't use Vue.js, don't worry, lets just focus on the <code>Papa.parse</code> section. I pass it the following options:</p>\n<ul>\n<li>First, the URL of my Google Sheet.</li>\n<li>Next I use the <code>download</code> flag to tell Papa Parse to retrieve the contents.</li>\n<li>The <code>header</code> option means to treat the first row as a header.</li>\n<li>When you use <code>greedy</code>, Papa Parse tries to remove lines from the sheet that are just empty strings. This actually didn't work for me because my &quot;Approved&quot; column set defaults to False all the way through the entire sheet. I fix that later.</li>\n<li>By default, Papa Parse will create an array of objects for each row of data where the properties of each object are based on the headers. Since my headers are short text sentences, I wanted to remap them to nicer shorter values, that's where <code>transformHeader</code> comes in.</li>\n<li>The <code>complete</code> handler does two things for me. First it handles filtering out cats I haven't approved yet, and it also handles removing all the empty rows that are empty <em>except</em> for the FALSE value in Approved.</li>\n</ul>\n<p>And that's it. Now you can load the application and see the table, all driven by user content without any server-side code:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/11/form3.jpg\" alt=\"Table of cats\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can see the complete code below:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"zYBVWLY\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Form + Sheet Demo\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/zYBVWLY\">\n  Form + Sheet Demo</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>Let me know what you think by leaving a comment below, and if you've used something like this before, I'd love to hear how!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@crismiron?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Miron Cristina</a> on <a href=\"https://unsplash.com/s/photos/form-cat?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "JavaScript"
            
		]

	},

	{
		"title": "Adding Google Calendar to Your Jamstack - with Pipedream",
		"date":"Mon Dec 07 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/12/08/adding-google-calendar-to-your-jamstack-with-pipedream",
		"content":"<p>Late last year (remember last year - sigh) I wrote up a post demonstrating how to integrate Google Calendar into your static web site: <a href=\"https://www.raymondcamden.com/2019/11/18/adding-google-calendar-to-your-jamstack\">&quot;Adding Google Calendar to your JAMStack&quot;</a>. In that article, I describe how I used Google's Node libraries to read my event data. While it was mostly painless, authentication was a bit difficult to figure out. Also, I ended the post with this warning:</p>\n<blockquote>\nSo, this solution isn't perfect. If you add, edit, or delete an event, it won't be reflected on the site. However, you could simply do daily builds of your site via a CRON job let it be updated at that point. Or do a manual update if you want.\n</blockquote>\n<p>A few days I was thinking about this usecase and realized I could probably do it a lot easier making use of <a href=\"https://www.pipedream.com\">Pipedream</a>. How so? Don't forget that Nelify lets you create a build hook. This is a unique URL that when hit with a POST request will trigger a new build. In theory, all I have to do is create a Pipedream workflow that's fired on new events. How is that done?</p>\n<p>After logging into Pipedream and going to my &quot;Source&quot; panel, I created a new source and selected Google Calendar. Pipedream lets you select from a few different types of events (to be clear, I mean programatic events, not calendar events, sorry for the confusion!) including one named, &quot;New Or Updated Event (Instant)&quot;. As the name says, this will run instantly based on <em>any</em> particular edit done to a calendar. I authenticated with Google via Pipedream, selected my calendar (a custom one I made for this blog post), and then took the defaults for the rest. I did specify a name for the source though so it would be easier to find later. (I do a lot of testing!)</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/12/cal2-1.jpg\" alt=\"Screen shot of Event Source UI\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Once this was created, I then made a few edits to my calendar. As I did, I was able to see, instantly, new events. Note that in the screenshot below, the event source code is smart enough to use the calendar event title as a label. That's cool!</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/12/gcal2-2.jpg\" alt=\"Screen shot of Event Source events\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Now that I have an event source that fires when I edit a calendar, the next step was to use it in a workflow. I created a new Pipedream workflow, used my event source as the source. Do <em>not</em> forget that there is a boolean trigger for event sources that &quot;enables&quot; it. Your event source is running, but in the context of the workflow, you must enable it there. This is different from the &quot;active&quot; toggle of the workflow itself and every time I use an event source like this, I forgot to hit the toggle:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/12/gcal2-3.jpg\" alt=\"Enable the source in the workflow\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Then I had add a second step. Remember that the idea is to trigger a build. While this is pretty simple code in Node, Pipedream actually has a built in action for performing HTTP requests. I added it, totally did <strong>not</strong> forget to change them ethod to POST, and pasted in the URL I got from the Netlify site settings so I can trigger a build.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/12/gcal2-4.jpg\" alt=\"Workflow\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>This just left testing. I created an event in Google Calendar, which automatically triggered my event source, which automatically triggered my Netlify build, which then triggers happiness!</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/12/gcal2-5.jpg\" alt=\"Netlify Builds triggered by calendar events\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Woot! So in theory I could stop there, but then I thought, if Pipedream makes Google Calendar so easy to use, could I use it in my <a href=\"https://www.11ty.dev/\">Eleventy</a> site instead of the Google Node library I had? Turns out - I certainly could.</p>\n<p>I built a new Pipedream workflow with a HTTP trigger. I then added the action, &quot;Google Calendar - Get All Future Events&quot;. Note that there is also a &quot;Get Events&quot; action and that even the &quot;future events&quot; action lets you configure a minimum time, effectively allowing you to get past events too.</p>\n<p>This action requires you to paste in the ID of your calendar which you will need to get from your calendar settings. (The event source has a nice dropdown of your available calendars and I've already aksed if the action can be updated to suppor this as well.) Also, there is a default setting, &quot;Single Events&quot;, which takes recurrring events and &quot;collapses&quot; them into one. For my use case, I did <strong>not</strong> want this behavior so I set it to false.</p>\n<p>The final step was to simply return the data so I could use this workflow as an API. I added a Node step and wrote this code:</p>\n<pre><code class=\"language-js\">$respond({\n  status:200,\n  body:steps.get_all_future_events.$return_value.items\n});\n</code></pre>\n<p>And that was it, literally. In two minutes, I had an end point I could hit to return Google Calendar events in structured JSON. All the auth was handled by Pipedream.</p>\n<p>I went to my Eleventy site and created a new file in my <code>_data</code> folder to use this API:</p>\n<pre><code class=\"language-js\">const PD_EVENTS = 'https://enbfnzb6d0dzhfd.m.pipedream.net';\nconst fetch = require('node-fetch');\n\nmodule.exports = async function() {\n\n\treturn new Promise((resolve, reject) =&gt; {\n\n\t\tfetch(PD_EVENTS)\n\t\t.then(res =&gt; res.json())\n\t\t.then(res =&gt; {\n\t\t\t//console.log(res[1]);\n\t\t\tlet events = res.map(e =&gt; fixEvent(e));\n\t\t\tresolve(events);\n\t\t});\n\n\t});\n\n}\n\nfunction fixEvent(e) {\n\tlet event = {};\n\n\tevent.title = e.summary;\n\tif(e.start.date) event.start = e.start.date;\n\tif(e.start.dateTime) event.start = e.start.dateTime;\n\tif(e.end.date) event.end = e.end.date;\n\tif(e.end.dateTime) event.end = e.end.dateTime;\n\tif(e.description) event.description = e.description;\n\tif(e.location) event.location = e.location;\n\n\tif(event.start) event.start = new Date(event.start);\n\tif(event.end) event.end = new Date(event.end);\n\treturn event;\n}\n</code></pre>\n<p>A few things to note here. I could obscure my Pipedream URL by using an evironment variable set by Netlify. I also did some basic data wrangling on the event structure to make it easier to use in my templates. As an example, here's the event's page:</p>\n<pre><code class=\"language-html\">## Upcoming Events\n\nHere's our upcoming events:\n\n&lt;ul&gt;\n{% for event in events %}\n&lt;li&gt;{{ event.title }} at {{ event.start | dtFormat }}\n{% if event.description %}&lt;br/&gt;{{ event.description }}{% endif %}\n{% if event.location %}&lt;br/&gt;Located at {{ event.location }}{% endif %}\n{% endfor %}\n&lt;/ul&gt;\n\n</code></pre>\n<p>I could absolutely display my evevents nicer. Heck, I don't even display the end time for events that have it, but you get the basic idea. You can see this yourself here: <a href=\"https://calendar-eleventy-pd.netlify.app/events/\">https://calendar-eleventy-pd.netlify.app/events/</a>. You can see the source code for this Eleventy site here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/gcal2\">https://github.com/cfjedimaster/eleventy-demos/tree/master/gcal2</a>. If you've got any questions, let me know!</p>\n",
		"tags":[
	        
            "eleventy",
            
            "pipedream"
            
		],
		"categories":[
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Vue Quick Shot - Downloading Data as a File",
		"date":"Mon Dec 14 2020 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/12/15/vue-quick-shot-downloading-data-as-a-file",
		"content":"<p>This isn't necessarily a new trick (and it's one I've covered sometime in the past), but I thought a quick example of how to do it in Vue.js would be helpful. For folks who may not know, HTML has included, for a few years now, a way to force a link to act as a download. This is done via the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\">download</a> attribute of the anchor tag. So for example:</p>\n<pre><code>&lt;a href=&quot;cats.csv&quot; download&gt;Cats in CSV&lt;/a&gt;\n</code></pre>\n<p>You can supply a filename to the <code>download</code> attribute but left blank like that it will use the filename specified in the link. While you can do this with &quot;physical&quot; files, you can also use it with JavaScript data on the client-side. There's multiple web pages explaining how to do this, but the general technique involves:</p>\n<ul>\n<li>Creating an anchor element in JavaScript</li>\n<li>Styling it to be invisible</li>\n<li>Setting the link to a data URI that includes an encoded version of your data</li>\n<li>Adding the element to the DOM</li>\n<li>Firing the click event.</li>\n<li>And then removing the element.</li>\n</ul>\n<p>I found a nice example of this here: <a href=\"https://www.bitdegree.org/learn/javascript-download\">Making JavaScript download files without the server</a>. Let's take this and add it to a simple Vue application.</p>\n<p>First, let's begin with an app that just displays a table of cats. Not a cat on a table...</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/12/black-cat-yawn.jpg\" alt=\"\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>but an HTML table of cats. Here's the code with some static data:</p>\n<pre><code class=\"language-js\">const app = new Vue({\n  el:'#app', \n  data: {\n    cats:[\n      {name:&quot;Alese&quot;, gender:&quot;female&quot;, age: 10},\n      {name:&quot;Sammy&quot;, gender:&quot;male&quot;, age: 12},\n      {name:&quot;Luna&quot;, gender:&quot;female&quot;, age: 8},\n      {name:&quot;Cracker&quot;, gender:&quot;male&quot;, age: 7},\n      {name:&quot;Pig&quot;, gender:&quot;female&quot;, age: 6},\n      ]\n  }\n})\n</code></pre>\n<p>And here's the layout:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Name&lt;/th&gt;\n        &lt;th&gt;Gender&lt;/th&gt;\n        &lt;th&gt;Age&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      \n\t\t&lt;tr v-for=&quot;cat in cats&quot;&gt;\n        &lt;td&gt;{{cat.name}}&lt;/td&gt;\n        &lt;td&gt;{{cat.gender}}&lt;/td&gt;\n        &lt;td&gt;{{cat.age}}&lt;/td&gt;\n      &lt;/tr&gt;\n    \n\t&lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Now let's add a button to let the user download the information:</p>\n<pre><code class=\"language-html\">&lt;p&gt;\n&lt;button @click=&quot;download&quot;&gt;Download&lt;/button&gt;\n&lt;/p&gt;\n</code></pre>\n<p>And then a method to handle it:</p>\n<pre><code class=\"language-js\">download() {\n\t// credit: https://www.bitdegree.org/learn/javascript-download\n\tlet text = JSON.stringify(this.cats);\n\tlet filename = 'cats.json';\n\tlet element = document.createElement('a');\n\telement.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(text));\n\telement.setAttribute('download', filename);\n\n\telement.style.display = 'none';\n\tdocument.body.appendChild(element);\n\n\telement.click();\n\tdocument.body.removeChild(element);     \n}\n</code></pre>\n<p>For the most part this follows the blog post I linked to above with a few small changes. I modified the MIME type to be appropriate for JSON and switched a few var statements to let, because I'm hip like that. This works great and you can test it below:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"bGwqzLO\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Download\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/bGwqzLO\">\n  Vue Download</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>Cool. While this is nice, JSON is only really familiar to us nerds. It's a table of data, and tables just scream Excel, right? I've been enjoying the heck out of <a href=\"https://www.papaparse.com/\">PapaParse</a> lately for <em>parsing</em> CSV, but it also <em>generates</em> CSV as well. I added the library to my CodePen, and then spent about 30 seconds rewriting the code to support CSV:</p>\n<pre><code class=\"language-js\">download() {\n\t// credit: https://www.bitdegree.org/learn/javascript-download\n\tlet filename = 'cats.csv';\n\tlet text = Papa.unparse(this.cats);\n\t\n\tlet element = document.createElement('a');\n\telement.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(text));\n\telement.setAttribute('download', filename);\n\n\telement.style.display = 'none';\n\tdocument.body.appendChild(element);\n\n\telement.click();\n\tdocument.body.removeChild(element); \n\t\n}\n</code></pre>\n<p>The changes were me just making use of the <code>unparse</code> method and then updating the filename and MIME type. That's literally it. Now if you download, and you have Excel or another such program installed, you can open up the file right away.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2020/12/excel1.jpg\" alt=\"Excel in dark mode is so awesome. This is a picture of Excel rendering the cat data.\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can play with this version here:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"oNzZmde\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Download 2\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/oNzZmde\">\n  Vue Download 2</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>Enjoy, and let me know if you've used this technique in your own code by leaving me a comment below!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@aga4ar?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Valentin Vlasov</a> on <a href=\"https://unsplash.com/s/photos/table-cats?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "vuejs",
            
            "vue quick shot"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "2020 Can Kiss My...",
		"date":"Sat Dec 26 2020 06:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2020/12/26/2020-can-kiss-my",
		"content":"<p>Sigh, I can still remember how excited I was when I wrote my year end post <a href=\"https://www.raymondcamden.com/2019/12/31/goodbye-2019-hello-2020\">last year</a>. I also remember being on the treadmill, during my morning exercise and watching CNN. Covid was the topic and it was a &quot;potential&quot; concern. I can remember thinking - news agencies love to be dramatic and this will be off their radar in a week or so.</p>\n<p>Oops.</p>\n<p>All things considered though - there's a lot for me to be happy about. In March, I married a wonderful woman. She makes me happy, supports me, and is just plain incredible. It doesn't hurt that she's also a huge nerd. I'm happy to say our wedding song was the Imperial March. We've not been able to go on a honeymoon yet but we're making plans.</p>\n<p>I've also managed - somehow - to keep all ten of us (my wife has a son with her ex, so with the seven I brought in, we're eight kids and two adults) healthy over the past year. We've been homeschooling four of our kids and while that's been tough, it's at least keeping them safe. Everything else below is - to use a Cajun phrase - <a href=\"https://www.merriam-webster.com/dictionary/lagniappe\">lagniappe</a>.</p>\n<p>So as I do every year, here's a quick review of what I accomplished. This isn't meant to brag, but is my way of taking stock of what I got done.</p>\n<h3>The Blog</h3>\n<p>In February of this year, I <a href=\"https://www.raymondcamden.com/2020/02/27/raymondcamdencom-now-powered-by-eleventy\">migrated</a> my site to <a href=\"https://www.11ty.dev/\">Eleventy</a> and never looked back. I absolutely love Eleventy (see my <a href=\"https://www.raymondcamden.com/tags/eleventy/\">posts</a> on it) and don't see switching. Of course I've gone through a couple of &quot;favorite&quot; Jamstack tools, but something tells me this one will stick. Looking at my <a href=\"https://www.raymondcamden.com/stats\">stats</a>, I managed to write 84 posts this year, a far cry from the hundreds per year I used to do in the past, but with most of my short form stuff being shared on Twitter and with me writing more for external sources (I list these on my <a href=\"https://www.raymondcamden.com/about/\">About</a>) page), I think I had a great number. All I really want is one per week and I absolutely hit that. If you're curious about maintaining a &quot;per week&quot; flow, you can read the <a href=\"https://www.raymondcamden.com/2020/09/30/tracking-posts-by-week-in-eleventy\">post</a> I wrote about tracking that with Eleventy.</p>\n<p>I think I'm still doing good traffic wise. I removed Google Analytics earlier this year to rely on <a href=\"https://www.netlify.com/products/analytics/\">Netlify Analytics</a>. I'm happy I did that, but I do wish Netlify would improve the available toolset a bit. I can't remember the last time it changed - I think it was a date range selector that lets you pick one of three ranges. I'd like to see more done to it, but it's definitely worth it now so I'd still suggest Netlify customers consider it.</p>\n<p>For folks curious, my average traffic rate this year as been over three hundred thousand page views per month. This is pretty much on par with what I've gotten for quite some time now so I'm happy enough with it. Not that I need the site to earn money (Netlify graciously serves my site for free) but I started using <a href=\"https://www.carbonads.net/\">Carbon Ads</a> a few months back and it's... ok. It earns more than AdSense does for me, but still a bit a low I think for what my traffic and readership brings in. I may try to see what I can to improve that next year. Typically though I make the most money writing for other publications, and I like doing that as it exposes me to other audiences.</p>\n<h3>Professional Stuff</h3>\n<p>I work too, sometimes anyway. I've now been at <a href=\"https://here.com\">HERE</a> for about sixteen months. I've really enjoyed getting to know the mapping space more and I work with some great folks. I do think there's going to be a change for me and my job in 2021, but time will tell.</p>\n<p>Despite Corona, I somehow managed to do <a href=\"https://www.raymondcamden.com/speaking/\">24</a> events! I'm <strong>super proud</strong> of that. Virtual presenting is a completely different beast compared to in-person events, and to help, I <a href=\"https://www.raymondcamden.com/2020/03/10/tips-for-giving-remote-presentations\">wrote up</a> some tips on giving remote presentations. Give it a read if you think you'd like to try.</p>\n<p>In terms of my skills, as I said I've definitely learned more about mapping. I feel like my JavaScript skills got a bit sharper this year. Still not quite &quot;Pass the Google tech skill&quot; level, but better. I'll take that. I also started playing with Python a bit. I used this year's <a href=\"https://adventofcode.com/\">Advent of Code</a> as a way to practice. I only got eight days done but I'm <em>really</em> digging Python. I want to make it a focus for next year, along with GraphQL as well.</p>\n<p>Lastly, I released a <a href=\"https://www.amazon.com/gp/product/B08M3J514S/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B08M3J514S&amp;linkCode=as2&amp;tag=raymondcamd06-20&amp;linkId=0cf7abe7a5fc4e3f7d4566b6bdcf5553\">book</a> on Vue.js (to be clear, my part was just three chapters) and I'm working on another book on the Jamstack with my buddy Brian.</p>\n<h3>Media</h3>\n<p>In the past I used to do a separate post on my favorite movies, music, and so forth. I just don't think I've got the energy. This year my wife introduced me to musicals so I've been catching up on that genre. I think my favorite was the\nLes Misérables film with Sacha Cohen. I never quite understood George Constanza non-stop singing &quot;Master of the House&quot; until I heard it myself.</p>\n<p>If I could make one suggestion for a movie to watch from this year, I'd recommend <a href=\"https://www.imdb.com/title/tt10065694/\">Antebellum</a>. I didn't really know about this movie before I started watching it and that just made it more powerful. Don't look it up, just give it a watch.</p>\n<p>TV wise I can only recommend an older show, Gotham. My wife and I are watching it and are almost done with season four. It's incredibly fun to watch and I love Penguin and Riddler.</p>\n<p>Oh, and there's some small TV show called Mandalorian but I figure I don't need to recommend that. ;)</p>\n<p>Music wise my wife has been getting me into more folk and indie folk. This was also the year I really embraced Spotify and it's absolutely worth the cost to pay for an account. In fact, I got rid of Sirius XM in one of our cars and may get rid of it completely. I was an Amazon Music subscriber but felt like they kept removing features instead of adding things to keep me as a customer.</p>\n<p>Book wise it was a mixed bag. I read just over ten books. But honestly - I went to bed most nights exhausted so I'm going to give myself a pass. I'll make two recommendations. <a href=\"https://www.goodreads.com/book/show/52454426-devolution\">Devolution</a> is a great Bigfoot book by the author of World War Z. If you want something unique and fascinating though, read <a href=\"https://www.goodreads.com/book/show/34659272-the-only-harmless-great-thing\">The Only Harmless Grear Thing</a> by Brooke Bolander. You can read it in an hour or two and it's really different.</p>\n<h3>2021!</h3>\n<p>I won't tempt fate and say &quot;2021 can't be any worse&quot;, mostly because I don't believe in fate and as I said in the beginning, I had some incredibly wonderful things happen to me. I am absolutely looking forward to (hopefully) getting on a plane again and interacting with yall in person again.</p>\n<p>I want to thank everyone who reads this blog. Time and attention are valuable resources and I greatly appreciate yours! Have a wonderful New Years and see you in 2021!</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "Uncategorized"
            
		]

	},

	{
		"title": "Building Generic Workflows in Pipedream",
		"date":"Sat Jan 02 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/01/03/building-generic-workflows-in-pipedream",
		"content":"<p>I've been a huge fan of <a href=\"https://pipedream.com\">Pipedream</a> since I first started using it. It's ease of use, flexibility, and just overall approach to rapidly creating workflows has really resonated with me as a developer. One of the more interesting\naspects of Pipedream is that when someone shares a workflow with you, you can copy that workflow to your own account and then modify it for your own use. I was thinking of this over the holiday break and wanted to take a look at how I could build a workflow <em>specifically</em> for sharing with others, i.e. something that doesn't really do anything by itself but would be a good starting point for others. I had some fun with this project and thought I'd share what I discovered.</p>\n<p>Let me begin by describing what I created. I began with a simple idea - fire off a process when the temperature gets too cold. So for example, &quot;if the temperature is below 32 degrees, message me so I know to cover my plants.&quot; I was originally going to just build that as a proof of concept, but I began thinking about how to make this more generic. What if the workflow was defined more abstractly:</p>\n<p>&quot;When the temperature or weather (i.e., storms, rain, etc) meet some condition, then do something.&quot;</p>\n<p>So basically we have two things we can check, the raw numeric temperature or the type of weather. Conditions would be simple. Either we are below, at, or above a target temperature (temperature below 45, or temperature above 90), or there is a match to the weather (the current conditions are rain).</p>\n<p>To create this, I started building an event source. HERE has a <a href=\"https://developer.here.com/documentation/destination-weather/dev_guide/topics/overview.html\">weather API</a> with a free tier and Pipedream supports it natively as source:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd1.png\" alt=\"Picture of HERE Event source\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>After selecting this, you then get prompted to connect it to a HERE developer account. Doing so requires a key (free!) and giving it a name.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd2.png\" alt=\"Entering credential information\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>A note about this process. One cool thing about authentication values for stuff like this is that once you've &quot;connected&quot; once to a service, you can reuse that authentication again. This is where using a nice name will help you out.</p>\n<p>After you've connected, you then need to enter some values for the event. The weather will be retrieved via zip code and will run on a schedule. The default is somewhat overkill for weather so I changed it to once an hour. This impacts how often the event source will run and &quot;emit&quot; the current weather for that zip.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd3.png\" alt=\"The event source now has a zip and a schedule\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Once created, you can immediately start testing. This will ensure that you defined a proper key and it lets you look at the results. Here's how it looks in the event sources UI:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd4.png\" alt=\"View of the configured event source\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Notice the existing event on the left hand side. Clicking this lets you look at the data.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd5.png\" alt=\"An example weather result\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Alright. So now that we have a configured event source, we can create a workflow from it. The event source UI provides a button for that (see the screen shot above, the one before the event result) and if you click it, you'll be dropped into the workflow editing UI.</p>\n<p>I began by adding a Node.js step and named it <code>checkweather</code>. This step needs to use parameters that define what kind of check it will be doing (temperature or conditions), the type of condition (less than, greater than, or equal), and the target value.</p>\n<p>This is where things get interesting. In order for my code to use parameters, I can simply write code that <em>expects</em> it. What I mean is, as soon as I type: <code>let check = params.type</code>, Pipedream recognizes that my code is expecting a parameter named <code>type</code> and it adds it to the UI:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd6.png\" alt=\"Parameter detection in code\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p><a href=\"https://docs.pipedream.com/workflows/steps/params/\">Params</a> in Pipedream workflows can get pretty complex. I clicked on &quot;edit params schema&quot; and started to work on defining my three parameters. The first one, <code>type</code>, needed to be either <code>temperature</code> or <code>weather</code>, and what's cool is that Pipedream let me define that as enum:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd7.png\" alt=\"Defining the type parameter\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Once I did that, the step changed the type input into a drop down, making it even easier to use. My second parameter followed the same format:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd8.png\" alt=\"Defining my condition type\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>My last parameter, value, was just a text field. After setting things up, I then realized I could also add descriptions to my parameters to make them even more clear:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd9.png\" alt=\"Nicely documented parameters\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Overall, that entire process was really well done, and I should point out that while I did all of this with the intent of making it nicer for <em>others</em>, I can see this being super useful for my own workflows as well, or workflows that a team of developers are working on. I guess this falls into the same category as documentation - it can <strong>always</strong> be useful!</p>\n<p>Once I had my parameters done, it was then time to write the code:</p>\n<pre><code class=\"language-js\">async (event, steps, params) =&gt; {\n\tlet check = params.type;\n\tlet condition = params.condition;\n\tlet value = params.value;\n\tconsole.log('check', check, 'condition', condition, 'value', value);\n\n\tif(check === 'temperature') {\n\t\tlet temp = steps.trigger.event.observations.location[0].observation[0].temperature;\n\t\t//convert temp to F\n\t\tlet tempF = Math.floor((temp * 9/5) + 32);\n\t\tvalue = parseInt(value, 10);\n\t\tif(condition === 'less than or equal' &amp;&amp; tempF &gt; value) $end('Temperature not low enough');  \n\t\tif(condition === 'greater than or equal' &amp;&amp; tempF &lt; value) $end('Temperature not high enough');  \n\t\tif(condition === 'equal' &amp;&amp; tempF !== value) $end('Temperature not equal'); \n\t\t// export the temp\n\t\tthis.temperature = tempF;\n\t} else {\n\t\t// assume condition is equal as nothing else makes sense\n\t\tlet weather = steps.trigger.event.observations.location[0].observation[0].skyDescription.toLowerCase();\n\t\t// lowercase value too\n\t\tvalue == value.toLowerCase();\n\t\tif(value !== weather) $end(`Condition ${weather} not equal to ${value}`);\n\t\t// export the weather\n\t\tthis.weather = weather;\n\t}\n}\n</code></pre>\n<p>What's going on here? My step falls into one of two conditions - check the temperature or weather condition. For each, I look at the result from the HERE API and execute the relevant logic. For temperature this requires three possible checks and for condtions just one. Pay special attention to how the logic works. If a condtion fails, I use a built-in Pipedream API, <code>$end</code>, to stop the workflow from continuing.</p>\n<p>And that's literally it. As I said, this workflow was meant to be a base for others, so it only consists of the event source and the logic step that determines if the condition is met. All I had to do now was make it public and share (note how in the UI below, you get a clear warning that you need to make it public):</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd10.png\" alt=\"Share UI for a workflow\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Now comes the fun part. Here's the workflow share URL: <a href=\"https://pipedream.com/@raymondcamden/weather-workflow-p_jmCvN2x\">https://pipedream.com/@raymondcamden/weather-workflow-p_jmCvN2x</a></p>\n<p>If you take this and copy to your account, it does all the right things. I mean, I know I praise Pipedream a lot, but they did this near perfect I think. First, you'll have the event source in your account, but <em>not</em> my key. I'll have to provide my own key and specify a zip code. That means it was totally fine for me to share. And then all I have to do is build on top of it.</p>\n<p>I tested this with a second account. After copying the workflow and adding my key and zip, I configured it for cold weather alerts. I specified it should check the temperature, look for &quot;less than or equal to&quot;, and specified 50 for a value. All I did was enter the values, I didn't have to touch the code.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd11.png\" alt=\"Configured step\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I then added a new step using a Pipedream built in action, &quot;Send Yourself an Email&quot;. Remember, this step will <em>only</em> fire when the temperature is less than or equal to 50. I didn't have to write any code for this, I just supplied the subject and text value which was able to use the result of the previous step:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd12.png\" alt=\"Email configration action\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>To be clear, I could have written a much more descriptive email, but this gets the point across. I could have also done things like send me a SMS message. Here's an example:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/pd13.png\" alt=\"Example Cold Weather alert email\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I hope this made sense, and as always, if it doesn't you can leave me a comment below. To play with the workflow I create, just click this link: <a href=\"https://pipedream.com/@raymondcamden/weather-workflow-p_jmCvN2x\">https://pipedream.com/@raymondcamden/weather-workflow-p_jmCvN2x</a></p>\n<p><span>Photo by <a href=\"https://unsplash.com/@ecasap?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Elaine Casap</a> on <a href=\"https://unsplash.com/s/photos/share?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "pipedream"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Identifying Pictures via SMS with Pipedream, Twilio, and Microsoft Cognitive Services",
		"date":"Wed Jan 06 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/01/07/identifying-pictures-via-sms-with-pipedream-twilio-and-microsoft-cognitive-services",
		"content":"<p>Nearly three and a half years ago I wrote a blog post on using IBM OpenWhisk (sigh, I wish I could still recommend it), <a href=\"https://www.twilio.com/\">Twilio</a> and IBM Watson: <a href=\"https://www.raymondcamden.com/2017/06/29/handling-sms-with-openwhisk-ibm-watson-and-twilio/\">Handling SMS with OpenWhisk, IBM Watson, and Twilio</a>. In the past, I described how I built a serverless function in OpenWhisk that was used as a webhook for Twilio. I'd send a text to a number and Twilio would fire off the request to my function. I looked for an attached picture, uploaded it to IBM Watson's image recognition service, and reported back to the user what was identified in the picture.</p>\n<p>For some reason, that particular blog post (and the <a href=\"https://www.raymondcamden.com/2017/07/07/handling-sms-with-openwhisk-ibm-watson-and-twilio-an-update/\">followup</a>) has been getting an incredible amount of traffic lately on my blog. (If you're curious, they have gotten over thirty thousand pageviews in the past moth.) Looking at those stats, I thought it might be time to revisit the topic and see if I could build it quicker in <a href=\"https://pipedream.com/\">Pipedream</a>. Turns out the answer was yes. In fact, I'd say I had the entire thing rebuil in about thirty minutes of work, and ten of that was me trying to fix a bug that was completely stupid on my part (using GET instead of POST) for my request. So, how did I build it?</p>\n<p>First, I ensured that I had a phone number set up with Twilio. Twilio has an excellent free tier and as part of that, you can create phone numbers that can be used for testing. I'd suggest doing that <em>first</em> (well, if you want to replicate what I did). I already had an account with them, but numbers I had used in the past were deprovisioned at some point. It took all of about two seconds to create a new one.</p>\n<p>With that in place, on Pipedream I created a new Twilio event source. They have one specifically for incoming SMS:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/sms1.jpg\" alt=\"Twilio SMS Event Source\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>In this process you will enter your Twilio keys, and as soon as it's authenticated, the Pipedream UI will be able to fetch your available phone numbers and let you select it. Honestly I was really impressed with how easy that was. Once created, I could test it immediately by sending a text to the number:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/sms2.jpg\" alt=\"Testing SMS events\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Ok, so with that source working well, I created a new workflow. The workflow would fire every time a SMS message was received. I then needed to do the following:</p>\n<ul>\n<li>See if a picture was attached.</li>\n<li>If so, send it to my identification service.</li>\n<li>Send the results to the user.</li>\n<li>Or if they didn't send a picture, tell them that.</li>\n</ul>\n<p>For my identification service, I decided to use Microsoft's <a href=\"https://azure.microsoft.com/en-us/services/cognitive-services/computer-vision/\">Computer Vision</a> API. Unlike the times I've used it in the past, it looks like they have a proper free tier now. In the past it was a time limited free preview, but now it's actually <em>free</em> free, which is cool. After I got my keys for that service, I then wrote my first action step in my workflow:</p>\n<pre><code class=\"language-js\">async (event, steps) =&gt; {\n\n\tif(steps.trigger.event.MediaUrl0) {\n\t\tconst fetch = require('node-fetch');\n\n\t\tlet img = steps.trigger.event.MediaUrl0;\n\t\tconsole.log('going to process image: ',img);\n\n\t\tlet info = {\n\t\t\turl:img\n\t\t};\n\t\t\n\t\tlet resp = await fetch(`${process.env.MS_COG_EP}/vision/v3.1/analyze?visualFeatures=Categories,Description`,{\n\t\t\tmethod:'POST',\n\t\t\theaders:{\n\t\t\t'Content-Type':'application/json',\n\t\t\t'Accept':'application/json',\n\t\t\t'Ocp-Apim-Subscription-Key': process.env.MS_COG_KEY\n\t\t\t},\n\t\t\tbody:JSON.stringify(info)\n\t\t});\n\t\tlet data = await resp.json();\n\t\tthis.text = `\n\n\t\tI parsed your image and found: ${data.description.captions[0].text}\n\n\t\tHere's other things I noted: ${data.description.tags.join(', ')}\n\t\t`;\n\t\n\t} else {\n\t\tthis.text = `\n\t\tTo use this service, please text a picture to me.\n\t\t`\n\t}\n}\n</code></pre>\n<p>Let's break this down. The first thing I do is look for the presense of an attached image. How did I know it was <code>event.MediaUrl0</code>? I looked at the event source events which lets you dig in the data. You can also do this in the workflow itself by using the test feature. It lets you pick from multiple previous events.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/sms3.jpg\" alt=\"Looking at the event data\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Ok, back to the code. THe value I look for (<code>MediaUrl0</code>), is a URL pointing to the image. You can open that in your browser to test. I noticed that when I used Microsoft's online tester for the API, it didn't like the fact that Twilio's URLs didn't end in &quot;.jpg&quot; or some other image file type. But the API itself was totally fine with it.</p>\n<p>In the result data (and note, I could do better error handling here, like, <em>any</em> error handling), I take both the descriptive text of the image as well as the list of tags. I specify this as the <code>text</code> value that will be exported from the step.</p>\n<p>The last part of the code handles telling the user they need to send an image if they want to use the service.</p>\n<p>So with that done, I need to send the text back. Guess what? Pipedream has a Twilio SMS sending action built. I literally added it and specified values for To, From, and Body. I didn't write one more line of code:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/sms4.jpg\" alt=\"\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And that's literally it! I know I'm a complete fan boy when it comes to Pipedream, but I was blown away how much simpler this version was. I feel confident saying that 90% of my time was gathering keys, fighting my darn GET vs POST issue, and basically non-Pipedream stuff. So does it work? Yes! Here's some fun examples.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/sms5.jpg\" alt=\"Picture of a glass of water\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And another...</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/sms6.jpg\" alt=\"Picture of a toy\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And another...</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/sms7.jpg\" alt=\"Glass of wine\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Who else had wine last night? And finally, my son being my son:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/sms8.jpg\" alt=\"\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Want to try this out yourself? View and copy the workflow URL: <a href=\"https://pipedream.com/@raymondcamden/identify-picture-p_mkCkL5o\">https://pipedream.com/@raymondcamden/identify-picture-p_mkCkL5o</a></p>\n<p><span>Photo by <a href=\"https://unsplash.com/@anniespratt?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Annie Spratt</a> on <a href=\"https://unsplash.com/s/photos/pictures?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "pipedream"
            
		],
		"categories":[
            
                "serverless"
            
		]

	},

	{
		"title": "Remembering (and Restoring) a Route with Vue Router",
		"date":"Mon Jan 11 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/01/12/remembering-and-restoring-a-route-with-vue-router",
		"content":"<p>While playing Dragon Quest X1 Sunday morning, a random idea popped in my head and it was interesting enough to convince me\nto put down the controller and take out the laptop and work on a quick demo. What idea was it? In most (well built) sites, if you request a resource that requires a login, you will be returned to that resource after successfully logging in. I was curious how I'd do that with a Vue single page application.</p>\n<p>I began by creating an incredibly simple Vue application. It consisted of these views:</p>\n<ul>\n<li>A home page.</li>\n<li>A products page with a list of static products.</li>\n<li>A detail page for each product.</li>\n<li>A users age with a list of static users.</li>\n<li>A detail page for each user.</li>\n<li>A login page with a button you can click to login.</li>\n</ul>\n<p>Nothing in the above was hitting an API so it was pretty quick to build. If you are reading this I'm assuming you're already familiar with Vue and <a href=\"https://router.vuejs.org/\">Vue Router</a>. I'm also using <a href=\"https://vuex.vuejs.org/\">Vuex</a> for state management.</p>\n<p>The only thing really interesting in the initial demo would be how I handle login checking and redirecting. This is from the end of my <code>router/index.js</code> file:</p>\n<pre><code class=\"language-js\">router.beforeEach((to, from, next) =&gt; {\n  if(!store.state.loggedin &amp;&amp; !(to.name === 'Login')) {\n    next({name:'Login'});\n  } else next();\n});\n</code></pre>\n<p>Pretty straightforward. If I'm not logged in and I'm not actually loading the login page, redirect. As I said, everything is static data, so this is how the <code>login</code> routine works on <code>Login.vue</code>:</p>\n<pre><code class=\"language-js\">login() {\n\tthis.$store.commit('setLogin', true);\n\tthis.$router.replace({name:'Home'});\n}\n</code></pre>\n<p>Basically pass on to Vuex the current login state and then go home.</p>\n<p>You can demo this yourself live here: <a href=\"https://v1.raymondcamden.vercel.app/\">https://v1.raymondcamden.vercel.app/</a>. Click the button to login, click around a bit, and reload. Note that you will be logged out. After logging in again, you return to the home page. The source code for this initial version may be found here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/rememberroute/v1\">https://github.com/cfjedimaster/vue-demos/tree/master/rememberroute/v1</a></p>\n<p>Ok, so that's V1. To support what I wanted, here's the changes I made in V2. First, in my router, I told Vuex to remember my route:</p>\n<pre><code class=\"language-js\">router.beforeEach((to, from, next) =&gt; {\n  if(!store.state.loggedin &amp;&amp; !(to.name === 'Login')) {\n    store.commit('setLastPath', to.fullPath);\n    next({name:'Login'});\n  } else next(); \n});\n</code></pre>\n<p>I store the value of <code>fullPath</code> as it contained <em>everything</em> possible in the URL, including the path as well as query string parameters. To test this, I modified a page to manually include one, like so:</p>\n<pre><code class=\"language-html\">&lt;router-link to=&quot;/user/3?name=jacob&quot;&gt;Test&lt;/router-link&gt;\n</code></pre>\n<p>My next change was to my login routing. Here's how it was modified:</p>\n<pre><code class=\"language-js\">login() {\n\tthis.$store.commit('setLogin', true);\n\tif(this.$store.state.lastPath) {\n\t\tlet next = this.$store.state.lastPath;\n\t\tthis.$store.commit('setLastPath', '');\n\t\tthis.$router.replace(next);\n\t} else {\n\t\tthis.$router.replace({name:'Home'});\n\t}\n}\n</code></pre>\n<p>As before, I store my login state, but now I look to see if a <code>lastPath</code> value was stored in Vuex. In theory, it <em>always</em> should be. If so, I clear the old value and redirect there, otherwise I just go home. Again, in theory, <code>lastPath</code> should always be there, but it just felt safer using the if statement to be sure.</p>\n<p>You can demo this version here, and note I'm linking to a subpage, not the home page: <a href=\"https://v2.raymondcamden.vercel.app/users\">https://v2.raymondcamden.vercel.app/users</a>. And you can see the full source here: <a href=\"https://github.com/cfjedimaster/vue-demos/tree/master/rememberroute/v2\">https://github.com/cfjedimaster/vue-demos/tree/master/rememberroute/v2</a></p>\n<p>Definitely not rocket science Vue.js stuff, but I wanted to see it in action myself so I figured I'd share the results. I'd love to hear how others are doing it and if you would like, share a comment below with your implementations.</p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "JavaScript"
            
		]

	},

	{
		"title": "A Vue Component for Handling Loading State",
		"date":"Thu Jan 14 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/01/15/a-vue-component-for-handling-loading-state",
		"content":"<p>I've been doing some Vue consulting recently with a client and he came up with an interesting scenario. He asked about adding a &quot;loading&quot; state to his UI such that when\na user clicked a button, it was obvious &quot;something&quot; was going on. This is actually something I've covered before in my <a href=\"https://www.raymondcamden.com/tags/vue+quick+shot/\">Vue Quick Shots</a> series:</p>\n<p><a href=\"https://www.raymondcamden.com/2020/03/02/vue-quick-shot-disabling-a-submit-button-while-waiting-for-an-ajax-call\">Vue Quick Shot - Disabling a Submit Button While Waiting for an Ajax Call</a>\n<a href=\"https://www.raymondcamden.com/2020/03/04/vue-quick-shot-using-a-loading-message\">Vue Quick Shot - Using a Loading Message</a></p>\n<p>It's fairly simple and basically comes down to the following pseudo-code:</p>\n<pre><code class=\"language-js\">set a flag that tells the UI to disable the button or show a loading msg\ndo your slow Async process\nwhen done, toggle that flag\n</code></pre>\n<p>While that's fairly simple, my client wanted to see if he could turn it into a component. At first I told him this felt like overkill, but he was concerned, rightly so, that if he had multiple buttons on a page doing the same thing, that he didn't want multiple different flags for each one.</p>\n<p>Together we built up a simple demo of this and it's interesting, but I'm also unsure of one aspect of it and I'd love to get some feedback. I'll share a link to all the code at the end of this post, but let's start with the component.</p>\n<p>First, I named it <code>AnotherClickWait</code>. That's a pretty bad name but it will make sense in a minte I think. First let's look at the HTML and style of the component:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;button @click=&quot;clicked&quot; :disabled=&quot;loading&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/button&gt;\n&lt;/template&gt;\n\n&lt;style&gt;\nbutton {\n  padding: 20px;\n}\n\nbutton:disabled {\n  font-style: italic;\n}\n&lt;/style&gt;\n</code></pre>\n<p>As you can see it's pretty simple. It's got a click event and a disabled property. The only reason I bothered styling it is that I noticed that the disabled state didn't look very disabled. That could be a CodeSandbox issue (where I have the demo), but I just wanted something more in your face. The <code>slot</code> tag lets you pass in the text for the button.</p>\n<p>Now for the code:</p>\n<pre><code class=\"language-js\">export default {\n  name: &quot;AnotherClickWait&quot;,\n  data() {\n    return {\n      loading: false\n    }\n  },\n  methods:{\n    clicked() {\n      this.loading = true;\n      this.$emit('click', () =&gt; {\n        this.loading = false;\n      })\n    }\n  }\n};\n</code></pre>\n<p>Ok, so there's a few things to note here. First, I use a flag, <code>loading</code>, that will handle, internally, the state of, well, loading. In order for the parent using the component to know the click event happened, I used <code>this.$emit</code>, and here's where things get interesting.</p>\n<p>How does the parent let the button know that it's done doing whatever it's doing? This is where my client came up with the idea. The event passes a function as an argument that the caller can use to tell the button it's done doing whatever logic it's supposed to be doing.</p>\n<p>This part in particular was fascinating to me and also a bit worriesome. I don't know why, it's a good solution, but it's the main reason I'm blogging this as I'd like to get some feedback.</p>\n<p>Using the component looks like so:</p>\n<pre><code class=\"language-html\">&lt;AnotherClickWait style=&quot;background-color:#c0c0c0&quot; @click=&quot;doFoo&quot;&gt;One More Darn Button&lt;/AnotherClickWait&gt;\n</code></pre>\n<p>And then here's the event handler:</p>\n<pre><code class=\"language-js\">doFoo(done) {\n\tsetTimeout(() =&gt; {\n\t\tconsole.log('im done with whatever biz logic');\n\t\tdone();\n\t},3000);\n}\n</code></pre>\n<p>As you can see, I expect to be called with a function that I can run when I'm done. I think what bothers me is that this feels like a bad dependancy, but on the other hand, the client (in this case the code using the component), <em>has</em> to be responsible for knowing when things are done.</p>\n<p>Make sense?</p>\n<p>So yeah, about that name. The client is using <a href=\"https://vuetifyjs.com/en/\">Vuetify</a> for his UI library and his component actually wrapped <code>v-btn</code> instead. This created an odd issue where the props in the parent component, named <code>ClickWait</code>, did <em>not</em> propagate down to <code>vue-btn</code>.</p>\n<p>I asked about this on Twitter and Alex was happy to help me out:</p>\n<blockquote class=\"twitter-tweet\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">So i have noticed this behavior as well, and i tend to always add a v-bind and v-on so that i am explicitly passing things through. I don&#39;t know why it gets weird about it sometimes.</p>&mdash; Alex Riviere (@fimion) <a href=\"https://twitter.com/fimion/status/1349865473668689921?ref_src=twsrc%5Etfw\">January 14, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>From what we can see, <em>something</em> is going wrong, and we have to manually bind the arguments in. Here's the entirety of that component:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;v-btn @click=&quot;clicked&quot; v-bind=&quot;$attrs&quot; :loading=&quot;loading&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/v-btn&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\nexport default {\n  name: &quot;ClickWait&quot;,\n  inheritAttrs:&quot;false&quot;,\n  data() {\n    return {\n      loading: false\n    }\n  },\n  methods:{\n    clicked() {\n      this.loading = true;\n      this.$emit('click', () =&gt; {\n        this.loading = false;\n      })\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>It's <em>mostly</em> the same but we disable prop inheritance and manually bind it. Again, this is <em>not</em> what we thought we would have to do, but it worked. Want to see it in action? Try out the CodeSandbox below:</p>\n<iframe src=\"https://codesandbox.io/embed/vibrant-mirzakhani-xwrgv?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"vibrant-mirzakhani-xwrgv\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<p>Again, I'd love to hear what people think of this approach. Leave me a comment below.</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@dorographie?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Dorothea OLDANI</a> on <a href=\"https://unsplash.com/s/photos/kitten?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "JavaScript"
            
		]

	},

	{
		"title": "Accessing Eleventy Data on the Client Side",
		"date":"Sun Jan 17 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/01/18/accessing-eleventy-data-on-the-client-side",
		"content":"<p>This is something I've demonstrated before but haven't had a chance yet to write about it by itself. As you know, one of the best features of Eleventy is support for <a href=\"https://www.11ty.dev/docs/data/\">data files</a>. This feature lets you define JSON or JavaScript logic to return data your templates can use. But along with using data in your templates, you may want to use the same information in your client-side JavaScript code. So how can you do that?</p>\n<p>Let's start off with some sample data. (I'll be sharing a link to the repository with all this code at the end.) For my demo I'll use two samples, first a static JSON file named <code>site.json</code>:</p>\n<pre><code class=\"language-json\">{\n\t&quot;name&quot;:&quot;Demo Site&quot;,\n\t&quot;email&quot;:&quot;raymondcamden@gmail.com&quot;,\n\t&quot;cats&quot;:true\n}\n</code></pre>\n<p>And then a more dynamic JavaScript file named <code>starWarsFilms.js</code>:</p>\n<pre><code class=\"language-js\">const fetch = require('node-fetch');\n\nmodule.exports = async function() {\n\tlet url = `https://swapi.dev/api/films`;\n\t\n\tlet resp = await fetch(url);\n\tlet data = await resp.json();\n\n\treturn data.results;\n\n}\n</code></pre>\n<p>Just to test, I create an <code>index.liquid</code> file that dumps the values out:</p>\n<pre><code class=\"language-html\">---\nlayout: main\n---\n\n&lt;h1&gt;Testing&lt;/h1&gt;\n\n&lt;p&gt;\nOutput the raw value for &quot;site&quot;: {{ site }}\n&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;\nOutput the raw value for &quot;starWarsFilms&quot; {{ starWarsFilms }}\n&lt;/p&gt;\n</code></pre>\n<p>Ok, so the first way we can get our <code>_data</code> files out is to create a new template. Here's how I output the site data:</p>\n<pre><code class=\"language-html\">---\npermalink: site1.json\n---\n{{ site }}\n</code></pre>\n<p>And that's it. I use the <code>permalink</code> front matter to tell Eleventy where to save the file and then just dump out <code>site</code>. There's nothing more required. Do note that normally, like in the test file above, I include a space between the front matter and the content of the template. For my JSON file though I removed that to keep the white space down.</p>\n<p>That's one example, here's another, this time using EJS:</p>\n<pre><code class=\"language-js\">---\npermalink: site2.json\n---\n&lt;%\nsiteData = site;\ndelete siteData.cats;\n%&gt;&lt;%- JSON.stringify(siteData) %&gt;\n</code></pre>\n<p>In this example, I use a bit of logic to remove something from the <code>site</code> data that I don't want exposed in my JSON. Obviously every case is different, but you have a choice between just showing the complete value from the original data or modifying it a bit before using it on the client-side site.</p>\n<p>Another example of that can be demonstrated in how the Star Wars data is exposed:</p>\n<pre><code class=\"language-html\">---\npermalink: films1.json\n---\n[\n{% for film in starWarsFilms %}\n\t{\n\t\t&quot;title&quot;:&quot;{{film.title}}&quot;,\n\t\t&quot;released&quot;:&quot;{{film.release_date}}&quot;\n\t}{% unless forloop.last%},{% endunless %}\t\n{% endfor %}\n]\n\n</code></pre>\n<p>In this example I only output two keys from the film data. This makes the client-side data quite a bit smaller and gives better performance on the client-side.</p>\n<p>With these in place, you can then use them as you would any other data. Here's an example (in the repo it's <code>test1.liquid</code>):</p>\n<pre><code class=\"language-html\">---\nlayout: main\n---\n\n&lt;div id=&quot;siteInfo&quot;&gt;&lt;/div&gt;\n\n&lt;div id=&quot;filmInfo&quot;&gt;&lt;/div&gt;\n\n&lt;script&gt;\ndocument.addEventListener('DOMContentLoaded', init, false);\nasync function init() {\n\tlet div = document.querySelector('#siteInfo');\n\tlet resp = await fetch('/site1.json');\n\tlet data = await resp.json();\n\tlet html = `\n&lt;p&gt;\nThe site is named ${data.name} and \nthe contact email is ${data.email} and\ndo we have cats? ${data.cats}\n&lt;/p&gt;\n\t`;\n\tdiv.innerHTML = html;\n\n\tlet div2 = document.querySelector('#filmInfo');\n\tresp = await fetch('/films1.json');\n\tdata = await resp.json();\n\thtml = '&lt;h2&gt;Films&lt;/h2&gt;&lt;ul&gt;';\n\tdata.forEach(d =&gt; {\n\t\thtml += `&lt;li&gt;&lt;strong&gt;${d.title}&lt;/strong&gt;, released on ${d.released}.&lt;/li&gt;`;\n\t});\n\thtml += '&lt;/ul&gt;';\n\tdiv2.innerHTML = html;\n\n}\n&lt;/script&gt;\n</code></pre>\n<p>Nice and easy, right? Let's consider another example. Recently Eleventy released support for <a href=\"https://www.11ty.dev/docs/events/\">events</a> that your code can tie into. One of them is <a href=\"https://www.11ty.dev/docs/events/#afterbuild\">afterBuild</a>, which as you can guess runs after every build is complete. We can use this event hook to copy our data to our output directory. Unfortunately, at the time I wrote this you do not have programatic access to the output directory setting. This <a href=\"https://github.com/11ty/eleventy/pull/1143#issuecomment-687192877\">GitHub issue comment</a> shows a way of handling that and in general it's a known issue. I'd also like access to the values from <code>_data</code> directory. If our templates can use the value, I think the event should have access to it as well.</p>\n<p>That being said though we can hard code some values, make note of it, and handle it simply:</p>\n<pre><code class=\"language-js\">/*\nNo access to output directory, or configured data, so we have code for now.\n\nThis shows an example of handling this nicer: https://github.com/11ty/eleventy/pull/1143#issuecomment-687192877\n*/\nconst dataDir = './_data/';\nconst outputDir = './_site/';\nconst fs = require('fs');\n\nmodule.exports = function (eleventyConfig) {\n\n\televentyConfig.on('afterBuild', () =&gt; {\n\t\tfs.copyFileSync(dataDir + 'site.json', outputDir + 'site3.json');\t\n\t});\n\n};\n</code></pre>\n<p>All I do is copy the JSON file from it's source directory to the output directory. I could do some transformations here as well. Honestly I don't know if this option is any better than the earlier versions, but it gives you another option.</p>\n<p>You can find the complete source for this here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/data_to_client\">https://github.com/cfjedimaster/eleventy-demos/tree/master/data_to_client</a>. Let me know if you've used these techniques below, and especially if you've done it differently!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@nasa?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">NASA</a> on <a href=\"https://unsplash.com/s/photos/data?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Using Pre-Built Lunr Indexes with Eleventy",
		"date":"Thu Jan 21 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/01/22/using-pre-built-lunr-indexes-with-eleventy",
		"content":"<p>Way back in 2019 I wrote a blog post on <a href=\"https://www.raymondcamden.com/2019/10/20/adding-search-to-your-eleventy-static-site-with-lunr\">integrating Lunr with Eleventy</a>. <a href=\"https://lunrjs.com/\">Lunr</a> is a pretty nifty light-weight search engine. One of the features it has is the ability to use a <a href=\"https://lunrjs.com/guides/index_prebuilding.html\">pre-built index</a>. This saves the client from having to build the index on the fly. I took a look at this earlier and built up a demo I'd like to share.</p>\n<p>First off, you should definitely read my <a href=\"https://www.raymondcamden.com/2019/10/20/adding-search-to-your-eleventy-static-site-with-lunr\">earlier post</a>. I'm not going to cover all of that again as the older post still works well today. In essence it boils down the following steps:</p>\n<ul>\n<li>Determine what you want to search.</li>\n<li>Determine how you're going to build your index. This is a bit different from the first step as while you may decide you want to search blog entries, you need to figure out exactly what the index will contain. So perhaps the first three paragraphs of the blog entry and the tags used for the post. You have to weigh what you want to search against the size of your index. You don't want user's having to download a 500K file just to search.</li>\n<li>In your client side code, load your data and build the index from it.</li>\n<li>Then whip up your search code.</li>\n</ul>\n<p>That's a bit high level, but as I said, the previous post goes into more detail. According to the Lunr docs, pre-building indexes can be beneficial:</p>\n<blockquote>\n<p>\nFor large numbers of documents, it can take time for Lunr to build an index. The time taken to build the index can lead a browser to block; making your site seem unresponsive.\n</p>\n<p>\nA better way is to pre-build the index, and serve a serialised index that Lunr can load on the client side much quicker.\n</p>\n</blockquote>\n<p>Creating a pre-built index is simple. You take the same code you used to build your index and just <code>JSON.stringify</code> it. If we're doing this before the client tries to search then it needs to be server-side, and luckily Eleventy makes this easy with the <a href=\"https://www.11ty.dev/docs/events/#afterbuild\">afterBuild</a> event. I first used this in my last post (<a href=\"https://www.raymondcamden.com/2021/01/18/accessing-eleventy-data-on-the-client-side\">&quot;Accessing Eleventy Data on the Client Side&quot;</a>) and it works pretty much as you would expect.</p>\n<p>Here's what I added to my <code>.eleventy.js</code> file:</p>\n<pre><code class=\"language-js\">const outputDir = './_site/';\nconst fs = require('fs');\nconst lunr = require('lunr');\n\neleventyConfig.on('afterBuild', () =&gt; {\n\tlet data = fs.readFileSync(outputDir + '/raw.json','utf-8');\n\tlet docs = JSON.parse(data);\n\n\tlet idx = lunr(function () {\n\t\tthis.ref('id');\n\t\tthis.field('title');\n\t\tthis.field('content');\n\n\t\tdocs.forEach(function (doc, idx) {\n\t\t\tdoc.id = idx;\n\t\t\tthis.add(doc); \n\t\t}, this);\n\t});\n\n\tfs.writeFileSync(outputDir + 'index.json', JSON.stringify(idx));\n});\n</code></pre>\n<p>First, you'll note I hard code the output directory. It's a known issue that the Eleventy config file doesn't have access to these settings and hopefully that will be corrected in the future. I begin by reading in a file named <code>raw.json</code>. In the previous post on working with Eleventy and Lunr, I used Liquid to create my raw data file and named it <code>index.json</code>. That was a bad name as it really wasn't the index, but rather the <em>source</em> of what I use to build my index.</p>\n<p>I read in the file and create my index in literally the same fashion I did in the earlier post. Once done, I write the file back out again and use the name <code>index.json</code>. So now my site has both the raw data of my index and the actual built index.</p>\n<p>In order to use this, I needed to change my search code. I know I said to read the previous post, but just in case you didn't, here's how I loaded my data and built my index:</p>\n<pre><code class=\"language-js\">async created() {\n\tlet result = await fetch('/index.json');\n\tdocs = await result.json();\n\t// assign an ID so it's easier to look up later, it will be the same as index\n\tthis.idx = lunr(function () {\n\t\tthis.ref('id');\n\t\tthis.field('title');\n\t\tthis.field('content');\n\n\t\tdocs.forEach(function (doc, idx) {\n\t\t\tdoc.id = idx;\n\t\t\tthis.add(doc); \n\t\t}, this);\n\t});\n\tthis.docs = docs;\n},\n</code></pre>\n<p>Remember that initially I named my raw data <code>index.json</code> - sorry if that's confusing. So how do we use the pre-built index? Here's the new version:</p>\n<pre><code class=\"language-js\">async created() {\n\tlet index = await fetch('./index.json');\n\tlet indexData = await index.json();\n\tthis.idx = lunr.Index.load(indexData);\n\n\tlet docs = await fetch('./raw.json');\n\tthis.docs = await docs.json();\n},\n</code></pre>\n<p>Two big changes. First, I load the index and pass it to <code>lunr.Index.load</code> to have it ready for searching. I then do a second call to get my raw data again. One of the weird things about Lunr is that search results do not contain the actual record you search but a reference to it. Well that's not weird per se, it's probably effecient, but in order to display my results properly, I need those original docs too.</p>\n<p>In my testing, my pre-built index was bigger than the raw data. That makes some sense I guess. But the end result of this change is that I'm doing two network loads, one potentially big, in order to save the indexing time. You would have to hope that this change is, overall, wortwhile performance wise and that the network &quot;penalty&quot; is comparatively less. Hopefully. :)</p>\n<p>Anyway, this was an interesting experiment. If you want to see the source, you can find it here: [https://github.com/cfjedimaster/eleventy-demos/tree/master/lunr2]. As always, if you've tried this yourself I'd love to hear about it. Leave me a comment below.</p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Highly Analytics - A Review",
		"date":"Wed Jan 27 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/01/28/highly-analytics-a-review",
		"content":"<p>Before I begin - a quick note. The service I'm reviewing today is something I've had on my blog for about six weeks. I'm literally removing it tomorrow not because the service is bad, but that I didn't get a chance to write up my review until the day before my trial period ended. I'm going to include some screenshots of how the service looked on my site but I just wanted to be sure people weren't confused with me talking about something I've tested here and then not be able to actually see it. Sorry, life happens and this post just kept getting pushed down my &quot;editorial calendar.&quot; :)</p>\n<p>Alright, so that was a long preamble for what I really wanted to cover, <a href=\"https://www.highlyanalytics.com/\">Highly Analytics</a>. Highly Analtycs (HA) is a service that does a couple of really interesting things.</p>\n<p>First, it provides a &quot;Medium-like&quot; service where users can highlight and share snippets from your site. Here's an example of that (and again, see the note above) from one of my posts:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/ha1.jpg\" alt=\"Example of highlighting on my blog\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>In case it isn't obvious in the screen shot above, you have options to save the highlight, multiple sharing options, and a way to add a reaction.</p>\n<p>This by itself I thought was pretty cool. I was a big Medium user (poster and reader) a while ago, but it seems like most folks have left the platform and switched to places like <a href=\"https://dev.to/\">DEV Community</a>. Because I haven't been there recently, I had forgotten how nice the highlighting aspect of Medium was. Now to be clear, HA is not currently sharing highlights and reactions, it's just for your own use, but I can see it being incredibly useful for especially deep blog posts. Being able to add my own highlights and reactions to a post for later rereads and checks is incredibly useful.</p>\n<p>So speaking of that, here's how a highlight looks when you return to a post:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/ha2.jpg\" alt=\"Example of highlighted text.\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The front end right now is somewhat simple (but as I said, I think really engaging) but the back is pretty deep. The analytics aspect is pretty deep. You can demo this yourself at <a href=\"https://www.highlyanalytics.com/demo\">https://www.highlyanalytics.com/demo</a> which will let you play with some sample data. You get analytics of what you expect - what content is getting highlights, shares, and reactions. You also get some of the same analytics you would from traditional sources, like Google Analytics, so things like page views and user metrics.</p>\n<p>As I said, I've been running this here for about six weeks. I never told anyone about it nor did I encourage folks to check it out, but if I remember right, I started getting usage like the hour after I added the code. Here's some live stats from the HA dashboard for this blog. First, the Top Articles:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/ha3.jpg\" alt=\"List of top articles\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I wish it showed more than three at a time, but I can say the list of top articles meshes with what my other analytics is reporting as well. Going down the dashboard, next we've got information on how folks are reading on my site.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/ha4.jpg\" alt=\"Line chart of anlytics data\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The final chart on the main screen of the dashboard are all visitor type things. This is all data that Google Analytics provides, but even though I like GA (I'm back to them after being solely focused on Netlify Analytics), HA makes it a <em>heck</em> of a lot easier to consuime in my opinion.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/ha5.jpg\" alt=\"Various user related charts\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>These are the general stats, you can then drill down into article stats. This provides many different stats. You get a table of pages sorted by views, number of highlights, or reactions:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/ha6.jpg\" alt=\"Page stats with different views\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You also get top highlighted keywords, top reactions, and more. If you select one individual page, you can see how folks have &quot;marked&quot; up your page (and again, this is only visible to them):</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/ha7.jpg\" alt=\"Example of highlight stats on a page.\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>All in all - a pretty fascinating tool. Comment usage on my blog has <em>plummetted</em> over the past few years, but the amount of people adding reactions and highlights was honestly shocking. I knew I was still getting good traffic, but it felt like I've not gotten much feedback about my content. HA shows that while people may not be commenting much on my site, they're definitely actively reading and noting stuff.</p>\n<p>As I said, this is a commercial service. If you scroll to the bottom of <a href=\"https://www.highlyanalytics.com/\">https://www.highlyanalytics.com/</a>, you'll see their current pricing tiers. My site, at around 350K page views per month, would be at the 99 dollars a month level. While I do really like HA, it's definitely more than I want to spend right now. The price drops pretty quickly for less traffic but I do think, overall, the price is a bit high. I can say though that I've been told that price is changing soon (and in a good way), so I'd definitely check it out to see if it makes sense for you.</p>\n<p>Overall, I think this is a pretty fascinating service and one worth checking out. You can give them a follow on Twitter at <a href=\"https://twitter.com/highlyanalytics\">@highlyanalytics</a> and reach out to them if you have further questions.</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@jannerboy62?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Nick Fewings</a> on <a href=\"https://unsplash.com/s/photos/analytics?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Quick Hack for Reveal.js Presentations",
		"date":"Thu Jan 28 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/01/29/quick-hack-for-revealjs-presentations",
		"content":"<p>I go back and forth between creating presentations in PowerPoint and <a href=\"https://revealjs.com/\">Reveal.js</a>. Both have features I really like a lot, but as I'm primarily talking about web development, I tend to prefer Reveal.js as it isn't quite as jarring to go from slide to code/demonstration as it is when PowerPoint is displaying.</p>\n<p>Like PowerPoint, Reveal.js has a &quot;notes&quot; feature that lets you add notes to individual slides. I use this a lot as I tend to write less text on my slide and rely on the fact that - hello - I'm talking and my slide should only support my talk, not be a replacement for the awesomeness that is my speaking ability. (I'm kidding by the way.)</p>\n<p>In Reveal.js, slide notes are written in an <code>aside</code> tag that is hidden from view in the presentation. Here's a real example from the talk I just gave.</p>\n<pre><code class=\"language-html\">&lt;section&gt;\n&lt;h2&gt;Demo&lt;/h2&gt;\n&lt;p&gt;\n&lt;a href=&quot;https://github.com/cfjedimaster/eleventy_algolia&quot; target=&quot;_new&quot;&gt;github.com/cfjedimaster/eleventy_algolia&lt;/a&gt;&lt;br/&gt;\n&lt;a href=&quot;https://eleventyalgolia.netlify.app/&quot; target=&quot;_new&quot;&gt;eleventyalgolia.netlify.app/&lt;/a&gt;\n&lt;/p&gt;\n&lt;aside class=&quot;notes&quot;&gt;\nThis is my particular solution using Netlify and algolia-indexing\ngo to eleventy_algolia \nshow that its a blog\n.functions/deploy-succeeded\n&lt;/aside&gt;\n&lt;/section&gt;\n</code></pre>\n<p>Note that in the notes above, I used line breaks to seperate each &quot;part&quot; of my note. Mentally I read that as a timeline to go along with the current slide.</p>\n<p>When giving a Reveal.js presentation, you can open up the speaker view in another window by just hitting the <code>S</code> key. Here's how that slide looks.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/r1.jpg\" alt=\"Speaker view for Reveal.js\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>It may be a bit hard to see in the screen shot above, so here's another one focused on the lower right side panel:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/r2.jpg\" alt=\"Zoom in on speaker notes\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Notice what happened? My notes are all on one line. If you think about it, that makes sense. Reveal.js is HTML based and while I treated the notes area like I would have in PowerPoint, it's still HTML, which means a line break is meaningless outside a <code>pre</code> tag.</p>\n<p>I could easily fix that by adding some <code>br</code> tags, but honestly, when I'm in the &quot;flow&quot; of working on a good presentation, I don't want to have to worry about that. That's one thing PowerPoint does really well - as a slide authoring environment it's incredible.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/typing.gif\" alt=\"Real picture of Ray typing\" class=\"lazyload imgborder imgcenter\">\n<figcaption>Real picture of Raymond working on a presentation.</figcaption>\n</p>\n<p>Since I knew I couldn't rely on me remembering to include proper HTML, I turned to the solution every developer turns to when they want to <strike>break</strike>&quot;enhance&quot; HTML - JavaScript! I added this quick snippet right before I initialize Reveal.js:</p>\n<pre><code class=\"language-js\">let notes = document.querySelectorAll('aside.notes');\nnotes.forEach(n =&gt; {\n\tlet html = n.innerHTML;\n\thtml = html.trim().replace(/\\n/g, '&lt;br/&gt;');\n\tn.innerHTML = html;\n});\n</code></pre>\n<p>This could be done in one line but I'm not currently doing a technical code test so why bother pretending. The result is a slighly better view:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/01/r3.jpg\" alt=\"Notes with line breaks\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>There's probably a nicer way of doing this, but it works for me!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@alexlitvin?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Alex Litvin</a> on <a href=\"https://unsplash.com/s/photos/presentation?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Exporting Disqus Comments and Adding Them to Eleventy",
		"date":"Wed Feb 10 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/02/11/exporting-disqus-comments-and-adding-them-to-eleventy",
		"content":"<p>Apologies for what may be a long winded, kinda haphazzard post. The beginning of what I'm sharing here would be useful to anyone using <a href=\"https://disqus.com/\">Disqus</a> while the remainder will only be of use to <a href=\"https://www.11ty.dev/\">Eleventy</a> folks. I'll try to be clear about when that transition occurs so you can stop reading when it makes sense. Or you can just read everything, I won't mind!</p>\n<p>Alright, so what's the point of all this? I've noticed for some time now the comment traffic on my blog has decreased to near nothing. In fact, here's a chart that shows in pretty stark detail how much it's dropped:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/d1.jpg\" alt=\"Line chart showing drop of comments\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>For folks curious, that chart comes from the Disqus reporting tool I built a few years ago called Vader. You can read more about it here: <a href=\"https://www.raymondcamden.com/2016/08/25/working-with-the-disqus-api-deeper-stats-2\">Working with the Disqus API - Deeper Stats (2)</a> Disqus is a simple way to add commenting to a site, and I totally get why strong analytics requires a paid update, but I will never understand why Disqus simply can't tell you the total number of comments a site has. That's incredibly silly, if you ask me.</p>\n<p>That being said, I decided it was time for a change. I decided I would export my Disqus data, create a static version of it, and start working with <a href=\"https://indieweb.org/Webmention\">Webmention</a>. The first part is done and is covered in this post.</p>\n<p>Let's begin by talking about the data. Disqus does have an export feature, which they warn you may not be available for all sites (tip to every developer resource ever - don't have vague limits in your docs). I tried it on mine and was surprised when I got an email five minutes later with a link to my export. Unfortunately it ended up being a corrupt gzip file so it was useless. As I had previous familiarity with their <a href=\"https://disqus.com/api/docs/\">API</a>, I decided to give that a shot.</p>\n<p>Disqus considers comments to be in threads, where each thread, typically, relates to one blog post. (You can use Disqus for non-blog sites of course.) Their API to retrieve comments lets you get related thread data for each comment, so my first strategy was to get all the comments for my blog. Here's the script for that (I'll share links to GitHub sources at the end):</p>\n<pre><code class=\"language-js\">/*\nPart 1. Get a raw set of data that later scripts will make better. But for now, just download.\nResult will be one huge array of posts. Each post object has a thread object.\n*/\n\nrequire('dotenv').config();\nconst fetch = require('node-fetch');\nconst fs = require('fs');\n\n// change this to your site\nconst FORUM = 'raymondcamden';\nconst KEY = process.env.KEY;\n/* \nhard coded export, could be an arg, keeping it simple for now, slightly dynamic\nas I add the forum name, which I believe is always filename safe\n*/\nconst FILENAME = 'rawdata.json';\n\n(async () =&gt; {\n\tconsole.log(`Fetching threads for ${FORUM}`);\n\tlet posts = await getPosts(FORUM);\n\tconsole.log(`Done fetching posts, total is ${posts.length}`);\n\tlet exportFile = FORUM + '_' + FILENAME;\n\tfs.writeFileSync(exportFile, JSON.stringify(posts), 'utf-8');\n\tconsole.log(`Data written to ${exportFile}`);\n\t// temp\n\tposts.forEach(p =&gt; {\n\t\tif(p.isDeleted) {\n\t\t\tconsole.log('DELETED POST', p);\n\t\t}\n\t});\n})();\n\nasync function getPosts(forum, cursor, posts) {\n\n\tlet url = `https://disqus.com/api/3.0/posts/list.json?forum=${encodeURIComponent(forum)}&amp;api_key=${KEY}&amp;limit=100&amp;order=asc&amp;related=thread`;\n\tif(cursor) url += '&amp;cursor='+cursor;\n\tif(!posts) posts = [];\n\n\tlet resp = await fetch(url);\n\tlet data = await resp.json();\n\tlet newPosts = data.response;\n\tnewPosts.forEach(p =&gt; posts.push(p));\n\t// only one per K\n\tif(posts.length % 1000 === 0) console.log('Post total is now '+posts.length);\n\n\tif(data.cursor &amp;&amp; data.cursor.hasNext) {\n\t\treturn getPosts(forum, data.cursor.next, posts);\n\t} else return posts;\n}\n</code></pre>\n<p>For the most part this is simply a recursive call to retrieve a 'page' of comments one a time. That's the highest value possible. For my sixty thousand plus comments this took roughly a minute I think. I don't do any data transformation at this part as I figure it would be the slowest. I wanted the data local so that I could then slice and dice it.</p>\n<p>You'll notice a &quot;temp&quot; block in there. I was worried the API would return comments I had deleted (for spam obviously) but I never saw that happen. I'm still not 100% sure that's safe so I'm leaving the block in for now.</p>\n<p>The result is a very, very large JSON file (well for my site anyway) consisting of an array of comments with embedded thread information. Here's one comment:</p>\n<pre><code class=\"language-js\">{\n\t&quot;editableUntil&quot;: &quot;2021-02-12T22:37:28&quot;,\n\t&quot;dislikes&quot;: 0,\n\t&quot;thread&quot;: {\n\t\t&quot;feed&quot;: &quot;https://raymondcamden.disqus.com/building_table_sorting_and_pagination_in_vuejs/latest.rss&quot;,\n\t\t&quot;clean_title&quot;: &quot;Building Table Sorting and Pagination in Vue.js&quot;,\n\t\t&quot;dislikes&quot;: 0,\n\t\t&quot;likes&quot;: 11,\n\t\t&quot;message&quot;: &quot;&quot;,\n\t\t&quot;ratingsEnabled&quot;: false,\n\t\t&quot;isSpam&quot;: false,\n\t\t&quot;isDeleted&quot;: false,\n\t\t&quot;category&quot;: &quot;3375237&quot;,\n\t\t&quot;adsDisabled&quot;: false,\n\t\t&quot;author&quot;: &quot;17736500&quot;,\n\t\t&quot;userScore&quot;: 0,\n\t\t&quot;id&quot;: &quot;6467564608&quot;,\n\t\t&quot;signedLink&quot;: &quot;http://disq.us/?url=http%3A%2F%2Fwww.raymondcamden.com%2F2018%2F02%2F08%2Fbuilding-table-sorting-and-pagination-in-vuejs&amp;key=_egD8dUdRxY70Yph3kSn5A&quot;,\n\t\t&quot;createdAt&quot;: &quot;2018-02-08T22:31:44&quot;,\n\t\t&quot;hasStreaming&quot;: false,\n\t\t&quot;raw_message&quot;: &quot;&quot;,\n\t\t&quot;isClosed&quot;: false,\n\t\t&quot;link&quot;: &quot;http://www.raymondcamden.com/2018/02/08/building-table-sorting-and-pagination-in-vuejs&quot;,\n\t\t&quot;slug&quot;: &quot;building_table_sorting_and_pagination_in_vuejs&quot;,\n\t\t&quot;forum&quot;: &quot;raymondcamden&quot;,\n\t\t&quot;identifiers&quot;: [],\n\t\t&quot;posts&quot;: 114,\n\t\t&quot;userSubscription&quot;: false,\n\t\t&quot;validateAllPosts&quot;: false,\n\t\t&quot;title&quot;: &quot;\\n        Building Table Sorting and Pagination in Vue.js\\n    &quot;,\n\t\t&quot;highlightedPost&quot;: null\n\t},\n\t&quot;numReports&quot;: 0,\n\t&quot;likes&quot;: 0,\n\t&quot;message&quot;: &quot;&lt;p&gt;please mr, how can I add filter to this table, like i want to filter by name&lt;/p&gt;&quot;,\n\t&quot;id&quot;: &quot;5256177490&quot;,\n\t&quot;createdAt&quot;: &quot;2021-02-05T22:37:28&quot;,\n\t&quot;author&quot;: {\n\t\t&quot;name&quot;: &quot;mara&quot;,\n\t\t&quot;url&quot;: &quot;&quot;,\n\t\t&quot;profileUrl&quot;: &quot;&quot;,\n\t\t&quot;emailHash&quot;: &quot;&quot;,\n\t\t&quot;avatar&quot;: {\n\t\t\t&quot;small&quot;: {\n\t\t\t\t&quot;permalink&quot;: &quot;//a.disquscdn.com/1611874952/images/noavatar32.png&quot;,\n\t\t\t\t&quot;cache&quot;: &quot;//a.disquscdn.com/1611874952/images/noavatar32.png&quot;\n\t\t\t},\n\t\t\t&quot;large&quot;: {\n\t\t\t\t&quot;permalink&quot;: &quot;//a.disquscdn.com/1611874952/images/noavatar92.png&quot;,\n\t\t\t\t&quot;cache&quot;: &quot;//a.disquscdn.com/1611874952/images/noavatar92.png&quot;\n\t\t\t},\n\t\t\t&quot;permalink&quot;: &quot;//a.disquscdn.com/1611874952/images/noavatar92.png&quot;,\n\t\t\t&quot;cache&quot;: &quot;//a.disquscdn.com/1611874952/images/noavatar92.png&quot;\n\t\t},\n\t\t&quot;signedUrl&quot;: &quot;&quot;,\n\t\t&quot;isAnonymous&quot;: true\n\t},\n\t&quot;media&quot;: [],\n\t&quot;isSpam&quot;: false,\n\t&quot;isDeletedByAuthor&quot;: false,\n\t&quot;isHighlighted&quot;: false,\n\t&quot;parent&quot;: null,\n\t&quot;isApproved&quot;: true,\n\t&quot;isDeleted&quot;: false,\n\t&quot;isFlagged&quot;: false,\n\t&quot;raw_message&quot;: &quot;please mr, how can I add filter to this table, like i want to filter by name&quot;,\n\t&quot;isAtFlagLimit&quot;: false,\n\t&quot;canVote&quot;: false,\n\t&quot;forum&quot;: &quot;raymondcamden&quot;,\n\t&quot;url&quot;: &quot;http://www.raymondcamden.com/2018/02/08/building-table-sorting-and-pagination-in-vuejs#comment-5256177490&quot;,\n\t&quot;points&quot;: 0,\n\t&quot;moderationLabels&quot;: [\n\t\t&quot;anonymous&quot;\n\t],\n\t&quot;isEdited&quot;: false,\n\t&quot;sb&quot;: false\n},\n</code></pre>\n<p>By the way, it totally freaks me out when people call me mister. I mean I get that I'm older (more experienced!) but it still surprises me.</p>\n<p>Ok, so that gives up comments, but what I really want is an object where the top level array is threads and the posts are underneath it. For that, I wrote the second script.</p>\n<pre><code class=\"language-js\">/*\n\nI take the export of getData.js and convert it such that we have an array of thread objects which \nthen contain an array of posts. I remove the .thread key from posts to make it smaller.\n\n*/\n\nconst fs = require('fs');\n\nconst INPUT = './raymondcamden_rawdata.json';\nconst OUTPUT = './raymondcamden_threaddata.json';\n\nconsole.log(`Reading ${INPUT}`);\nlet rawdata = fs.readFileSync(INPUT, 'utf-8');\nlet data = JSON.parse(rawdata);\n\nlet threads = [];\n\ndata.forEach(p =&gt; {\n\tindex = threads.findIndex(t =&gt; t.id === p.thread.id);\n\tif(index === -1) {\n\t\tthreads.push(p.thread);\n\t\tdelete p.thread;\n\t\tindex = threads.length-1;\n\t\tthreads[index].posts = [];\n\t}\n\tthreads[index].posts.push(p);\n});\n\nconsole.log(`Converted to a thread object of size ${threads.length}`);\nfs.writeFileSync(OUTPUT, JSON.stringify(threads), 'utf-8');\nconsole.log(`Result saved to ${OUTPUT}`);\n</code></pre>\n<p>The logic here is to create new threads when encountered, add the comment to an array inside the thread, and remove the embedded thread. The end result is essentially the same data, but now centered on an array of threads.</p>\n<p>Woot! OK, if all you want to do is export your Disqus comments you can stop reading now.</p>\n<p>Alright, so the next part was tricky. My goal was to create a set of files such that blog post X could import comment file X (when it existed) and display them instead of the Disqus embed. For that, I wrote a script that read in my thread data and wrote out one file per thread. It also applied basic HTML layout to the thread. To help with this, I used a CodePen (<a href=\"https://codepen.io/cfjedimaster/pen/mdOENXd\">this one</a> if your curious) to design something I thought was decent.</p>\n<p>Here's that script:</p>\n<pre><code class=\"language-js\">/*\nI read in the thread-centered data and then output rendered html for each thread.\n\nnotes for later - comment examples i like:\n\thttps://css-tricks.com/how-to-add-commas-between-a-list-of-items-dynamically-with-css/\n\t\n*/\n\nconst fs = require('fs');\n\nconst INPUT = './raymondcamden_threaddata.json';\nconst OUTPUT_DIR = './output/';\n\nlet threads = JSON.parse(fs.readFileSync(INPUT, 'utf-8'));\n\n// TEMP\n// threads = threads.slice(0,50);\n\nconsole.log(`Working with ${threads.length} threads.`);\n\nthreads.forEach(t =&gt; {\n\t//console.log(t.link+' '+t.posts.length);\n\tlet filename = OUTPUT_DIR + generateFileName(t);\n\tlet content = generateContent(t.posts);\n\t// ensure directory exists\n\tlet dir = filename.split('/');\n\tdir.pop();\n\tdir = dir.join('/');\n\tfs.mkdirSync(dir, { recursive:true });\n\tfs.writeFileSync(filename, content, 'utf-8');\n});\nconsole.log('Complete.');\n\n/*\ngiven a thread, determine a strategy for generating a file name. for me, this was\nbased on the url, minus the host\n\nchanged to .inc so Eleventy wouldn't try to process liquid tags\n*/\nfunction generateFileName(t) {\n\treturn t.link.replace('http://www.raymondcamden.com/','') + '.inc';\n}\n\n/*\nGiven an array of posts, generate an HTML string. \n*/\nfunction generateContent(posts) {\n\tlet html = '';\n\tposts.forEach((p,idx) =&gt; {\n\t\tlet parentText = '';\n\t\tif(p.parent) { \n\t\t\tlet parentNumber = posts.findIndex(post =&gt; post.id == p.parent);\n\t\t\t//console.log('parentNumber', parentNumber);\n\t\t\t/*\n\t\t\tconsole.log('PARENT', p.parent);\n\t\t\tconsole.log(JSON.stringify(p, null, '\\t'));\n\t\t\t*/\n\t\t\tparentText = `(In reply to &lt;a href=&quot;#c_${p.parent}&quot;&gt;#${parentNumber+1}&lt;/a&gt;) `;\n\t\t}\n\t\thtml += `\n&lt;div class=&quot;comment&quot; id=&quot;c_${p.id}&quot;&gt;\n\t&lt;div&gt;\n\t\t&lt;img src=&quot;${p.author.avatar.small.permalink}&quot; class=&quot;comment_author_profile_pic&quot;&gt;\n\t&lt;/div&gt;\n\t&lt;div&gt;\n\t\t&lt;div class=&quot;comment_header&quot;&gt;\n\t\tComment &lt;a href=&quot;#c_${p.id}&quot;&gt;${idx+1}&lt;/a&gt; ${parentText}by ${p.author.name}\n\t\tposted on ${dateFormat(p.createdAt)}\n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;comment_text&quot;&gt;${p.message}&lt;/div&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n\t\t`;\n\t});\n\n\treturn html;\n}\n\nfunction dateFormat(d) {\n\td = new Date(d);\n\treturn new Intl.DateTimeFormat().format(d) + ' at ' + new Intl.DateTimeFormat('en-US', {hour:'numeric',minute:'2-digit'}).format(d);\n}\n</code></pre>\n<p>A few things to note. The function <code>generateFileName</code> uses the <code>link</code> value from the comment to create a file name based on the URL of the blog post. I originally used a <code>.html</code> extension because they're HTML files, but I discovered that some of my comments had code in them that broke Liquid rendering in Eleventy. By simply renaming it I avoided the issue.</p>\n<p>The end result of this was a <em>bunch</em> of folders and files that mimicked my blog:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/d2.jpg\" alt=\"Folder/file view of output\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The next thing I want to point out is the use of <code>parentText</code>. Disqus supports deep comment threading. In order to keep my sanity, I decided I'd simply present them in a single list of comments, but to flag (and link) to parent posts. Let me be clear, this is not the best solution by a long run, but it felt like a reasonable compromise.</p>\n<p>I copied this into my repo inside the <code>_includes</code> folder... and surprisingly, this is where things got dicey. You see, I needed to import comments into each blog post but a) the import was dynamic and b) would only be done when the file actually existed, since not every post had comments.</p>\n<p>I was not able to get dynamic includes working so I worked around it a bit. What follows is my solution for Eleventy but you should absolutely take this with a grain of salt. First, the include used for comments itself:</p>\n<pre><code class=\"language-html\">{% capture hasComments %}{% hasAnyComments page.url, oldurl %}{% endcapture %}\n\n{% if hasComments == &quot;true&quot; %}\n&lt;div class=&quot;comments-area&quot;&gt;\n\t&lt;div class=&quot;comments-inner&quot;&gt;\n\t&lt;h3&gt;Archived Comments&lt;/h3&gt;\n    {% commentInclude page.url, oldurl %}\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endif %}\n\n</code></pre>\n<p>From the top, I use a short code to figure out if a page has comments. I pass two arguments, the URL and OLDURL, which relates to a hack I have for <em>very</em> old blog posts on my site. I'd say just ignore that old url thing for now.</p>\n<p>If I have comments, I then use <em>another</em> short code to include them. This comes from not being able to do a dynamic include. Here's both short codes from <code>.eleventy.js</code> file:</p>\n<pre><code class=\"language-js\">eleventyConfig.addShortcode(&quot;hasAnyComments&quot;, function(e, old) {\n\treturn getCommentText(e,old) !== '';\n});\n\neleventyConfig.addShortcode(&quot;commentInclude&quot;, function(e, old) {\n\treturn getCommentText(e,old);\n});\n\n//later in the file...\n\n/*\nI support hasAnyComments and commentInclude. I take the logic of trying to load\nold comment html. I return either the html or a blank string\n*/\nfunction getCommentText(path, old) {\n    path = './_includes/comments'+path+'.inc';\n    let oldpath = '';\n    if(old) oldpath = './_includes/comments' + old.replace('http://www.raymondcamden.com','') + '.inc';\n    if(fs.existsSync(path)) {\n      return fs.readFileSync(path,'utf-8');\n    } else if(old &amp;&amp; fs.existsSync(oldpath)) {\n      return fs.readFileSync(oldpath,'utf-8');\n    } else {\n      return '';\n    }\n}\n</code></pre>\n<p>It's basically a quick check to see if a file exists and returning it when it does. This could be written probably much better, as always, but it worked. You can see an example on <a href=\"https://www.raymondcamden.com/2021/01/12/remembering-and-restoring-a-route-with-vue-router\">this post</a>.</p>\n<p>For source code, you can find the Disqus stuff here: <a href=\"https://github.com/cfjedimaster/disqus-analytics/tree/master/export_research\">https://github.com/cfjedimaster/disqus-analytics/tree/master/export_research</a>. The repo for this site may be found here: <a href=\"https://github.com/cfjedimaster/raymondcamden2020\">https://github.com/cfjedimaster/raymondcamden2020</a></p>\n<p>After mentioning what I was doing on Twitter, I got not one but two replies for folks who have done similar things. First is Zach (Eleventy creator) here: <a href=\"https://www.zachleat.com/web/disqus-import/\">Import Your Disqus Comments To Eleventy</a>/ And here is Nicolas Hoizey here: <a href=\"https://nicolas-hoizey.com/articles/2017/07/27/so-long-disqus-hello-webmentions/#comments-history-is-not-lost\">Comments history is not lost!</a>. Note that Nicolas also talks about adding Webmention. I'll be there soon - got some stuff brewing which explains why I've been a bit quiet here. :)</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@rhythm596?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Rhythm Goyal</a> on <a href=\"https://unsplash.com/s/photos/comments?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Using the PDF Embed API with Vue.js",
		"date":"Tue Feb 16 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/02/17/using-the-pdf-embed-api-with-vuejs",
		"content":"<p>I've recently become acquainted with Adobe's <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/pdf-embed.html\">PDF Embed API</a>. As you can probably guess by the name, it's a library for embedded PDFs on a web page. Not just a simple viewer, it has APIs for interacting with the PDF as well really good mobile support. This is a part of the <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/\">Document Cloud</a> service which provides other PDF tools as well (extraction, conversion, and so forth). I've been playing with the viewer a bit and wanted to see what Vue.js integration would look like. Here's my solution, but note that I'm still learning about the product so it could probably be done better.</p>\n<p>First off, to use the API you need a key. Clicking the <a href=\"https://www.adobe.com/go/dcsdks_credentials\">link from the webpage</a> will walk you through the process of generating a key. One important note on this though. You have to lock down your key to a domain and that domain can not be changed either. Also, you can only specify one domain. So if you want your domain <em>and</em> localhost, create two projects, generate two keys, and set them as environment variables for your development and production environment. I did my testing on CodePen and had to use this domain: cdpn.io</p>\n<p>Once you have a key, you can copy the code from the <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/docs.html?view=view\">Getting Started</a> to quickly test. Here it is in its entirety as it's pretty short:</p>\n<pre><code class=\"language-html\">&lt;!--Get the samples from https://www.adobe.com/go/pdfembedapi_samples--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n &lt;title&gt;Adobe Document Services PDF Embed API Sample&lt;/title&gt;\n &lt;meta charset=&quot;utf-8&quot;/&gt;\n &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;\n &lt;meta id=&quot;viewport&quot; name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;\n&lt;/head&gt;\n&lt;body style=&quot;margin: 0px&quot;&gt;\n &lt;div id=&quot;adobe-dc-view&quot;&gt;&lt;/div&gt;\n &lt;script src=&quot;https://documentcloud.adobe.com/view-sdk/main.js&quot;&gt;&lt;/script&gt;\n &lt;script type=&quot;text/javascript&quot;&gt;\n    document.addEventListener(&quot;adobe_dc_view_sdk.ready&quot;, function()\n    {\n        var adobeDCView = new AdobeDC.View({clientId: &quot;&lt;YOUR_CLIENT_ID&gt;&quot;, divId: &quot;adobe-dc-view&quot;});\n        adobeDCView.previewFile(\n       {\n          content:   {location: {url: &quot;https://documentcloud.adobe.com/view-sdk-demo/PDFs/Bodea Brochure.pdf&quot;}},\n          metaData: {fileName: &quot;Bodea Brochure.pdf&quot;}\n       });\n    });\n &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Breaking this down, you listen for an event signifying that the library is loaded and then create a new &quot;view&quot; based on a div in your HTML. (In the example above, <code>adobe-dc-view</code>.) Once that's done you can use the <code>previewFile</code> method to add it the PDF viewer to the page. Here's a screen shot of this particular example:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/pdf1.jpg\" alt=\"Screen shot of PDF Viewer\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I realize that screen shot is a bit small, but in case you can't see it, the viewer includes the tools you would normally expect in Acrobat - navigation, search, as well as annotation tools. You can even save directly from the viewer and include your annotations. Here is my attempt at making life insurance documents more fun.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/pdf2.jpg\" alt=\"A page from the PDF with a bad drawing of a cat.\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Cool. So as I said, it's a pretty powerful embedded viewer, and I want to play with it more later, but I first wanted to take a stab at adding it to a simple Vue.js application. Here's how I did it.</p>\n<p>First off, notice in the code listing above that we listen for an event on the document object, <code>adobe_dc_view_sdk.ready</code>. For my code to work in Vue I needed something a bit more robust. An Adobian on the support forum <a href=\"https://community.adobe.com/t5/document-services-apis/adobe-dc-view-sdk-ready/m-p/11648022#M948\">noted</a> that you can check for <code>window.AdobeDC</code> to see if the library is ready. I wrote my code such that the <code>created</code> method of my Vue app can check that and still handle the library being loaded library. Broadly I did it by using a variable, <code>pdfAPIReady</code>. My <code>created</code> method does this:</p>\n<pre><code class=\"language-js\">created() {\n\t//credit: https://community.adobe.com/t5/document-services-apis/adobe-dc-view-sdk-ready/m-p/11648022#M948\n\tif(window.AdobeDC) this.pdfAPIReady = true;\n}, \n</code></pre>\n<p>I then add a watcher for that variable:</p>\n<pre><code class=\"language-js\">watch: {\n  pdfAPIReady(val) {\n    // should only be called when true, but be sure\n    if(val) {\n      this.adobeDCView = new AdobeDC.View({\n        clientId: ADOBE_KEY, \n        divId: &quot;pdf-view&quot;\n      });\n    }\n  }\n}\n</code></pre>\n<p>And the final bit is a listener <em>outside</em> my Vue application. Remember that you can access the <code>data</code> variable using the Vue instance. This is how I handled that:</p>\n<pre><code class=\"language-js\">// In theory I'm not needed on CodePen, but in the real world I would be.\ndocument.addEventListener(&quot;adobe_dc_view_sdk.ready&quot;, () =&gt; { app.pdfAPIReady = true; });\n</code></pre>\n<p>Now, in theory, my Vue app can make use of the library. The Adobe docs describe how to use <a href=\"https://www.adobe.com/devnet-docs/dcsdk_io/viewSDK/howtos.html#passing-file-content\">local file content</a> driven by an HTML input tag. Basically you can pass a FileReader promise to the embed and it will handle knowing when the local file is read and then render it.</p>\n<p>Here's the HTML I used for my demo:</p>\n<pre><code class=\"language-html\">&lt;div id=&quot;app&quot; v-cloak&gt;\n\n  &lt;strong&gt;Select a PDF to Preview&lt;/strong&gt; \n  &lt;input type=&quot;file&quot; accept=&quot;application/pdf&quot; @change=&quot;previewPDF&quot; ref=&quot;fileInput&quot;&gt; \n\n  &lt;h3 v-if=&quot;pdfSelected&quot;&gt;PDF Preview:&lt;/h3&gt;\n  &lt;div id=&quot;pdf-view&quot;&gt;&lt;/div&gt;\n  \n&lt;/div&gt;\n</code></pre>\n<p>Notice the <code>pdfSelected</code> conditional. This is going to toggle after the user has selected a file. I originally had this in a div around the h3 and the div (<code>pdf-view</code>), but the embed viewer didn't like its div being hidden by Vue. (I could probably change how I hide the div, but for now I'm leaving it.) Now for the JavaScript:</p>\n<pre><code class=\"language-js\">const ADOBE_KEY = 'b9151e8d6a0b4d798e0f8d7950efea91';\n\nconst app = new Vue({\n  el:'#app',\n  data:{\n    pdfAPIReady:false,\n    adobeDCView:null,\n    pdfSelected:false\n  }, \n  created() {\n    //credit: https://community.adobe.com/t5/document-services-apis/adobe-dc-view-sdk-ready/m-p/11648022#M948\n    if(window.AdobeDC) this.pdfAPIReady = true;\n  }, \n  methods: {\n    previewPDF() {\n      let files = this.$refs.fileInput.files;\n      if(files.length === 0) return;\n      this.pdfSelected = true;\n      let reader = new FileReader();\n      let viewer = this.adobeDCView;\n      console.log(`going to view ${files[0].name}`);\n      reader.onloadend = function(e) {\n        let filePromise = Promise.resolve(e.target.result);\n        viewer.previewFile({\n          content: { promise: filePromise }, \n          metaData: { fileName: files[0].name }\n        });\n      };\n      reader.readAsArrayBuffer(files[0]);\n \n    }\n  },\n  watch: {\n    pdfAPIReady(val) {\n      // should only be called when true, but be sure\n      if(val) {\n        this.adobeDCView = new AdobeDC.View({\n          clientId: ADOBE_KEY, \n          divId: &quot;pdf-view&quot;\n        });\n      }\n    }\n  }\n})\n\n// In theory I'm not needed on CodePen, but in the real world I would be.\ndocument.addEventListener(&quot;adobe_dc_view_sdk.ready&quot;, () =&gt; { app.pdfAPIReady = true; });\n</code></pre>\n<p>For the most part, all I did was use Adobe's example of reading a file and moved it inside a Vue method. The end result lets you select a local PDF and have it rendered on my Vue app:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/pdf3.jpg\" alt=\"Example from my Vue app\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>As I said, this is a rather simple integration, but hopefully useful to folks wanting to use it with Vue. I've got some more examples coming! You can find the complete source code below.</p>\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"QWGvZed\" style=\"height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"PDF Embed Test\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/QWGvZed\">\n  PDF Embed Test</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>",
		"tags":[
	        
            "adobe",
            
            "pdf services"
            
		],
		"categories":[
            
                "development"
            
		]

	},

	{
		"title": "Integrating Navigation Search with Lunr and Eleventy",
		"date":"Sun Feb 21 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/02/22/integrating-navigation-search-with-lunr-and-eleventy",
		"content":"<p>Forgive me for what may be a slightly confusing title. I've previously talked about integrating <a href=\"https://lunrjs.com/\">Lunr</a> and <a href=\"https://www.11ty.dev/\">Eleventy</a> (<a href=\"https://www.raymondcamden.com/2019/10/20/adding-search-to-your-eleventy-static-site-with-lunr\">&quot;Adding Search to your Eleventy Static Site with Lunr&quot;</a> and the more recent <a href=\"https://www.raymondcamden.com/2021/01/22/using-pre-built-lunr-indexes-with-eleventy\">&quot;Using Pre-Built Lunr Indexes with Eleventy&quot;</a>). In both of those blog posts I had a simple home page with a search for embedded directly on it:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/el1.jpg\" alt=\"Example of search displayed results on home page\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>For my simple demo, this was sufficient, but I wanted something that was a bit more realistic. In many sites, the navigation itself has a small form field where a user can enter a term, hit a button (or Enter), and then takes them to a search page with results. So for example, imagine this as your top navigation bar:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/el2.jpg\" alt=\"Example of search field in header\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The expectation is that I can enter a term there, hit the button, and on the search page, it should already be performing a query for my input. As you can probably guess, with Lunr this involves noticing the search term in the query string and automatically performing the search. Here's how I did that.</p>\n<p>First, I'm not going to go over how the site was built, I did that in my <a href=\"https://www.raymondcamden.com/2019/10/20/adding-search-to-your-eleventy-static-site-with-lunr\">first post</a> on the topic. If you didn't read it and don't have time, the basic procedure was:</p>\n<ul>\n<li>I told Eleventy to take the data from one collection (a set of GI Joe characters) and generated a JSON version of it.</li>\n<li>My search code reads the JSON and builds a Lunr index from it.</li>\n<li>I used Vue to build a simple search interface that interacted with the index.</li>\n</ul>\n<p>I used that demo as my source and then modified it quite a bit. First, I added Bootstrap to the UI. Look how pretty it is now:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/el3.jpg\" alt=\"Example of demo with Bootstrap applied\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>I also removed the search application from the home page and instead made a dedicated page for it (<code>search.liqud</code>):</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/el4.jpg\" alt=\"Search page example\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Here's how I enabled the search in the navigation to correctly default the search. First, I made sure my search form was using <code>GET</code>, this will include the term in the query string. Here's the relevant code from my layout:</p>\n<pre><code class=\"language-html\">&lt;form class=&quot;d-flex&quot; action=&quot;/search&quot; method=&quot;get&quot;&gt;\n\t&lt;input class=&quot;form-control me-2&quot; type=&quot;search&quot; placeholder=&quot;Search&quot; aria-label=&quot;Search&quot; name=&quot;q&quot;&gt;\n\t&lt;button class=&quot;btn btn-outline-success&quot; type=&quot;submit&quot;&gt;Search&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<p>I then made a slight modification to my existing Vue code (the complete code is both in the previous blog entry and the GitHub repo I'll share at the end):</p>\n<pre><code class=\"language-js\">async created() {\n\n\tconst qs = new URLSearchParams(window.location.search);\n\tthis.term = qs.get('q');\n\n\tlet result = await fetch('/index.json');\n\tdocs = await result.json();\n\t// assign an ID so it's easier to look up later, it will be the same as index\n\tthis.idx = lunr(function () {\n\t\tthis.ref('id');\n\t\tthis.field('title');\n\t\tthis.field('content');\n\n\t\tdocs.forEach(function (doc, idx) {\n\t\t\tdoc.id = idx;\n\t\t\tthis.add(doc); \n\t\t}, this);\n\t});\n\tthis.docs = docs;\n\n\tif(this.term) this.search();\n\n},\n</code></pre>\n<p>The changes are at the beginning and end of the <code>created</code> method. I start off by looking at the query string and checking for the <code>q</code> parameter (matching the name of the form field). At the end, if I have a value, I fire off a request to search. This means you land on the page and after it loads the JSON file and makes the index it will then perform the search. Of course, you can change the search term after and perform new searches.</p>\n<p>You can demo this here: <a href=\"https://lunr3.vercel.app/\">https://lunr3.vercel.app/</a>. Try &quot;cobra&quot; as a search term. Or simply go here: <a href=\"https://lunr3.vercel.app/search?q=cobra\">https://lunr3.vercel.app/search?q=cobra</a> This small change lets you link people directly to searches as well.</p>\n<p>The full source may be found here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/lunr3\">https://github.com/cfjedimaster/eleventy-demos/tree/master/lunr3</a></p>\n<p>For the heck of it, and since everyone isn't a Vue user, I also built a &quot;vanilla&quot; JavaScript version available at <code>/search-vanilla</code> (and <code>search-vanilla.liquid</code> on the repo above). Here's that template.</p>\n<pre><code class=\"language-html\">---\nlayout: main\ntitle: Search\n---\n\n&lt;h1&gt;Search&lt;/h1&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n\t&lt;div class=&quot;row&quot;&gt;\n\t\t&lt;div class=&quot;col&quot;&gt;\n\t\t\t&lt;input type=&quot;search&quot; id=&quot;term&quot; class=&quot;form-control&quot;&gt; \n\t\t&lt;/div&gt;\n\t\t&lt;div class=&quot;col&quot;&gt;\n\t\t\t&lt;button class=&quot;btn btn-primary&quot; id=&quot;searchBtn&quot;&gt;Search&lt;/button&gt;\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n\n\t&lt;div id=&quot;results&quot; class=&quot;mt-3&quot;&gt;&lt;/div&gt;\n\n&lt;/div&gt;\n\n&lt;script&gt;\ndocument.addEventListener('DOMContentLoaded', init, false);\nlet idx, docs;\nlet field, resultsDiv;\n\nasync function init() {\n\n\tlet result = await fetch('/index.json');\n\tdocs = await result.json();\n\t// assign an ID so it's easier to look up later, it will be the same as index\n\tidx = lunr(function () {\n\t\tthis.ref('id');\n\t\tthis.field('title');\n\t\tthis.field('content');\n\n\t\tdocs.forEach(function (doc, idx) {\n\t\t\tdoc.id = idx;\n\t\t\tthis.add(doc); \n\t\t}, this);\n\t});\n\n\tdocument.querySelector('#searchBtn').addEventListener('click', search);\n\n\tfield = document.querySelector('#term');\n\n\tconst qs = new URLSearchParams(window.location.search);\n\tlet term = qs.get('q');\n\n\tresultsDiv = document.querySelector('#results');\n\n\tif(term) { field.value = term; search(); }\n\n}\n\nfunction search() {\n\tlet search = field.value.trim();\n\tif(!search) return;\n\tconsole.log(`search for ${search}`);\n\n\tlet results = idx.search(search);\n\n\tlet resultsHTML = '&lt;p&gt;&lt;strong&gt;Search Results&lt;/strong&gt;&lt;/p&gt;';\n\n\tif(!results.length) {\n\t\tresultsHTML += '&lt;p&gt;Sorry, there were no results.&lt;/p&gt;';\n\t\tresultsDiv.innerHTML = resultsHTML;\n\t\treturn;\n\t}\n\n\tresultsHTML += '&lt;ul&gt;';\n\n\t// we need to add title, url from ref\n\tresults.forEach(r =&gt; {\n\t\tlet title = docs[r.ref].title;\n\t\tlet url = docs[r.ref].url;\n\t\tresultsHTML += `&lt;li&gt;&lt;a :href=&quot;${url}&quot;&gt;${ title }&lt;/a&gt;&lt;/li&gt;`;\n\n\t});\n\n\tresultsHTML += '&lt;/ul&gt;';\n\tresultsDiv.innerHTML = resultsHTML;\n}\n&lt;/script&gt;\n</code></pre>\n<p>It's pretty similar to the Vue version except I've got to build the HTML in JavaScript, which I don't care for but template strings make a hell of a lot better. Anyway, I hope this helps!</p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "JavaScript",
            
                "Static Sites"
            
		]

	},

	{
		"title": "Keeping Count of User Visits",
		"date":"Mon Feb 22 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/02/23/keeping-count-of-user-visits",
		"content":"<p>Yesterday I was complaining about something on Twitter because, as far as I can tell, that's the main use case:</p>\n<blockquote class=\"twitter-tweet\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">If I wrote a simple blog post showing how to wait until a user&#39;s 3rd or 5th visit to your site before you prompt for goddamn notifications, will any of you stop doing it on my first visit?<br><br>No? Didn&#39;t think so.<a href=\"https://twitter.com/hashtag/sigh?src=hash&amp;ref_src=twsrc%5Etfw\">#sigh</a></p>&mdash; Raymond Camden 🥑 (@raymondcamden) <a href=\"https://twitter.com/raymondcamden/status/1363986645423329280?ref_src=twsrc%5Etfw\">February 22, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>In case it isn't obvious, I'm talking about the <em>incredibly</em> annoying behavior of sites prompting you to accept notifications (or join a mailing list) on your first visit to a site. At least for me, 99.99% of the time these notifications block what I'm trying to do - actually read something on your site.</p>\n<p>That being said, I do see how it could make sense to ask this of a &quot;return&quot; visitor, someone who has demonstrated an active interest in your site by returning more than once. After my (admitidly) snarky tweet above, I followed it up with:</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">Actually - that leads to an interesting idea. If you want to know the Nth &quot;visit&quot;, you need to (well could) use a combination of Local and Session storage. That way you don&#39;t prompt on the 3rd *page view* of the 1st visit.<br><br>Blog post!</p>&mdash; Raymond Camden 🥑 (@raymondcamden) <a href=\"https://twitter.com/raymondcamden/status/1363987743353704449?ref_src=twsrc%5Etfw\">February 22, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Ok, so what exactly am I talking about here? <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\">LocalStorage</a> is an incredibly easy way to store data on the client. Most people talk about the persistant version, but there's a session based version as well with the exact same API. This is &quot;persistent&quot; as anything else on the client-side, but is trivial enough to use as long as you're ok with the knowledge there's no 100% gaurantee.</p>\n<p>While easy to use, it brings up an interesting problem. It would be simple to track every page visit. Here's an example:</p>\n<pre><code class=\"language-js\">let hits = localStorage.getItem('hits');\nif(!hits) hits = 0;\nelse hits = parseInt(hits, 10);\n\nhits++;\n\nlocalStorage.setItem('hits', hits);\n</code></pre>\n<p>If you've never worked with LocalStorage before, I bet you can still understand that example. The only aspect that may confuse you is the <code>parseInt</code>. All values in LocalStorage (and SessionStorage) are strings, so you want to be sure to convert it to a number before doing any math on it.</p>\n<p>This &quot;works&quot; but isn't really tracking a visit to a site but rather a page view. What we really want is to know the number of times you had a &quot;session&quot; with the site itself. In order to do that, we can use a combination of local and session storage together.</p>\n<p>Basically:</p>\n<ul>\n<li>If I don't see a value in session (temporary) storage...</li>\n<li>It's a new site visit! Increment a local storage (persistent) value</li>\n</ul>\n<p>Here it is in code:</p>\n<pre><code class=\"language-js\">let sessionActive = window.sessionStorage.getItem('active');\nlet numberOfSessions = window.localStorage.getItem('numberOfSessions');\n\nif(!sessionActive) {\n\tconsole.log('new session');\n\tif(!numberOfSessions) numberOfSessions = 0;\n\tnumberOfSessions = parseInt(numberOfSessions, 10) + 1;\n\twindow.localStorage.setItem('numberOfSessions', numberOfSessions);\n\twindow.sessionStorage.setItem('active',1);\n}\n\nconsole.log(`You have had ${numberOfSessions} sessions`);\n</code></pre>\n<p>This is basically what I just described in text above. If a session value doesn't exist, it means our session has just started and we can update our persistent value keeping track of the number of times we've had a session with the site. And yes, I was lazy and didn't do the fancy thing where if <code>numberOfSessions</code> is 1 I drop the &quot;s&quot; at the end of the output.</p>\n<p>This is not fullproof. Someone can block or edit the LocalStorage values, but if you use this as a way to <em>not</em> prompt someone with an annoying prompt and you end up never annoying them, that's a win, right? Anyway, here's the code in a CodePen. Note that I'm using <code>console.log</code> to print a message that won't be visible in the embed. If you click the link to open the code in a new tab and see the console there.</p>\n<p class=\"codepen\" data-height=\"350\" data-theme-id=\"dark\" data-default-tab=\"js\" data-user=\"cfjedimaster\" data-slug-hash=\"poNdrVp\" style=\"height: 350px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Session Test\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/poNdrVp\">\n  Session Test</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p><span>Photo by <a href=\"https://unsplash.com/@crissyjarvis?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Crissy Jarvis</a> on <a href=\"https://unsplash.com/s/photos/counting?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "javascript"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Using PDFs with the Jamstack",
		"date":"Wed Feb 24 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/02/25/using-pdfs-with-the-jamstack",
		"content":"<p>Earlier this week I spent some time working on a demo that combined the Jamstack (with <a href=\"https://www.11ty.dev/\">Eleventy</a> of course) and the ability to work with PDFs. I recently <a href=\"https://www.raymondcamden.com/2021/02/17/using-the-pdf-embed-api-with-vuejs\">blogged</a> about using Adobe's free <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/pdf-embed.html\">PDF Embed API</a> with Vue.js and I thoughbt it would be interesting to tie this in with a Jamstack example. Here's what I came up with.</p>\n<p>First, I <strike>stole</strike>borrowed a bunch of PDFs from the IRS. I figure they own me a few PDFs, right? I grabbed around ten or so and put them into two subdirectories based on whether they were a form or instructions for a form (and to be clear, I didn't <em>really</em> check, I just kinda threw some around):</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/pdfj1.jpg\" alt=\"Screen shot of a list of PDF files\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>With my source material available, the first thing I had to do was ensure the PDFs ended up being available on the static site. By default, Eleventy is going to ignore the PDFs as they aren't recognized as supported files (much like it ignores JavaScript, CSS, and images). This is easy enough to fix with <a href=\"https://www.11ty.dev/docs/copy/\">passthrough copy</a>. I added the following to my <code>.eleventy.js</code>:</p>\n<pre><code class=\"language-js\">eleventyConfig.addPassthroughCopy(&quot;pdfs&quot;);\n</code></pre>\n<p>This will recursively grab my <code>pdfs</code> folder and the files underneath it. That part was relatively simple. (Although I think this particular aspect - the &quot;dont copy what I don't recognize&quot; is the single most common thing I screwed up when learning Eleventy!)</p>\n<p>Next, I need to make Eleventy &quot;aware&quot; of the PDF data. I can't use <a href=\"https://www.11ty.dev/docs/collections/\">Collections</a> feature as it only works with files Eleventy recognizes. Instead I can use the <a href=\"https://www.11ty.dev/docs/data/\">Data</a> feature which lets you add pretty much anything you want. Inside of <code>_data</code>, I created <code>pdfs.js</code>:</p>\n<pre><code class=\"language-js\">const globby = require('globby');\n\nmodule.exports = async function() {\n\tlet result = [];\n\n\tlet files = await globby('./pdfs/**/*.pdf');\n\t\n\tfor(let i=0; i &lt; files.length; i++) {\n\t\t//name safe for a directory\n\t\tlet name = files[i].split('/').pop().replace('.pdf', '');\n\t\tresult.push({\n\t\t\tpath:files[i],\n\t\t\tname:name\n\t\t});\n\t}\n\t\n\treturn result;\n};\n</code></pre>\n<p>Basically - get all the files under my <code>pdfs</code> folder and create an array that contains the path as well as a 'name' field, which for me was just the filename minus the extension.</p>\n<p>Once this was done, I could then the <code>pdfs</code> array in my Liquid templates, so for example, here is my home page:</p>\n<pre><code class=\"language-html\">---\nlayout: main\n---\n\n&lt;h2&gt;PDFs&lt;/h2&gt;\n\n&lt;ul&gt;\n{% for pdf in pdfs %}\n&lt;li&gt;&lt;a href=&quot;pdf/{{pdf.name}}&quot;&gt;{{ pdf.name }}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>\n<p>You'll notice that I'm linking to <code>pdf</code>, not <code>pdfs</code>. Why? I could link directly to the where I copied the PDF file, and modern browsers will render it full screen. However, the <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/pdf-embed.html\">PDF Embed API</a> will give us much more control over the experience and let us present it inside our site user interface as well.</p>\n<p>To support this, I used Eleventy's <a href=\"https://www.11ty.dev/docs/pages-from-data/\">&quot;pages from data&quot;</a> feature to create new HTML pages to render my PDF documents. Here's how I did it:</p>\n<pre><code class=\"language-html\">---\npagination:\n    data: pdfs\n    size: 1\n    alias: pdf\npermalink: &quot;pdf/{{ pdf.name }}/&quot;\nlayout: main\n---\n\n&lt;h2&gt;{{ pdf.name }}&lt;/h2&gt;\n\n&lt;div id=&quot;adobe-dc-view&quot;&gt;&lt;/div&gt;\n\n&lt;script src=&quot;https://documentcloud.adobe.com/view-sdk/main.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\ndocument.addEventListener(&quot;adobe_dc_view_sdk.ready&quot;, () =&gt; {\n\tvar adobeDCView = new AdobeDC.View({clientId: &quot;{{ site.pdfkey }}&quot;, divId: &quot;adobe-dc-view&quot;});\n\tadobeDCView.previewFile(\n\t{\n\t\tcontent:   {location: {url: &quot;{{site.url}}/{{ pdf.path }}&quot;}},\n\t\tmetaData: {fileName: &quot;{{pdf.name}}pdf&quot;}\n\t});\n});\n&lt;/script&gt;\n\n</code></pre>\n<p>From the top, I use the Pagination feature to iterate over my <code>pdfs</code> array. I specify a permalink under the <code>pdf</code> folder (quick side note - my source directory uses two subdirectories - it's possible that I could have two or more PDFs of the same name and this would cause a problem here - a fix would be to replicate the same subdirectory strucutre as the source - let me know if you want to see that) and for each one, I output the name of the PDF and then use the simple JavaScript embed code.</p>\n<p>This code is pretty much boilerplate from the embed docs with a few things to note.</p>\n<p>First, I needed a key. To do this, I created a new project on Adobe's dashboard. I already had one for my localhost system, but right now your keys are limited to one domain at a time. I knew I was going to deploy this to Vercel so I went ahead and created a new project and key just for that. You'll notice I'm using <code>site.pdfkey</code>. I'll explain this in a bit.</p>\n<p>Next, I need to specify a full URL for the PDF. For this, I use <code>site.url</code>. Both of the <code>site</code> values come from another data file, <code>site.js</code>:</p>\n<pre><code class=\"language-js\">module.exports = async function() {\n\n\tlet url = 'http://localhost:8080';\n\n\tif(process.env.VERCEL_ENV &amp;&amp; process.env.VERCEL_ENV === 'production') url = 'https://pdftest.vercel.app'\n\t//my localhost key\n\tlet pdfkey = process.env.PDF_KEY?process.env.PDF_KEY:'9861538238544ff39d37c6841344b78d'\n\n\treturn {\n\t\turl,\n\t\tpdfkey\n\t}\n};\n</code></pre>\n<p>For the URL I switch to my Vercel site if I detect I'm in production. Ditto for the key value. That hard coded value is the one I use for localhost so it will run locally only.</p>\n<p>And that's really it. When the Eleventy site is generated, I end up with HTML files under <code>pdf/</code> and the raw PDFs under <code>/pdfs</code>. That's not terribly good naming but it works well enough I think. Here's an example of one of the pages.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/02/pdfj2.jpg\" alt=\"Example web page showing PDF embed\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>You can test this yourself here: <a href=\"https://pdftest.vercel.app\">https://pdftest.vercel.app</a>. As a reminder, I used the most basic embed possible. Check the <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/docs.html?view=view\">docs</a> for more examples of how you can configure it. You can find the source here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/pdftest\">https://github.com/cfjedimaster/eleventy-demos/tree/master/pdftest</a></p>\n",
		"tags":[
	        
            "eleventy",
            
            "adobe",
            
            "pdf services"
            
		],
		"categories":[
            
                "development",
            
                "javascript",
            
                "static sites"
            
		]

	},

	{
		"title": "Using the Adobe PDF Tools API to Generate Thumbnails",
		"date":"Mon Mar 01 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/03/02/using-the-adobe-pdf-tools-api-to-generate-thumbnails",
		"content":"<p>As folks have noticed, I've been <a href=\"https://www.raymondcamden.com/tags/pdf+services\">blogging</a> lately about the tools Adobe has for working with PDFs. Broadly speaking these fall under the umbrella of <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/\">Adobe Document Services</a>. I've focused so far on the <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/pdf-embed.html\">Embed API</a> but today I want to share an example of the <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/pdf-tools.html\">Tools API</a>.</p>\n<p>Unlike the previous examples where I used client-side code to display PDFs in a browser, the Tools API are all HTTP based APIs built to let you work with PDF files. You should check the docs for a full set of features, but it allows for things like:</p>\n<ul>\n<li>Creating PDFs from HTML and Office formats.</li>\n<li>Exporting PDFs to Office or image formats.</li>\n<li>OCRing a PDF to let you use search.</li>\n<li>Protecting, or removing protection, from a PDF.</li>\n<li>Splitting, combining, re-ordering, PDFs as well as adding or removing pages.</li>\n<li>And more.</li>\n</ul>\n<p>The feature that interested me the most (and will be used in my next blog post) is the ability to convert a PDF into images. My specific use case was to take a PDF, convert it into images, grab the first page, and resize it into a thumbnail.</p>\n<p>Before I get started sharing my solution, note that unlike the Embed API, Tooling is not free. However, you get a free trial of 1000 API calls over six months. (By that way, to all tech companies that do timed trials. Please consider using a length of time like Adobe has done here. I can't tell you how many times I've signed up for a trial of something and then gotten too busy to use it!) One, very, <em>very</em> cool part of the API is how credential creation is handled.</p>\n<p>If you create new credentials from the <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/gettingstarted.html\">Getting Started</a> page, you have the opportunity of downloading example code (in a few languages, including Node) that includes your authentication details in the zip itself. After struggling with Google's APIs and their authentication, this was really neat to see. I feel like Adobe's API authentication requirements are a bit complex, but having working samples with my own credentials made testing so much easier. I highly recommend using that option when you sign up, even if you don't plan on looking at the examples for a while.</p>\n<p>Alright, so once you have your credentials, you can start using the API. Adobe provides an NPM package you can use like so:</p>\n<pre><code class=\"language-bash\">npm install @adobe/documentservices-pdftools-node-sdk\n</code></pre>\n<p>Next, take a look at the <a href=\"https://opensource.adobe.com/pdftools-sdk-docs/release/latest/howtos.html#export-a-pdf-to-images\">example</a> for exporting a PDF to images. It works by taking a source PDF file, generating an image for each page, and saving it to a zip file.</p>\n<p>Here's the example from their pages (and again, if you download the samples you can run it yourself):</p>\n<pre><code class=\"language-js\">// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\nconst PDFToolsSdk = require('@adobe/documentservices-pdftools-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFToolsSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(&quot;pdftools-api-credentials.json&quot;)\n       .build();\n\n   //Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFToolsSdk.ExecutionContext.create(credentials),\n       exportPDF = PDFToolsSdk.ExportPDF,\n       exportPdfOperation = exportPDF.Operation.createNew(exportPDF.SupportedTargetFormats.JPEG);\n\n   // Set operation input from a source file\n   const input = PDFToolsSdk.FileRef.createFromLocalFile('resources/exportPDFToImageInput.pdf');\n   exportPdfOperation.setInput(input);\n\n   // Execute the operation and Save the result to the specified location.\n   exportPdfOperation.execute(executionContext)\n       .then(result =&gt; result.saveAsFile('output/exportPDFToJPEG.zip'))\n       .catch(err =&gt; {\n           if(err instanceof PDFToolsSdk.Error.ServiceApiError\n               || err instanceof PDFToolsSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n} catch (err) {\n   console.log('Exception encountered while executing operation', err);\n}\n</code></pre>\n<p>This boils down to:</p>\n<ul>\n<li>Point to the authentication</li>\n<li>Point to a local PDF</li>\n<li>Export to a zip</li>\n</ul>\n<p>The end result is a zip of every image. Here's an example:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/03/pdft.jpg\" alt=\"Zip listing\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>So given that we've got a way to create a zip of images, what I need to do is take this, extract out the first file (which should represent the first page of the PDF), and then resize it so it's appropriate for a thumbnail.</p>\n<p>Here's my script, bit by bit, and I'll share the entire script at the end. First, I generate the zip.</p>\n<pre><code class=\"language-js\">//test pdf file\nlet pdf = './fw9.pdf';\n\nlet zip = await generateImageZip(pdf, credsPath, outputPath);\n</code></pre>\n<p>My <code>generateImageZip</code> function is just a more dynamic version of the code above:</p>\n<pre><code class=\"language-js\">async function generateImageZip(pdfPath, credsPath, outputPath) {\n\n\treturn new Promise((resolve, reject) =&gt; {\n\n\t\tlet output = outputPath + nanoid() + '.zip';\n\n\t\tconst credentials = PDFToolsSdk.Credentials.serviceAccountCredentialsBuilder()\n\t\t.fromFile(credsPath)\n\t\t.build();\n\n\t\tconst executionContext = PDFToolsSdk.ExecutionContext.create(credentials),\n\t\t\texportPDF = PDFToolsSdk.ExportPDF,\n\t\t\texportPdfOperation = exportPDF.Operation.createNew(exportPDF.SupportedTargetFormats.JPEG);\n\n\t\tconst input = PDFToolsSdk.FileRef.createFromLocalFile(pdfPath);\n\t\texportPdfOperation.setInput(input);\n\n\t\texportPdfOperation.execute(executionContext)\n\t\t.then(result =&gt; result.saveAsFile(output))\n\t\t.then(r =&gt; {\n\t\t\tresolve(output);\n\t\t})\n\t\t.catch(err =&gt; {\n\t\t\tif(err instanceof PDFToolsSdk.Error.ServiceApiError\n\t\t\t\t\t|| err instanceof PDFToolsSdk.Error.ServiceUsageError) {\n\t\t\t\t\tconsole.log('Exception encountered while executing operation', err);\n\t\t\t} else {\n\t\t\t\t\tconsole.log('Exception encountered while executing operation', err);\n\t\t\t\t}\n\t\t});\n\t});\n}\n</code></pre>\n<p>Note the use of <code>nanoid</code> in there. This is a <a href=\"https://www.npmjs.com/package/nanoid\">npm package</a> for generating a unique string appropriate for a file name.</p>\n<p>Next I need to get the first file from the zip file. I used the npm package <a href=\"https://www.npmjs.com/package/node-stream-zip\">node-stream-zip</a>. Here's how it's called:</p>\n<pre><code class=\"language-js\">let dest = await extractFirstFile(zip, outputPath);\nconsole.log(`image extracted to ${dest}`);\n</code></pre>\n<p>And here's the function:</p>\n<pre><code class=\"language-js\">async function extractFirstFile(zip, outputPath) {\n\n\treturn new Promise(async (resolve, reject) =&gt; {\n\t\t// Read the zip and extract the first file\n\t\tlet zipFile = new StreamZip.async({file: zip });\n\n\t\tconst entries = await zipFile.entries();\n\t\tlet first = Object.values(entries)[0];\n\n\t\tlet dest = outputPath + nanoid() + '.' + first.name.split('.').pop();\n\n\t\tawait zipFile.extract(first.name, dest );\n\t\tawait zipFile.close();\n\t\tresolve(dest);\n\t});\n}\n</code></pre>\n<p>I'm <em>very</em> unsure about this part: <code>let first = Object.values(entries)[0];</code> Everything I know about objects tells me that there is no order to the keys (or values), but this seemed to work well. I'd feel better getting all the file names, do a custom sort to find <code>_1</code>, and then returning that, but again this seemed to work. Just know I've got reservations. At the end of this, we've got a file name for the extracted image.</p>\n<p>To handle resizing it, I used <a href=\"https://www.npmjs.com/package/jimp\">jimp</a>. In the main portion of my script I call my function like so:</p>\n<pre><code class=\"language-js\">await makeThumbnail(dest, 200, 80);\nconsole.log('Done resizing image.');\n</code></pre>\n<p>And here's the actual logic:</p>\n<pre><code class=\"language-js\">async function makeThumbnail(path, width, quality) {\n\n\tconst image = await Jimp.read(path);\n\tawait image.resize(width, Jimp.AUTO);\n\tawait image.quality(quality);\n\tawait image.writeAsync(path);\n\treturn true;\n\n}\n</code></pre>\n<p>I'm resizing it and setting a quality. Normally I'd probably save it to a new file, but I just overwrite the original. Here's the entire script:</p>\n<pre><code class=\"language-js\">const PDFToolsSdk = require('@adobe/documentservices-pdftools-node-sdk');\nconst nanoid = require('nanoid').nanoid;\nconst StreamZip = require('node-stream-zip');\nconst Jimp = require('jimp');\nconst fs = require('fs');\n\nconst credsPath = './pdftools-api-credentials.json';\n\n//path to store crap\nconst outputPath = './output/';\n\n(async () =&gt; {\n\n\t//test pdf file\n\tlet pdf = './fw9.pdf';\n\t\n\tlet zip = await generateImageZip(pdf, credsPath, outputPath);\n\tconsole.log(`image generated from source ${pdf} at ${zip}`);\n\n\tlet dest = await extractFirstFile(zip, outputPath);\n\tconsole.log(`image extracted to ${dest}`);\n\n\tawait makeThumbnail(dest, 200, 80);\n\tconsole.log('Done resizing image.');\n\n\t//cleanup\n\tfs.unlinkSync(zip);\n\n})();\n\nasync function generateImageZip(pdfPath, credsPath, outputPath) {\n\n\treturn new Promise((resolve, reject) =&gt; {\n\n\t\tlet output = outputPath + nanoid() + '.zip';\n\n\t\tconst credentials = PDFToolsSdk.Credentials.serviceAccountCredentialsBuilder()\n\t\t.fromFile(credsPath)\n\t\t.build();\n\n\t\tconst executionContext = PDFToolsSdk.ExecutionContext.create(credentials),\n\t\t\texportPDF = PDFToolsSdk.ExportPDF,\n\t\t\texportPdfOperation = exportPDF.Operation.createNew(exportPDF.SupportedTargetFormats.JPEG);\n\n\t\tconst input = PDFToolsSdk.FileRef.createFromLocalFile(pdfPath);\n\t\texportPdfOperation.setInput(input);\n\n\t\texportPdfOperation.execute(executionContext)\n\t\t.then(result =&gt; result.saveAsFile(output))\n\t\t.then(r =&gt; {\n\t\t\tresolve(output);\n\t\t})\n\t\t.catch(err =&gt; {\n\t\t\tif(err instanceof PDFToolsSdk.Error.ServiceApiError\n\t\t\t\t\t|| err instanceof PDFToolsSdk.Error.ServiceUsageError) {\n\t\t\t\t\tconsole.log('Exception encountered while executing operation', err);\n\t\t\t} else {\n\t\t\t\t\tconsole.log('Exception encountered while executing operation', err);\n\t\t\t\t}\n\t\t});\n\t});\n}\n\nasync function extractFirstFile(zip, outputPath) {\n\n\treturn new Promise(async (resolve, reject) =&gt; {\n\t\t// Read the zip and extract the first file\n\t\tlet zipFile = new StreamZip.async({file: zip });\n\n\t\tconst entries = await zipFile.entries();\n\t\tlet first = Object.values(entries)[0];\n\n\t\tlet dest = outputPath + nanoid() + '.' + first.name.split('.').pop();\n\n\t\tawait zipFile.extract(first.name, dest );\n\t\tawait zipFile.close();\n\t\tresolve(dest);\n\t});\n}\n\nasync function makeThumbnail(path, width, quality) {\n\n\tconst image = await Jimp.read(path);\n\tawait image.resize(width, Jimp.AUTO);\n\tawait image.quality(quality);\n\tawait image.writeAsync(path);\n\treturn true;\n\n}\n</code></pre>\n<p>And here's an example I got from a lovely IRS form.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/03/thumb.jpg\" alt=\"Thumbnail\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>In the next post, I'm going to show how to take this and employ it with Eleventy!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@anniespratt?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Annie Spratt</a> on <a href=\"https://unsplash.com/s/photos/images?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
            "adobe",
            
            "pdf services"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Saying Goodbye to HERE",
		"date":"Thu Mar 04 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/03/05/saying-goodbye-to-here",
		"content":"<p>I just shared this on Twitter, but I figured it would make sense to share a quick post here as well. After nearly two years (I know, that sounds like so long right?), I've decided to move on from <a href=\"https://here.com\">HERE</a>. I had an incredibly good time working at HERE and was lucky enough to work with people who were all better than me. I learned a lot and feel like I'm taking valuable knowledge with me into my next role.</p>\n<p>Speaking of that next role - I'll be starting my new job on the 15th. I'll say then where it is but anyone who reads the blog could make a good guess.</p>\n<p>Wish me luck!</p>\n<p><span>Photo by <a href=\"https://unsplash.com/@craft_ear?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jan Tinneberg</a> on <a href=\"https://unsplash.com/s/photos/goodbye?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "Misc"
            
		]

	},

	{
		"title": "Adding Filtering to my Vue.js Table Sorting and Pagination Demo",
		"date":"Wed Mar 10 2021 18:00:00 GMT-0600 (Central Standard Time)",
		"url":"undefined/2021/03/11/adding-filtering-to-my-vuejs-table-sorting-and-pagination-demo",
		"content":"<p>A few years back I wrote about adding table sorting and paging with Vue.js (<a href=\"https://www.raymondcamden.com/2018/02/08/building-table-sorting-and-pagination-in-vuejs\">&quot;Building Table Sorting and Pagination in Vue.js&quot;</a>). While this post is a bit old, it's still helpful and I know this as a reader reached out to me both thank me for the demo and ask if I could demonstrate filtering. I'm not going to go over everything I did in the <a href=\"https://www.raymondcamden.com/2018/02/08/building-table-sorting-and-pagination-in-vuejs\">previous post</a> so be sure to give it a quick read.</p>\n<p>Alright, so I'm assuming you've read that post written in the Way Before Pre-COVID times. If so, you saw me load an array of cats that contain names, ages, breeds, and gender. Here's an example of a few:</p>\n<pre><code class=\"language-js\">{\n    &quot;name&quot;: &quot;Fluffy&quot;,\n    &quot;age&quot;: 9,\n    &quot;breed&quot;: &quot;calico&quot;,\n    &quot;gender&quot;: &quot;male&quot;\n},\n{\n\t&quot;name&quot;: &quot;Luna&quot;,\n\t&quot;age&quot;: 10,\n\t&quot;breed&quot;: &quot;long hair&quot;,\n\t&quot;gender&quot;: &quot;female&quot;\n},\n</code></pre>\n<p>And here's how the old demo rendered:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"yvgvMK\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue - Sortable Table (3)\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/yvgvMK\">\n  Vue - Sortable Table (3)</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>It's not terribly pretty, but it gets the job done. So given this as a start, how do we add filtering?</p>\n<p>I began by adding an input field for my filter:</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;search&quot; v-model=&quot;filter&quot;&gt;\n</code></pre>\n<p>I used <code>type=&quot;search&quot;</code> as it provides a quick way of clearing out values. I added <code>filter</code> to my Vue data with a default value of an empty string.</p>\n<p>Now comes the fun part. We currently render the table using <code>sortedCats</code>. This was a computed property based on the &quot;raw&quot; cats array that handled sorting the data and &quot;filtering&quot; to a particular page.</p>\n<p>To support filtering based on a search term, I used a new computed property, <code>filteredCats</code>. This new property handles filtering the cats based on user input:</p>\n<pre><code class=\"language-js\">filteredCats() {\n\treturn this.cats.filter(c =&gt; {\n\t\tif(this.filter == '') return true;\n\t\treturn c.name.toLowerCase().indexOf(this.filter.toLowerCase()) &gt;= 0;\n\t})\n},\n</code></pre>\n<p>Notice that I lowercase both the original value and the user input. Also notice I only filter based on the name. I could absolutely see filtering on name or breed as well. The important thing is the lowercase. This will make it much easier on the end user.</p>\n<p>With this computed property, I then updated <code>sortedCats</code> to base it's value on <code>filteredCats</code>:</p>\n<pre><code class=\"language-js\">return this.filteredCats.sort((a,b) =&gt; {\n</code></pre>\n<p>The end result is a Vue computed property based on a Vue computed property, which I knew was possible, but I don't think I've actually used it before.</p>\n<p><strong>Edit on 3/12/21:</strong> After releasing this blog post yesterday, the reader who originally reached out to me discovered a bug. If you go to page 2 and filter to a value that only has one page, you see an empty page. To fix this, I added a watcher such that when you change the filter value, we reset to page one:</p>\n<pre><code class=\"language-js\">watch: {\n  filter() {\n    console.log('reset to p1 due to filter');\n    this.currentPage = 1;\n  }\n},\n</code></pre>\n<p>Here's the completed CodePen for you to play with:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"poNqVWP\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue - Sortable / Searchable Table\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/poNqVWP\">\n  Vue - Sortable / Searchable Table</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Hello (Again), Adobe!",
		"date":"Sun Mar 14 2021 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/03/15/hello-again-adobe",
		"content":"<p>A few days ago I <a href=\"https://www.raymondcamden.com/2021/03/05/saying-goodbye-to-here\">shared</a> that I was leaving HERE Technologies and starting a new role. Today I'm doing something new - returning to a company I've worked at before. Today I'm starting a new role as a Senior Developer Evangelist for Adobe, focusing on the <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/\">document services APIs</a> that you may have noticed me blogging about the last few weeks.</p>\n<p>This new opportunity really came out of nowhere. I didn't even know they were hiring. I caught up with an old friend, discovered what she was doing, and when I saw what they were working on (and that they were hiring), I thought it would be a great fit.</p>\n<p>I first got introduced to the power of PDFs when I worked with ColdFusion. Maybe ten or so years ago, the ColdFusion team added in basic support for PDF manipulation and inspection by integrating a version of LiveCycle. Honestly back then PDFs didn't really interest me, but I typically tried to test every aspect of a new version of ColdFusion. I started playing with the integration, and it just really struck a chord with me. I also started paying more attention to the PDF space in general, the capabilities, and more.</p>\n<p>When I saw what the document services teams we're working on (the client-side library, the APIs, and more), and started playing with them myself, I got pretty excited, and I'm thrilled to be able to join this team and help introduce the tools to everyone.</p>\n<p>I'll still be blogging about Jamstack, Vue, JavaScript, development, and of course, cats, so please wish me good luck as I start my (second) first day at Adobe!</p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "misc"
            
		]

	},

	{
		"title": "Using PDFs with the Jamstack - Now with Thumbnails",
		"date":"Mon Mar 15 2021 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/03/16/using-pdfs-with-the-jamstack-now-with-thumbnails",
		"content":"<p>A few weeks ago I <a href=\"https://www.raymondcamden.com/2021/02/25/using-pdfs-with-the-jamstack\">posted</a> a tutorial on using PDFs with <a href=\"https://www.11ty.dev/\">Eleventy</a>. In that post I described how to use a data file to scan a directory of PDFs and make them available to a Liquid template. I then followed up that post with another, where I <a href=\"https://www.raymondcamden.com/2021/03/02/using-the-adobe-pdf-tools-api-to-generate-thumbnails\">described</a> using Adobe's <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/pdf-tools.html\">PDF Tools API</a> to generate thumbnail images from PDFs. I thought it would be nice to combine the two so I could have my Eleventy site both list the PDFs as well as generate thumbnails. Here's how that looks with me spending about five seconds on layout:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/03/pdf11_1.jpg\" alt=\"Screenshot of PDF demo\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>So how did I do it? Keep in mind I described most of the process in my earlier post (<a href=\"https://www.raymondcamden.com/2021/03/02/using-the-adobe-pdf-tools-api-to-generate-thumbnails\">&quot;Using the Adobe PDF Tools API to Generate Thumbnails&quot;</a>). The process boils down to:</p>\n<ul>\n<li>Use Adobe's PDF Tools API to generate a zip of images for each page of the PDF</li>\n<li>Extract the first file from the zip</li>\n<li>Resize</li>\n</ul>\n<p>I took that logic and combined it with the code from the first demo (<a href=\"https://www.raymondcamden.com/2021/02/25/using-pdfs-with-the-jamstack\">&quot;Using PDFs with the Jamstack&quot;</a>). That process was:</p>\n<ul>\n<li>Use a glob pattern to get PDFs</li>\n<li>Create an array of those PDFs with names and such to make them easier to use in Liquid</li>\n<li>Use <a href=\"https://www.11ty.dev/docs/pagination/\">Eleventy pagination</a> to generate an HTML page per PDF</li>\n<li>Use the Adobe <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/pdf-embed.html\">PDF Embed API</a> to render the PDF in the HTML layout</li>\n</ul>\n<p>Here's the updated data file (named <code>pdfs.js</code>):</p>\n<pre><code class=\"language-js\">\nrequire('dotenv').config()\n\nconst globby = require('globby');\nconst PDFToolsSdk = require('@adobe/documentservices-pdftools-node-sdk');\nconst nanoid = require('nanoid').nanoid;\nconst StreamZip = require('node-stream-zip');\nconst Jimp = require('jimp');\nconst fs = require('fs');\n\nlet creds = {\n\tclientId:process.env.ADOBE_CLIENT_ID,\n\tclientSecret:process.env.ADOBE_CLIENT_SECRET,\n\tprivateKey:process.env.ADOBE_KEY,\n\torganizationId:process.env.ADOBE_ORGANIZATION_ID,\n\taccountId:process.env.ADOBE_ACCOUNT_ID\n}\n\nconst outputPath = './tmp/';\n\nconst thumbPath = &quot;images/thumbs/&quot;;\n\nmodule.exports = async function() {\n\tlet result = [];\n\n\tlet files = await globby('./pdfs/**/*.pdf');\n\n\tfor(let i=0; i &lt; files.length; i++) {\n\t\tlet pdf = files[i];\n\n\t\t//name safe for a directory\n\t\tlet name = pdf.split('/').pop().replace('.pdf', '');\n\n\t\t//do we have a thumb, if so, its /path/foo.pdf =&gt; /path/foo.jpg\n\t\tlet thumb = pdf.replace('.pdf', '.jpg');\n\t\tif(!fs.existsSync(thumb)) {\n\t\t\tconsole.log('need to generate '+thumb);\n\n\t\t\tlet zip = await generateImageZip(pdf, creds, outputPath);\n\t\t\tconsole.log(`image generated from source ${pdf} at ${zip}`);\n\n\t\t\tlet dest = await extractFirstFile(zip, outputPath);\n\t\t\tconsole.log(`image extracted to ${dest}`);\n\n\t\t\tawait makeThumbnail(dest, 200, 80);\n\t\t\tconsole.log('Done resizing image.');\n\n\t\t\t//move to a new filename based on nanoid\n\t\t\tfs.renameSync(dest, thumb);\n\n\t\t\t//cleanup\n\t\t\tfs.unlinkSync(zip);\n\t\t}\n\n\t\tresult.push({\n\t\t\tpath:files[i],\n\t\t\tname,\n\t\t\tthumb\n\t\t});\n\t}\n\n\treturn result;\n};\n\nasync function generateImageZip(pdfPath, credsPath, outputPath) {\n\n\treturn new Promise((resolve, reject) =&gt; {\n\n\t\tlet output = outputPath + nanoid() + '.zip';\n\n\t\tconst credentials = PDFToolsSdk.Credentials.serviceAccountCredentialsBuilder()\n\t\t.withClientId(creds.clientId)\n\t\t.withClientSecret(creds.clientSecret)\n\t\t.withPrivateKey(creds.privateKey)\n\t\t.withOrganizationId(creds.organizationId)\n\t\t.withAccountId(creds.accountId)\n\t\t.build();\n\n\t\tconst executionContext = PDFToolsSdk.ExecutionContext.create(credentials),\n\t\t\texportPDF = PDFToolsSdk.ExportPDF,\n\t\t\texportPdfOperation = exportPDF.Operation.createNew(exportPDF.SupportedTargetFormats.JPEG);\n\n\t\tconst input = PDFToolsSdk.FileRef.createFromLocalFile(pdfPath);\n\t\texportPdfOperation.setInput(input);\n\n\t\texportPdfOperation.execute(executionContext)\n\t\t.then(result =&gt; result.saveAsFile(output))\n\t\t.then(r =&gt; {\n\t\t\tresolve(output);\n\t\t})\n\t\t.catch(err =&gt; {\n\t\t\tif(err instanceof PDFToolsSdk.Error.ServiceApiError\n\t\t\t\t\t|| err instanceof PDFToolsSdk.Error.ServiceUsageError) {\n\t\t\t\t\tconsole.log('Exception encountered while executing operation', err);\n\t\t\t} else {\n\t\t\t\t\tconsole.log('Exception encountered while executing operation', err);\n\t\t\t\t}\n\t\t});\n\t});\n}\n\nasync function extractFirstFile(zip, outputPath) {\n\n\treturn new Promise(async (resolve, reject) =&gt; {\n\t\t// Read the zip and extract the first file\n\t\tlet zipFile = new StreamZip.async({file: zip });\n\n\t\tconst entries = await zipFile.entries();\n\t\tlet first = Object.values(entries)[0];\n\n\t\tlet dest = outputPath + nanoid() + '.' + first.name.split('.').pop();\n\n\t\tawait zipFile.extract(first.name, dest );\n\t\tawait zipFile.close();\n\t\tresolve(dest);\n\t});\n}\n\nasync function makeThumbnail(path, width, quality) {\n\n\tconst image = await Jimp.read(path);\n\tawait image.resize(width, Jimp.AUTO);\n\tawait image.quality(quality);\n\tawait image.writeAsync(path);\n\treturn true;\n\n}\n</code></pre>\n<p>That's a bit long, but let me point out the highlights. First off, I modified my use of Adobe's Node SDK to use variables instead of files. This let me store everything in a <code>.env</code> file that would be regular environment variables in production. That makes the initial setup a few more lines of code, but the code is safer to check into source control now:</p>\n<pre><code class=\"language-js\">const credentials = PDFToolsSdk.Credentials.serviceAccountCredentialsBuilder()\n.withClientId(creds.clientId)\n.withClientSecret(creds.clientSecret)\n.withPrivateKey(creds.privateKey)\n.withOrganizationId(creds.organizationId)\n.withAccountId(creds.accountId)\n.build();\n</code></pre>\n<p>I still use a glob to get my PDFs, but now I look for a corresponding filename with the <code>.jpg</code> extension. If it doesn't exist, I generate the thumbnail. This makes it quite a bit more performant. In my initial version I simply regenerated it everytime, but while the API was pretty fast, that's still a lot of work I don't need to do more than once.</p>\n<p>The other change was to include the thumb filename in the result data:</p>\n<pre><code class=\"language-js\">result.push({\n\tpath:files[i],\n\tname,\n\tthumb\n});\n</code></pre>\n<p>And really, that's it. As I said, I did modify the homepage to show the thumbnails and used a bit of CSS, so if you're curious, you can peruse the entire codebase here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/pdftest2\">https://github.com/cfjedimaster/eleventy-demos/tree/master/pdftest2</a></p>\n",
		"tags":[
	        
            "adobe",
            
            "pdf services",
            
            "eleventy"
            
		],
		"categories":[
            
                "javascript",
            
                "development",
            
                "static sites"
            
		]

	},

	{
		"title": "How I Write Content Here...",
		"date":"Tue Mar 23 2021 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/03/24/how-i-write-content-here",
		"content":"<p>A few days ago someone (sorry, I forgot to Like the tweet so I'd remember) asked me how I create content for my blog, specifically the tech stack and process. About a year ago I wrote about my tech stack in general (<a href=\"https://www.raymondcamden.com/2020/04/29/my-tech-stack-so-far-in-2020\">My Tech Stack (So Far) in 2020</a>) but I didn't go deep into the &quot;process&quot; of writing here. It's not too terribly complex and it works well for me. Since I'm the only user, I'm the only one I have to keep happy so keep that in mind if what I describe below seems weird or crazy.</p>\n<p>First off - a bit of history. I launched my blog in February of 2003 (you can still read that <a href=\"https://www.raymondcamden.com/2003/02/12/395FA384-CC01-17D6-AE9B36479350D784\">first post</a> if you want) on custom blogware written in Adobe ColdFusion. The software eventually morphed into an open source project called BlogCFC that went through numerous updates and editions and had a pretty large following in the ColdFusion community. The authoring experience was a simple web-based administrator with a simple form to write content. I did not use a rich text editor but did do things likes automatically insert paragraph tags and line breaks where appropriate.</p>\n<p>I kept it on ColdFusion for over ten years before moving to WordPress in 2015 or so. I had about five thousand or so blog posts under my belt by then. (To be clear, before I got into Twitter, I used my blog many times for short announcements, links to other posts, and things that I primarily do on Twitter now.) I <em>loved</em> WordPress, especially the authoring environment. I <em>hated</em> how fragile WordPress was and trying to keep my server running. I wanted my blog to &quot;just work&quot; and I was disappointed that was so hard with WordPress. I'm totally fine with that being my fault, but at the end of the day I didn't care, I just wanted something that worked.</p>\n<p>I kept it on WordPress for about a year before moving to the Jamstack in January of 2016 (<a href=\"https://www.raymondcamden.com/2016/01/20/welcome-to-raymondcamden-2016\">Welcome to RaymondCamden.com 2016</a>). First with <a href=\"http://gohugo.io/\">Hugo</a> and <a href=\"https://surge.sh/\">Surge</a>. I eventually moved to <a href=\"https://jekyllrb.com/\">Jekyll</a> as I found Hugo to be a hard to use. I also migrated hosting to <a href=\"https://www.netlify.com/\">Netlify</a>. Finally, I <a href=\"https://www.raymondcamden.com/2020/02/27/raymondcamdencom-now-powered-by-eleventy\">moved</a> to <a href=\"https://www.11ty.dev/\">Eleventy</a> in February of last year.</p>\n<p>So that's the history, but it doesn't answer the initial question - how do I create content?</p>\n<p>First off, every blog post is a Markdown file. I don't create this by hand. I use a Node script called <code>genpos.js</code> (I'll be linking to a repository of everything at the end) that does a few things.</p>\n<ol>\n<li>First, it creates a folder for the blog post based on YEAR/MONTH/DAY. It intelligently creates YEAR and MONTH when it needs to. Ditto for DAY of course if I somehow post twice in a day.</li>\n<li>Then it creates a base Markdown file to save me some typing. This Markdown file uses front matter that Eleventy recognizes and makes it easier for me to start writing.</li>\n<li>The script makes me provide a title which it then uses in the front matter and as part of the filename.</li>\n</ol>\n<p>So for me, I start like so:</p>\n<pre><code class=\"language-bash\">./genpos.js &quot;How I Write Content Here...&quot;\n</code></pre>\n<p>Next, I run a script that uses the Netlify CLI to start a local dev server. This runs Netlify's local dev environment (which lets you test redirects and serverless functions) and runs my Eleventy install. What you won't find in my Git repo is an <code>.eleventyignore</code> file which looks like so:</p>\n<pre><code>/_posts/200*/**\n/_posts/201*/**\n/node_modules/\n</code></pre>\n<p>This tells Eleventy to ignore the first twenty years of my blog and makes it run a <em>heck</em> of a lot quicker locally. Netlify's CLI will pop up a tab in my browser and since my initial Node script made a file, I can actually see it immediately. It's just a title but I can click to go into it and start writing. Eleventy has hot reload so as I write and save, I can see how it looks.</p>\n<p>Images are another matter. When I switched to the Jamstack I had a huge amount of old images. I didn't want them in my Git repo for... I don't know. It just felt wrong. I also had a large number of attachments (zips for blog posts) as well. So I decided to use Amazon S3 for that. I set up a bucket and made it resolve to https://static.raymondcamden.com.</p>\n<p>When I have an image for a blog post, first I resize it to a max of 650 wide. I normally do this via a Windows Explorer plugin (<a href=\"https://docs.microsoft.com/en-us/windows/powertoys/image-resizer\">Image Resizer Utility</a>. I then copy it to an S3 folder with a path of the form: <code>/images/YEAR/MONTH</code>. I don't make a folder per day as I don't usually have more than 10-20 images per month.</p>\n<p>To make it quicker to use in my editor, Visual Studio Code, I built a shortcut that outputs the relevant HTML. It's dynamic as well:</p>\n<pre><code class=\"language-js\">\t&quot;img&quot;: {\n\t\t&quot;prefix&quot;: &quot;img&quot;,\n\t\t&quot;body&quot;: [\n\t\t\t&quot;&lt;p&gt;&quot;,\n\t\t\t&quot;&lt;img data-src=\\&quot;https://static.raymondcamden.com/images/$CURRENT_YEAR/$CURRENT_MONTH/$1\\&quot; alt=\\&quot;\\&quot; class=\\&quot;lazyload imgborder imgcenter\\&quot;&gt;&quot;,\n\t\t\t&quot;&lt;/p&gt;&quot;\n\t\t],\n\t\t&quot;description&quot;: &quot;Images&quot;\n\t},\n</code></pre>\n<p>I also use a &quot;lazyload&quot; library from Google to - wait for it - lazily load images as they scroll into view.</p>\n<p>Images are probably the slowest part of my process, but I've got the muscle memory for it now that such that it hardly seems like an issue.</p>\n<p>Code samples are done using regular Markdown-isms (three single quotes before and after) with <a href=\"https://prismjs.com/\">Prism</a> used to render them. The only issue I have with code samples is that I use Liquid for my template engine and if I want to actually talk about Liquid, I have to escape the tags. I created a Visual Studio Code keyboard shortcut to make that easier for me. Vue.js uses similar tokens so I have to escape that as well, but again, it's easy.</p>\n<p>For my top banner, I use an image from <a href=\"https://unsplash.com/\">Unsplash</a>, a service that provides free, and beautiful, art. I try to always credit the artist and they make it pretty simple to do so. (Look at the bottom of this post for an example.)</p>\n<p>Alright, so when I'm done, I commit my Markdown file to my GitHub repository: <a href=\"https://github.com/cfjedimaster/raymondcamden2020\">https://github.com/cfjedimaster/raymondcamden2020</a> At this point, Netlify takes over. It notices whenever I commit to my repository and automatically fires off builds. These builds take time:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/03/ray1.jpg\" alt=\"Build times\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Normally I just go do something else. When the build is done (and you can use <code>netlify watch</code> at the CLI to monitor), I then write a tweet about the post. I also do a &quot;ICYMI&quot; (In Case You Missed It) repeat tweet for about a week later.</p>\n<p>And that's it! If you've got any questions about this process, just let me know!</p>\n<p>Photo by <a href=\"https://unsplash.com/@aaronburden?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Aaron Burden</a> on <a href=\"https://unsplash.com/s/photos/writing?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "development",
            
                "static sites"
            
		]

	},

	{
		"title": "Quick Tips for Eleventy and Vercel",
		"date":"Fri Mar 26 2021 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/03/27/quick-tips-for-eleventy-and-vercel",
		"content":"<p>I primarily use <a href=\"https://www.netlify.com\">Netlify</a> for my Jamstack hosting service, but I also make use of <a href=\"https://vercel.com/\">Vercel</a> quite a bit as well. Vercel's CLI is quite nice and tends to be a bit more intelligent about figuring out your site's requirements with little to no configuration. Other things, like their <a href=\"https://vercel.com/docs/serverless-functions/introduction\">serverless functions</a>, are a bit easier to use as well. That being said, I've recently run into a small issue with Eleventy and Vercel that I thought I'd share in case others hit as well. It isn't a bug, but a combination of a few things together that may trip you up.</p>\n<p>To start, I create a two file Eleventy site. It's got a home page:</p>\n<pre><code class=\"language-html\">\n&lt;h1&gt;Cats&lt;/h1&gt;\n\n&lt;ul&gt;\n{% for cat in cats %}\n&lt;li&gt;{{cat.name}}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n\n</code></pre>\n<p>All I'm doing here is iterating over an array of cats. That data comes from <code>_data/cats.json</code>:</p>\n<pre><code class=\"language-json\">[\n\t{&quot;name&quot;:&quot;Luna&quot;},\n\t{&quot;name&quot;:&quot;Cracker&quot;},\n\t{&quot;name&quot;:&quot;Pig&quot;},\n\t{&quot;name&quot;:&quot;Aleese&quot;},\n\t{&quot;name&quot;:&quot;Sammy&quot;}\n]\n</code></pre>\n<p>Just to confirm it works, I ran <code>eleventy --serve</code> and hit the page in my browser.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/03/ve1.jpg\" alt=\"HTML listing of cats\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Awesome, right? Ok, so if I want to run this with Vercel and use it's local dev server, I'd probably try: <code>vercel dev</code>. However, doing so will result in this:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/03/ve2.jpg\" alt=\"The CLI doesn't know the framework.\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Notice how it doesn't recognize the framework? That's because, at least for me, I use my globally installed Eleventy CLI and do not install it locally. I may be in the minority for that, but that's typically how I role. Luckily it's easy enough to fix. First I'll do an <code>npm init -f</code> to create a blank package.json. Next I'll do a <code>npm i --save @11ty/eleventy</code> to set Eleventy as a dependency. Now if I run <code>vercel dev</code>, it recognizes that I'm using Eleventy.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/03/ve3.jpg\" alt=\"CLI picks up on Eleventy\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Cool! Except when it starts, I get this:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/03/ve4.jpg\" alt=\"Error on startup\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>It may be a bit hard to read in the screen shot, but here's some of the relevant bits:</p>\n<pre><code>\n`TemplateContentRenderError` was thrown\n&gt; Having trouble compiling template ./node_modules/liquidjs/README.md\n\n\n</code></pre>\n<p>Notice how the error is being thrown in a file in node_modules? Why?</p>\n<p>By default, Eleventy ignores the node_modules folder, which is a good thing. However, if you have a .gitignore file, this feature isn't enabled (unless it's empty). This is <a href=\"https://www.11ty.dev/docs/ignores/#node_modules-exemption\">documented</a> of course. So what happened? The Vercel CLI creates a .gitignore file if you don't have one. It does this to tell Git to ignore the .vercel folder it creates.</p>\n<p>So now you have a .gitignore file and Eleventy won't ignore node_modules anymore. The fix, of course, is to just add it:</p>\n<pre><code>.vercel\nnode_modules\n</code></pre>\n<p>This will also speed up your development server as it's ignoring the ten billion or so files under node_modules.</p>\n<p>As I said, none of this is a bug, but it's tripped me up a few times now so I thought I'd share!</p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Building a Simple Image Gallery with Eleventy",
		"date":"Tue Apr 06 2021 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/04/07/building-a-simple-image-gallery-with-eleventy",
		"content":"<p>For a while now I've been meaning to take a look at the <a href=\"https://www.11ty.dev/docs/plugins/image/\">Image</a> plugin for Eleventy and this week I finally got around to building a simple demo. I'm not sure I used the plugin exactly as intended (I'm great for using tool the wrong way!), but once I wrapped my head around the plugin, it was fairly simple to get it working. My idea was this:</p>\n<ul>\n<li>Start with a folder of &quot;raw&quot; images. The idea being I could just dump in photos right from my phone or elsewhere.</li>\n<li>Use Eleventy (and the Image plugin) to create a standard size version of each image</li>\n<li>Use Eleventy (and the Image plugin) to create a thumbnail of each image</li>\n<li>In my site, display the thumbnails with a chance to view the original (and by original I still mean the nicer version created from the raw copy)</li>\n</ul>\n<p>I got my demo up and running here (<a href=\"https://imagegallery-eta.vercel.app/\">https://imagegallery-eta.vercel.app/</a>) and the source is available as well (<a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/imagegallery\">https://github.com/cfjedimaster/eleventy-demos/tree/master/imagegallery</a>).</p>\n<p>So how did I build it? I began by just playing with the plugin. I wrote this in <code>.eleventy.js</code>:</p>\n<pre><code class=\"language-js\">const Image = require(&quot;@11ty/eleventy-img&quot;);\nconst glob = require(&quot;glob-promise&quot;);\n\nconst THUMB = 250;\nconst FULL = 650;\n\n(async () =&gt; {\n\n\tlet options = {\n\t\twidths: [THUMB,FULL],\n\t\tformats: ['jpeg'],\n\t\tfilenameFormat:function(id, src, width, format, options) {\n\t\t\tlet origFilename = src.split('/').pop();\n\t\t\t//strip off the file type, this could probably be one line of fancier JS\n\t\t\tlet parts = origFilename.split('.');\n\t\t\tparts.pop();\n\t\t\torigFilename = parts.join('.');\n\n\t\t\tif(width === THUMB) return `thumb-${origFilename}.${format}`;\n\t\t\telse return `${origFilename}.${format}`;\n\t\t}\n\t};\n\n\tlet files = await glob('./rawphotos/*.{jpg,jpeg,png,gif}');\n\tfor(const f of files) {\n\t\tconsole.log('doing f',f);\n\t\tlet md = await Image(f, options);\n\t};\n\n})();\n</code></pre>\n<p>I use a glob library to get all the images from my <code>rawphotos</code> folder. For each, I call the Image plugin with options for width (250 and 650), formats (just JPG), and I customized the filename to keep the original name (minus the original extension) and add <code>thumb-</code> in front of the thumbnail versions.</p>\n<p>When I ran this, it properly added the files to my <code>img</code> folder:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/04/elimg1.jpg\" alt=\"Explorer folder of img outputs\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Cool - so while that worked, I then had an interesting problem. I needed to integrate this into a &quot;real&quot; Eleventy site with an <code>.eleventy.js</code> that did other things as well. Here was my first attempt (spoiler, it didn't work):</p>\n<pre><code class=\"language-js\">const Image = require(&quot;@11ty/eleventy-img&quot;);\nconst glob = require(&quot;glob-promise&quot;);\n\nconst THUMB = 250;\nconst FULL = 650;\n\nasync function generateImages() {\n\n\tlet options = {\n\t\twidths: [THUMB,FULL],\n\t\tformats: ['jpeg'],\n\t\tfilenameFormat:function(id, src, width, format, options) {\n\t\t\tlet origFilename = src.split('/').pop();\n\t\t\t//strip off the file type, this could probably be one line of fancier JS\n\t\t\tlet parts = origFilename.split('.');\n\t\t\tparts.pop();\n\t\t\torigFilename = parts.join('.');\n\n\t\t\tif(width === THUMB) return `thumb-${origFilename}.${format}`;\n\t\t\telse return `${origFilename}.${format}`;\n\t\t}\n\t};\n\n\tlet files = await glob('./rawphotos/*.{jpg,jpeg,png,gif}');\n\tfor(const f of files) {\n\t\tconsole.log('doing f',f);\n\t\tlet md = await Image(f, options);\n\t};\n\n};\n\nmodule.exports = function(eleventyConfig) {\n\n\televentyConfig.on('beforeBuild', async () =&gt; {\n\t\tconsole.log('beforeBuild');\n\t\tawait generateImages();\n\t\tconsole.log('images done');\n\t});\n};\n</code></pre>\n<p>I basically moved my logic into a function, <code>generateImages</code>, and used the <code>beforeBuild</code> Eleventy event. However, you can't use <code>await</code> in this function. I mean you <em>can</em>, but it won't work properly. This is a <a href=\"https://github.com/11ty/eleventy/issues/1359\">known bug</a> that is already fixed... for the not yet released 1.0 version. I'm betting it will be soon.</p>\n<p>For now, I simply took the code to generate the images and moved it into a script, <code>doImage.js</code>:</p>\n<pre><code class=\"language-js\">const Image = require(&quot;@11ty/eleventy-img&quot;);\nconst glob = require(&quot;glob-promise&quot;);\n\nconst THUMB = 250;\nconst FULL = 650;\n\n(async () =&gt; {\n\n\tlet options = {\n\t\twidths: [THUMB,FULL],\n\t\tformats: ['jpg'],\n\t\tfilenameFormat:function(id, src, width, format, options) {\n\t\t\tlet origFilename = src.split('/').pop();\n\t\t\t//strip off the file type, this could probably be one line of fancier JS\n\t\t\tlet parts = origFilename.split('.');\n\t\t\tparts.pop();\n\t\t\torigFilename = parts.join('.');\n\n\t\t\tif(width === THUMB) return `thumb-${origFilename}.${format}`;\n\t\t\telse return `${origFilename}.${format}`;\n\t\t}\n\t};\n\n\tlet files = await glob('./rawphotos/*.{jpg,jpeg,png,gif}');\n\tfor(const f of files) {\n\t\tconsole.log(`processing ${f}`);\n\t\tawait Image(f, options);\n\t};\n\n})();\n</code></pre>\n<p>Then I wrote code in <code>.eleventy.js</code> to read these images and make them available to templates. I go back and forth between using data files and collections, but decided on a collection today.</p>\n<pre><code class=\"language-js\">const Image = require(&quot;@11ty/eleventy-img&quot;);\nconst glob = require(&quot;glob-promise&quot;);\n\nmodule.exports = function(eleventyConfig) {\n\n\televentyConfig.addPassthroughCopy(&quot;img&quot;);\n\televentyConfig.addPassthroughCopy(&quot;css&quot;);\n\televentyConfig.addWatchTarget(&quot;css&quot;);\n\n\televentyConfig.addCollection('images', async collectionApi =&gt; {\n\n\t\tlet files = await glob('./img/*.jpeg');\n\t\t//Now filter to non thumb-\n\t\tlet images = files.filter(f =&gt; {\n\t\t\treturn f.indexOf('./img/thumb-') !== 0;\n\t\t});\n\n\t\tlet collection = images.map(i =&gt; {\n\t\t\treturn {\n\t\t\t\tpath: i,\n\t\t\t\tthumbpath: i.replace('./img/', './img/thumb-')\n\t\t\t}\n\t\t});\n\n\t\treturn collection;\n\n\t});\n\n};\n</code></pre>\n<p>Basically, scan the <code>img</code> folder for files, ignore the thumbnails, and return an array of paths that also includes the thumb path.</p>\n<p>To make this work with the script, my build command would need to look something like: <code>node doImages &amp;&amp; eleventy</code>.</p>\n<p>To use this, I spent five minutes Googling for &quot;javascript image litebox libraries&quot; and settled on <a href=\"https://github.com/TheLastProject/CSSBox\">CSSBox</a>, which is a simple CSS only solution. After adding the CSS script to my layout, all I had to do was output my images and use the styles that the library wanted. I had to do a bit of logic to handle the previous and next arrows.</p>\n<pre><code class=\"language-html\">---\nlayout: main\n---\n\n&lt;h1&gt;Image Gallery&lt;/h1&gt;\n\n\n&lt;div id=&quot;gallery&quot;&gt;\n{% for image in collections.images %}\n\t&lt;div class=&quot;cssbox&quot;&gt;\n\t\t&lt;a href=&quot;#image{{forloop.index}}&quot; id=&quot;image{{forloop.index}}&quot;&gt;&lt;img src=&quot;{{image.thumbpath}}&quot; class=&quot;cssbox_thumb&quot;&gt;\n\t\t&lt;span class=&quot;cssbox_full&quot;&gt;&lt;img src=&quot;{{image.path}}&quot;&gt;&lt;/span&gt;&lt;/a&gt;\n\t\t&lt;a class=&quot;cssbox_close&quot; href=&quot;#void&quot;&gt;&lt;/a&gt;\n\t\t{% if forloop.first == false %}\n\t\t&lt;a class=&quot;cssbox_prev&quot; href=&quot;#image{{ forloop.index | minus: 1 }}&quot;&gt;&amp;lt;&lt;/a&gt;\n\t\t{% endif %}\n\t\t{% if forloop.last == false %}\n\t\t&lt;a class=&quot;cssbox_next&quot; href=&quot;#image{{ forloop.index | plus: 1}}&quot;&gt;&amp;gt;&lt;/a&gt;\n\t\t{% endif %}\n\t&lt;/div&gt;\n{% endfor %}\n&lt;/div&gt;\n\n</code></pre>\n<p>For the most part simple, but I struggled with Liquid's syntac for addition. I kept trying to do <code>{{ x + 1 }}</code> which doesn't work.</p>\n<p>That's it. As I said, the Image plugin is pretty easy to use and I kinda wish I had taken a look at it before. My use of it (resizing and renaming) is just one example. You can also have it generate HTML for you which is pretty powerful. Let me know what you think!</p>\n<p>Photo by <a href=\"https://unsplash.com/@invictar1997?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Soragrit Wongsa</a> on <a href=\"https://unsplash.com/s/photos/image-gallery?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Load a PDF Embed when Visible",
		"date":"Thu Apr 08 2021 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/04/09/load-a-pdf-embed-when-visible",
		"content":"<p>A quick tip before I turn my brain off for the weekend (that's not entirely true, tonight I plan on building LEGO). I've blogged before about the <a href=\"https://www.adobe.io/apis/documentcloud/dcsdk/pdf-embed.html\">PDF Embed API</a>, it's one of the tools my new job involves. If you didn't see my first post on it, definitely give it a quick read: <a href=\"https://www.raymondcamden.com/2021/02/17/using-the-pdf-embed-api-with-vuejs\">Using the PDF Embed API with Vue.js</a> Today's tip is a bit simpler - how can we use the PDF Embed API to only load a PDF once it's actually visible in the DOM?</p>\n<p>Turns out it's rather simple. Modern browsers support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">Intersection Observer API</a>. When I say &quot;modern browsers&quot;, I mean all but Safari, but they're working on it. You can find more details at CanIUse: <a href=\"https://caniuse.com/intersectionobserver\">https://caniuse.com/intersectionobserver</a>.</p>\n<p>I thought I'd do a quick demo of using the PDF Embed API and Intersection Observer together. Turns out it was incredibly simple:</p>\n<pre><code class=\"language-js\">const ADOBE_KEY = 'b9151e8d6a0b4d798e0f8d7950efea91';\n\nif(!!window.IntersectionObserver) {\n\tconst pdfBox = document.querySelector('#pdfArea');\n\n\tconst intersectionObserver = new IntersectionObserver(function(entries, observer) {\n\t\tif(entries &amp;&amp; entries[0] &amp;&amp; entries[0].isIntersecting){\n\t\t\tloadPDF();\n\t\t\tobserver.unobserve(pdfBox);\n\t\t}\n\t});\n\tintersectionObserver.observe(pdfBox);\n} else loadPDF();\n\nfunction loadPDF() {\n\tconsole.log('visible');\n\tconst adobeDCView = new AdobeDC.View({\n\t\tclientId: ADOBE_KEY, \n\t\tdivId: &quot;pdfArea&quot;\n\t});\n\tadobeDCView.previewFile({\n      content:{ \n\t\t\t\tlocation: \n        { url: &quot;https://documentcloud.adobe.com/view-sdk-demo/PDFs/Bodea%20Brochure.pdf&quot; }\n\t\t\t},\n      metaData:{ fileName: &quot;Bodea Brochure.pdf&quot;}\n    },\n    {\n      embedMode: &quot;SIZED_CONTAINER&quot;\n    });\n}\n</code></pre>\n<p>Basically, if the browser supports the API, I set up an observer to monitor part of the DOM (see the earlier <code>querySelector</code>. When it detects that it's visible, I run <code>loadPDF</code>. If the API is not supported, I just run <code>loadPDF</code> immediately.</p>\n<p>And that's it. I freaking love how simple that was. If you want to see a demo with some lovely <a href=\"https://fungenerators.com/lorem-ipsum/cat/\">Cat Ipsum</a>, take a gander at the CodePen below.</p>\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"dark\" data-default-tab=\"result\" data-user=\"cfjedimaster\" data-slug-hash=\"abpEmPd\" style=\"height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"PDF when Visible Test\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/abpEmPd\">\n  PDF when Visible Test</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>Photo by <a href=\"https://unsplash.com/@lazycreekimages?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Michael Dziedzic</a> on <a href=\"https://unsplash.com/s/photos/invisible?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></p>\n",
		"tags":[
	        
            "adobe",
            
            "pdf services"
            
		],
		"categories":[
            
                "javascript",
            
                "development"
            
		]

	},

	{
		"title": "Proof of Concept - Dynamically Filtering a Large Select",
		"date":"Sun Apr 11 2021 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/04/12/proof-of-concept-dynamically-filtering-a-large-select",
		"content":"<p>A while back a friend wrote me with an interesting problem. He has a form where one of the fields can have near a thousand or so entries. It didn't impact load time that much for his users, but it did create a dropdown control that was difficult to use. He was curious to see if there was a way to let the user filter the dropdown to make it a bit more easier to read. Here's what I came up.</p>\n<p>First, I did <em>not</em> go down the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\">datalist</a> route. While that provides similar behavior, it only lets you pick a string value. A select field lets you display a string value while binding it to a value in the option. So for example, the text displayed to the user could be American and the value some primary key value used in a database.</p>\n<p>Instead of using a datalist, I went with a simple text field next to the dropdown:</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;search&quot; id=&quot;filter&quot; placeholder=&quot;Filter&quot; autocomplete=&quot;off&quot;&gt;\n&lt;select id=&quot;myOptions&quot;&gt;&lt;/select&gt;\n</code></pre>\n<p>My JavaScript code then listened for changes to the filter and applied them to a filter on the data that populated the dropdown. Here's the complete code.</p>\n<pre><code class=\"language-js\">function getOptions() {\n\tlet result = [];\n\tlet prefix = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;I&quot;,&quot;J&quot;,&quot;K&quot;];\n\tprefix.forEach(p =&gt; {\n\t\tfor(let x=0; x&lt;250; x++) {\n\t\t\tresult.push(p+x);\n\t\t}\n\t});\n\treturn result;\n}\n\n\nfunction setOptions(opts) {\n\tlet select = document.querySelector('#myOptions');\n\t\n\t//set values for drop down\n\tlet html = '';\n\topts.forEach(o =&gt; {\n\t\thtml += `&lt;option&gt;${o}&lt;/option&gt;`;\n\t});\n\tselect.innerHTML = html;\n}\n\nlet filter = document.querySelector('#filter');\n\nfilter.addEventListener('input', () =&gt; {\n\tlet value = filter.value.trim().toLowerCase();\n\tlet options = (getOptions()).filter(f =&gt; {\n\t\treturn value === '' || f.toLowerCase().includes(value);\n\t});\n\tsetOptions(options);\n},false);\n\nsetOptions(getOptions());\n</code></pre>\n<p>So first off, <code>getOptions</code> is meant to represent the API call or some other 'real' process. In my case I'm just generating dummy data.</p>\n<p>The function <code>setOptions</code> handles setting the options available to the dropdown. It expects an array of values passed to it. By default this is the full result of <code>getOptions</code>, but when you type into the filter, it filters the values returned. Here's a demo:</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"MWJrZVL\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Select Filter\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/MWJrZVL\">\n  Select Filter</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>I shared this on Twitter and got some good responses. Markus Oberlehner responded with a fork of the CodePen where he does something fascinating. Clicking in the filter field activates the <code>multiple</code> property of the dropdown, providing a bit more visual feedback of the filter being performed. Here's his version.</p>\n<p class=\"codepen\" data-height=\"400\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"maoberlehner\" data-slug-hash=\"VwPQZgx\" style=\"height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Select Filter\">\n  <span>See the Pen <a href=\"https://codepen.io/maoberlehner/pen/VwPQZgx\">\n  Select Filter</a> by Markus Oberlehner (<a href=\"https://codepen.io/maoberlehner\">@maoberlehner</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>Let me know what you think - remember you can fork my CodePen (or Markus) to work on your own version!</p>\n",
		"tags":[
	        
            "javascript"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building a Database Driven Eleventy Site",
		"date":"Wed Apr 14 2021 19:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/04/15/building-a-database-driven-eleventy-site",
		"content":"<p>For a large portion of my development career, I've been a databaser user of some sort or another. I spent many years working with app servers (ColdFusion) and almost always they were tied to a SQL database of some sort. In the beginning this was Microsoft Access (it was really easy to use), then SQL Server and eventually <a href=\"https://www.mysql.com/\">MySQL</a>. Most recently I've made more use of NoSQL databases, like <a href=\"https://www.mongodb.com/\">Mongo</a> and <a href=\"https://fauna.com/\">Fauna</a>. While I definitely prefer NoSQL databases, after years of using SQL, I still have a bit of fondness for it. It's with this in mind that I decided to look into integrating MySQL with <a href=\"https://www.11ty.dev/\">Eleventy</a>. Over the weekend I built a quick demo and was planning on blogging <em>sometime</em> this week, but was inspired to get this out sooner when I saw this cool Tweet:</p>\n<blockquote class=\"twitter-tweet tw-align-center\" data-theme=\"dark\"><p lang=\"en\" dir=\"ltr\">Did you know you can query a MYSQL database right in <a href=\"https://twitter.com/eleven_ty?ref_src=twsrc%5Etfw\">@eleven_ty</a>? With JavaScript data files, it&#39;s easy!<br><br>I’ve built a new, ever-growing database to catalog a music collection I’m building. You can see it here: <a href=\"https://t.co/KQZWPnN8P5\">https://t.co/KQZWPnN8P5</a><br><br>Context for why: <a href=\"https://t.co/7jwdB3JNHo\">https://t.co/7jwdB3JNHo</a> <a href=\"https://t.co/KXXksbloOq\">pic.twitter.com/KXXksbloOq</a></p>&mdash; Andy Bell (@piccalilli_) <a href=\"https://twitter.com/piccalilli_/status/1382451790004813828?ref_src=twsrc%5Etfw\">April 14, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>For my demo (and I'll link to the code at the end) I decided to build a simple blog. I created a MySQL database containing three tables:</p>\n<ul>\n<li>posts - has columns for id (integer, primary key, autonumber), title, body, and published</li>\n<li>categories - has columns for id (integer, primary key, autonumber), name</li>\n<li>posts_categories - a table that lets you associate a blog post with multiple categories - has a column pointing to the primary key of posts and the primary key of categories</li>\n</ul>\n<p>Once I created the tables, I used the MySQL Workbench to input some basic data. Once I had data, I then created a blank Eleventy site, added a <code>_data</code> folder, and Googled for &quot;nodejs mysql&quot;. When I teach about Eleventy, I tell people it's Node-based, but that you do not need to know NodeJS in order to use it. That's true, but having some familiarity with Node, even just the basics, will help you in the long run.</p>\n<p>My search turned up the <a href=\"https://www.npmjs.com/package/mysql\">mysql</a> npm package. It looked easy enough to use, but I quickly ran into a connection problem. Hitting up Google again, I discovered that another package, <a href=\"https://www.npmjs.com/package/mysql2\">mysql2</a> fixed my issue and seemed to be the best library to use. (You can read more about the 'why' of this package <a href=\"https://www.npmjs.com/package/mysql2#history-and-why-mysql2\">here</a>).</p>\n<p>Here's an example of this in use. I set up my connection properties (host, username and password, and database name) in an <code>.env</code> file and then created a file to grab my blog posts:</p>\n<pre><code class=\"language-js\">require('dotenv').config();\nconst DB_HOST = process.env.DB_HOST;\nconst DB_USER = process.env.DB_USER;\nconst DB_PASSWORD = process.env.DB_PASSWORD;\nconst DB_NAME = process.env.DB_NAME;\n\nconst mysql = require('mysql2/promise');\n\nmodule.exports = async function() {\n\n\tlet posts = [];\n\n\tconst connection = await mysql.createConnection({\n\t\thost     : DB_HOST,\n\t\tuser     : DB_USER,\n\t\tpassword : DB_PASSWORD,\n\t\tdatabase : DB_NAME\n\t});\n\n\tconst [rows] = await connection.execute('select id, title, body, published from posts order by published desc');\n\n\tfor(let i=0; i&lt;rows.length; i++) {\n\t\t// for each posts, get categories\n\t\tconst [cats] = await connection.execute('select id, name from categories where id in (select categoryidfk from posts_categories where postidfk = ?)', [rows[i].id]);\n\t\tlet categories = [];\n\t\tfor(let k=0; k&lt;cats.length; k++) {\n\t\t\tcategories.push({\n\t\t\t\tid:cats[k].id,\n\t\t\t\tname:cats[k].name\n\t\t\t});\n\t\t}\n\t\tposts.push({\n\t\t\tid:rows[i].id,\n\t\t\ttitle:rows[i].title,\n\t\t\tbody:rows[i].body,\n\t\t\tpublished:rows[i].published,\n\t\t\tcategories\n\t\t});\n\t}\n\n\tconnection.end();\n\t\n\treturn posts;\n}\n</code></pre>\n<p>Pay special attention to this line, <code>const mysql = require('mysql2/promise');</code>, you will absolutely want to use the promisified version of the library (assumng you are comfortable with async/await and promises, and if you aren't, just ask me fo rhelp!). The logic to generate post data for my site is slightly complex as I have to get posts and then for each one, get a list of associated categories. This is exactly the kind of thing a NoSQL database makes easier, but honestly it isn't too much work here.</p>\n<p>The end result is an array of post objects that contain the id, title, body, published properties and an array of categories (id and name). Here's how I used it in my blog's home page:</p>\n<pre><code class=\"language-html\">---\ntitle: Home Page for Blog\nlayout: layout\n---\n\n&lt;h2&gt;Blog Demo&lt;/h2&gt;\n\n&lt;p&gt;\nThis folder is meant to be used as a basic blog that I will copy to use in &lt;i&gt;other&lt;/i&gt; demos.\n&lt;/p&gt;\n\n&lt;h2&gt;Posts&lt;/h2&gt;\n\n&lt;ul&gt;\n{% for post in posts %}\n  &lt;li&gt;&lt;a href=&quot;/post/{{post.title | slug}}/&quot;&gt;{{ post.title }}&lt;/a&gt; ({{ post.published | dtFormat }})&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n\n</code></pre>\n<p>I then used Eleventy's awesome <a href=\"https://www.11ty.dev/docs/pages-from-data/\">pagination from data</a> feature to create one page per post:</p>\n<pre><code class=\"language-html\">---\nlayout: layout\npagination:\n   data: posts\n   size: 1\n   alias: post\n   \npermalink: &quot;/post/{{post.title | slug}}/&quot;\neleventyComputed:\n---\n\n&lt;h2&gt;{{ post.title }}&lt;/h2&gt;\n&lt;p&gt;\nPosted on {{ post.published | dtFormat }}&lt;br/&gt; \nPosted in {% for cat in post.categories %} &lt;a href=&quot;/category/{{ cat.name | slug }}&quot;&gt;{{ cat.name }}&lt;/a&gt;{% if forloop.last == false %}, {% endif %}{% endfor %}\n&lt;/p&gt;\n\n{{ post.body | markdown }}\n\n</code></pre>\n<p>I think most of the above is standard Eleventy usage, but I'll point out the very last line. Notice I take the post body string and pass it to a markdown filter. I defined this in <code>.eleventy.js</code>:</p>\n<pre><code class=\"language-js\">let markdownIt = require(&quot;markdown-it&quot;)();\n\neleventyConfig.addFilter(&quot;markdown&quot;, function(str) {\n\treturn markdownIt.render(str);\n});\n</code></pre>\n<p>I did this so that blog posts could be written simpler. So for example, a post body could look like so:</p>\n<pre><code class=\"language-text\">This is some text. Hello world.\n\nHere is more text.\n</code></pre>\n<p>And the space between each line above would become one paragraph.</p>\n<p>Back in the post template, you may have noticed I linked each category to a page. Let's look at how I handled that. First, I created <code>categories.js</code> in my <code>_data</code> folder:</p>\n<pre><code class=\"language-js\">require('dotenv').config();\nconst DB_HOST = process.env.DB_HOST;\nconst DB_USER = process.env.DB_USER;\nconst DB_PASSWORD = process.env.DB_PASSWORD;\nconst DB_NAME = process.env.DB_NAME;\n\nconst mysql = require('mysql2/promise');\n\nmodule.exports = async function() {\n\n\tlet cats = [];\n\n\tconst connection = await mysql.createConnection({\n\t\thost     : DB_HOST,\n\t\tuser     : DB_USER,\n\t\tpassword : DB_PASSWORD,\n\t\tdatabase : DB_NAME\n\t});\n\n\tconst [rows] = await connection.execute('select id, name from categories order by name');\n\n\tfor(let i=0; i&lt;rows.length; i++) {\n\t\tcats.push({\n\t\t\tid:rows[i].id,\n\t\t\tname:rows[i].name\n\t\t});\n\t}\n\n\tconnection.end();\n\t\n\treturn cats;\n}\n</code></pre>\n<p>I've got a bit of repitition here connecting to the database and I could probably optimize that so that both <code>posts.js</code> and <code>categories.js</code> share some common connection code. I'm going to be honest here. One of the reasons I like the Jamstack is that I can write, um, &quot;not the best code&quot;, and know it's only going to be run once during the build process. If it's a bit slow, I'm ok with that.</p>\n<p>Alright, with that done, I then build the category pages like so:</p>\n<pre><code class=\"language-html\">---\nlayout: layout\npagination:\n   data: categories\n   size: 1\n   alias: category\npermalink: &quot;/category/{{category.name | slug}}/&quot;\n---\n\n&lt;h2&gt;{{ category.name }}&lt;/h2&gt;\n\n{% assign posts = posts | getByCategory: category.id %}\n\n&lt;ul&gt;\n{% for post in posts %}\n  &lt;li&gt;&lt;a href=&quot;/post/{{post.title | slug}}/&quot;&gt;{{ post.title }}&lt;/a&gt; ({{ post.published | dtFormat }})&lt;/li&gt;\n{% endfor %}\n\n</code></pre>\n<p>The only thing really interesting here is the filter to get posts by category. Here's how I defined that in <code>.eleventy.js</code>:</p>\n<pre><code class=\"language-js\">eleventyConfig.addFilter('getByCategory', (posts,cat) =&gt; {\n\tlet results = [];\n\n\tfor(let post of posts) {\n\t\tif(post.categories.findIndex(c =&gt; c.id === cat) &gt;= 0) results.push(post);\n\t}\n\treturn results.reverse();\n});\n</code></pre>\n<p>Notice how in Eleventy filters, the first argument is the object you pass to the filter and the second argument was the argument I passed after naming the filter. When I first started building these kind of things, it was a bit confusing to me.</p>\n<p>So the end result is a home page with a list of posts, pages for each post, and category lists. You can see this in action here: <a href=\"https://mysqleleventy.vercel.app/\">https://mysqleleventy.vercel.app/</a>. The source code may be found here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/mysql_blog\">https://github.com/cfjedimaster/eleventy-demos/tree/master/mysql_blog</a>. Obviously the big missing piece here is administration. As I said, I &quot;wrote&quot; my blog posts by using the MySQL Workbench. In a real world example of this, you could have a &quot;traditional&quot; app server site with authentication providing CRUD for the data with Eleventy driving the public facing front of it. If any of this doesn't make sense, just reach out.</p>\n<p>p.s. A quick note for WSL users. In order for my Ubuntu install to &quot;connect&quot; to my Windows-based MySQL server, I ran a quick <code>ipconfig</code> in the command prompt to get the IP address Windows was using. Ubuntu had no problem connecting to it that way.</p>\n<p>Photo by <a href=\"https://unsplash.com/@jankolar?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jan Antonin Kolar</a> on <a href=\"https://unsplash.com/s/photos/database?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Crickets and Other Things",
		"date":"Wed Apr 28 2021 13:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/04/28/crickets-and-other-things",
		"content":"<p>When I don't blog on a regular cadence (once a week), I start to whig out a bit, and despite the absolute huge amount of content here (notice I didn't say <em>good</em> content), I begin to stress out when I don't meet that self-imposed schedule. On a whim, I decided to work on something that's been in my queue for a while but realized that in order for <em>that</em> post to be done, I needed some recent content on the blog.</p>\n<p>With that in mind, I'm writing this post just to add some filler content to my blog. I feel bad about that, as I want folks to always get value from my site, but at the same time, since it is my site I'm allowed. ;)</p>\n<p>So as to make this more worthwhile, here's some things for you to consider:</p>\n<h3>Read Adam Cameron's Blog</h3>\n<p>Adam Cameron is an old friend of mine from the ColdFusion community and is an altogether smart and straightforward guy. He doesn't pull punches with his opinions, but he's scary smart and worth a read. You can find his blog at <a href=\"https://blog.adamcameron.me\">https://blog.adamcameron.me</a> and follow him at <a href=\"https://twitter.com/adam_cameron\">@adam_cameron</a>.</p>\n<h3>Checkout my work for Adobe</h3>\n<p>If you don't follow me on Twitter (I understand), then you may be missing my blog posts over on our Medium site: <a href=\"https://medium.com/adobetech\">https://medium.com/adobetech</a>. Not just my content, which is a small part, but a huge amount of great technical content from Adobe. Returning here has been eye opening in terms of how much developer stuff is going on with Adobe. Also, I was able to get the jedimaster email address at adobe.com (jedimaster@adobe.com), so I'm never leaving this job.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/04/cat_saber.png\" alt=\"Cat holding a light saber\" class=\"lazyload imgborder imgcenter\">\n</p>\n<h3>Learn Python</h3>\n<p>Finally, late last year I started to learn Python. Unfortunately, with the job search and the new job keeping me busy, my time to <em>continue</em> my learning has come to a stop. My plan is to try real hard to get back on track in May. That being said, I <em>really</em> like the book that I ended up with. If you pick it up via the link below, I'll earn a few pennies, so consider picking it up if you've been meaning to learn. As I said, I really like it and it's working great for me (well, when I had time for it). (If your ad blockers removes the link below, try <a href=\"https://www.amazon.com/gp/product/1593279280/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=raymondcamd06-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1593279280&amp;linkId=f3caa67c9b3a65eaa1f268642c66e3ee\">this one</a>.)</p>\n<iframe style=\"width:120px;height:240px;\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" frameborder=\"0\" src=\"//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=qf_sp_asin_til&ad_type=product_link&tracking_id=raymondcamd06-20&marketplace=amazon&amp;region=US&placement=1593279280&asins=1593279280&linkId=d753a7ebc6593c93c8e2ceebab1bc63f&show_border=true&link_opens_in_new_window=true&price_color=333333&title_color=0066c0&bg_color=ffffff\">\n    </iframe>\n<p>Photo by <a href=\"https://unsplash.com/@trollinho?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Trollinho</a> on <a href=\"https://unsplash.com/s/photos/crickets?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "Misc"
            
		]

	},

	{
		"title": "Adding an Email Subscription to Your Jamstack Site",
		"date":"Sat May 01 2021 13:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/05/01/adding-an-email-subscription-to-your-jamstack-site",
		"content":"<p>Before I begin, a quick note. While what I've built seems to be working ok, I'm still tweaking things a bit so please forgive me if anything doesn't work exactly right. Be sure to <a href=\"/contact\">reach out</a> and let me know if you run into any issues. Alright, so the topic of this post is how you can incorporate an email subscription service into your Jamstack site, specifically a blog. While most blogs, including mine, offer an RSS feed, I've not been a big user of RSS readers myself. I like the idea, it just hasn't worked well for me as I forget to run them, fall behind and then feel like it's a chore to go through my various subscriptions. Instead, I prefer signing up for an email when a new post is released. Not every blog has that service and in cases like that I've used services like <a href=\"https://ifttt.com/\">IFTTT</a> to create my own subscription. I decided to take a look into what it would take to add such a service to my own blog.</p>\n<p>I was spurred on by the recent news that Google was <a href=\"https://9to5google.com/2021/04/14/google-feedburner-email/\">removing email subscriptions</a> from FeedBurner. I used FeedBurner in the past and it was a pretty cool service, giving you stats on your RSS subscribers and also providing a free email subscription service. But with the email service going away, that's no longer an option.</p>\n<p>To build a replacement, I decided to use <a href=\"https://mailchimp.com/\">MailChimp</a>. Brian and I used MailChimp for our music newsletter (which sadly is a victem of COVID and not having enough time) and I knew they had a good developer API. My initial plan (which quickly changed) was this:</p>\n<ol>\n<li>Set up my account.</li>\n<li>Use their developer API and a serverless function to let people subscribe from my blog. I did this for our music newsletter and described it in detail here: <a href=\"https://www.raymondcamden.com/2019/05/29/using-the-mailchimp-api-with-netlify-serverless-functions\">Using the MailChimp API with Netlify Serverless Functions</a></li>\n<li>Create a service that would run on a schedule to check my RSS feed, find items released in the past 24 hours, and if any, create an email and use the MailChimp API to send that email.</li>\n</ol>\n<p>It turns out step three ended up being somewhat of an issue and I had to pivot, but let's wait to tackle that. I signed up at MailChimp for their free tier which seems pretty reasonable. According to their <a href=\"https://mailchimp.com/pricing/\">pricing page</a>, the free tier includes two thousand contacts and one audience. (In my understanding, you can think of an audience as a mail list.) If I hit two thousand subscribes I'll do a happy dance. The next tier is ten bucks a month and supports fifty thousand contacts.</p>\n<p>Now - a quick note. I was curious about the specifics of the plans this morning and checked the prices from my admin dashboard. While the prices were the same there, the numbers of contacts supported were quite different. In fact, it seemed to imply that going from free to paid results in 75% <em>less</em> contacts! I'm guessing that I'm either misreading things or they have old UI there. You can check my <a href=\"https://twitter.com/raymondcamden/status/1388513220604878848\">tweets</a> to them to see if they responded. (Quick note: I did some more digging and I believe the issue is this. The first paid tier lets you have <em>up to</em> 50K contacts and you pay a sliding scale with the number of contacts starting at 500 for ten bucks a month. I don't get why the first paid tier would <em>reduce</em> your total contacts, that seems... weird.)</p>\n<p>Alright, so I set up my account on the free tier and turned towards building a serverless function to let people add themselves to the account. I won't go into much detail there as I documented it in my <a href=\"https://www.raymondcamden.com/2019/05/29/using-the-mailchimp-api-with-netlify-serverless-functions\">earlier blog post</a>, I'll just point out that finding your list ID can be a bit of a pain. This article from MailChimp helps: <a href=\"https://mailchimp.com/help/find-audience-id/\">Find Your Audience ID</a>.</p>\n<p>Once I had that, I created my serverless function using the Netlify CLI and called it <code>newsletter-signup</code> because I am so creative at naming things. Here's my code:</p>\n<pre><code class=\"language-js\">\t\nconst axios = require('axios');\nvar crypto = require('crypto');\n\nconst listId = 'f42e299fb2';\nconst apiRoot = `https://us1.api.mailchimp.com/3.0/lists/${listId}/members/`;\n\nconst handler = async (event) =&gt; {\n\ttry {\n\n\t\tconst email = event.queryStringParameters.email;\n\t\tif (!email) {\n\t\t\treturn {\n\t\t\t\tstatusCode: 500,\n\t\t\t\tbody: 'email query paramter required'\n\t\t\t};\n\t\t}\n\n\t\t// https://gist.github.com/kitek/1579117\n\t\tlet emailhash = crypto.createHash('md5').update(email).digest('hex');\n\n\t\treturn axios({\n\t\t\t\tmethod: 'put',\n\t\t\t\turl: apiRoot + emailhash,\n\t\t\t\tdata: {\n\t\t\t\t\temail_address: email,\n\t\t\t\t\tstatus: 'subscribed',\n\t\t\t\t\tmerge_fields: {\n\t\t\t\t\t\ttag:'blog'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tauth: {\n\t\t\t\t\t'username': 'anythingreally',\n\t\t\t\t\t'password': process.env.MC_API\n\t\t\t\t}\n\t\t\t}).then(res =&gt; {\n\t\t\t\treturn {\n\t\t\t\t\tstatusCode: 200,\n\t\t\t\t\tbody: JSON.stringify(res.data)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err =&gt; {\n\t\t\t\tconsole.log('returning from here', err.response.data.detail);\n\t\t\t\treturn {\n\t\t\t\t\tstatusCode: 500,\n\t\t\t\t\tbody: JSON.stringify(err.response.data)\n\t\t\t\t};\n\t\t\t});\n\n\t} catch (error) {\n\t\treturn { statusCode: 500, body: error.toString() }\n\t}\n}\n\nmodule.exports = { handler }\n</code></pre>\n<p>There really isn't much there. I'll point out that you can add an existing email to a list and the API won't complain. That made testing easy as I just kept adding my own email address. I also used <code>merge_fields</code> to tag the user as coming from my blog, but I'm not actually doing anything with that, at least not yet. Note that right now, on the free tier, you've got one audience, or list, so I'm basically saying my own personal MailChimp account is <em>only</em> being used for my blog which is fine, but if you plan on doing more, you'll need to update and ensure you use new list IDs for your future work.</p>\n<p>Once done and tested, I then thought about how to add this to the site. I want to thank <a href=\"https://remotesynthesis.com/\">Brian Rinaldi</a> for this help here as he had some great suggestions. I ended up adding it in two places. First, in the top nav. It points to a <a href=\"/subscribe\">subscribe form</a> that uses a simple Vue.js app to handle posting the email address. As it uses Vue and I needed to escape it's tokens to not intefere with Liquid and Eleventy, showing the code here would be a bit awkward. So instead I'll use a Gist. As a reminder, the code can be found up on my <a href=\"https://github.com/cfjedimaster/raymondcamden2020\">GitHub repo</a> for the site.</p>\n<script src=\"https://gist.github.com/cfjedimaster/4518dc56badd0cb218726fc7c6e3de50.js\"></script>\n<p>Along with that, I added a new form to the end of every post (just scroll down and be sure to scroll back ;) with an inline form. For that I used vanilla JS because it's my blog and I can mix things up a bit!</p>\n<pre><code class=\"language-js\">function doSubscriptionForm() {\n    const SUBSCRIBE_API = '/.netlify/functions/newsletter-signup?email=';\n    const subEmail = document.querySelector('#subEmail');\n    const subButton = document.querySelector('#subButton');\n    const subStatus = document.querySelector('#subStatus');\n\n    subButton.addEventListener('click', () =&gt; {\n        const email = subEmail.value;\n        if(!email) return;\n        console.log('add '+email);\n        subButton.disabled = true;\n        subStatus.innerHTML = 'Attempting to subscribe you...';\n        fetch(SUBSCRIBE_API + email)\n        .then(res =&gt; {\n            return res.json()\n        })\n        .then(res =&gt; {\n            console.log('status',res.status);\n            if(res.status === 'subscribed') {\n                subStatus.innerHTML = 'You have been subscribed!';\n            } else if(res.status === 400) {\n                subStatus.innerHTML = `There was an error: ${res.detail}`;\n            }\n            subButton.disabled = false;\n        })\n        .catch(e =&gt; {\n            console.log('error result', e);\n        });\n\n    });\n}\n</code></pre>\n<p>It's virtually the same thing. I figure providng both options will be helpful as folks probably don't notice the top navigation that much.</p>\n<p>Alright, so that was signup and relatively quick to do. I then started looking into actually sending email. I wrote a quick serverless function that got my RSS feed and determined if there were any recent blog posts. Then I hit a brick wall. From what I could tell, there wasn't a simple way to just send email to the list. To be clear, I believe you can, but I struggled with how to do it. MailChimp offers a 'transactional email' service for custom messages and the like, but I really just wanted to pass some text and have it sent to the audience.</p>\n<p>I asked for help on Twitter and <a href=\"https://twitter.com/stephenjbell\">Stephen Bell</a> shared an awesome fact, MailChimp has a <a href=\"https://mailchimp.com/features/rss-to-email/\">RSS to Mail</a> feature! You literally just turn it on, set up a few options, and you're good to go. Here's how that looks.</p>\n<p>First, you enable it.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc1.jpg\" alt=\"MailChimp RSS to Email signup\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Next, you give it a campaign name. FYI the &quot;business name&quot; there is what I used for my second test account just for screen shots.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc2.jpg\" alt=\"Name the campaign\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>On the next screen, you configure the RSS feed and schedule.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc3.jpg\" alt=\"RSS details and schedule\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Now this brings up a very important detail. When working on my blog, my post templates don't normally include a time. Here's an example:</p>\n<pre><code class=\"language-html\">---\nlayout: post\ntitle: &quot;Building Table Sorting and Pagination in Vue.js - with Async Data&quot;\ndate: &quot;2020-02-01&quot;\ncategories: [&quot;javascript&quot;]\ntags: [&quot;vuejs&quot;]\nbanner_image: /images/banners/hannes-egler-369155.jpg\npermalink: /2020/02/01/building-table-sorting-and-pagination-in-vuejs-with-async-data\ndescription: Paging and sorting remote data with Vue.js\n---\n</code></pre>\n<p>Notice how it's just year, month, and date? That was reflected in my RSS feed as well. Here's an example:</p>\n<pre><code class=\"language-xml\">&lt;pubDate&gt;Sat, 27 Mar 2021 00:00:00 +0000&lt;/pubDate&gt;\n</code></pre>\n<p>This created an interesting issue. I released a post on Friday but the time was midnight. When MailChimp ran it's daily check on Saturday at some time in the morning (I believe I picked 11AM), it was more than 24 hours past and therefore didn't find the new post. To correct this, I started including time values in my most recent posts, for example, this one:</p>\n<pre><code>date: &quot;2021-05-01T18:00:00&quot;\n</code></pre>\n<p>The time was arbitrary, but felt safe. My blog doesn't hide &quot;future&quot; posts so even though it isn't that time here yet it shows up just fine and I'm fine with that. Just keep this in mind!</p>\n<p>The next screen lets you specify an audience (you will only have one on the free tier) or filter it down to a segment or tag. I kept it simple and just used my audience.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc4.jpg\" alt=\"Selecting the audience/segment for the list\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The next screen lets you tweak quite a bit (the screen shot only shows about half the options). For me, all I did here was tweak the 'From name' option but you may want to do more.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc5.jpg\" alt=\"Campaign options\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The next screen asks you to pick a template. This is a bit overwhelming but I think the best option is the 1 column option under Basic. Now here's where things get a bit complex. The template is <em>not</em> setup to actually work with RSS. I'm not sure why MailChimp doesn't have one built for you (maybe it does and I couldn't find it), but their template editor isn't too hard to use once you get into it. By default you will see something like this:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc6.jpg\" alt=\"Mail design\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>As you mouse over the template, each part lets you click to edit, remove, or add new bits. That block, &quot;It's time to design your email&quot;, should be removed or edits, and MailChimp will tell you if you don't. You can click to edit it and give it a nicer title and text:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc7.jpg\" alt=\"Editing the first block\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Next you need to add the RSS information. In the list of blocks to the right you'll see two. &quot;RSS Header&quot; uses the information from your feed to dynamically add the title and description. I did not use this as I liked my text block which included how to reach out to me. Instead I dragged in the &quot;RSS Items&quot; block. You can, if you choose, edit the layout here. For example, I went to custom so I could remove the word &quot;Excerts&quot; from the text. You could tweak more here if you want.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc8.jpg\" alt=\"Editing RSS Items\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>The last thing I'll point out is the &quot;Social Follow&quot; block at the bottom. I edited that to remove Facebook and changed the URLs for Twitter and Website to point to my Twitter account and site.</p>\n<p>You can continue to tweak as you see fit of course. As I said, the editor is pretty powerful. Hit next and you can confirm everything is ok. Before you continue, be sure to use the &quot;Preview and Test&quot; function on the top right. You can enter your email address and it will fire off an email to it.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc10.jpg\" alt=\"Sample email\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>What's cool is that it automatically uses your most recent blog post as content even if it's old. I missed this test feature at first and I was so happy to find it. The last thing to do is click &quot;Start RSS&quot; at the bottom.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/mc9.jpg\" alt=\"Confirm start\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>And that's it! As I said, I just launched this so I'm not 100% sure how well it's going to work, but <a href=\"/subscribe\">sign up</a> and let me know what you think.</p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites",
            
                "serverless"
            
		]

	},

	{
		"title": "Updating (and Supporting) URL Parameters with Vue.js",
		"date":"Sat May 08 2021 13:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/05/08/updating-and-supporting-url-parameters-with-vuejs",
		"content":"<p>Today's article is something that's been kicking around in my head for a few months now, and seeing a recent article (<a href=\"https://www.amitmerchant.com/update-url-query-parameters-as-you-type-in-the-input-using-javascript/\">Update URL query parameters as you type in the input using JavaScript</a>) encouraged me to finally get around to writing it. The basic idea is to make it easier for a person to share or bookmark the current state of an application. Let's start with a basic example.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/vu1.jpg\" alt=\"Demo layout of application, list of items with filters\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>There's a list of items which consist of people, cats, and a dog. Each item has a name and type. On top there are filters for the name and type. If you enter any text, the items that match the name (ignoring case) will be shown. If you select one or more of the types, only those matching will be shown.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/vu2.jpg\" alt=\"Items filtered by name and type\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Let's look at the code. First the HTML:</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n\t&lt;h2&gt;Items&lt;/h2&gt;\n\n\t&lt;p&gt;\n\t&lt;input type=&quot;search&quot; placeholder=&quot;Filter by name&quot; v-model=&quot;filter&quot;&gt; \n\t&lt;input type=&quot;checkbox&quot; value=&quot;person&quot; id=&quot;personType&quot; v-model=&quot;typeFilter&quot;&gt; \n\t&lt;label for=&quot;personType&quot;&gt;Only People&lt;/label&gt;\n\t\n\t&lt;input type=&quot;checkbox&quot; value=&quot;cat&quot; id=&quot;catType&quot; v-model=&quot;typeFilter&quot;&gt; \n\t&lt;label for=&quot;catType&quot;&gt;Only Cats&lt;/label&gt;\n\n\t&lt;input type=&quot;checkbox&quot; value=&quot;dog&quot; id=&quot;dogType&quot; v-model=&quot;typeFilter&quot;&gt; \n\t&lt;label for=&quot;dogType&quot;&gt;Only Dogs&lt;/label&gt;\n\t&lt;/p&gt;\n\n\t&lt;ul&gt;\n\t\n\t\t&lt;li v-for=&quot;item in items&quot;&gt;{{ item.name }} ({{item.type }})&lt;/li&gt;\n\t\n\t&lt;/ul&gt;\n&lt;/div&gt;\n\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;vue_url.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>And here's the JavaScript.</p>\n<pre><code class=\"language-js\">// hard coded for simplicity...\nconst ITEMS = [\n\t{ name: &quot;Ray&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Lindy&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Jacob&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Lynn&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Noah&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Jane&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Maisie&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Carol&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Ashton&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Weston&quot;, type: &quot;person&quot; },\n\t{ name: &quot;Sammy&quot;, type: &quot;cat&quot; },\n\t{ name: &quot;Aleese&quot;, type: &quot;cat&quot; },\n\t{ name: &quot;Luna&quot;, type: &quot;cat&quot; },\n\t{ name: &quot;Pig&quot;, type: &quot;cat&quot; },\n\t{ name: &quot;Cayenne&quot;, type: &quot;dog&quot; }\n]\n\nconst app = new Vue({\n\tel:'#app',\n\tdata: {\n\t\tallItems: ITEMS,\n\t\tfilter:'',\n\t\ttypeFilter:[]\n\t},\n\tcomputed: {\n\t\titems() {\n\t\t\treturn this.allItems.filter(a =&gt; {\n\t\t\t\tif(this.filter !== '' &amp;&amp; a.name.toLowerCase().indexOf(this.filter.toLowerCase()) === -1) return false;\n\t\t\t\tif(this.typeFilter.length &amp;&amp; !this.typeFilter.includes(a.type)) return false;\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\t}\n});\n</code></pre>\n<p>As you can see, the items referenced in HTML comes from the 'raw' data, <code>allItems</code>, and is filtered in a computed property. Here's a CodePen if you want to see it in action.</p>\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"dark\" data-default-tab=\"js,result\" data-user=\"cfjedimaster\" data-slug-hash=\"gOmpPmg\" style=\"height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue Blog Post about URL Params\">\n  <span>See the Pen <a href=\"https://codepen.io/cfjedimaster/pen/gOmpPmg\">\n  Vue Blog Post about URL Params</a> by Raymond Camden (<a href=\"https://codepen.io/cfjedimaster\">@cfjedimaster</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>Alright, so that's the application in it's initial state. Now imagine you've filtered the data, like the results, and want to bookmark it, or share it? To do that we need to do two things:</p>\n<ul>\n<li>When you filter, in any way, change the URL in a way that doesn't reload the page</li>\n<li>When you request the page, check the URL for query params and default our filters</li>\n</ul>\n<p>Let's tackle the second one first:</p>\n<pre><code class=\"language-js\">created() {\n\tlet qp = new URLSearchParams(window.location.search);\n\tlet f = qp.get('filter');\n\tif(f) this.filter = qp.get('filter');\n\tlet tf = qp.get('typeFilter');\n\tif(tf) this.typeFilter = tf.split(',');\n},\n</code></pre>\n<p>I make use of the <code>created</code> event to look at the current URL query parameters. If I have a value for filter, I can simply pass it use it as is in <code>this.filter</code>. For <code>typeFilter</code>, it will be an array of values which in a query string will be comma delimited. So if it exists, I turn it into an array using <code>split</code>. I could test this by manually changing the URL, htting enter, and seeing the page load with the right values.</p>\n<p>Now we need to handle updating the URL when you filter. While Vue supports a <code>watchers</code> feature, it only lets you associate a handler with one variable at a time, which means I'd need a watcher for both <code>filter</code> an <code>typeFilter</code>. Vue 3 fixes this. (See more on this <a href=\"https://stackoverflow.com/questions/42737034/vue-js-watch-multiple-properties-with-single-handler\">here</a>.)</p>\n<p>As my application was using a computed value that already executed when either of my filters updated, I added a call to a new function there:</p>\n<pre><code class=\"language-js\">computed: {\n\titems() {\n\t\tthis.updateURL();\n\t\treturn this.allItems.filter(a =&gt; {\n\t\t\tif(this.filter !== '' &amp;&amp; a.name.toLowerCase().indexOf(this.filter.toLowerCase()) === -1) return false;\n\t\t\tif(this.typeFilter.length &amp;&amp; !this.typeFilter.includes(a.type)) return false;\n\t\t\treturn true;\n\t\t});\n\t}\n},\n</code></pre>\n<p>And here is <code>updateURL</code>:</p>\n<pre><code class=\"language-js\">updateURL() {\n\tlet qp = new URLSearchParams();\n\tif(this.filter !== '') qp.set('filter', this.filter);\n\tif(this.typeFilter.length) qp.set('typeFilter', this.typeFilter);\n\thistory.replaceState(null, null, &quot;?&quot;+qp.toString());\n}\n</code></pre>\n<p>I create new, blank URL params and build it up based on the values of my filter. I then use <code>history.replaceState</code> to update the URL without actually reloading the page. Unforunately I can't show this on CodePen as it doesn't let you change the URL, but I have the complete code up on <a href=\"https://codepen.io/cfjedimaster/pen/KKWpVqe\">this pen</a>. I put a demo here if you want to kick the tires a bit:</p>\n<p><a href=\"https://cfjedimaster.github.io/vue-demos/urlthing/vue_url.html?\">https://cfjedimaster.github.io/vue-demos/urlthing/vue_url.html?</a></p>\n<p>And here's an example with some filters:</p>\n<p><a href=\"https://cfjedimaster.github.io/vue-demos/urlthing/vue_url.html?filter=a&amp;typeFilter=cat\">https://cfjedimaster.github.io/vue-demos/urlthing/vue_url.html?filter=a&amp;typeFilter=cat</a></p>\n<p>Photo by <a href=\"https://unsplash.com/@srkraakmo?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Stephen Kraakmo</a> on <a href=\"https://unsplash.com/s/photos/filter?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></p>\n",
		"tags":[
	        
            "vuejs"
            
		],
		"categories":[
            
                "javascript"
            
		]

	},

	{
		"title": "Building a Choose Your Own Adventure site with Eleventy",
		"date":"Sun May 16 2021 13:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/05/16/building-a-choose-your-own-adventure-site-with-eleventy",
		"content":"<p>Growing up (a long, long time ago), I was a huge fan of the &quot;Choose Your Own Advenure&quot; line of books. These books all followed a basic idea. You would begin reading and quickly be given a choice. If you pick one option, you turn to a page, if you pick another you go there. You could typically do an entire read through quickly an then just back in and make different choices. There were a <a href=\"https://en.wikipedia.org/wiki/List_of_Choose_Your_Own_Adventure_books\">huge amount</a> of these published and they were known for having some pretty bizzare subjects. One even included a path that was <a href=\"https://io9.gizmodo.com/remember-inside-ufo-54-40-the-unwinnable-choose-your-o-1552187271\">impossible to reach</a> unless you cheated. (And yes, I remember doing exactly that.) These books were pretty popular years ago and in fact led to folks building <a href=\"https://samplereality.com/2009/11/11/a-history-of-choose-your-own-adventure-visualizations/\">maps</a> for the story lines and the various paths.</p>\n<p>Being that it was the weekend and I felt like coding something completely pointless, I thought it would be fun to build a Choose Your Own Adventue (CYOA) style Eleventy site. Now to be clear, there's nothing special in this at all. Any HTML page can link to any other, so I could simply build a bunch of pages and ensure I handle the links correctly. But I was curious if I could simplify the writing process a bit to make it easier.</p>\n<p>I've been a gamer all my life and one thing I've done throughout my programming career is work on systems that make it easier to build games. I'm not talking about UI systems per se but more shorthands that let you focus on the creative aspect of the game. So you get an idea for your story, game, and you can quickly add it with little to no &quot;programming&quot; involved. (In fact, if you want to read about the code that I'm most proud of, you can take a look at this post from a decade ago: <a href=\"https://www.raymondcamden.com/2010/08/13/Share-Your-Code-Pride\">Share Your (Code) Pride</a>)</p>\n<p>Before I show the code, you can take a look at the demo here: <a href=\"https://cyoa.vercel.app/\">https://cyoa.vercel.app/</a>. The repo for the code is here: <a href=\"https://github.com/cfjedimaster/eleventy-demos/tree/master/cyoa\">https://github.com/cfjedimaster/eleventy-demos/tree/master/cyoa</a>. Honestly the demo is pretty shallow so it won't take you long to explore all the 'branches' of the story.</p>\n<p>Here's an example page from the demo:</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/cyoa.jpg\" alt=\"Demo page from CYOA site\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>In the screen shot above, the choices presented to the user are all driven by front matter. Here's that particular page:</p>\n<pre><code class=\"language-html\">---\ntitle: Choice One\nchoices:\n  - text: Eat the pie\n    path: pie\n  - text: Eat the apple\n    path: apple\n---\n\nYou picked choice one. What a great choice! You see a piece of pie and an apple in front of you. You realize\nnow you're kinda hungry!\n</code></pre>\n<p>And here's another example:</p>\n<pre><code class=\"language-html\">---\ntitle: Start of the Story\nchoices:\n  - text: This is choice one\n    path: one\n  - text: This is choice two\n    path: two\n---\n\nThis is the start of the story. You've got some choices to make now!\n</code></pre>\n<p>The basic idea is that you create a new Markdown file (in the <code>pages</code> directory) and define an array of choice options in your front matter. I'm not a big fan of YAML, but it is simple once you learn the syntax. In this case I had to search how to define an array of objects and you can see the basic syntax above.</p>\n<p>With this front matter, the display is handled by a layout file. I used a directory file (<code>pages.json</code>) to save myself from having to type it in each page.</p>\n<pre><code class=\"language-json\">{\n\t&quot;layout&quot;: &quot;page&quot;\n}\n</code></pre>\n<p>Finally, here's the <code>page.liquid</code> layout file.</p>\n<pre><code class=\"language-html\">---\nlayout: layout\n---\n\n{{ content }}\n\n{% if choices %}\n\n&lt;h3&gt;What do you choose?&lt;/h3&gt;\n&lt;ul&gt;\n\t{% for choice in choices %}\n\t&lt;li&gt;&lt;a href=&quot;/pages/{{ choice.path | slugify }}&quot;&gt;{{ choice.text }}&lt;/a&gt;&lt;/li&gt;\n\t{% endfor %}\n&lt;/ul&gt;\n\n{% else %}\n\n&lt;h3&gt;The End&lt;/h3&gt;\n&lt;p&gt;\nThank you for playing! \n&lt;/p&gt;\n\n{% endif %}\n\n</code></pre>\n<p>Notice how the <code>path</code> value from the front matter is assumed to be the URL/path of another path. Again, my thinking here was to require less typing for the writer. (I don't think the <code>slugify</code> call is necessary there but it doesn't hurt.) If no choices are provided then it's the end of the story.</p>\n<p>And that's it. Probably not worthwhile to anyone but fun to build. Also, it got me thinking more about offloading work to Eleventy layouts and that could (hopefully) be useful in the future!</p>\n",
		"tags":[
	        
            "eleventy"
            
		],
		"categories":[
            
                "static sites"
            
		]

	},

	{
		"title": "Quick Netlify Tip for Redirects",
		"date":"Mon May 24 2021 13:00:00 GMT-0500 (Central Daylight Time)",
		"url":"undefined/2021/05/24/quick-netlify-tip-for-redirects",
		"content":"<p>Since this just bit me in the butt - for the second time - I figured I'd do a real quick blog post. This isn't to help me remember, but to ensure it comes up next time I google for it.</p>\n<p>I was working on a local <a href=\"https://www.11ty.dev/\">11ty</a> site with the Netlify CLI dev command. For folks who don't know, this lets you simulate the Netlify environment locally. While a great tool, you sometimes run into issues where things behave differently locally compared to production.</p>\n<p>For me, I ran into just such an issue Saturday morning. I had set up a simple <code>_redirects</code> file to support giving my serverless functions a nicer, and simpler, path:</p>\n<pre><code>/api/*\t/.netlify/functions/:splat\t200\n</code></pre>\n<p>This worked locally just fine, but in production, I kept getting a 404. Also, when I looked at my deploy log, I saw a message stating that no redirect rules were processed. On a whim, I duplicated my redirect in my <code>netlify.toml</code> file, deployed, and it woked fine.</p>\n<p>I <a href=\"https://answers.netlify.com/t/redirects-not-being-processed-in-production-works-fine-locally/38106\">posted</a> on the Netlify forums, and after some back and forth, a Netlify support person asked if my <code>_redirects</code> file was in the published directory. I'm using Eleventy and for non-supported files, you need to tell it to explicitly copy the file to output. This is done with one simple command (I'm sharing a few just to give you more examples):</p>\n<pre><code class=\"language-js\">eleventyConfig.addPassthroughCopy(&quot;css&quot;);\neleventyConfig.addPassthroughCopy(&quot;js&quot;);\neleventyConfig.addPassthroughCopy(&quot;images&quot;);\neleventyConfig.addPassthroughCopy(&quot;fonts&quot;);\neleventyConfig.addPassthroughCopy(&quot;_redirects&quot;);\n</code></pre>\n<p>As soon as I did that, and deployed, it worked perfectly. I do find it odd that a <code>netlify.toml</code> file in the root of my project works fine, even though it's not copied to output, but <code>_redirects</code> has to be copied for it to work. I think it should be consistent.</p>\n<p>Anyway - as I said - this hit me twice now so hopefully I won't forget.</p>\n<p>\n<img data-src=\"https://static.raymondcamden.com/images/2021/05/he_will_forget.jpg\" alt=\"Spoiler: He will forget\" class=\"lazyload imgborder imgcenter\">\n</p>\n<p>Photo by <a href=\"https://unsplash.com/@jamietempleton?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jamie Templeton</a> on <a href=\"https://unsplash.com/s/photos/directions?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></p>\n",
		"tags":[
	        
		],
		"categories":[
            
                "static sites"
            
		]

	}

]